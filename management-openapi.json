{"openapi":"3.0.0","info":{"title":"Authing Management API","description":"\n\n[Authing](https://authing.co/) 是一款国内领先的、基于云原生架构的 IDaaS 产品，兼容 OAuth 2.0, OIDC, SAML, AD/LDAP, WS-Fed 等所有主流认证 / 授权协议，可以帮助你快速实现任何 Web、App 和企业软件的身份认证和用户管理，为你的客户和员工提供安全且完善的登录解决方案。\n\n<img src=\"https://files.authing.co/api-explorer/what-is-authing.png\" alt=\"drawing\"/>  \n","version":3,"contact":{},"x-logo":{"url":"https://files.authing.co/authing-logo.png","href":"https://authing.co","altText":"Authing Website"},"x-servers":[{"url":"https://api.authing.cn","description":"你的应用域名"}],"x-meta":{"title":"Authing Management API (v3)","description":"Authing 是一款国内领先的、基于云原生架构的 IDaaS 产品，兼容 OAuth 2.0、OIDC、SAML、AD/LDAP、WS-Fed 等所有主流认证 / 授权协议，可以帮助你快速实现任何 Web、App 和企业软件的身份认证和用户管理，为你的客户和员工提供安全且完善的登录解决方案。","keywords":"Documentation, Authing, IDaaS, OIDC, OAuth, 微信, 社会化登录","image":"https://authing.co/favicon.ico"}},"tags":[{"name":"开发准备/介绍","description":"此文档为 Authing 管理 API 文档，适用版本为 Authing Management API (v3)。Authing 管理 API 指的是以管理员（Administrator）的身份进行请求，用于管理用户池资源和执行管理任务，如管理用户、组织机构、角色、应用、权限、用户池配置等。一般来说，你在 [Authing 控制台](https://console.authing.cn/)中能做的所有操作，都能用此模块完成。\n","x-displayName":"介绍"},{"name":"开发准备/基本概念","description":"在你正式进入开发前，需要先了解一下 Authing 几个最核心的概念。\n\n## 用户池\n\n**用户池**是 Authing 租户与租户之间的隔离单位，你拥有的所有用户数据、应用、资源等，都在一个**用户池**下。如果你还没有注册 Authing 账号，或者还未创建**用户池**，请先前往 [https://authing.co/](https://authing.co/) 创建你的第一个**用户池**。当你需要调用此部分的 API 时，你会需要用到**用户池 ID**和**用户池密钥**，在下面的**鉴权机制**中会讲到如何使用。\n\n## 应用\n\nAuthing 中的**应用**对应了你实际开发的应用，比如当你要基于 Authing 开发一个商城 APP 的时候，你在 Authing 的用户池中也会创建一个对应的应用。\n","x-displayName":"基本概念"},{"name":"开发准备/HTTP 请求","description":"## API 端点\n\nAuthing Management API (v3) Root 端点为：[https://api.authing.cn](#)。\n\n所有接口均通过 HTTPS 加密传输，如非特殊标记，请求参数和返回数据均通过 `application.json` 格式传递。\n\n> 如果是私有化部署的 Authing 服务，API 端点信息请联系你的客户经理获取。\n\n## HTTP 请求动词\n\nAuthing Management API (v3) 目前使用到了两种 HTTP 动词：\n\n| HTTP 请求动词 | 描述                       |\n| ------------- | -------------------------- |\n| GET           | 用于获取资源。             |\n| POST          | 用于创建、修改、删除资源。 |\n\n## HTTP 路径\n\nAuthing Management API (v3) 接口一般遵循 `/api/v3/verb` 的接口命名规范，`verb` 如果包含多个单词，使用 `-` 隔开，如：\n\n- 获取用户列表：`/api/v3/list-users`\n- 执行同步任务：`/api/v3/trigger-sync-task`\n\n## HTTP 请求头\n\n**调用 Authing Management API (v3) 时必须携带以下请求头**：\n\n| 请求头                      | 是否必填 | 含义 ​                                                                                                                                                                 |\n| --------------------------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| content-type                | 是       | 如接口未特殊说明，请填 `application/json`                                                                                                                              |\n| date                        | 是       | 客户端请求时刻的时间，为标准 GMT 格式，如 `Wed, 21 Oct 2015 07:28:00 GMT`，详情见 [Http date header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date)。 |\n| x-authing-signature-nonce   | 是       | 签名随机字符串，详情见[鉴权机制](#鉴权机制)。                                                                                                                          |\n| x-authing-signature-method  | 是       | 签名方式，目前仅支持 `HMAC-SHA1`，详情见[鉴权机制](#鉴权机制)。                                                                                                        |\n| x-authing-signature-version | 是       | 签名方式，目前为 `1.0`，详情见[鉴权机制](#鉴权机制)。                                                                                                                  |\n| authorization               | 是       | 使用 `Access Key ID` 和 `Access Key Secret` 对请求上下文的签名，详情见[鉴权机制](#鉴权机制)。                                                                          |\n\n## HTTP 重定向\n\n在某些情况下，Authing Management API (v3) 接口会返回一个 **HTTP 重定向** 的响应，重定向的内容将会放在 **Response Header** 的 `Location` 字段上。\n\n## HTTP 响应结构\n\n如非接口特殊声明，Authing Management API (v3) 的响应体格式如下：\n\n```json\n{\n  \"statusCode\": <STATUS_CODE>,\n  \"apiCode\": <API_CODE>, // 详细错误类型，当请求失败时会返回\n  \"message\": <ERROR_MESSAGE>, // 错误描述信息\n  \"requestId\": <REQUEST_ID>, // 错误请求 ID，当请求失败时会返回\n  \"data\": <RESPONSE_DATA>, // 具体响应数据\n}\n```\n\n`statusCode` 和 `apiCode` 的具体描述和错误处理方式见[错误处理](#tag/开发准备/错误处理)。\n","x-displayName":"HTTP 请求"},{"name":"开发准备/分页接口","description":"默认情况下，分页接口默认一页会返回 10 个元素，并且如果无特殊说明，每页最大值为 50 个，你可以通过 `page` 和 `limit` 参数指定对应的页码和每页包含的元素个数。示例：\n\n```bash\ncurl 'https://<YOUR_DOMAIN>.authing.cn/api/v3/list-users?page=2&limit=50'\n```\n","x-displayName":"分页接口"},{"name":"开发准备/鉴权机制","description":"Authing Management API (v3) 使用的是 AK/SK 本地对请求数据的摘要进行签名的鉴权机制，客户端在调用 API 时，需要使用 SK 对请求数据的摘要进行签名计算，并将签名结果传输给服务器端进行签名验证。\n\n## 为什么使用 AK/SK 签名的方式\n\nAuthing Management API (v3) 使用 AK/SK 本地签名的鉴权机制，主要从以下几点安全性进行考虑：\n\n1. 验证客户端的合法性\n2. 防止请求数据在网络传输过程中被篡改\n3. 在请求数据中加入时间戳元素，防止[重放攻击](https://zh.wikipedia.org/wiki/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB)\n\n## 如何查看我的 AK/SK\n\n在 Authing 中，目前有两种类型的 AK/SK：\n\n- 用户池全局 AK/SK：具备用户池内所有资源的全局操作权限。你可以在 [Authing 控制台](https://console.authing.cn) 的**设置** - **基础设置** - **密钥管理** 获取到**用户池 ID** 和**用户池密钥**，其中**用户池 ID**为 AK（Access Key ID）,**用户池密钥**为 SK（Access Key Secret）。\n- 协作管理员 AK/SK：可针对用户池内的资源进行细粒度授权，协作管理员的 AK/SK 只能调用其被授权的 API。\n\n## 摘要签名机制原理说明\n\n拿到了你的 AK/SK 之后，下面我们来看如何使用 AK/SK 对一次 API 请求进行签名。\n\n### 将请求数据生成摘要\n\n假设在不考虑任何签名机制的情况下，我们有一个原始的获取用户列表的请求，如下所示：\n\n```\ncurl --request POST \\\n  --url https://api.authing.cn/api/v3/list-users \\\n  --header 'content-type: application/json' \\\n  --header 'some-other-header: some-random-value' \\\n  --data '{\n  \"options\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"limit\": 10\n    }\n  }\n}'\n```\n\nHTTP 请求数据如下：\n\n- 请求方式：`POST`；\n- 请求 API URL：`/api/v3/list-users`，不带域名和 Query 参数；\n- 请求头：携带了两个请求头 `content-type: application/json;charset=utf-8` 和 `some-other-header: some-random-value`；\n- 请求体：在请求体中传递了一个对象。\n\n在此基础上添加上 Authing API 签名要求的必要**请求头**：\n\n- `date` 请求头：客户端请求时刻的时间，为标准 GMT 格式，如 `Wed, 21 Oct 2015 07:28:00 GMT`，详情见 [Http date header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date)；\n- `x-authing-signature-nonce`: 签名随机字符串；\n- `x-authing-signature-method`: 签名算法，目前仅支持 `HMAC-SHA1`；\n- `x-authing-signature-version`: 签名算法版本，目前为 `1.0`。\n\n```text{1-10}\ncurl --request POST \\\n  --url https://api.authing.cn/api/v3/list-users \\\n  --header 'content-type: application/json;charset=utf-8' \\\n  --header 'some-other-header: some-random-value' \\\n  --header 'date: Sun, 09 Oct 2022 06:14:00 GMT'' \\\n  --header 'x-authing-signature-nonce: f02a938cdbcf1b1f10bf14887eda6659' \\\n  --header 'x-authing-signature-method: HMAC-SHA1' \\\n  --header 'x-authing-signature-version: 1.0' \\\n  --data '{\n  \"options\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"limit\": 10\n    }\n  }\n}'\n```\n\n在此之后，我们将上述的请求数据转换成下面这种格式的字符串：\n\n```\nHTTP-Verb\nContent-Type\nDate\nCanonicalizedAuthingHeaders\nCanonicalizedResource\n```\n\n其中每一项的释义如下：\n\n- `HTTP-Verb`: HTTP 请求动词，在这个例子里，为 `POST`；\n- `Content-Type`: HTTP 请求数据格式，在这个例子里，为 `application/json;charset=utf-8`\n- `Date`: 客户端请求时刻的时间，为标准 GMT 格式，如 `Wed, 21 Oct 2015 07:28:00 GMT`，详情见 [Http date header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date)；在这个例子里，为 `Sun, 09 Oct 2022 06:14:00 GMT`；\n- `CanonicalizedAuthingHeaders`: 经过规范化处理的 Authing 相关请求头，下面会介绍如何拼接；\n- `CanonicalizedResource`: 经过规范化处理的 API 资源，下面会介绍如何拼接；\n\n于是我们得到：\n\n```\nPOST\napplication/json;charset=utf-8\nWed, 21 Oct 2015 07:28:00 GMT\nCanonicalizedAuthingHeaders\nCanonicalizedResource\n```\n\n下面我们再分别介绍 CanonicalizedAuthingHeaders 和 CanonicalizedResource 的构建过程。\n\n#### 构建 CanonicalizedAuthingHeaders 参数\n\nCanonicalizedAuthingHeaders 的构建过程如下：\n\n1. 只需包含以 `x-authing-` 开头的请求头。\n2. 需要将每个 HTTP 标头名称转换为小写。例如，将 `X-Authing-Signature-Method` 转换为 `x-authing-signature-method`。\n3. 需要根据请求头名称按**字典顺序**进行排序。例如，`x-authing-signature-method` 应该在 `x-authing-signature-nonce` 之前。\n4. 每个请求头按照 `key=value` 的格式进行拼接，`key` 和 `value` 之间不应该包含空格。\n5. 不同的请求头之间通过换行符号（`\\n`）分隔。\n\n于是得到如下结果：\n\n```\nPOST\napplication/json;charset=utf-8\nWed, 21 Oct 2015 07:28:00 GMT\nx-authing-signature-method:HMAC-SHA1\nx-authing-signature-nonce:11223344\nx-authing-signature-version:1.0\nCanonicalizedResource\n```\n\n#### 构建 CanonicalizedResource 参数\n\nCanonicalizedResource 的构建过程如下：\n\n1. 不管是 `GET` 请求还是 `POST` 请求，格式需遵循 `<API_URL>?<API_DATA>`，中间使用 `?` 分隔。\n2. `<API_URL>` 部分不应该包含域名和 Query 和 Query 参数。例如：`https://api.authing.cn/api/v3/list-users?a=b` 这个请求，只保留 `/api/v3/list-users` 部分。\n3. `<API_DATA>` 部分规则如下：\n\n- 如果是 `GET` 请求，使用 Query 中的查询参数作为 `<API_DATA>` 需要的数据；\n- 如果是 `POST` 请求，使用 Body 中的请求体作为 `<API_DATA>` 需要的数据。\n\n遍历`<API_DATA>` 需要的数据的每一个 key，将此 key 和这个 key 对应的 value 按照 `key=value` 的方式进行拼接（如果 value 为字符串、数字、布尔值等原始值，无需做额外处理；如果 value 是一个对象，需要先转换成 JSON 字符串再[编吗为 URL 格式](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)）。不同的 key/value 对之间使用 `&` 符号进行连接。\n\n于是我们再得到如下结果：\n\n```\nPOST\napplication/json;charset=utf-8\nWed, 21 Oct 2015 07:28:00 GMT\nx-authing-signature-method:HMAC-SHA1\nx-authing-signature-nonce:11223344\nx-authing-signature-version:1.0\n/api/v3/list-users?options=%7B%22pagination%22:%7B%22page%22:1,%22limit%22:10%7D%7D\n```\n\n下文中我们会将这个最终得到的字符串叫做 `stringToSign`。\n\n### 将生成的摘要使用 SK 计算签名\n\nAuthing API 的签名鉴权机制使用 `HMAC-SHA1` 算法，并生成 `base64` 格式的摘要。\n\n以 `Node.js` 代码为例：\n\n```js\nexport function buildSignature(accessKeySecret: string, stringToSign: string) {\n  return crypto\n    .createHmac('sha1', accessKeySecret)\n    .update(Buffer.from(stringToSign, 'utf8'))\n    .digest('base64');\n}\n```\n\n于是我们再得到类似下面的结果：\n\n```\nPFboTzV5F7WjU4yKCFmcRDTZ6tk=\n```\n\n### 根据 AK/SK + 签名构建 Authorization 请求头\n\n得到了签名之后，我们按照如下格式拼接 `Authorization` 请求头的内容：\n\n```\nauthing <accessKeyId>:<signature>\n```\n\n于是我们得到最终的结果：\n\n```\nauthing 62eaa95ffxxxxee52ae6b90c:PFboTzV5F7WjU4yKCFmcRDTZ6tk=\n```\n\n我们需要将其放到 `Authorization` 中并传输给 Authing 服务器。\n\n### 发出最终请求\n\n```text{1-10}\ncurl --request POST \\\n  --url https://api.authing.cn/api/v3/list-users \\\n  --header 'content-type: application/json;charset=utf-8' \\\n  --header 'some-other-header: some-random-value' \\\n  --header 'date: Sun, 09 Oct 2022 06:14:00 GMT'' \\\n  --header 'x-authing-signature-nonce: f02a938cdbcf1b1f10bf14887eda6659' \\\n  --header 'x-authing-signature-method: HMAC-SHA1' \\\n  --header 'x-authing-signature-version: 1.0' \\\n  --header 'authorization: authing 62eaa95ffxxxxee52ae6b90c:PFboTzV5F7WjU4yKCFmcRDTZ6tk=' \\\n  --data '{\n  \"options\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"limit\": 10\n    }\n  }\n}'\n```\n\n## 摘要算法示例代码\n\n你可以在此查看不同语言的摘要示例代码。\n\n## 使用 SDK 请求 API\n\n我们为开发中提供了不同语言的 SDK，SDK 内置了相关签名逻辑，使得你需要过多考虑这些\n","x-displayName":"鉴权机制"},{"name":"开发准备/密码安全传输","description":"## HTTPS 加密传输\n\nAuthing 所有 API 均通过 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 `RSA256` 和[国密 SM2](https://baike.baidu.com/item/SM2/15081831) 两种方式对密码进行加密。\n\n## RSA256\n\nAuthing 支持使用 RSA256 非对称加密方式对密码进行安全传输，你需要使用 Authing 的 RSA 公钥对密码进行加密，发送到 Authing 服务器后端之后，Authing 服务器会使用私钥进行解密。\n\nAuthing 的 RSA 公钥如下，你也可以通过此[端点](#tag/其他/公开信息端点/operation/PublicAPIV3Controller_getSystemInfo)拉取：\n\n```\n{{RSA_PUBLIC_KEY}}\n```\n\n> 如果是私有化部署的 Authing 服务，RSA 256 公钥端点信息请联系你的客户经理获取。\n\n你可以参考此 Demo，其包含了使用 RSA256 加密密码的示例：[https://github.com/Authing/password-encryption](https://github.com/Authing/password-encryption)。\n\n如果你只是简单调试，可以使用[此在线调试工具](http://www.metools.info/code/c81.html)使用上面的公钥对密码进行加密。\n\n## 国密 SM2\n\nAuthing 支持使用国密 SM2 密方式对密码进行安全传输，你需要使用 Authing 的 SM2 公钥对密码进行加密，发送到 Authing 服务器后端之后，Authing 服务器会使用私钥进行解密。\n\nAuthing 的 SM2 公钥如下，你也可以通过此[端点](#tag/其他/公开信息端点/operation/PublicAPIV3Controller_getSystemInfo)拉取：\n\n```\n{{SM2_PUBLIC_KEY}}\n```\n\n> 如果是私有化部署的 Authing 服务，SM2 公钥端点信息请联系你的客户经理获取。\n\n你可以参考此 Demo，其包含了使用 SM2 加密密码的示例：[https://github.com/Authing/password-encryption](https://github.com/Authing/password-encryption)。\n\n如果你只是简单调试，可以使用[此在线调试工具](http://www.lzltool.com/SM2)使用上面的公钥对密码进行加密。\n","x-displayName":"密码安全传输"},{"name":"开发准备/接口限流","description":"针对免费账户，Authing 默认的接口限流频率为 300 QPS / 用户池。如果触发了我们的 QPS 限制，你将收到以下错误提示：HTTP code 为 `429`，响应体为：\n\n```json\n{\n  \"statusCode\": 429,\n  \"message\": \"您的请求已超过最大数量限制，请稍后重试\"\n}\n```\n\n> 如果你触发了接口限流阈值，请升级套餐并联系 Authing 客服申请更大的 QPS 限制。\n","x-displayName":"接口限流"},{"name":"开发准备/服务器 IP","description":"当你进行配置自定义数据库、接收 Webhook 通知等操作时，你可能需要获取 Authing 服务的对外 IP，并修改防火墙配置。Authing 服务的对外 IP 可以通过[此端点](<(/api/v3/system)>)获取。\n","x-displayName":"服务器 IP"},{"name":"开发准备/错误处理","description":"Authing Management API (v3) 采取了和标准 RESTFul API 不完全一致的错误处理方案，如果没有特殊说明，\n所有接口返回的 HTTP 状态码均为 `200`。一个 HTTP 状态码为 `200` 的响应，不能视为操作成功，你需要通过相应体的具体内容进行判断。\n\nAuthing Management API (v3) 接口响应体中，包含了两个状态码：`statusCode` 和 `apiCode`：\n\n- `statusCode`: `statusCode` 为请求状态码，不包含具体的业务错误信息。**当且仅当 `statusCode` 为 `200` 时，表示接口请求成功**，此时不会带有 `apiCode`。`statusCode` 不为 `200` 的情况下，\n  表示接口请求失败或者需要进行额外操作（比如登录接口需要进行 MFA 二次验证），你需要对此进行关注，进行必要的错误处理。每个 `statusCode` 对应一个类型的错误，\n  具体的错误分类请见下文。在大多数情况下，除非你需要对某些特定的异常做出响应，否则你只需要关注 `statusCode`，不需要关注 `apiCode`。\n- `apiCode`: `apiCode` 为业务状态码，每个 `apiCode` 具备特定的错误含义，具体的 `apiCode` 列表见下文。`apiCode` 只会在 `statusCode` 非 200 且错误原因具备业务含义时才会返回。\n\n## statusCode\n\n- [200] OK\n- [4xx] 客户端异常\n  - [400]InvalidArgumentError：请求参数格式错误\n  - [401]UnauthorizedError：用户未登录\n  - [402]PaymentNeededError：此接口需要升级套餐之后使用\n  - [403]ForbiddenError：没有权限执行某操作\n  - [404]NotFoundError：找不到资源\n  - [409]ConflictError：要创建的资源和已有资源存在字段冲突\n  - [413]PayloadTooLargeError：请求体过大\n  - [422]InvalidOperationError：非法操作（参数格式正确，但不符合业务限制）\n  - [429]ThrottleError：触发限流机制\n  - [499]ClientError：通用客户端异常\n- [5xx] 服务器端异常\n  - [500]ServerError：通用服务端异常\n  - [501]UnsupportedOperationError：服务器不支持的操作\n  - [502]BadGatewayError：微服务调用出错\n  - [503]ServiceUnavailableError：维护中\n- [6xx] 第三方服务调用异常\n  - [601]EndpointRequestError：请求第三方端点失败\n  - [602]EndpointResponseError：第三方端点返回了错误\n  - [603]CustomCodeError：自定义代码出错，例如 pipeline 或自定义数据库\n\n## apiCode\n\n| apiCode | 描述                                                       |\n| :------ | :--------------------------------------------------------- |\n| 1300    | AK/SK 签名不合法                                           |\n| 1301    | AK/SK 签名方式和服务端不匹配                               |\n| 1302    | AK/SK 签名版本和服务端不匹配                               |\n| 1303    | AK/SK 签名时间戳格式不正确，应该是单位为毫秒的 Unix 时间戳 |\n| 1304    | 使用 AK/SK 签名机制时，请求头中没有 date 请求头            |\n| 1305    | AK/SK 签名时间戳和服务器时间戳相差较大，此次请求不被允许   |\n| 1306    | AK/SK 签名已经被消费过，此次请求不被允许                   |\n| 1600    | 认证后流程成功完成，登录态已设置                           |\n| 1635    | 个人（个人中心绑定）MFA                                    |\n| 1636    | 企业（应用下配置的） MFA                                   |\n| 1639    | 首次登录重置密码（不需要验证旧密码）                       |\n| 1640    | 触发联邦认证询问身份绑定，只允许绑定现有账号               |\n| 1641    | 触发联邦认证询问身份绑定，允许绑定现有账号和创建新账号     |\n| 1642    | 登录信息补全                                               |\n| 1643    | 用户自主解锁                                               |\n| 1699    | 提前终止认证后流程，返回登录界面                           |\n| 1700    | 未上传人脸识别的照片                                       |\n| 1701    | 人脸对比时，未上传需要对比的图片                           |\n| 1702    | 人脸校验错误                                               |\n| 1703    | 未绑定邮箱或手机号，无法绑定人脸                           |\n| 1704    | 绑定人脸时，手机验证失败                                   |\n| 1705    | 绑定人脸时，邮箱验证失败                                   |\n| 1706    | 人脸已被绑定                                               |\n| 1707    | 绑定人脸失败                                               |\n| 2004    | 用户未找到                                                 |\n| 2005    | 用户已锁定                                                 |\n| 2006    | 密码错误                                                   |\n| 2011    | 应用不存在                                                 |\n| 2020    | 尚未登录，无权限访问此请求                                 |\n| 2031    | 应用已禁止注册用户                                         |\n| 2039    | 应用域名已被占用                                           |\n| 2040    | 用户池域名已被占用                                         |\n| 2058    | 强制重置密码（需要验证旧密码）                             |\n| 2224    | 用户池不存在                                               |\n| 2333    | 用户名或密码错误                                           |\n| 4021    | 计量计费错误                                               |\n| 6001    | Totp 码错误                                                |\n| 6002    | Totp 恢复码错误                                            |\n| 6003    | 未输入 Totp 安全码                                         |\n| 6004    | 未输入 Totp 恢复码                                         |\n| 2120008 | 用户已停用或不是此租户成员                                 |\n| 2130010 | 用户无权限登录此租户                                       |\n| 2820002 | 无效的 LDAP 链接                                           |\n\n## 响应数据示例\n\n一个成功的请求响应数据示例如下：\n\n```json\n{\n  // 此响应表示请求成功，所以不会返回 apiCode\n  \"statusCode\": 200,\n  \"message\": \"\",\n  \"data\": {\n    // ... 省略具体数据\n  }\n}\n```\n\n一个失败的请求响应数据示例如下：\n\n```json\n{\n  // 此类型错误不具备具体的业务含义，所以不会返回 apiCode\n  \"statusCode\": 429,\n  \"message\": \"您的请求已超过最大数量限制，请稍后重试\"\n}\n```\n\n以及：\n\n```json\n{\n  // 账号不存在或密码错误具备业务含义，所以返回了对应的 apiCode: 2333\n  \"statusCode\": 403,\n  \"apiCode\": 2333,\n  \"message\": \"Account not exists or password is incorrect.\",\n  \"requestId\": \"xxxxxx-xxxxxx-xxxxxx-xxxxxx\"\n}\n```\n\n## 我该如何处理 statusCode 和 apiCode\n\n在大多数情况下，除非你需要对某些特定的异常做出响应，否则你只需要关注 `statusCode`，不需要关注 `apiCode`。\n比如登录接口，如果你只需要在用户登录失败的时候给出错误提示，可以不用关心 `apiCode`；但是如果你需要对某一种\n特定的业务错误进行额外处理，就需要根据 `apiCode` 进行判断。\n","x-displayName":"错误处理"},{"name":"开发准备/使用认证 API","description":"如果你需要登录、注册、登出、MFA、检查登录态、OIDC 标准协议等所有与认证相关的接口，点此查看 [Authing Authentication API (v3)](https://api.authing.cn/openapi/v3/authentication)。\n","x-displayName":"使用认证 API"},{"name":"事件订阅/概述","description":"通过事件订阅，可以满足应用及时响应 Authing 事件变更的需求。在 Authing 中，事件订阅通过 Webhook 来实现。\n\n通过使用 Webhook，当某个事件发生时（如用户信息被修改、用户被删除等），Authing 服务会以 HTTP `POST` 请求的方式将事件内容以 `JSON` 格式推送给你配置的请求地址。\n\n下面列举两个简单的适用场景。开发者可以根据实际需求，订阅不同的事件。Authing 目前支持的事件请参考[事件列表](#事件列表)。\n\n- **实时数据处理**：如果应用对数据的实时性要求比较高，希望能够及时地从飞书同步数据的变化，可以进行事件订阅。例如在用户被删除时，应用需要第一时间处理此用户的业务数据，就可以订阅**用户删除**事件。\n- **快速事件响应**：如果应用需要及时响应用户的操作，例如当用户登录时，自动为其推送一条消息，就可以订阅**用户登录**事件。\n\n![](https://files.authing.co/api-explorer/webhook-list.jpg)\n","x-displayName":"概述"},{"name":"事件订阅/事件安全验证","description":"为了保证 Webhook 事件传输过程中中的安全性，当你在创建 Webhook 时，你可以设置请求密钥：当 Authing 向你的服务器推送事件时，会在请求头 `x-authing-token` 中带上此密钥，借此验证请求的合法性。\n\n![](https://files.authing.co/api-explorer/webhook-secret.jpg)\n","x-displayName":"事件安全验证"},{"name":"事件订阅/事件列表","description":"目前支持的完整事件列表，请见：[Webhook 事件列表](https://docs.authing.co/v2/guides/webhook/#%E6%94%AF%E6%8C%81%E7%9A%84%E4%BA%8B%E4%BB%B6)\n","x-displayName":"事件列表"},{"name":"事件订阅/事件出口 IP","description":"当你接收 Authing 服务器的 Webhook 通知等操作时，根据你的网络防火墙设置，你可能需要获取 Authing 服务的对外 IP，并修改防火墙配置。Authing 服务的对外 IP 可以通过[此端点](/api/v3/system)获取。\n","x-displayName":"事件出口 IP"},{"name":"管理用户/概述","description":"此模块用于管理 Authing 的用户目录。\n\n你可以把 Authing 用户目录理解为存储了你所有用户资料的目录，你可以在用户目录中搜索用户、查看用户资料、修改用户信息；这个用户目录的 Schema 是可扩展的，你可以添加自定义的用户字段。\n","x-displayName":"概述"},{"name":"管理用户/使用自定义数据库存储用户数据","description":"默认情况下，Authing 会将用户数据存储在 Authing 的数据库（Authing User Store），但是如果你有老的数据库需要迁移，或者想使用自己的数据库，如 MySQL，MongoDB，SQL Server 等（Custom User Store），你可以使用自定义数据库功能。详情请[查看文档](https://docs.authing.cn/v2/guides/database-connection/overview.html)。\n\n使用了自定义数据库的情况下，API 调用形式不受影响。\n","x-displayName":"使用自定义数据库存储用户数据"},{"name":"管理用户/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理用户/事件","description":"当你对用户进行了增删改操作之后，你可以获得对应的 Webhook 事件通知，详情请见[使用 Webhook 监听事件](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"事件"},{"name":"管理用户/常见问题","description":"## 如何迁移历史用户的密码\n\n假如你可以解密得到用户的原始密码，可以直接在创建用户的时候设置用户的密码；更多情况下，你可能无法获取用户的原始密码，但是你肯定有办法可以**验证用户密码**的合法性。通过以下两步可以实现无缝迁移历史用户的密码：\n\n- 第一步，配置自定义密码函数：你需要编写**加密密码**和**验证密码**两个函数，**加密密码函数**用于对新用户的密码进行自定义加密，**验证密码函数**用于对用户的密码进行自定义验证。详情请见[配置自定义密码函数](https://docs.authing.cn/v2/guides/migrations/custom-password-script/)。\n- 第二步，调用批量创建用户 API 创建用户时，设置 `options.keepPassword` 为 `true`，开启这个开关之后，用户的 `password` 字段会直接写入 Authing 数据库，Authing 不会再次加密此字段。后续用户验证密码时，将会使用你配置的自定义密码函数进行验证。\n","x-displayName":"常见问题"},{"name":"管理组织机构/概述","description":"和一般的 OA 系统、人事管理系统不一样，Authing 的组织机构是支持多租户的，也就是一个用户池中可能有多个相互隔离的组织机构。所以在 Authing 的组织机构模型中，你需要明确区分两个概念：\n\n- `组织机构（Organization）`：组织机构是一组部门在逻辑上的集合。从数据结构上体现，每个组织机构有一棵独立的树状结构，树的节点对应的是部门；对应到现实生活中，你可以理解为一家独立的公司。\n- `部门（Department）`：部门对应的是一个原子化单位，对应到现实中，你可以理解为一个公司中的某个部门。\n\n对应的，Authing 组织机构管理 API 包含两部分：\n\n- 组织机构的管理：一级组织机构的创建、修改、删除、查询。\n- 部门的管理：在某个组织机构中，进行添加部门、修改部门、删除子部门、移动部门、获取子部门列表、添加成员、删除成员、获取成员列表等操作。\n","x-displayName":"概述"},{"name":"管理组织机构/从第三方导入组织机构","description":"在现实中，你很有可能在一个第三方的系统（比如飞书、钉钉、企业微信或者是任何自建的 HR 系统）中维护了你的组织机构数据，针对这种场景，Authing 推出了**同步中心**的功能。同步中心可以使企业管理者免于在各个系统中手动维护应用账号， 真正实现**一处管理、处处同步**，既提高了员工生命周期流转效率，又帮助企业降低了运维成本。\n\n![](https://cdn.authing.co/authing-docs-v2/1.3.123/assets/img/main.fd9b2a9e.jpg)\n\n详情请了解[同步中心](https://docs.authing.cn/v2/guides/sync-new/)。\n","x-displayName":"从第三方导入组织机构"},{"name":"管理组织机构/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理组织机构/事件","description":"当你对组织机构进行了增删改操作之后，你可以获得对应的 Webhook 事件通知，详情请见[使用 Webhook 监听事件](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"事件"},{"name":"管理组织机构/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理角色/概述","description":"","x-displayName":"概述"},{"name":"管理角色/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理角色/事件","description":"当你对角色进行了增删改操、授权作之后，你可以获得对应的 Webhook 事件通知，详情请见[使用 Webhook 监听事件](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"事件"},{"name":"管理角色/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理用户分组/概述","description":"","x-displayName":"概述"},{"name":"管理用户分组/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理用户分组/事件","description":"当你对用户分组进行了增删改操作之后，你可以获得对应的 Webhook 事件通知，详情请见[使用 Webhook 监听事件](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"事件"},{"name":"管理用户分组/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理自定义字段/概述","description":"","x-displayName":"概述"},{"name":"管理自定义字段/基本概念","description":"","x-displayName":"基本概念"},{"name":"管理自定义字段/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理自定义字段/事件","description":"当你对自定义数据进行了增删改操作之后，你可以获得对应的 Webhook 事件通知，详情请见[使用 Webhook 监听事件](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"事件"},{"name":"管理自定义字段/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理资源与权限/概述","description":"","x-displayName":"概述"},{"name":"管理资源与权限/权限模型介绍","description":"","x-displayName":"权限模型介绍"},{"name":"管理资源与权限/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理资源与权限/事件","description":"","x-displayName":"事件"},{"name":"管理资源与权限/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理应用/概述","description":"","x-displayName":"概述"},{"name":"管理应用/成为身份源（IdP）","description":"","x-displayName":"成为身份源（IdP）"},{"name":"管理应用/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理应用/事件","description":"当你对用户进行了增删改操作之后，你可以获得对应的 Webhook 事件通知，详情请见[使用 Webhook 监听事件](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"事件"},{"name":"管理应用/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理单点登录应用面板/概述","description":"","x-displayName":"概述"},{"name":"管理单点登录应用面板/什么是单点登录","description":"","x-displayName":"什么是单点登录"},{"name":"管理单点登录应用面板/什么是应用面板","description":"","x-displayName":"什么是应用面板"},{"name":"管理单点登录应用面板/前端如何实现单点登录","description":"","x-displayName":"前端如何实现单点登录"},{"name":"管理单点登录应用面板/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理单点登录应用面板/事件","description":"","x-displayName":"事件"},{"name":"管理单点登录应用面板/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理多租户/概述","description":"","x-displayName":"概述"},{"name":"管理多租户/基本概念","description":"","x-displayName":"基本概念"},{"name":"管理多租户/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理多租户/事件","description":"","x-displayName":"事件"},{"name":"管理多租户/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理身份源/概述","description":"","x-displayName":"概述"},{"name":"管理身份源/基本概念","description":"","x-displayName":"基本概念"},{"name":"管理身份源/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理身份源/事件","description":"","x-displayName":"事件"},{"name":"管理身份源/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理安全配置/概述","description":"","x-displayName":"概述"},{"name":"管理安全配置/基本概念","description":"","x-displayName":"基本概念"},{"name":"管理安全配置/最佳实践","description":"","x-displayName":"最佳实践"},{"name":"管理安全配置/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理安全配置/事件","description":"","x-displayName":"事件"},{"name":"管理安全配置/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理全局登录框配置/概述","description":"","x-displayName":"概述"},{"name":"管理全局登录框配置/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理全局登录框配置/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理消息服务/概述","description":"","x-displayName":"概述"},{"name":"管理消息服务/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理消息服务/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理同步中心/概述","description":"","x-displayName":"概述"},{"name":"管理同步中心/基本概念","description":"","x-displayName":"基本概念"},{"name":"管理同步中心/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理同步中心/事件","description":"","x-displayName":"事件"},{"name":"管理同步中心/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理 Pipeline/概述","description":"","x-displayName":"概述"},{"name":"管理 Pipeline/基本概念","description":"","x-displayName":"基本概念"},{"name":"管理 Pipeline/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理 Pipeline/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理 Webhook/概述","description":"","x-displayName":"概述"},{"name":"管理 Webhook/基本概念","description":"","x-displayName":"基本概念"},{"name":"管理 Webhook/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理 Webhook/常见问题","description":"","x-displayName":"常见问题"},{"name":"获取审计日志/概述","description":"","x-displayName":"概述"},{"name":"获取审计日志/API 列表","description":"","x-displayName":"API 列表"},{"name":"获取审计日志/常见问题","description":"","x-displayName":"常见问题"},{"name":"获取统计数据/概述","description":"","x-displayName":"概述"},{"name":"获取统计数据/API 列表","description":"","x-displayName":"API 列表"},{"name":"获取统计数据/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理计量计费/概述","description":"","x-displayName":"概述"},{"name":"管理计量计费/API 列表","description":"","x-displayName":"API 列表"},{"name":"最佳实践/最佳实践","description":"","x-displayName":"最佳实践"},{"name":"常见问题/常见问题","description":"","x-displayName":"常见问题"},{"name":"工具与资源/Authing 认证 API","description":"","x-displayName":"Authing 认证 API"},{"name":"工具与资源/Quick Start","description":"\n","x-displayName":"Quick Start"},{"name":"工具与资源/SDK 列表","description":"\n","x-displayName":"SDK 列表"},{"name":"工具与资源/使用文档","description":"\n","x-displayName":"使用文档"},{"name":"获取帮助/获取帮助","description":"","x-displayName":"获取帮助"}],"servers":[{"url":"https://console.cj.mereith.com"}],"components":{"securitySchemes":{"bearer":{"scheme":"bearer","bearerFormat":"JWT","type":"http"},"x-authing-userpool-id":{"type":"apiKey","in":"header","name":"x-authing-userpool-id","description":"Authing Userpool Id"}},"schemas":{"GetManagementAccessTokenDto":{"type":"object","properties":{"accessKeyId":{"type":"string","description":"AccessKey ID: 如果是以用户池全局 AK/SK 初始化，为用户池 ID；如果是以协作管理员的 AK/SK 初始化，为协作管理员的 AccessKey ID。","example":"6250f12d5dxxxx9bcfcf784b"},"accessKeySecret":{"type":"string","description":"AccessKey Secret: 如果是以用户池全局 AK/SK 初始化，为用户池密钥；如果是以协作管理员的 AK/SK 初始化，为协作管理员的 SK。","example":"4ae78d3e579a6dxxxx1aeca7b1e29ec2"}},"required":["accessKeyId","accessKeySecret"]},"AccessTokenResDto":{"type":"object","properties":{"access_token":{"type":"string","description":"Access Token 内容","example":"eyJ...Ggg"},"expires_in":{"type":"number","description":"token 有效时间","example":7200}},"required":["access_token","expires_in"]},"GetManagementTokenRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/AccessTokenResDto"}]}},"required":["statusCode","message","data"]},"ListUsersAdvancedFilterItemDto":{"type":"object","properties":{"field":{"type":"string","description":"高级搜索指定的用户字段：\n- `id`: 用户 ID\n- `phone`: 手机号   \n- `email`: 邮箱\n- `username`: 用户名\n- `externalId`: 用户在外部系统的 ID\n- `name`: 姓名\n- `status`: 用户状态，可选值为 `Activated` 和 `Suspended`\n- `gender`: 用户性别，可选值为 `M`（男性）、`F`（女性） 和 `U`（未知）\n- `birthdate`: 出生日期\n- `givenName`: 名\n- `familyName`: 姓\n- `preferredUsername`: Preferred Username\n- `profile`: 个人资料\n- `country`: 国家\n- `province`: 省份\n- `zoneinfo`: 时区\n- `website`: 个人网站\n- `address`: 地址\n- `streetAddress`: 街道地址\n- `company`: 公司\n- `postalCode`: 邮政编码\n- `formatted`: 格式化的地址\n- `signedUp`: 注册时间\n- `locale`: 语言信息\n- `lastLoginTime`: 上次登录时间，为日期类型\n- `loginsCount`: 登录次数，为数字类型\n- `lastLoginApp`: 上次登录的应用 ID\n- `userSource`: 用户来源，具体使用见示例\n- `department`: 用户部门，具体使用见示例\n- `loggedInApps`: 曾经登录过的应用，具体使用见示例\n- `identity`: 用户外部身份源信息，具体使用见示例\n- ... 其他自定义字段\n","example":"nickname"},"operator":{"type":"string","description":"运算符，可选值为：\n- `EQUAL`: 全等，适用于数字和字符串的全等匹配\n- `NOT_EQUAL`: 不等于，适用于数字和字符串的匹配\n- `CONTAINS`: 字符串包含\n- `NOT_CONTAINS`: 字符串不包含\n- `IS_NULL`: 为空\n- `NOT_NULL`: 不为空\n- `IN`: 为某个数组中的元素\n- `GREATER`: 大于或等于，适用于数字、日期类型数据的比较\n- `LESSER`: 小于或等于，适用于数字、日期类型数据的比较\n- `BETWEEN`: 介于什么什么之间，适用于数字、日期类型数据的比较\n    ","enum":["EQUAL","NOT_EQUAL","CONTAINS","NOT_CONTAINS","IS_NULL","NOT_NULL","IN","GREATER","LESSER","BETWEEN"],"example":"EQUAL"},"value":{"type":"object","description":"搜索值，不同的 `field` 对应的 `value` 类型可能不一样，详情见示例。","example":"test"}},"required":["field","operator"]},"PaginationDto":{"type":"object","properties":{"page":{"type":"number","description":"当前页数，从 1 开始","default":1,"example":1},"limit":{"type":"number","description":"每页数目，最大不能超过 50，默认为 10","default":10,"example":10}}},"SortingDto":{"type":"object","properties":{"field":{"type":"string","description":"进行排序的字段，可选值为：\n- `createdAt`: 创建时间\n- `updatedAt`: 修改时间\n- `email`: 邮箱\n- `phone`: 手机号\n- `username`: 用户名\n- `externalId`: 外部 ID\n- `status`: 用户状态\n- `statusChangedAt`: 状态修改时间\n- `passwordLastSetAt`: 密码修改时间\n- `loginsCount`: 登录次数\n- `gender`: 性别\n- `lastLogin`: 上次登录时间\n- `userSourceType`: 用户注册来源\n- `lastMfaTime`: 上次 MFA 认证时间\n- `passwordSecurityLevel`: 密码安全等级\n- `phoneCountryCode`: 手机区号\n- `lastIp`: 上次登录时使用的 IP\n","example":"loginsCount","enum":["createdAt","updatedAt","email","username","externalId","phone","status","statusChangedAt","passwordLastSetAt","loginsCount","gender","lastLogin","userSourceType","lastMfaTime","passwordSecurityLevel","phoneCountryCode","lastIp"]},"order":{"type":"string","description":"排序顺序：\n- `desc`: 按照从大到小降序。\n- `asc`: 按照从小到大升序。\n    ","enum":["desc","asc"],"example":"desc"}},"required":["field","order"]},"ListUsersOptionsDto":{"type":"object","properties":{"pagination":{"description":"分页配置","example":{"page":1,"limit":10},"allOf":[{"$ref":"#/components/schemas/PaginationDto"}]},"sort":{"description":"排序设置，可以设置多项按照多个字段进行排序","example":[{"field":"createdAt","direction":"desc"},{"field":"loginsCount","direction":"desc"}],"type":"array","items":{"$ref":"#/components/schemas/SortingDto"}},"fuzzySearchOn":{"type":"array","description":"模糊搜索匹配的用户字段，可选值为：\n- `phone`: 用户手机号，不能包含手机号区号，默认包含\n- `email`: 用户邮箱，默认包含\n- `name`: 用户名称，默认包含\n- `username`: 用户名，默认包含\n- `nickname`: 用户昵称，默认包含\n- `id`: 用户 ID\n- `company`: 公司\n- `givenName`: 名\n- `familyName`: 姓\n- `middleName`: 中间名\n- `preferredUsername`: Preferred Username\n- `profile`: 个人资料\n- `website`: 个人网站\n- `address`: 地址\n- `formatted`: 格式化地址\n- `streetAddress`: 街道地址\n- `postalCode`: 邮编号码\n","default":["phone","email","name","username","nickname"],"items":{"type":"string","enum":["id","phone","email","name","username","externalId","nickname","company","givenName","familyName","middleName","profile","preferredUsername","website","address","formatted","streetAddress","postalCode"]}},"withCustomData":{"type":"boolean","description":"是否获取自定义数据","default":false,"example":true},"withIdentities":{"type":"boolean","description":"是否获取 identities","default":false,"example":true},"withDepartmentIds":{"type":"boolean","description":"是否获取部门 ID 列表","default":false,"example":true}}},"ListUsersRequestDto":{"type":"object","properties":{"query":{"type":"string","description":"模糊搜索关键字","example":"test"},"advancedFilter":{"description":"高级搜索","type":"array","items":{"$ref":"#/components/schemas/ListUsersAdvancedFilterItemDto"}},"options":{"description":"可选项","allOf":[{"$ref":"#/components/schemas/ListUsersOptionsDto"}]}}},"IdentityDto":{"type":"object","properties":{"identityId":{"type":"string","description":"身份源 ID","example":"62299d8b866d2dab79a89dc4"},"extIdpId":{"type":"string","description":"身份源连接 ID","example":"6076bacxxxxxxxxd80d993b5"},"provider":{"type":"string","description":"外部身份源类型：\n- `wechat`: 微信\n- `qq`: QQ\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `weibo`: 微博\n- `github`: GitHub\n- `alipay`: 支付宝\n- `baidu`: 百度\n- `lark`: 飞书\n- `welink`: Welink\n- `yidun`: 网易易盾\n- `qingcloud`: 青云\n- `google`: Google\n- `gitlab`: GitLab\n- `gitee`: Gitee\n- `twitter`: Twitter\n- `facebook`: Facebook\n- `slack`: Slack\n- `linkedin`: Linkedin\n- `instagram`: Instagram\n- `oidc`: OIDC 型企业身份源\n- `oauth2`: OAuth2 型企业身份源\n- `saml`: SAML 型企业身份源\n- `ldap`: LDAP 型企业身份源\n- `ad`: AD 型企业身份源\n- `cas`: CAS 型企业身份源\n- `azure-ad`: Azure AD 型企业身份源\n    ","enum":["oidc","oauth2","saml","ldap","ad","cas","azure-ad","wechat","google","qq","wechatwork","dingtalk","weibo","github","alipay","apple","baidu","lark","gitlab","twitter","facebook","slack","linkedin","yidun","qingcloud","gitee","instagram","welink"],"example":"wechat"},"type":{"type":"string","description":"Identity 类型，如 unionid, openid, primary","example":"openid"},"userIdInIdp":{"type":"string","description":"在外部身份源中的 ID","example":"oj7Nq05R-RRaqak0_YlMLnnIwsvg"},"originConnIds":{"description":"身份来自的身份源连接 ID 列表","example":["605492ac41xxxxe0362f0707"],"type":"array","items":{"type":"string"}}},"required":["identityId","extIdpId","provider","type","userIdInIdp","originConnIds"]},"UserDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9"},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"},"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"loginsCount":{"type":"number","description":"历史总登录次数","example":3},"lastLogin":{"format":"date-time","type":"string","description":"上次登录时间","example":"2022-07-03T02:20:30.000Z"},"lastIp":{"type":"string","description":"上次登录 IP","example":"127.0.0.1"},"gender":{"type":"string","description":"性别:\n- `M`: 男性，`male`\n- `F`: 女性，`female`\n- `U`: 未知，`unknown`\n  ","enum":["M","F","U"],"example":"M"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"passwordLastSetAt":{"format":"date-time","type":"string","description":"用户上次密码修改时间","example":"2022-07-03T02:20:30.000Z"},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":""},"profile":{"type":"string","description":"Preferred Username","example":""},"preferredUsername":{"type":"string","description":"Preferred Username","example":""},"website":{"type":"string","description":"用户个人网页","example":""},"zoneinfo":{"type":"string","description":"用户时区信息","example":""},"locale":{"type":"string","description":"Locale","example":""},"formatted":{"type":"string","description":"标准的完整地址","example":""},"region":{"type":"string","description":"用户所在区域","example":""},"userSourceType":{"type":"string","description":"来源类型:\n- `excel`: 通过 excel 导入\n- `register`: 用户自主注册\n- `adminCreated`: 管理员后台手动创建（包含使用管理 API 创建用户 ）\n- `syncTask`: 同步中心的同步任务  \n","enum":["excel","register","adminCreated","syncTask"],"example":"register"},"userSourceId":{"type":"string","description":"应用 ID 或者同步任务 ID","example":""},"lastLoginApp":{"type":"string","description":"用户上次登录的应用 ID","example":""},"mainDepartmentId":{"type":"string","description":"用户主部门 ID","example":""},"lastMfaTime":{"format":"date-time","type":"string","description":"用户上次进行 MFA 认证的时间","example":""},"passwordSecurityLevel":{"type":"number","description":"用户密码安全强度等级","example":1},"resetPasswordOnNextLogin":{"type":"boolean","description":"下次登录要求重置密码","default":false},"departmentIds":{"description":"用户所属部门 ID 列表","example":["624d930c3xxxx5c08dd4986e","624d93102xxxx012f33cd2fe"],"type":"array","items":{"type":"string"}},"identities":{"description":"外部身份源","type":"array","items":{"$ref":"#/components/schemas/IdentityDto"}},"customData":{"type":"object","description":"用户的扩展字段数据","example":{"school":"北京大学","age":22}},"statusChangedAt":{"format":"date-time","type":"string","description":"用户状态上次修改时间","example":"2022-07-03T02:20:30.000Z"}},"required":["userId","createdAt","updatedAt","status","gender","emailVerified","phoneVerified","userSourceType"]},"UserPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/UserDto"}}},"required":["totalCount","list"]},"UserPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserPagingDto"}]}},"required":["statusCode","message","data"]},"UserSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserDto"}]}},"required":["statusCode","message","data"]},"UserListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"用户列表","type":"array","items":{"$ref":"#/components/schemas/UserDto"}}},"required":["statusCode","message","data"]},"CreateUserOtpDto":{"type":"object","properties":{"secret":{"type":"string","description":"OTP 密钥","example":"HZ2F6J3AGNAVSOTV"},"recoveryCode":{"type":"string","description":"OTP Recovery Code","example":"b471-8ec0-874a-087f-bccb-cd54"}},"required":["secret"]},"CreateIdentityDto":{"type":"object","properties":{"extIdpId":{"type":"string","description":"身份源连接 ID","example":"6076bacxxxxxxxxd80d993b5"},"provider":{"type":"string","description":"外部身份源类型：\n- `wechat`: 微信\n- `qq`: QQ\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `weibo`: 微博\n- `github`: GitHub\n- `alipay`: 支付宝\n- `baidu`: 百度\n- `lark`: 飞书\n- `welink`: Welink\n- `yidun`: 网易易盾\n- `qingcloud`: 青云\n- `google`: Google\n- `gitlab`: GitLab\n- `gitee`: Gitee\n- `twitter`: Twitter\n- `facebook`: Facebook\n- `slack`: Slack\n- `linkedin`: Linkedin\n- `instagram`: Instagram\n- `oidc`: OIDC 型企业身份源\n- `oauth2`: OAuth2 型企业身份源\n- `saml`: SAML 型企业身份源\n- `ldap`: LDAP 型企业身份源\n- `ad`: AD 型企业身份源\n- `cas`: CAS 型企业身份源\n- `azure-ad`: Azure AD 型企业身份源\n    ","enum":["oidc","oauth2","saml","ldap","ad","cas","azure-ad","wechat","google","qq","wechatwork","dingtalk","weibo","github","alipay","apple","baidu","lark","gitlab","twitter","facebook","slack","linkedin","yidun","qingcloud","gitee","instagram","welink"],"example":"wechat"},"type":{"type":"string","description":"Identity 类型，如 unionid, openid, primary","example":"openid"},"userIdInIdp":{"type":"string","description":"在外部身份源中的 ID","example":"oj7Nq05R-RRaqak0_YlMLnnIwsvg"},"originConnIds":{"description":"身份来自的身份源连接 ID 列表","example":["605492ac41xxxxe0362f0707"],"type":"array","items":{"type":"string"}}},"required":["extIdpId","provider","type","userIdInIdp","originConnIds"]},"SendCreateAccountNotificationDto":{"type":"object","properties":{"sendEmailNotification":{"type":"boolean","description":"创建账号之后，是否发送邮件通知","default":false,"example":false},"sendPhoneNotification":{"type":"boolean","description":"创建账号之后，是否发送短信通知","default":false,"example":false},"appId":{"type":"string","description":"发送登录地址时，指定的应用 id，会将此应用的登录地址发送给用户的邮箱或者手机号。默认为用户池应用面板的登录地址。","example":"appid1"}}},"CreateUserOptionsDto":{"type":"object","properties":{"keepPassword":{"type":"boolean","description":"该参数一般在迁移旧有用户数据到 Authing 的时候会设置。开启这个开关，password 字段会直接写入 Authing 数据库，Authing 不会再次加密此字段。如果你的密码不是明文存储，你应该保持开启，并编写密码函数计算。","default":false},"autoGeneratePassword":{"type":"boolean","description":"是否自动生成密码","default":false},"resetPasswordOnFirstLogin":{"type":"boolean","description":"是否强制要求用户在第一次的时候重置密码","default":false},"departmentIdType":{"type":"string","description":"此次调用中使用的父部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id"],"default":"department_id"},"sendNotification":{"description":"重置密码发送邮件和手机号选项","example":{"sendEmailNotification":true,"sendPhoneNotification":true},"allOf":[{"$ref":"#/components/schemas/SendCreateAccountNotificationDto"}]},"passwordEncryptType":{"type":"string","description":"密码加密类型，支持使用 RSA256 和国密 SM2 算法进行加密。默认为 `none` 不加密。\n- `none`: 不对密码进行加密，使用明文进行传输。\n- `rsa`: 使用 RSA256 算法对密码进行加密，需要使用 Authing 服务的 RSA 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 RSA256 公钥。\n- `sm2`: 使用 [国密 SM2 算法](https://baike.baidu.com/item/SM2/15081831) 对密码进行加密，需要使用 Authing 服务的 SM2 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 SM2 公钥。\n  ","enum":["sm2","rsa","none"],"example":"none","default":"none"}}},"CreateUserReqDto":{"type":"object","properties":{"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated","default":"Activated"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"gender":{"type":"string","description":"性别","enum":["M","F","U"],"example":"M","default":"U"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":""},"profile":{"type":"string","description":"Preferred Username","example":""},"preferredUsername":{"type":"string","description":"Preferred Username","example":""},"website":{"type":"string","description":"用户个人网页","example":""},"zoneinfo":{"type":"string","description":"用户时区信息","example":""},"locale":{"type":"string","description":"Locale","example":""},"formatted":{"type":"string","description":"标准的完整地址","example":""},"region":{"type":"string","description":"用户所在区域","example":""},"password":{"type":"string","description":"用户密码。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"oqw5bhVmlDwF5qqeVA645bICyMVfFaV3sf3ZTrk5Npcm5dTOmBVo1anyZ5JLfHAz/P45r0QTPo8xS1YdKxIrshx4Ju+g04s9SQqW30ebdVdqcOntIJGAXU6arrkPvfcRFV3ZVTwBdgdRWHMkr5sTcnGNYdgL67P9/jHnzltkLbY="},"salt":{"type":"string","description":"加密用户密码的盐","example":"dgisaeieruur"},"tenantIds":{"description":"租户 ID","type":"array","items":{"type":"string"}},"otp":{"description":"用户的 OTP 验证器","allOf":[{"$ref":"#/components/schemas/CreateUserOtpDto"}]},"departmentIds":{"description":"用户所属部门 ID 列表","example":["624d930c3xxxx5c08dd4986e","624d93102xxxx012f33cd2fe"],"type":"array","items":{"type":"string"}},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}},"identities":{"description":"第三方身份源（建议调用绑定接口进行绑定）","example":{"extIdpId":"6076bacxxxxxxxxd80d993b5","provider":"wechat","type":"openid","userIdInIdp":"oj7Nq05R-RRaqak0_YlMLnnIwsvg"},"type":"array","items":{"$ref":"#/components/schemas/CreateIdentityDto"}},"options":{"description":"可选参数","allOf":[{"$ref":"#/components/schemas/CreateUserOptionsDto"}]}}},"CreateUserInfoDto":{"type":"object","properties":{"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated","default":"Activated"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"gender":{"type":"string","description":"性别","enum":["M","F","U"],"example":"M","default":"U"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":""},"profile":{"type":"string","description":"Preferred Username","example":""},"preferredUsername":{"type":"string","description":"Preferred Username","example":""},"website":{"type":"string","description":"用户个人网页","example":""},"zoneinfo":{"type":"string","description":"用户时区信息","example":""},"locale":{"type":"string","description":"Locale","example":""},"formatted":{"type":"string","description":"标准的完整地址","example":""},"region":{"type":"string","description":"用户所在区域","example":""},"password":{"type":"string","description":"用户密码。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"oqw5bhVmlDwF5qqeVA645bICyMVfFaV3sf3ZTrk5Npcm5dTOmBVo1anyZ5JLfHAz/P45r0QTPo8xS1YdKxIrshx4Ju+g04s9SQqW30ebdVdqcOntIJGAXU6arrkPvfcRFV3ZVTwBdgdRWHMkr5sTcnGNYdgL67P9/jHnzltkLbY="},"salt":{"type":"string","description":"加密用户密码的盐","example":"dgisaeieruur"},"tenantIds":{"description":"租户 ID","type":"array","items":{"type":"string"}},"otp":{"description":"用户的 OTP 验证器","allOf":[{"$ref":"#/components/schemas/CreateUserOtpDto"}]},"departmentIds":{"description":"用户所属部门 ID 列表","example":["624d930c3xxxx5c08dd4986e","624d93102xxxx012f33cd2fe"],"type":"array","items":{"type":"string"}},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}},"identities":{"description":"第三方身份源（建议调用绑定接口进行绑定）","example":{"extIdpId":"6076bacxxxxxxxxd80d993b5","provider":"wechat","type":"openid","userIdInIdp":"oj7Nq05R-RRaqak0_YlMLnnIwsvg"},"type":"array","items":{"$ref":"#/components/schemas/CreateIdentityDto"}}}},"CreateUserBatchReqDto":{"type":"object","properties":{"list":{"description":"用户列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/CreateUserInfoDto"}},"options":{"description":"可选参数","allOf":[{"$ref":"#/components/schemas/CreateUserOptionsDto"}]}},"required":["list"]},"SendResetPasswordNotificationDto":{"type":"object","properties":{"sendDefaultEmailNotification":{"type":"boolean","description":"重置密码之后，是否发送用户默认邮件通知","default":false,"example":false},"sendDefaultPhoneNotification":{"type":"boolean","description":"重置密码之后，是否发送用户默认短信通知","default":false,"example":false},"inputSendEmailNotification":{"type":"string","description":"当用户密码修改之后，输入发送邮箱","example":"test@example.com"},"inputSendPhoneNotification":{"type":"string","description":"当用户密码修改之后，输入发送手机号","example":"183xxxx1234"},"appId":{"type":"string","description":"发送登录地址时，指定的应用 id，会将此应用的登录地址发送给用户的邮箱或者手机号。默认为用户池应用面板的登录地址。","example":"appid1"}}},"UpdateUserOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity"],"example":"user_id","default":"user_id"},"resetPasswordOnNextLogin":{"type":"boolean","description":"下次登录要求重置密码","default":false},"passwordEncryptType":{"type":"string","description":"密码加密类型，支持使用 RSA256 和国密 SM2 算法进行加密。默认为 `none` 不加密。\n- `none`: 不对密码进行加密，使用明文进行传输。\n- `rsa`: 使用 RSA256 算法对密码进行加密，需要使用 Authing 服务的 RSA 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 RSA256 公钥。\n- `sm2`: 使用 [国密 SM2 算法](https://baike.baidu.com/item/SM2/15081831) 对密码进行加密，需要使用 Authing 服务的 SM2 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 SM2 公钥。\n  ","enum":["sm2","rsa","none"],"example":"none","default":"none"},"autoGeneratePassword":{"type":"boolean","description":"是否自动生成密码","default":false},"sendPasswordResetedNotification":{"description":"重置密码发送邮件和手机号选项","example":{"sendDefaultEmailNotification":false,"sendDefaultPhoneNotification":false,"inputSendEmailNotification":"test@example.com","inputSendPhoneNotification":"136xxxx1234","appId":"app1"},"allOf":[{"$ref":"#/components/schemas/SendResetPasswordNotificationDto"}]}}},"UpdateUserReqDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated","default":"Activated"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"gender":{"type":"string","description":"性别","enum":["M","F","U"],"example":"M","default":"U"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"password":{"type":"string","description":"用户密码。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"oqw5bhVmlDwF5qqeVA645bICyMVfFaV3sf3ZTrk5Npcm5dTOmBVo1anyZ5JLfHAz/P45r0QTPo8xS1YdKxIrshx4Ju+g04s9SQqW30ebdVdqcOntIJGAXU6arrkPvfcRFV3ZVTwBdgdRWHMkr5sTcnGNYdgL67P9/jHnzltkLbY="},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":""},"profile":{"type":"string","description":"Preferred Username","example":""},"preferredUsername":{"type":"string","description":"Preferred Username","example":""},"website":{"type":"string","description":"用户个人网页","example":""},"zoneinfo":{"type":"string","description":"用户时区信息","example":""},"locale":{"type":"string","description":"Locale","example":""},"formatted":{"type":"string","description":"标准的完整地址","example":""},"region":{"type":"string","description":"用户所在区域","example":""},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}},"options":{"description":"可选参数","allOf":[{"$ref":"#/components/schemas/UpdateUserOptionsDto"}]}},"required":["userId"]},"UpdateUserInfoDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated","default":"Activated"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"gender":{"type":"string","description":"性别","enum":["M","F","U"],"example":"M","default":"U"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"password":{"type":"string","description":"用户密码。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"oqw5bhVmlDwF5qqeVA645bICyMVfFaV3sf3ZTrk5Npcm5dTOmBVo1anyZ5JLfHAz/P45r0QTPo8xS1YdKxIrshx4Ju+g04s9SQqW30ebdVdqcOntIJGAXU6arrkPvfcRFV3ZVTwBdgdRWHMkr5sTcnGNYdgL67P9/jHnzltkLbY="},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":""},"profile":{"type":"string","description":"Preferred Username","example":""},"preferredUsername":{"type":"string","description":"Preferred Username","example":""},"website":{"type":"string","description":"用户个人网页","example":""},"zoneinfo":{"type":"string","description":"用户时区信息","example":""},"locale":{"type":"string","description":"Locale","example":""},"formatted":{"type":"string","description":"标准的完整地址","example":""},"region":{"type":"string","description":"用户所在区域","example":""},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}}},"required":["userId"]},"UpdateUserBatchOptionsDto":{"type":"object","properties":{"resetPasswordOnNextLogin":{"type":"boolean","description":"下次登录要求重置密码","default":false},"passwordEncryptType":{"type":"string","description":"密码加密类型，支持使用 RSA256 和国密 SM2 算法进行加密。默认为 `none` 不加密。\n- `none`: 不对密码进行加密，使用明文进行传输。\n- `rsa`: 使用 RSA256 算法对密码进行加密，需要使用 Authing 服务的 RSA 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 RSA256 公钥。\n- `sm2`: 使用 [国密 SM2 算法](https://baike.baidu.com/item/SM2/15081831) 对密码进行加密，需要使用 Authing 服务的 SM2 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 SM2 公钥。\n  ","enum":["sm2","rsa","none"],"example":"none","default":"none"},"autoGeneratePassword":{"type":"boolean","description":"是否自动生成密码","default":false},"sendPasswordResetedNotification":{"description":"重置密码发送邮件和手机号选项","example":{"sendDefaultEmailNotification":false,"sendDefaultPhoneNotification":false,"inputSendEmailNotification":"test@example.com","inputSendPhoneNotification":"136xxxx1234","appId":"app1"},"allOf":[{"$ref":"#/components/schemas/SendResetPasswordNotificationDto"}]}}},"UpdateUserBatchReqDto":{"type":"object","properties":{"list":{"description":"用户列表","type":"array","items":{"$ref":"#/components/schemas/UpdateUserInfoDto"}},"options":{"description":"可选参数","allOf":[{"$ref":"#/components/schemas/UpdateUserBatchOptionsDto"}]}},"required":["list"]},"DeleteUsersBatchOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity"],"example":"user_id","default":"user_id"}}},"DeleteUsersBatchDto":{"type":"object","properties":{"userIds":{"description":"用户 ID 列表","minItems":1,"maxItems":50,"example":["userId1","userId2"],"type":"array","items":{"type":"string"}},"options":{"description":"可选参数","allOf":[{"$ref":"#/components/schemas/DeleteUsersBatchOptionsDto"}]}},"required":["userIds"]},"IsSuccessDto":{"type":"object","properties":{"success":{"type":"boolean","description":"操作是否成功","example":true}},"required":["success"]},"IsSuccessRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"操作是否成功","allOf":[{"$ref":"#/components/schemas/IsSuccessDto"}]}},"required":["statusCode","message","data"]},"IdentityListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/IdentityDto"}}},"required":["statusCode","message","data"]},"RoleDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组内角色的唯一标识符","example":"role1"},"description":{"type":"string","description":"角色描述","example":"this is description"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"default"}},"required":["code","description","namespace"]},"RolePagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/RoleDto"}}},"required":["totalCount","list"]},"RolePaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RolePagingDto"}]}},"required":["statusCode","message","data"]},"PrincipalAuthenticationInfoDto":{"type":"object","properties":{"authenticated":{"type":"boolean","description":"是否进行认证","example":true},"principalType":{"type":"string","description":"用户 ID","example":"认证主体类型，P 代表个人，E 代表企业"},"principalCode":{"type":"string","description":"认证主体证件号码","example":"6229c4deb3e4d8a20b6021ff"},"principalName":{"type":"string","description":"认证主体名称","example":"ss"},"authenticatedAt":{"type":"string","description":"认证时间，标准时间字符串","example":"2022-04-05T10:23:50.631Z"}},"required":["authenticated","principalType","principalCode","principalName","authenticatedAt"]},"PrincipalAuthenticationInfoPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/PrincipalAuthenticationInfoDto"}}},"required":["totalCount","list"]},"PrincipalAuthenticationInfoPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PrincipalAuthenticationInfoPagingDto"}]}},"required":["statusCode","message","data"]},"ResetUserPrincipalAuthenticationInfoOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity"],"example":"user_id","default":"user_id"}}},"ResetUserPrincipalAuthenticationInfoDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9"},"options":{"description":"可选参数","allOf":[{"$ref":"#/components/schemas/ResetUserPrincipalAuthenticationInfoOptionsDto"}]}},"required":["userId"]},"LangUnit":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否已开启。若开启，且控制台选择该语言，则展示该内容。（默认关闭）","example":false},"value":{"type":"string","description":"多语言内容","example":false}},"required":["enabled","value"]},"LangObject":{"type":"object","properties":{"zh-CN":{"description":"多语言的中文内容","example":{"enabled":false,"value":"中文"},"allOf":[{"$ref":"#/components/schemas/LangUnit"}]},"en-US":{"description":"多语言的英文内容","example":{"enabled":false,"value":"English"},"allOf":[{"$ref":"#/components/schemas/LangUnit"}]},"zh-TW":{"description":"多语言的繁体中文内容","example":{"enabled":false,"value":"繁體中文"},"allOf":[{"$ref":"#/components/schemas/LangUnit"}]},"ja-JP":{"description":"多语言的日语内容","example":{"enabled":false,"value":"日本語"},"allOf":[{"$ref":"#/components/schemas/LangUnit"}]}},"required":["zh-CN","en-US","zh-TW","ja-JP"]},"DepartmentI18nDto":{"type":"object","properties":{"name":{"description":"支持多语言的字段","example":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}},"allOf":[{"$ref":"#/components/schemas/LangObject"}]}},"required":["name"]},"UserDepartmentRespDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 Code（organizationCode）","example":"steamory"},"departmentId":{"type":"string","description":"部门 ID","example":"60b49eb83fd80adb96f26e68"},"createdAt":{"format":"date-time","type":"string","description":"部门创建时间","example":"2022-07-03T02:20:30.000Z"},"name":{"type":"string","description":"部门名称","example":"dd8d7stf44"},"description":{"type":"string","description":"部门描述","example":"dd8d7stf44"},"openDepartmentId":{"type":"string","description":"自定义部门 ID，用于存储自定义的 ID","example":"ou_7dab8a3d3cdccxxxxxx777c7ad535d62"},"isLeader":{"type":"boolean","description":"是否是部门 Leader","example":true},"code":{"type":"string","description":"部门识别码","example":"6229c4deb3e4d8a20b6021ff"},"isMainDepartment":{"type":"boolean","description":"是否是主部门","example":true},"joinedAt":{"format":"date-time","type":"string","description":"加入部门时间","example":"2022-07-03T02:20:30.000Z"},"isVirtualNode":{"type":"boolean","description":"是否是虚拟部门","example":false},"i18n":{"description":"多语言设置","example":{"name":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/DepartmentI18nDto"}]},"customData":{"type":"object","description":"部门的扩展字段数据","example":{"icon":"https://example.com/logo"}}},"required":["organizationCode","departmentId","createdAt","name","description","isLeader","code","isMainDepartment","joinedAt","isVirtualNode"]},"UserDepartmentPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/UserDepartmentRespDto"}}},"required":["totalCount","list"]},"UserDepartmentPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserDepartmentPagingDto"}]}},"required":["statusCode","message","data"]},"SetUserDepartmentDto":{"type":"object","properties":{"departmentId":{"type":"string","description":"部门 id","example":"60b49eb83fd80adb96f26e68"},"isLeader":{"type":"boolean","description":"是否是部门 leader","example":true},"isMainDepartment":{"type":"boolean","description":"是否是主部门","example":true}},"required":["departmentId"]},"SetUserDepartmentsOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity"],"example":"user_id","default":"user_id"}}},"SetUserDepartmentsDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9"},"departments":{"description":"部门信息","minItems":1,"maxItems":10,"example":[{"departmentId":"60b49eb83fd80adb96f26e68","isLeader":true,"isMainDepartment":true}],"type":"array","items":{"$ref":"#/components/schemas/SetUserDepartmentDto"}},"options":{"description":"可选参数","allOf":[{"$ref":"#/components/schemas/SetUserDepartmentsOptionsDto"}]}},"required":["userId","departments"]},"ResGroupDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"name":{"type":"string","description":"分组名称","example":"开发者"},"description":{"type":"string","description":"分组描述","example":"描述内容"}},"required":["code","name","description"]},"GroupPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/ResGroupDto"}}},"required":["totalCount","list"]},"GroupPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GroupPagingDto"}]}},"required":["statusCode","message","data"]},"UserMfaRespDto":{"type":"object","properties":{"totpStatus":{"type":"string","description":"是否绑定了 TOTP，可选值 enabled, disabled","example":true},"faceMfaStatus":{"type":"string","description":"是否绑定了人脸 MFA，可选值 enabled, disabled","example":true}},"required":["totpStatus","faceMfaStatus"]},"UserMfaSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserMfaRespDto"}]}},"required":["statusCode","message","data"]},"ListArchivedUsersRespDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID","example":"userId"},"archivedAt":{"format":"date-time","type":"string","description":"归档时间","example":"2022-07-03T02:20:30.000Z"}},"required":["userId","archivedAt"]},"ArchivedUsersListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/ListArchivedUsersRespDto"}}},"required":["totalCount","list"]},"ListArchivedUsersSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/ArchivedUsersListPagingDto"}]}},"required":["statusCode","message","data"]},"KickUsersOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity"],"example":"user_id","default":"user_id"}}},"KickUsersDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID"},"appIds":{"description":"APP ID 列表","minItems":1,"maxItems":50,"example":["62188e71cxxxx3075289c580"],"type":"array","items":{"type":"string"}},"options":{"description":"可选参数","example":{"userIdType":"user_id"},"allOf":[{"$ref":"#/components/schemas/KickUsersOptionsDto"}]}},"required":["userId","appIds"]},"IsUserExistsReqDto":{"type":"object","properties":{"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"}}},"IsUserExistsDto":{"type":"object","properties":{"exists":{"type":"boolean","description":"用户是否存在","example":true}},"required":["exists"]},"IsUserExistsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/IsUserExistsDto"}]}},"required":["statusCode","message","data"]},"AppDto":{"type":"object","properties":{"appId":{"type":"string","description":"App ID","example":"app1"},"appName":{"type":"string","description":"App 名称","example":"App Name"},"appLogo":{"type":"string","description":"App Logo","example":"https://example.com/logo.png"},"appLoginUrl":{"type":"string","description":"App 登录地址","example":"https://example.com/login"},"appDefaultLoginStrategy":{"type":"string","description":"App 默认的登录策略","example":"ALLOW_ALL","enum":["ALLOW_ALL","DENY_ALL"]}},"required":["appId","appName","appLogo","appLoginUrl","appDefaultLoginStrategy"]},"AppListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/AppDto"}}},"required":["statusCode","message","data"]},"HasRoleRolesDto":{"type":"object","properties":{"namespace":{"type":"string","description":"所属权限分组的 code","example":"default"},"code":{"type":"string","description":"角色 code","example":"admin"}},"required":["code"]},"HasAnyRoleOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity"],"example":"user_id","default":"user_id"}}},"HasAnyRoleReqDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9"},"roles":{"description":"角色列表","type":"array","items":{"$ref":"#/components/schemas/HasRoleRolesDto"}},"options":{"description":"可选参数","allOf":[{"$ref":"#/components/schemas/HasAnyRoleOptionsDto"}]}},"required":["userId","roles"]},"HasAnyRoleDto":{"type":"object","properties":{"hasAnyRole":{"type":"boolean","description":"是否拥有其中某一个角色","example":true}},"required":["hasAnyRole"]},"HasAnyRoleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/HasAnyRoleDto"}]}},"required":["statusCode","message","data"]},"UserLoginHistoryDto":{"type":"object","properties":{"appId":{"type":"string","description":"App ID","example":"app1"},"appName":{"type":"string","description":"App 名称","example":"App Name"},"appLogo":{"type":"string","description":"App Logo","example":"https://example.com/logo.png"},"appLoginUrl":{"type":"string","description":"App 登录地址","example":"https://example.com/login"},"clientIp":{"type":"string","description":"客户端 IP","example":"127.0.0.1"},"userAgent":{"type":"string","description":"登录时使用的 user agent","example":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36"},"time":{"format":"date-time","type":"string","description":"登录时间","example":""}},"required":["appId","appName","appLogo","appLoginUrl","clientIp","time"]},"UserLoginHistoryPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/UserLoginHistoryDto"}}},"required":["totalCount","list"]},"UserLoginHistoryPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserLoginHistoryPagingDto"}]}},"required":["statusCode","message","data"]},"UserLoggedInAppsDto":{"type":"object","properties":{"appId":{"type":"string","description":"App ID","example":"app1"},"appName":{"type":"string","description":"App 名称","example":"App Name"},"appLogo":{"type":"string","description":"App Logo","example":"https://example.com/logo.png"},"appLoginUrl":{"type":"string","description":"App 登录地址","example":"https://example.com/login"}},"required":["appId","appName","appLogo","appLoginUrl"]},"UserLoggedInAppsListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/UserLoggedInAppsDto"}}},"required":["statusCode","message","data"]},"UserLoggedInIdentitiesDto":{"type":"object","properties":{"identityId":{"type":"string","description":"Identity ID","example":"62299d8b866d2dab79a89dc4"},"idpName":{"type":"string","description":"身份源名称","example":"微信"},"idpNameEn":{"type":"string","description":"Identity provider name","example":"wechat"},"idpLogo":{"type":"string","description":"身份源 logo","example":"https://example.com/logo.png"}},"required":["identityId","idpName","idpNameEn","idpLogo"]},"UserLoggedInIdentitiesRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/UserLoggedInIdentitiesDto"}}},"required":["statusCode","message","data"]},"ResignUserReqDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9"},"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity"],"example":"user_id","default":"user_id"}},"required":["userId"]},"ResignUserDataDto":{"type":"object","properties":{"success":{"type":"boolean","description":"操作是否成功","example":true}},"required":["success"]},"ResignUserRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ResignUserDataDto"}]}},"required":["statusCode","message","data"]},"ResignUserBatchReqDto":{"type":"object","properties":{"userIds":{"description":"用户 ID 数组","minItems":1,"maxItems":50,"example":["6229ffaxxxxxxxxcade3e3d9"],"type":"array","items":{"type":"string"}},"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity"],"example":"user_id","default":"user_id"}},"required":["userIds"]},"PolicyCondition":{"type":"object","properties":{"param":{"type":"string","description":"Condition Param","example":"AppId","enum":["UserPoolId","AppId","RequestFrom","UserId","UserArn","CurrentTime","EpochTime","SourceIp","User","MultiFactorAuthPresent","MultiFactorAuthAge","UserAgent","Referer","Device","OS","Country","Province","City","DeviceChanged","DeviceUntrusted","ProxyUntrusted","LoggedInApps","Namespace"]},"operator":{"type":"string","description":"Condition Operator","example":"StringEquals","enum":["Bool","DateEquals","DateNotEquals","DateLessThan","DateLessThanEquals","DateGreaterThan","DateGreaterThanEquals","IpAddress","NotIpAddress","NumericEquals","NumericNotEquals","NumericLessThan","NumericLessThanEquals","NumericGreaterThan","NumericGreaterThanEquals","StringEquals","StringNotEquals","StringEqualsIgnoreCase","StringNotEqualsIgnoreCase","StringLike","StringNotLike","ListContains"]},"value":{"type":"string","description":"Condition Value","example":"1"}},"required":["param","operator","value"]},"AuthorizedResourceDto":{"type":"object","properties":{"resourceCode":{"type":"string","description":"资源描述符","example":"ecs:1"},"description":{"type":"string","description":"资源描述信息","example":"服务器"},"condition":{"description":"策略 Condition","type":"array","items":{"$ref":"#/components/schemas/PolicyCondition"}},"resourceType":{"type":"string","description":"资源类型","example":"API","default":null,"enum":["DATA","API","MENU","BUTTON","UI"]},"apiIdentifier":{"type":"string","description":"API URL","example":"/api/v1/example","default":null},"actions":{"description":"授权的操作列表","example":["ecs:Start","ecs:Stop"],"type":"array","items":{"type":"string"}},"effect":{"type":"string","description":"允许还是拒绝","example":"ALLOW","default":"ALLOW","enum":["ALLOW","DENY"]}},"required":["resourceCode","resourceType","apiIdentifier","actions","effect"]},"AuthorizedResourcePagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/AuthorizedResourceDto"}}},"required":["totalCount","list"]},"AuthorizedResourcePaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/AuthorizedResourcePagingDto"}]}},"required":["statusCode","message","data"]},"CheckSessionStatusDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9"},"appId":{"type":"string","description":"App ID","example":"app1"}},"required":["userId","appId"]},"CheckSessionStatusDataDto":{"type":"object","properties":{"active":{"type":"boolean","description":"是否具有登录态","example":true}},"required":["active"]},"CheckSessionStatusRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CheckSessionStatusDataDto"}]}},"required":["statusCode","message","data"]},"ImportOtpItemDataDto":{"type":"object","properties":{"secret":{"type":"string","description":"OTP 密钥","example":"HZ2F6J3AGNAVSOTV"},"recoveryCode":{"type":"string","description":"OTP Recovery Code","example":"b471-8ec0-874a-087f-bccb-cd54"}},"required":["secret"]},"ImportOtpItemDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID","example":"xxxx"},"otp":{"description":"OTP 数据","allOf":[{"$ref":"#/components/schemas/ImportOtpItemDataDto"}]}},"required":["userId","otp"]},"ImportOtpReqDto":{"type":"object","properties":{"list":{"description":"参数列表","type":"array","items":{"$ref":"#/components/schemas/ImportOtpItemDto"}}},"required":["list"]},"CommonResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"}},"required":["statusCode","message"]},"OrganizationNameI18nDto":{"type":"object","properties":{"organizationName":{"description":"支持多语言的字段","example":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}},"allOf":[{"$ref":"#/components/schemas/LangObject"}]}},"required":["organizationName"]},"OrganizationDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"organizationName":{"type":"string","description":"组织名称","example":"蒸汽记忆"},"description":{"type":"string","description":"组织描述信息","example":"组织描述信息"},"createdAt":{"type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"type":"string","description":"修改时间","example":"2022-07-03T02:20:30.000Z"},"departmentId":{"type":"string","description":"根节点 ID","example":"60b49eb83fd80adb96f26e68"},"openDepartmentId":{"type":"string","description":"根节点自定义 ID","example":"60b49eb83fd80adb96f26e68"},"hasChildren":{"type":"boolean","description":"是否包含子节点","example":true},"leaderUserIds":{"description":"部门负责人 ID","example":["60b49eb83fd80adb96f26e68"],"type":"array","items":{"type":"string"}},"membersCount":{"type":"number","description":"部门人数","example":150},"isVirtualNode":{"type":"boolean","description":"是否是虚拟部门","example":false},"i18n":{"description":"多语言设置","example":{"organizationName":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/OrganizationNameI18nDto"}]},"customData":{"type":"object","description":"部门的扩展字段数据","example":{"icon":"https://example.com/logo"}}},"required":["organizationCode","organizationName","departmentId","hasChildren","membersCount","isVirtualNode"]},"OrganizationSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/OrganizationDto"}]}},"required":["statusCode","message","data"]},"OrganizationListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/OrganizationDto"}}},"required":["statusCode","message","data"]},"OrganizationPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/OrganizationDto"}}},"required":["totalCount","list"]},"OrganizationPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/OrganizationPagingDto"}]}},"required":["statusCode","message","data"]},"CreateOrganizationReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"organizationName":{"type":"string","description":"组织名称","example":"蒸汽记忆"},"description":{"type":"string","description":"组织描述信息","example":"组织描述信息"},"openDepartmentId":{"type":"string","description":"根节点自定义 ID","example":"60b49eb83fd80adb96f26e68"},"i18n":{"description":"多语言设置","example":{"organizationName":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/OrganizationNameI18nDto"}]}},"required":["organizationCode","organizationName"]},"UpdateOrganizationReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"description":{"type":"string","description":"部门描述","example":"技术研发部门"},"openDepartmentId":{"type":"string","description":"根节点自定义 ID","example":"60b49eb83fd80adb96f26e68"},"leaderUserIds":{"description":"部门负责人 ID","example":["60b49eb83fd80adb96f26e68"],"type":"array","items":{"type":"string"}},"i18n":{"description":"多语言设置","example":{"organizationName":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/OrganizationNameI18nDto"}]},"organizationNewCode":{"type":"string","description":"新组织 code","example":"steamory2"},"organizationName":{"type":"string","description":"组织名称","example":"蒸汽记忆"}},"required":["organizationCode"]},"DeleteOrganizationReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 code","example":"steamory"}},"required":["organizationCode"]},"DepartmentDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 Code（organizationCode）","example":"steamory"},"departmentId":{"type":"string","description":"部门系统 ID（为 Authing 系统自动生成，不可修改）","example":"60b49eb83fd80adb96f26e68"},"createdAt":{"format":"date-time","type":"string","description":"部门创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"type":"string","description":"修改时间","example":"2022-07-03T02:20:30.000Z"},"openDepartmentId":{"type":"string","description":"自定义部门 ID，用于存储自定义的 ID","example":"ou_7dab8a3d3cdccxxxxxx777c7ad535d62"},"name":{"type":"string","description":"部门名称","example":"开发部"},"leaderUserIds":{"description":"部门负责人 ID","example":["60b49eb83fd80adb96f26e68"],"type":"array","items":{"type":"string"}},"description":{"type":"string","description":"部门描述","example":"技术研发部门"},"parentDepartmentId":{"type":"string","description":"父部门 id","example":"6229c4deb3e4d8a20b6021ff"},"code":{"type":"string","description":"部门识别码","example":"6229c4deb3e4d8a20b6021ff"},"membersCount":{"type":"number","description":"部门人数（仅包含直属成员）","example":11},"hasChildren":{"type":"boolean","description":"是否包含子部门","example":true},"isVirtualNode":{"type":"boolean","description":"是否是虚拟部门","example":false},"i18n":{"description":"多语言设置","example":{"name":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/DepartmentI18nDto"}]},"customData":{"type":"object","description":"部门的扩展字段数据","example":{"icon":"https://example.com/logo"}}},"required":["organizationCode","departmentId","createdAt","name","parentDepartmentId","membersCount","hasChildren"]},"DepartmentSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/DepartmentDto"}]}},"required":["statusCode","message","data"]},"CreateDepartmentReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 Code（organizationCode）","example":"steamory"},"openDepartmentId":{"type":"string","description":"自定义部门 ID，用于存储自定义的 ID","example":"ou_7dab8a3d3cdccxxxxxx777c7ad535d62"},"name":{"type":"string","description":"部门名称","example":"开发部"},"description":{"type":"string","description":"部门描述","example":"技术研发部门"},"parentDepartmentId":{"type":"string","description":"父部门 id","example":"6229c4deb3e4d8a20b6021ff"},"code":{"type":"string","description":"部门识别码","example":"6229c4deb3e4d8a20b6021ff"},"isVirtualNode":{"type":"boolean","description":"是否是虚拟部门","example":false},"i18n":{"description":"多语言设置","example":{"name":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/DepartmentI18nDto"}]},"customData":{"type":"object","description":"部门的扩展字段数据","example":{"icon":"https://example.com/logo"}},"departmentIdType":{"type":"string","description":"此次调用中使用的父部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id"],"default":"department_id"}},"required":["organizationCode","name","parentDepartmentId"]},"UpdateDepartmentReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 Code（organizationCode）","example":"steamory"},"departmentId":{"type":"string","description":"部门系统 ID（为 Authing 系统自动生成，不可修改）","example":"60b49eb83fd80adb96f26e68"},"leaderUserIds":{"description":"部门负责人 ID","example":["60b49eb83fd80adb96f26e68"],"type":"array","items":{"type":"string"}},"description":{"type":"string","description":"部门描述","example":"技术研发部门"},"code":{"type":"string","description":"部门识别码","example":"6229c4deb3e4d8a20b6021ff"},"i18n":{"description":"多语言设置","example":{"name":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/DepartmentI18nDto"}]},"name":{"type":"string","description":"部门名称","example":"开发部"},"departmentIdType":{"type":"string","description":"此次调用中使用的部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id"],"default":"department_id"},"parentDepartmentId":{"type":"string","description":"父部门 ID","example":"6229c4deb3e4d8a20b6021ff"},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"icon":"https://example.com/icon"}}},"required":["organizationCode","departmentId"]},"DeleteDepartmentReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 Code（organizationCode）","example":"steamory"},"departmentId":{"type":"string","description":"部门系统 ID（为 Authing 系统自动生成，不可修改）","example":"60b49eb83fd80adb96f26e68"},"departmentIdType":{"type":"string","description":"此次调用中使用的部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id"],"default":"department_id"}},"required":["organizationCode","departmentId"]},"SearchDepartmentsReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"keywords":{"type":"string","description":"搜索关键词，如组织名称等","example":"Authing"},"withCustomData":{"type":"boolean","description":"是否获取自定义数据","default":false,"example":true}},"required":["organizationCode","keywords"]},"DepartmentListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/DepartmentDto"}}},"required":["statusCode","message","data"]},"DepartmentPagingDto":{"type":"object","properties":{"totalCount":{"type":"boolean","description":"总数","example":10},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/DepartmentDto"}}},"required":["totalCount","list"]},"DepartmentPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/DepartmentPagingDto"}]}},"required":["statusCode","message","data"]},"UserIdListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"type":"string"}}},"required":["statusCode","message","data"]},"AddDepartmentMembersReqDto":{"type":"object","properties":{"departmentId":{"type":"string","description":"部门系统 ID（为 Authing 系统自动生成，不可修改）","example":"60b49eb83fd80adb96f26e68"},"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"departmentIdType":{"type":"string","description":"此次调用中使用的部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id"],"default":"department_id"},"userIds":{"description":"用户 ID 列表","example":["623c20b2a062aaaaf41b17da"],"type":"array","items":{"type":"string"}}},"required":["departmentId","organizationCode","userIds"]},"RemoveDepartmentMembersReqDto":{"type":"object","properties":{"departmentId":{"type":"string","description":"部门系统 ID（为 Authing 系统自动生成，不可修改）","example":"60b49eb83fd80adb96f26e68"},"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"departmentIdType":{"type":"string","description":"此次调用中使用的部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id"],"default":"department_id"},"userIds":{"description":"用户 ID 列表","example":["623c20b2a062aaaaf41b17da"],"type":"array","items":{"type":"string"}}},"required":["departmentId","organizationCode","userIds"]},"IsUserInDepartmentDataDto":{"type":"object","properties":{"inDepartment":{"type":"boolean","description":"是否在此部门内","example":true}},"required":["inDepartment"]},"IsUserInDepartmentRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/IsUserInDepartmentDataDto"}]}},"required":["statusCode","message","data"]},"GroupDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"name":{"type":"string","description":"分组名称","example":"开发者"},"description":{"type":"string","description":"分组描述","example":"描述内容"}},"required":["code","name","description"]},"GroupSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GroupDto"}]}},"required":["statusCode","message","data"]},"CreateGroupReqDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"name":{"type":"string","description":"分组名称","example":"开发者"},"description":{"type":"string","description":"分组描述","example":"描述内容"}},"required":["code","name","description"]},"CreateGroupBatchReqDto":{"type":"object","properties":{"list":{"description":"批量分组","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/CreateGroupReqDto"}}},"required":["list"]},"GroupListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/GroupDto"}}},"required":["statusCode","message","data"]},"UpdateGroupReqDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"description":{"type":"string","description":"分组描述","example":"描述内容"},"name":{"type":"string","description":"分组名称","example":"开发者"},"newCode":{"type":"string","description":"分组新的 code","example":"developer"}},"required":["code","description"]},"DeleteGroupsReqDto":{"type":"object","properties":{"codeList":{"description":"分组 code 列表","minItems":1,"maxItems":50,"example":["code1"],"type":"array","items":{"type":"string"}}},"required":["codeList"]},"AddGroupMembersReqDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"userIds":{"description":"用户 ID 数组","minItems":1,"maxItems":50,"example":["6229ffaxxxxxxxxcade3e3d9"],"type":"array","items":{"type":"string"}}},"required":["code","userIds"]},"RemoveGroupMembersReqDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"userIds":{"description":"用户 ID 数组","minItems":1,"maxItems":50,"example":["6229ffaxxxxxxxxcade3e3d9"],"type":"array","items":{"type":"string"}}},"required":["code","userIds"]},"AuthorizedResourceListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/AuthorizedResourceDto"}}},"required":["statusCode","message","data"]},"RoleSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RoleDto"}]}},"required":["statusCode","message","data"]},"TargetDto":{"type":"object","properties":{"targetType":{"type":"string","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"DEPARTMENT"},"targetIdentifier":{"type":"string","description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","example":"60b49eb83fd80adb96f26e68"}},"required":["targetType","targetIdentifier"]},"AssignRoleDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组内角色的唯一标识符","example":"code1"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"60b49eb83fd80adb96f26e68"},"targets":{"description":"目标对象","minItems":1,"maxItems":50,"example":[{"targetIdentifier":"60b49eb83fd80adb96f26e68","targetType":"USER"}],"type":"array","items":{"$ref":"#/components/schemas/TargetDto"}}},"required":["code","targets"]},"RevokeRoleDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组内角色的唯一标识符","example":"code1"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"default"},"targets":{"description":"移除角色的目标","minItems":1,"maxItems":50,"example":[{"targetIdentifier":"60b49eb83fd80adb96f26e68","targetType":"USER"}],"type":"array","items":{"$ref":"#/components/schemas/TargetDto"}}},"required":["code","targets"]},"RoleAuthorizedResourcesRespDto":{"type":"object","properties":{"resourceCode":{"type":"string","description":"资源描述符","example":"ecs"},"resourceType":{"type":"string","description":"资源类型","enum":["DATA","API","MENU","BUTTON","UI"],"example":"DATA"},"actions":{"description":"被授权的操作列表","example":["ecs:Start","ecs:Stop"],"type":"array","items":{"type":"string"}},"apiIdentifier":{"type":"string","description":"资源对应的 API Identifier","example":"dd8d7stf44"}},"required":["resourceCode","resourceType","actions","apiIdentifier"]},"RoleAuthorizedResourcePagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据","type":"array","items":{"$ref":"#/components/schemas/RoleAuthorizedResourcesRespDto"}}},"required":["totalCount","list"]},"RoleAuthorizedResourcePaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/RoleAuthorizedResourcePagingDto"}]}},"required":["statusCode","message","data"]},"RoleDepartmentRespDto":{"type":"object","properties":{"id":{"type":"string","description":"部门 ID","example":"60b49eb83fd80adb96f26e68"},"code":{"type":"string","description":"部门 code","example":"code"},"name":{"type":"string","description":"部门名称","example":"departmentName"},"description":{"type":"string","description":"部门描述信息","example":"dd8d7stf44"}},"required":["id","code","name","description"]},"RoleDepartmentListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据","type":"array","items":{"$ref":"#/components/schemas/RoleDepartmentRespDto"}}},"required":["totalCount","list"]},"RoleDepartmentListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/RoleDepartmentListPagingDto"}]}},"required":["statusCode","message","data"]},"CreateRoleDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组内角色的唯一标识符","example":"manager"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"default","default":"default"},"description":{"type":"string","description":"角色描述","example":"this is manager"}},"required":["code"]},"DeleteRoleDto":{"type":"object","properties":{"codeList":{"description":"角色 code 列表","example":["code1","code2"],"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}},"namespace":{"type":"string","description":"所属权限分组的 code","example":"default","default":"default"}},"required":["codeList"]},"RoleListItem":{"type":"object","properties":{"code":{"type":"string","description":"权限分组内角色的唯一标识符","example":"my-role-code"},"description":{"type":"string","description":"角色描述","example":"this is a description about the role"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"default","default":"default"}},"required":["code"]},"CreateRolesBatch":{"type":"object","properties":{"list":{"description":"角色列表","example":[{"code":"my-role-code","namespace":"default","description":"this is  description"}],"minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/RoleListItem"}}},"required":["list"]},"UpdateRoleDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组内角色的唯一标识符","example":"code1"},"newCode":{"type":"string","description":"角色新的权限分组内唯一识别码","example":"code2"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"default","default":"default"},"description":{"type":"string","description":"角色描述","example":"this is description"}},"required":["code","newCode"]},"ExtIdpDto":{"type":"object","properties":{"id":{"type":"string","description":"身份源 id","example":"60b49eb83fd80adb96f26e68"},"name":{"type":"string","description":"身份源名称","example":"default"},"logo":{"type":"string","description":"身份源的 Logo","example":"https://files.authing.co/authing-console/social-connections/wechatIdentitySource.svg"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"},"type":{"type":"string","description":"身份源类型","example":"wechat"}},"required":["id","name","logo","type"]},"ExtIdpListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/ExtIdpDto"}}},"required":["totalCount","list"]},"ExtIdpListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/ExtIdpListPagingDto"}]}},"required":["statusCode","message","data"]},"ExtIdpDetail":{"type":"object","properties":{"id":{"type":"string","description":"身份源 id","example":"60b49eb83fd80adb96f26e68"},"name":{"type":"string","description":"身份源名称","example":"default"},"logo":{"type":"string","description":"身份源的 Logo","example":"https://files.authing.co/authing-console/social-connections/wechatIdentitySource.svg"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"},"type":{"type":"string","description":"身份源类型","example":"wechat"},"connections":{"type":"object","description":"身份源的连接列表"},"autoJoin":{"type":"boolean","description":"租户场景下自动加入","example":true}},"required":["id","name","logo","type","connections","autoJoin"]},"ExtIdpDetailSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ExtIdpDetail"}]}},"required":["statusCode","message","data"]},"CreateExtIdpDto":{"type":"object","properties":{"name":{"type":"string","description":"身份源名称","example":"exampleName"},"type":{"type":"string","description":"身份源连接类型","enum":["oidc","oauth2","saml","ldap","ad","cas","azure-ad","wechat","google","qq","wechatwork","dingtalk","weibo","github","alipay","apple","baidu","lark","gitlab","twitter","facebook","slack","linkedin","yidun","qingcloud","gitee","instagram","welink"],"example":"ad"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["name","type"]},"ExtIdpSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ExtIdpDto"}]}},"required":["statusCode","message","data"]},"UpdateExtIdpDto":{"type":"object","properties":{"name":{"type":"string","description":"名称","example":"exampleName"},"id":{"type":"string","description":"身份源 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["name","id"]},"DeleteExtIdpDto":{"type":"object","properties":{"id":{"type":"string","description":"身份源 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["id"]},"CreateExtIdpConnDto":{"type":"object","properties":{"extIdpId":{"type":"string","description":"身份源连接 ID","example":"60b49eb83fd80adb96f26e68"},"type":{"type":"string","description":"身份源连接类型","enum":["oidc","oauth","saml","ldap","ad","cas","azure-ad","alipay","facebook","twitter","google:mobile","google","wechat:pc","wechat:mobile","wechat:webpage-authorization","wechatmp-qrcode","wechat:miniprogram:default","wechat:miniprogram:qrconnect","wechat:miniprogram:app-launch","github","qq","wechatwork:corp:qrconnect","wechatwork:agency:qrconnect","wechatwork:service-provider:qrconnect","wechatwork:mobile","wechatwork:agency:mobile","dingtalk","dingtalk:provider","weibo","apple","apple:web","baidu","lark-internal","lark-public","gitlab","linkedin","slack","yidun","qingcloud","gitee","instagram","welink","ad-kerberos"],"example":"ad"},"identifier":{"type":"string","description":"身份源连接标识","example":"60b49eb83fd80adb96f26e68"},"loginOnly":{"type":"boolean","description":"是否只支持登录","example":false},"logo":{"type":"string","description":"身份源图标","example":"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png"},"displayName":{"type":"string","description":"连接在登录页的显示名称","example":"登录页"},"fields":{"type":"object","description":"连接的自定义配置信息","example":{"clientId":"身份源上的 clientId","clientSecret":"身份源上的 clientSecret"}}},"required":["extIdpId","type","identifier","displayName","fields"]},"ExtIdpConnDetail":{"type":"object","properties":{"id":{"type":"string","description":"身份源连接 id","example":"60b49eb83fd80adb96f26e68"},"type":{"type":"string","description":"身份源连接类型","enum":["oidc","oauth","saml","ldap","ad","cas","azure-ad","alipay","facebook","twitter","google:mobile","google","wechat:pc","wechat:mobile","wechat:webpage-authorization","wechatmp-qrcode","wechat:miniprogram:default","wechat:miniprogram:qrconnect","wechat:miniprogram:app-launch","github","qq","wechatwork:corp:qrconnect","wechatwork:agency:qrconnect","wechatwork:service-provider:qrconnect","wechatwork:mobile","wechatwork:agency:mobile","dingtalk","dingtalk:provider","weibo","apple","apple:web","baidu","lark-internal","lark-public","gitlab","linkedin","slack","yidun","qingcloud","gitee","instagram","welink","ad-kerberos"],"example":"default"},"extIdpId":{"type":"string","description":"身份源 ID","example":"6318061be13c0ce6a64093e5"},"logo":{"type":"string","description":"身份源连接图标","example":"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png"},"identifier":{"type":"string","description":"身份源连接标识","example":"60b49eb83fd80adb96f26e68"},"displayName":{"type":"string","description":"身份源连接在登录页的显示名称","example":"登录页"},"loginOnly":{"type":"boolean","description":"是否只支持登录","example":true},"associationMode":{"type":"string","description":"账号关联模式","enum":["none","field","challenge"],"example":"challenge"},"challengeBindingMethods":{"description":"账号绑定方式","example":["email-password"],"type":"array","items":{"type":"string"}}},"required":["id","type","extIdpId","logo","loginOnly","associationMode","challengeBindingMethods"]},"ExtIdpConnDetailSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ExtIdpConnDetail"}]}},"required":["statusCode","message","data"]},"UpdateExtIdpConnDto":{"type":"object","properties":{"id":{"type":"string","description":"身份源连接 ID","example":"60b49eb83fd80adb96f26e68"},"displayName":{"type":"string","description":"身份源连接显示名称","example":"exampleName"},"fields":{"type":"object","description":"身份源连接自定义参数（增量修改）","example":{"clientId":"clientId"}},"logo":{"type":"string","description":"身份源连接的图标","example":"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png"},"loginOnly":{"type":"boolean","description":"是否只支持登录","example":false}},"required":["id","displayName","fields"]},"DeleteExtIdpConnDto":{"type":"object","properties":{"id":{"type":"string","description":"身份源连接 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["id"]},"ChangeExtIdpConnStateDto":{"type":"object","properties":{"id":{"type":"string","description":"身份源连接 ID","example":"60b49eb83fd80adb96f26e68"},"enabled":{"type":"boolean","description":"是否开启身份源连接","example":false},"appId":{"type":"string","description":"应用 ID","example":"60b49eb83fd80adb96f26e68"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"},"appIds":{"description":"应用 ID 列表","type":"array","items":{"type":"string"}}},"required":["id","enabled","appId"]},"ChangeExtIdpAssociationStateDto":{"type":"object","properties":{"id":{"type":"string","description":"身份源连接 ID","example":"60b49eb83fd80adb96f26e68"},"association":{"type":"boolean","description":"是否关联身份源","example":false},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["id","association"]},"CustomFieldI18n":{"type":"object","properties":{"label":{"description":"支持多语言的字段","example":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"},"zh-TW":{"enabled":false,"value":"繁體中文"},"ja-JP":{"enabled":false,"value":"日本語"}},"allOf":[{"$ref":"#/components/schemas/LangObject"}]}},"required":["label"]},"CustomFieldSelectOption":{"type":"object","properties":{"value":{"type":"string","description":"枚举值 value","example":"hust"},"label":{"type":"string","description":"枚举值 label","example":"华中科技大学"}},"required":["value","label"]},"CustomFieldDto":{"type":"object","properties":{"targetType":{"type":"string","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"createdAt":{"format":"date-time","type":"string","description":"创建时间，只针对自定义字段有效，内置字段没有创建时间。","example":"2022-03-17T05:23:01.567Z"},"dataType":{"type":"string","description":"数据类型，**设置之后将不能进行修改**。\n- `STRING`: 字符串类型\n- `NUMBER`: 数字类型\n- `DATETIME`: 日期类型\n- `BOOLEAN`: 布尔类型\n- `ENUM`: 枚举值类型\n    ","example":"ENUM","enum":["STRING","NUMBER","DATETIME","BOOLEAN","ENUM"]},"key":{"type":"string","description":"字段 key，不能和内置字段的 key 冲突，**设置之后将不能进行修改**。","example":"school"},"label":{"type":"string","description":"显示名称","example":"学校"},"description":{"type":"string","description":"详细描述信息","example":"学校"},"encrypted":{"type":"boolean","description":"是否加密存储。开启后，该字段的**新增数据**将被加密，此参数一旦设置不可更改。","example":false,"default":false},"isUnique":{"type":"boolean","description":"是否为唯一字段，开启之后，当前字段上报的值将进行唯一校验。此参数只针对数据类型为字符串和数字的字段有效。","example":false,"default":false},"userEditable":{"type":"boolean","description":"用户是否可编辑，如果是手机号、邮箱等特殊字段，用户不能直接修改，需要先通过验证码等方式进行验证。","example":false,"default":false},"visibleInAdminConsole":{"type":"boolean","description":"是否需要在 Authing 控制台中进行显示：\n- 如果是用户自定义字段，控制是否在用户详情展示；\n- 如果是部门自定义字段，控制是否在部门详情中展示；\n- 如果是角色扩展字段，控制是否在角色详情中展示。\n    ","example":true,"default":true},"visibleInUserCenter":{"type":"boolean","description":"是否在用户个人中心展示（此参数不控制 API 接口是否返回）。","example":true,"default":true},"i18n":{"description":"多语言显示名称","example":{"label":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"},"zh-TW":{"enabled":false,"value":"繁體中文"}}},"allOf":[{"$ref":"#/components/schemas/CustomFieldI18n"}]},"options":{"description":"枚举值类型选择项","example":[{"value":"pku","label":"北京大学"}],"type":"array","items":{"$ref":"#/components/schemas/CustomFieldSelectOption"}}},"required":["targetType","dataType","key","label","isUnique","visibleInAdminConsole"]},"CustomFieldListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/CustomFieldDto"}}},"required":["statusCode","message","data"]},"SetUserBaseFieldDto":{"type":"object","properties":{"key":{"type":"string","description":"字段 key，不能和内置字段的 key 冲突，**设置之后将不能进行修改**。","example":"school"},"label":{"type":"string","description":"显示名称","example":"学校"},"description":{"type":"string","description":"详细描述信息","example":"学校"},"userEditable":{"type":"boolean","description":"用户是否可编辑","example":false},"visibleInAdminConsole":{"type":"boolean","description":"是否需要在 Authing 控制台中进行显示：\n- 如果是用户自定义字段，控制是否在用户详情展示；\n- 如果是部门自定义字段，控制是否在部门详情中展示；\n- 如果是角色扩展字段，控制是否在角色详情中展示。\n    ","example":true},"visibleInUserCenter":{"type":"boolean","description":"是否在用户个人中心展示（此参数不控制 API 接口是否返回）。","example":true},"i18n":{"description":"多语言显示名称","example":{"label":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"},"zh-TW":{"enabled":false,"value":"繁體中文"}}},"allOf":[{"$ref":"#/components/schemas/CustomFieldI18n"}]}},"required":["key"]},"SetUserBaseFieldsReqDto":{"type":"object","properties":{"list":{"description":"自定义字段列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/SetUserBaseFieldDto"}}},"required":["list"]},"SetCustomFieldDto":{"type":"object","properties":{"targetType":{"type":"string","description":"主体类型，目前支持用户、角色、分组和部门","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"key":{"type":"string","description":"字段 key，不能和内置字段的 key 冲突，**设置之后将不能进行修改**。","example":"school"},"dataType":{"type":"string","description":"数据类型，**设置之后将不能进行修改**。\n- `STRING`: 字符串类型\n- `NUMBER`: 数字类型\n- `DATETIME`: 日期类型\n- `BOOLEAN`: 布尔类型\n- `ENUM`: 枚举值类型\n    ","example":"ENUM","enum":["STRING","NUMBER","DATETIME","BOOLEAN","ENUM"]},"label":{"type":"string","description":"显示名称","example":"学校"},"description":{"type":"string","description":"详细描述信息","example":"学校"},"encrypted":{"type":"boolean","description":"是否加密存储。开启后，该字段的**新增数据**将被加密，此参数一旦设置不可更改。","example":false},"isUnique":{"type":"boolean","description":"是否为唯一字段，开启之后，当前字段上报的值将进行唯一校验。此参数只针对","example":false},"userEditable":{"type":"boolean","description":"用户是否可编辑","example":false},"visibleInAdminConsole":{"type":"boolean","description":"是否需要在 Authing 控制台中进行显示：\n- 如果是用户自定义字段，控制是否在用户详情展示；\n- 如果是部门自定义字段，控制是否在部门详情中展示；\n- 如果是角色扩展字段，控制是否在角色详情中展示。\n    ","example":true},"visibleInUserCenter":{"type":"boolean","description":"是否在用户个人中心展示（此参数不控制 API 接口是否返回）。","example":true},"options":{"description":"枚举值类型选择项","example":[{"value":"pku","label":"北京大学"}],"type":"array","items":{"$ref":"#/components/schemas/CustomFieldSelectOption"}},"i18n":{"description":"多语言显示名称","example":{"label":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"},"zh-TW":{"enabled":false,"value":"繁體中文"}}},"allOf":[{"$ref":"#/components/schemas/CustomFieldI18n"}]}},"required":["targetType","key"]},"SetCustomFieldsReqDto":{"type":"object","properties":{"list":{"description":"自定义字段列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/SetCustomFieldDto"}}},"required":["list"]},"SetCustomDataDto":{"type":"object","properties":{"key":{"type":"string","description":"字段 key，不能和内置字段的 key 冲突","example":"school"},"value":{"type":"string","description":"自定义数据，可以为任意类型，但是必须和创建时定义的自定义字段类型匹配，否则将设置失败","example":"pku"}},"required":["key","value"]},"SetCustomDataReqDto":{"type":"object","properties":{"targetType":{"type":"string","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"targetIdentifier":{"type":"string","description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","example":"userId1"},"namespace":{"type":"string","description":"所属权限分组的 code，当 target_type 为角色的时候需要填写，否则可以忽略","example":"default"},"list":{"description":"自定义数据列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/SetCustomDataDto"}}},"required":["targetType","targetIdentifier","list"]},"GetCustomDataRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"type":"object","description":"具体的自定义数据值","example":{"age":18,"school":"pku"}}},"required":["statusCode","message","data"]},"ResourceAction":{"type":"object","properties":{"name":{"type":"string","description":"资源操作名称","example":"ecs:Start"},"description":{"type":"string","description":"资源操作描述","example":"ecs:Start"}},"required":["name","description"]},"CreateResourceDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"description":{"type":"string","description":"资源描述","example":"服务器"},"type":{"type":"string","description":"资源类型，如数据、API、按钮、菜单","enum":["DATA","API","MENU","BUTTON","UI"],"example":"API"},"actions":{"description":"资源定义的操作类型","minItems":0,"maxItems":100,"example":[{"name":"ecs:Start","description":"启动 ECS 服务器"},{"name":"ecs:Stop","description":"停止 ECS 服务器"}],"type":"array","items":{"$ref":"#/components/schemas/ResourceAction"}},"apiIdentifier":{"type":"string","description":"API 资源的 URL 标识","example":"https://my-awesome-api.com/api"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"default"}},"required":["code","type"]},"ResourceDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"description":{"type":"string","description":"资源描述","example":"服务器"},"name":{"type":"string","description":"资源名称","example":"服务器"},"type":{"type":"string","description":"资源类型，如数据、API、按钮、菜单","enum":["DATA","API","MENU","BUTTON","UI"],"example":"API"},"actions":{"description":"资源定义的操作类型","minItems":0,"maxItems":100,"example":[{"name":"ecs:Start","description":"启动 ECS 服务器"},{"name":"ecs:Stop","description":"停止 ECS 服务器"}],"type":"array","items":{"$ref":"#/components/schemas/ResourceAction"}},"apiIdentifier":{"type":"string","description":"API 资源的 URL 标识","example":"https://my-awesome-api.com/api"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"default"},"linkedToTenant":{"type":"boolean","description":"租户应用是否关联自建应用资源","example":false}},"required":["code","type"]},"ResourceRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"资源详情","allOf":[{"$ref":"#/components/schemas/ResourceDto"}]}},"required":["statusCode","message","data"]},"CreateResourceBatchItemDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"description":{"type":"string","description":"资源描述","example":"服务器"},"name":{"type":"string","description":"资源名称","example":"服务器"},"type":{"type":"string","description":"资源类型，如数据、API、按钮、菜单","enum":["DATA","API","MENU","BUTTON","UI"],"example":"API"},"actions":{"description":"资源定义的操作类型","minItems":0,"maxItems":100,"example":[{"name":"ecs:Start","description":"启动 ECS 服务器"},{"name":"ecs:Stop","description":"停止 ECS 服务器"}],"type":"array","items":{"$ref":"#/components/schemas/ResourceAction"}},"apiIdentifier":{"type":"string","description":"API 资源的 URL 标识","example":"https://my-awesome-api.com/api"}},"required":["code","type"]},"CreateResourcesBatchDto":{"type":"object","properties":{"namespace":{"type":"string","description":"所属权限分组的 code","example":"default"},"list":{"description":"资源列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/CreateResourceBatchItemDto"}}},"required":["list"]},"ResourceListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"资源详情列表","type":"array","items":{"$ref":"#/components/schemas/ResourceDto"}}},"required":["statusCode","message","data"]},"ResourcePagingDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据","type":"array","items":{"$ref":"#/components/schemas/ResourceDto"}}},"required":["statusCode","message","totalCount","list"]},"ResourcePaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ResourcePagingDto"}]}},"required":["statusCode","message","data"]},"UpdateResourceDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"description":{"type":"string","description":"资源描述","example":"服务器"},"actions":{"description":"资源定义的操作类型","minItems":0,"maxItems":100,"example":[{"name":"ecs:Start","description":"启动 ECS 服务器"},{"name":"ecs:Stop","description":"停止 ECS 服务器"}],"type":"array","items":{"$ref":"#/components/schemas/ResourceAction"}},"apiIdentifier":{"type":"string","description":"API 资源的 URL 标识","example":"https://my-awesome-api.com/api"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"default"},"type":{"type":"string","description":"资源类型，如数据、API、按钮、菜单","enum":["DATA","API","MENU","BUTTON","UI"],"example":"API"}},"required":["code"]},"DeleteResourceDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"default"}},"required":["code"]},"DeleteResourcesBatchDto":{"type":"object","properties":{"namespace":{"type":"string","description":"所属权限分组的 code","example":"default"},"codeList":{"description":"资源 code 列表","minItems":1,"maxItems":50,"example":["code1","code2"],"type":"array","items":{"type":"string"}}},"required":["codeList"]},"AssociationTenantResourceDto":{"type":"object","properties":{"code":{"type":"string","description":"资源 Code"},"association":{"type":"boolean","description":"是否关联应用资源","example":false},"appId":{"type":"string","description":"应用 ID","example":"60b49eb83fd80adb96f26e68"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["code","association","appId"]},"CreateNamespaceDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组唯一标志符","example":"my-namespace"},"name":{"type":"string","description":"权限分组名称","example":"我的权限分组"},"description":{"type":"string","description":"权限分组描述信息","example":"我的权限分组描述"}},"required":["code"]},"NamespaceDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组唯一标志符","example":"my-namespace"},"name":{"type":"string","description":"权限分组名称","example":"我的权限分组"},"description":{"type":"string","description":"权限分组描述信息","example":"我的权限分组描述"}},"required":["code"]},"NamespaceRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"权限分组详情","allOf":[{"$ref":"#/components/schemas/NamespaceDto"}]}},"required":["statusCode","message","data"]},"CreateNamespacesBatchItemDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组唯一标志符","example":"my-namespace"},"name":{"type":"string","description":"权限分组名称","example":"我的权限分组"},"description":{"type":"string","description":"权限分组描述信息","example":"我的权限分组描述"}},"required":["code"]},"CreateNamespacesBatchDto":{"type":"object","properties":{"list":{"description":"权限分组列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/CreateNamespacesBatchItemDto"}}},"required":["list"]},"NamespaceListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"权限分组列表","type":"array","items":{"$ref":"#/components/schemas/NamespaceDto"}}},"required":["statusCode","message","data"]},"UpdateNamespaceDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组唯一标志符","example":"my-namespace"},"description":{"type":"string","description":"权限分组描述信息","example":"我的权限分组描述"},"name":{"type":"string","description":"权限分组名称","example":"我的权限分组"},"newCode":{"type":"string","description":"权限分组新的唯一标志符","example":"my-new-namespace"}},"required":["code"]},"UpdateNamespaceRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UpdateNamespaceDto"}]}},"required":["statusCode","message","data"]},"DeleteNamespaceDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组唯一标志符","example":"my-namespace"}},"required":["code"]},"DeleteNamespacesBatchDto":{"type":"object","properties":{"codeList":{"description":"权限分组 code 列表","minItems":1,"maxItems":10,"example":["code1","code2"],"type":"array","items":{"type":"string"}}},"required":["codeList"]},"ResourceItemDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"actions":{"description":"资源定义的操作类型","minItems":0,"maxItems":50,"example":["ecs:Stop","ecs:Start"],"type":"array","items":{"type":"string"}},"resourceType":{"type":"string","description":"资源类型，如数据、API、按钮、菜单","enum":["DATA","API","MENU","BUTTON","UI"],"example":"DATA"}},"required":["code","actions","resourceType"]},"AuthorizeResourceItem":{"type":"object","properties":{"targetType":{"type":"string","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"targetIdentifiers":{"description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","minItems":0,"maxItems":100,"example":["userId1","userId2"],"type":"array","items":{"type":"string"}},"resources":{"description":"授权的资源列表","type":"array","items":{"$ref":"#/components/schemas/ResourceItemDto"}}},"required":["targetType","targetIdentifiers","resources"]},"AuthorizeResourcesDto":{"type":"object","properties":{"namespace":{"type":"string","description":"所属权限分组的 code","example":"default"},"list":{"description":"授权资源列表","minItems":1,"maxItems":10,"type":"array","items":{"$ref":"#/components/schemas/AuthorizeResourceItem"}}},"required":["list"]},"IsActionAllowedDto":{"type":"object","properties":{"namespace":{"type":"string","description":"所属权限分组的 code","example":"default"},"userId":{"type":"string","description":"用户 ID","example":"userId1"},"resource":{"type":"string","description":"资源标识符","example":"ecs:1"},"action":{"type":"string","description":"资源对应的操作","example":"ecs:Start"}},"required":["userId","resource","action"]},"IsActionAllowedDataDto":{"type":"object","properties":{"allowed":{"type":"boolean","description":"是否允许","example":true}},"required":["allowed"]},"IsActionAllowedRespDtp":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"返回数据","allOf":[{"$ref":"#/components/schemas/IsActionAllowedDataDto"}]}},"required":["statusCode","message","data"]},"GetResourceAuthorizedTargetsDto":{"type":"object","properties":{"resource":{"type":"string","description":"资源","example":"ecs:1"},"namespace":{"type":"string","description":"权限分组","default":"default"},"targetType":{"type":"string","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","example":"USER","enum":["USER","ROLE","GROUP","DEPARTMENT"]},"page":{"type":"number","description":"当前页数，从 1 开始","default":1,"example":1},"limit":{"type":"number","description":"每页数目，最大不能超过 50，默认为 10","default":10,"example":10}},"required":["resource"]},"ResourceAuthorizedTargetDto":{"type":"object","properties":{"targetType":{"type":"string","description":"主体类型","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"targetIdentifier":{"type":"string","description":"主体唯一标志符","example":"code"},"actions":{"description":"操作列表","example":["ecs:Start","ecs:Stop"],"type":"array","items":{"type":"string"}}},"required":["targetType","targetIdentifier","actions"]},"GetResourceAuthorizedTargetDataDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"总数","example":10},"list":{"description":"元素列表","type":"array","items":{"$ref":"#/components/schemas/ResourceAuthorizedTargetDto"}}},"required":["totalCount","list"]},"GetResourceAuthorizedTargetRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetResourceAuthorizedTargetDataDto"}]}},"required":["statusCode","message","data"]},"CreatePipelineFunctionDto":{"type":"object","properties":{"funcName":{"type":"string","description":"函数名称","example":"每周日凌晨 3-6 点系统维护禁止注册/登录"},"funcDescription":{"type":"string","description":"函数描述","example":"每周日凌晨 3-6 点系统维护禁止注册/登录。"},"scene":{"type":"string","description":"函数的触发场景：\n- `PRE_REGISTER`: 注册前\n- `POST_REGISTER`: 注册后\n- `PRE_AUTHENTICATION`: 认证前\n- `POST_AUTHENTICATION`: 认证后\n- `PRE_OIDC_ID_TOKEN_ISSUED`: OIDC ID Token 签发前\n- `PRE_OIDC_ACCESS_TOKEN_ISSUED`: OIDC Access Token 签发前\n- `PRE_COMPLETE_USER_INFO`: 补全用户信息前\n    ","enum":["PRE_REGISTER","POST_REGISTER","PRE_AUTHENTICATION","POST_AUTHENTICATION","PRE_OIDC_ID_TOKEN_ISSUED","PRE_OIDC_ACCESS_TOKEN_ISSUED","PRE_COMPLETE_USER_INFO"],"example":"PRE_REGISTER"},"sourceCode":{"type":"string","description":"函数源代码","example":"async function pipe(user, context, callback) {\n  const date = new Date();\n  const d = date.getDay();\n  const n = date.getHours();\n  // 每周日凌晨 3-6 点禁止注册\n  if (d === 0 && (3 <= n && n <= 6)) {\n    return callback(new Error('系统维护中，暂时停止注册！'));\n  }\n  callback(null, user, context)\n}"},"isAsynchronous":{"type":"boolean","description":"是否异步执行。设置为异步执行的函数不会阻塞整个流程的执行，适用于异步通知的场景，比如飞书群通知、钉钉群通知等。","example":false,"default":false},"timeout":{"type":"number","description":"函数运行超时时间，要求必须为整数，最短为 1 秒，最长为 60 秒，默认为 3 秒。","example":3,"default":3},"terminateOnTimeout":{"type":"boolean","description":"如果函数运行超时，是否终止整个流程，默认为否。","example":false},"enabled":{"type":"boolean","description":"是否启用此 Pipeline","example":false}},"required":["funcName","scene","sourceCode"]},"PipelineFunctionDto":{"type":"object","properties":{"funcId":{"type":"string","description":"函数 ID","example":"62ce9135dxxxxb83e373f5d6"},"funcName":{"type":"string","description":"函数名称","example":"每周日凌晨 3-6 点系统维护禁止注册/登录"},"funcDescription":{"type":"string","description":"函数描述","example":"每周日凌晨 3-6 点系统维护禁止注册/登录。"},"scene":{"type":"string","description":"函数的触发场景：\n- `PRE_REGISTER`: 注册前\n- `POST_REGISTER`: 注册后\n- `PRE_AUTHENTICATION`: 认证前\n- `POST_AUTHENTICATION`: 认证后\n- `PRE_OIDC_ID_TOKEN_ISSUED`: OIDC ID Token 签发前\n- `PRE_OIDC_ACCESS_TOKEN_ISSUED`: OIDC Access Token 签发前\n- `PRE_COMPLETE_USER_INFO`: 补全用户信息前\n    ","enum":["PRE_REGISTER","POST_REGISTER","PRE_AUTHENTICATION","POST_AUTHENTICATION","PRE_OIDC_ID_TOKEN_ISSUED","PRE_OIDC_ACCESS_TOKEN_ISSUED","PRE_COMPLETE_USER_INFO"],"example":"PRE_REGISTER"},"createdAt":{"format":"date-time","type":"string","description":"函数创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"函数修改时间","example":"2022-07-03T02:20:30.000Z"},"isAsynchronous":{"type":"boolean","description":"是否异步执行。设置为异步执行的函数不会阻塞整个流程的执行，适用于异步通知的场景，比如飞书群通知、钉钉群通知等。","example":false},"timeout":{"type":"number","description":"函数运行超时时间，最短为 1 秒，最长为 60 秒，默认为 3 秒。","example":3,"default":3},"terminateOnTimeout":{"type":"boolean","description":"如果函数运行超时，是否终止整个流程，默认为否。","example":false},"sourceCode":{"type":"string","description":"函数源代码","example":"async function pipe(user, context, callback) {\n  const date = new Date();\n  const d = date.getDay();\n  const n = date.getHours();\n  // 每周日凌晨 3-6 点禁止注册\n  if (d === 0 && (3 <= n && n <= 6)) {\n    return callback(new Error('系统维护中，暂时停止注册！'));\n  }\n  callback(null, user, context)\n}"},"status":{"type":"string","description":"函数当前状态：\n- `uploading`: 上传中\n- `success`: 上传成功\n- `failed`: 上传失败    \n","enum":["uploading","success","failed"],"example":"success"},"uploadErrMsg":{"type":"string","description":"上传失败的错误提示"},"enabled":{"type":"boolean","description":"此 Pipeline 是否被启用","example":false}},"required":["funcId","funcName","scene","createdAt","updatedAt","isAsynchronous","timeout","terminateOnTimeout","sourceCode","status","enabled"]},"PipelineFunctionSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PipelineFunctionDto"}]}},"required":["statusCode","message","data"]},"ReUploadPipelineFunctionDto":{"type":"object","properties":{"funcId":{"type":"string","description":"Pipeline 函数 ID","example":"62ce9135dxxxxb83e373f5d6"}},"required":["funcId"]},"UpdatePipelineFunctionDto":{"type":"object","properties":{"funcId":{"type":"string","description":"Pipeline 函数 ID","example":"62ce9135dxxxxb83e373f5d6"},"funcName":{"type":"string","description":"函数名称","example":"每周日凌晨 3-6 点系统维护禁止注册/登录"},"funcDescription":{"type":"string","description":"函数描述","example":"每周日凌晨 3-6 点系统维护禁止注册/登录。"},"sourceCode":{"type":"string","description":"函数源代码。如果修改之后，函数会重新上传。","example":"async function pipe(user, context, callback) {\n  const date = new Date();\n  const d = date.getDay();\n  const n = date.getHours();\n  // 每周日凌晨 3-6 点禁止注册\n  if (d === 0 && (3 <= n && n <= 6)) {\n    return callback(new Error('系统维护中，暂时停止注册！'));\n  }\n  callback(null, user, context)\n}"},"isAsynchronous":{"type":"boolean","description":"是否异步执行。设置为异步执行的函数不会阻塞整个流程的执行，适用于异步通知的场景，比如飞书群通知、钉钉群通知等。","example":false,"default":false},"timeout":{"type":"number","description":"函数运行超时时间，最短为 1 秒，最长为 60 秒，默认为 3 秒。","example":3,"default":3},"terminateOnTimeout":{"type":"boolean","description":"如果函数运行超时，是否终止整个流程，默认为否。","example":false},"enabled":{"type":"boolean","description":"是否启用此 Pipeline","example":false}},"required":["funcId"]},"UpdatePipelineOrderDto":{"type":"object","properties":{"scene":{"type":"string","description":"函数的触发场景：\n- `PRE_REGISTER`: 注册前\n- `POST_REGISTER`: 注册后\n- `PRE_AUTHENTICATION`: 认证前\n- `POST_AUTHENTICATION`: 认证后\n- `PRE_OIDC_ID_TOKEN_ISSUED`: OIDC ID Token 签发前\n- `PRE_OIDC_ACCESS_TOKEN_ISSUED`: OIDC Access Token 签发前\n- `PRE_COMPLETE_USER_INFO`: 补全用户信息前\n    ","enum":["PRE_REGISTER","POST_REGISTER","PRE_AUTHENTICATION","POST_AUTHENTICATION","PRE_OIDC_ID_TOKEN_ISSUED","PRE_OIDC_ACCESS_TOKEN_ISSUED","PRE_COMPLETE_USER_INFO"],"example":"PRE_REGISTER"},"order":{"description":"新的排序方式，按照函数 ID 的先后顺序进行排列。","example":[],"type":"array","items":{"type":"string"}}},"required":["scene","order"]},"DeletePipelineFunctionDto":{"type":"object","properties":{"funcId":{"type":"string","description":"Pipeline 函数 ID","example":"62ce9135dxxxxb83e373f5d6"}},"required":["funcId"]},"PipelineFunctionPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/PipelineFunctionDto"}}},"required":["totalCount","list"]},"PipelineFunctionPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PipelineFunctionPagingDto"}]}},"required":["statusCode","message","data"]},"CreateWebhookDto":{"type":"object","properties":{"name":{"type":"string","description":"Webhook 名称","example":"用户创建事件"},"url":{"type":"string","description":"Webhook 回调地址","example":"https://example.com/callback"},"events":{"type":"array","description":"用户真实名称，不具备唯一性。 示例值: 张三","example":["user:created"],"items":{"type":"string","enum":["test","register","login","mfa:verified","kick","user:created","user:password-changed","user:updated","user:email-verified","user:archived","user:unarchived","user:blocked","user:unblocked","user:deleted","user:register-whitelist-added","user:register-whitelist-deleted","user:udv-changed","user:link-account","user:password-update-remind","permission:revoke","permission:add","resource:created","resource:delete","resource:updated","role:created","role:updated","role:deleted","role:assigned","role:unassigned","role:udv-changed","application:mfa:enabled","application:mfa:disabled","group:created","group:updated","group:deleted","group:member-added","group:member-removed","organization:created","organization:imported","organization:deleted","organization:node-added","organization:node-updated","organization:tree-updated","organization:node-deleted","organization:node-moved","organization:member-added","organization:member-removed","organization:udv-changed","privilege-namespace:created","privilege-namespace:updated","privilege-namespace:deleted","user-pool:cooperator-added","user-pool:cooperator-removed","user-pool:secret-refreshed","user-pool:updated","user-pool:udf-added","user-pool:udf-deleted","user-pool:env-added","user-pool:env-deleted","user-pool:env-updated","user-pool:launchpad-app-installed","user-pool:launchpad-app-uninstalled","application:created","application:updated","application:deleted","application:secret-refreshed"]}},"contentType":{"type":"string","description":"请求数据格式","enum":["application/json","application/x-www-form-urlencoded"],"example":"application/json"},"enabled":{"type":"boolean","description":"是否启用","example":true},"secret":{"type":"string","description":"请求密钥","example":"xxxxxxxxxxxx"}},"required":["name","url","events","contentType"]},"WebhookDto":{"type":"object","properties":{"webhookId":{"type":"string","description":"Webhook ID","example":"6229ffaxxxxxxxxcade3e3d9"},"createdAt":{"type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"},"name":{"type":"string","description":"Webhook 名称","example":"用户创建事件"},"url":{"type":"string","description":"Webhook 回调地址","example":"https://example.com/callback"},"contentType":{"type":"string","description":"请求数据格式","enum":["application/json","application/x-www-form-urlencoded"],"example":"application/json"},"enabled":{"type":"boolean","description":"是否启用","example":true},"events":{"type":"array","description":"用户真实名称，不具备唯一性。 示例值: 张三","example":["user:created"],"items":{"type":"string","enum":["test","register","login","mfa:verified","kick","user:created","user:password-changed","user:updated","user:email-verified","user:archived","user:unarchived","user:blocked","user:unblocked","user:deleted","user:register-whitelist-added","user:register-whitelist-deleted","user:udv-changed","user:link-account","user:password-update-remind","permission:revoke","permission:add","resource:created","resource:delete","resource:updated","role:created","role:updated","role:deleted","role:assigned","role:unassigned","role:udv-changed","application:mfa:enabled","application:mfa:disabled","group:created","group:updated","group:deleted","group:member-added","group:member-removed","organization:created","organization:imported","organization:deleted","organization:node-added","organization:node-updated","organization:tree-updated","organization:node-deleted","organization:node-moved","organization:member-added","organization:member-removed","organization:udv-changed","privilege-namespace:created","privilege-namespace:updated","privilege-namespace:deleted","user-pool:cooperator-added","user-pool:cooperator-removed","user-pool:secret-refreshed","user-pool:updated","user-pool:udf-added","user-pool:udf-deleted","user-pool:env-added","user-pool:env-deleted","user-pool:env-updated","user-pool:launchpad-app-installed","user-pool:launchpad-app-uninstalled","application:created","application:updated","application:deleted","application:secret-refreshed"]}},"secret":{"type":"string","description":"请求密钥","example":"xxxxxxxxxxxx"}},"required":["webhookId","createdAt","updatedAt","name","url","contentType","enabled"]},"CreateWebhookRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/WebhookDto"}]}},"required":["statusCode","message","data"]},"GetWebhooksData":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","example":1},"list":{"description":"返回列表","type":"array","items":{"$ref":"#/components/schemas/WebhookDto"}}},"required":["totalCount","list"]},"GetWebhooksRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetWebhooksData"}]}},"required":["statusCode","message","data"]},"UpdateWebhookDto":{"type":"object","properties":{"webhookId":{"type":"string","description":"Webhook ID","example":"6229ffaxxxxxxxxcade3e3d9"},"name":{"type":"string","description":"Webhook 名称","example":"用户创建事件"},"url":{"type":"string","description":"Webhook 回调地址","example":"https://example.com/callback"},"events":{"type":"array","description":"用户真实名称，不具备唯一性。 示例值: 张三","example":["user:created"],"items":{"type":"string","enum":["test","register","login","mfa:verified","kick","user:created","user:password-changed","user:updated","user:email-verified","user:archived","user:unarchived","user:blocked","user:unblocked","user:deleted","user:register-whitelist-added","user:register-whitelist-deleted","user:udv-changed","user:link-account","user:password-update-remind","permission:revoke","permission:add","resource:created","resource:delete","resource:updated","role:created","role:updated","role:deleted","role:assigned","role:unassigned","role:udv-changed","application:mfa:enabled","application:mfa:disabled","group:created","group:updated","group:deleted","group:member-added","group:member-removed","organization:created","organization:imported","organization:deleted","organization:node-added","organization:node-updated","organization:tree-updated","organization:node-deleted","organization:node-moved","organization:member-added","organization:member-removed","organization:udv-changed","privilege-namespace:created","privilege-namespace:updated","privilege-namespace:deleted","user-pool:cooperator-added","user-pool:cooperator-removed","user-pool:secret-refreshed","user-pool:updated","user-pool:udf-added","user-pool:udf-deleted","user-pool:env-added","user-pool:env-deleted","user-pool:env-updated","user-pool:launchpad-app-installed","user-pool:launchpad-app-uninstalled","application:created","application:updated","application:deleted","application:secret-refreshed"]}},"contentType":{"type":"string","description":"请求数据格式","enum":["application/json","application/x-www-form-urlencoded"],"example":"application/json"},"enabled":{"type":"boolean","description":"是否启用","example":true},"secret":{"type":"string","description":"请求密钥","example":"xxxxxxxxxxxx"}},"required":["webhookId"]},"UpdateWebhooksRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/WebhookDto"}]}},"required":["statusCode","message","data"]},"DeleteWebhookDto":{"type":"object","properties":{"webhookIds":{"description":"webhookId 数组","example":["xxxx"],"type":"array","items":{"type":"string"}}},"required":["webhookIds"]},"DeleteWebhookRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"}},"required":["statusCode","message"]},"ListWebhookLogs":{"type":"object","properties":{"page":{"type":"number","description":"当前页数，从 1 开始","default":1,"example":1},"limit":{"type":"number","description":"每页数目，最大不能超过 50，默认为 10","default":10,"example":10},"webhookId":{"type":"string","description":"Webhook ID","example":"6229ffaxxxxxxxxcade3e3d9"}},"required":["webhookId"]},"WebhookLogDto":{"type":"object","properties":{"webhookId":{"type":"string","description":"Webhook ID","example":"6229ffaxxxxxxxxcade3e3d9"},"eventName":{"type":"string","description":"Webhook 事件名称","example":"user:created"},"requestBody":{"type":"object","description":"Webhook 请求体","example":{"eventName":"test","data":{"description":"A test from authing"}}},"requestHeaders":{"type":"object","description":"Webhook 请求头","example":{"eventName":"test","data":{"description":"A test from authing"}}},"responseStatusCode":{"type":"number","description":"Webhook 响应码","example":200},"responseHeaders":{"type":"object","description":"Webhook 响应头","example":{"Accept":"application/json, text/plain, */*","user-agent":"authing-webhook@2.0","x-authing-token":"a","x-authing-webhook-secret":"a"}},"responseBody":{"type":"object","description":"Webhook 响应体","example":{"success":true}},"timestamp":{"type":"string","description":"时间戳","example":"2022-09-20T08:55:00.188+0800"},"success":{"type":"boolean","description":"是否请求成功","example":true},"errorMessage":{"type":"string","description":"请求失败时返回的错误信息","example":"ERRTIMEOUT"}},"required":["webhookId","eventName","requestBody","requestHeaders","responseStatusCode","responseHeaders","responseBody","timestamp","success"]},"ListWebhookLogsData":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","example":1},"list":{"description":"返回列表","type":"array","items":{"$ref":"#/components/schemas/WebhookLogDto"}}},"required":["totalCount","list"]},"ListWebhookLogsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ListWebhookLogsData"}]}},"required":["statusCode","message","data"]},"TriggerWebhookDto":{"type":"object","properties":{"webhookId":{"type":"string","description":"Webhook ID","example":"6229ffaxxxxxxxxcade3e3d9"},"requestHeaders":{"type":"object","description":"请求头","example":{"eventName":"test","data":{"description":"A test from authing"}}},"requestBody":{"type":"object","description":"请求体","example":{"eventName":"test","data":{"description":"A test from authing"}}}},"required":["webhookId"]},"Any":{"type":"object","properties":{}},"TriggerWebhookData":{"type":"object","properties":{"response":{"description":"原来接口返回的 response 数据","allOf":[{"$ref":"#/components/schemas/Any"}]}},"required":["response"]},"TriggerWebhookRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TriggerWebhookData"}]}},"required":["statusCode","message","data"]},"GetWebhookRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/WebhookDto"}]}},"required":["statusCode","message","data"]},"WebhookCategoryDto":{"type":"object","properties":{"name":{"type":"string","description":"Webhook 类型名称","example":"用户"},"nameEn":{"type":"string","description":"Webhook 类型英文名称","example":"User"},"value":{"type":"string","description":"Webhook 类型","example":"user"}},"required":["name","nameEn","value"]},"WebhookEventDto":{"type":"object","properties":{"name":{"type":"string","description":"Webhook 名称","example":"创建用户"},"nameEn":{"type":"string","description":"Webhook 英文名称","example":"Create User"},"value":{"type":"string","description":"Webhook 事件","example":"user:created"},"category":{"type":"string","description":"Webhook 事件分类","example":"user"}},"required":["name","nameEn","value","category"]},"WebhookEventListData":{"type":"object","properties":{"categories":{"description":"分类列表","type":"array","items":{"$ref":"#/components/schemas/WebhookCategoryDto"}},"events":{"description":"事件列表","type":"array","items":{"$ref":"#/components/schemas/WebhookEventDto"}}},"required":["categories","events"]},"WebhookEventListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/WebhookEventListData"}]}},"required":["statusCode","message","data"]},"SyncTaskProvisioningScope":{"type":"object","properties":{"all":{"type":"boolean","description":"是否同步所选组织机构下的所有用户和部门","example":true,"default":true},"includeNewUsers":{"type":"boolean","description":"是否包含新增的用户","example":false,"default":true}},"required":["all","includeNewUsers"]},"SyncTaskFieldMapping":{"type":"object","properties":{"expression":{"type":"string","description":"源字段","example":"mobile"},"targetKey":{"type":"string","description":"转换后的字段","example":"phone"}},"required":["expression","targetKey"]},"SyncTaskTimedScheduler":{"type":"object","properties":{"cycle":{"type":"string","description":"定时周期：\n- `month`: 每个月执行一次\n- `week`: 每周执行一次\n- `days`: 每天执行一次\n- `sixHours`: 每六小时执行一次\n- `twoHours`: 每两小时执行一次\n    ","enum":["month","week","days","sixHours","twoHours"],"example":"days"},"startTime":{"type":"number","description":"开始时间","example":1664249726701}},"required":["cycle","startTime"]},"SyncTaskDto":{"type":"object","properties":{"syncTaskId":{"type":"number","description":"同步任务 ID","example":1000},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"},"syncTaskName":{"type":"string","description":"同步任务名称","example":"我的飞书同步任务"},"syncTaskType":{"type":"string","description":"同步任务类型:\n- `lark`: 飞书\n- `lark-international`: 飞书国际版\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `active-directory`: Windows AD\n- `ldap`: LDAP\n- `italent`: 北森\n- `maycur`: 每刻报销\n- `moka`: Moka\n- `fxiaoke`: 纷享销客\n- `xiaoshouyi`: 销售易\n- `kayang`: 嘉扬 HR\n- `scim`: 自定义同步源\n    ","enum":["lark","lark-international","wechatwork","dingtalk","active-directory","italent","maycur","ldap","moka","fxiaoke","scim","xiaoshouyi","kayang","custom"],"example":"lark"},"syncFlow":{"type":"string","description":"同步任务数据流向：\n- `upstream`: 作为上游，将数据同步到 Authing\n- `downstream`: 作为下游，将 Authing 数据同步到此系统\n    ","enum":["upstream","downstream"],"example":"upstream"},"syncTrigger":{"type":"string","description":"同步任务触发类型：\n- `manually`: 手动触发执行\n- `timed`: 定时触发\n- `automatic`: 根据事件自动触发\n","enum":["manually","timed","automatic"],"example":"manually"},"lastSyncMessage":{"type":"string","description":"最近一次同步错误信息","example":""},"lastSyncRate":{"type":"number","description":"最近一次同步进度","example":80},"lastSyncStatus":{"type":"string","description":"最近一次同步状态:\n- `free`: 空闲状态，从未执行\n- `pending`: 等待系统执行\n- `onProgress`: 正在执行\n- `success`: 成功\n- `failed`: 失败\n    ","enum":["free","pending","onProgress","success","failed"],"example":"success"},"lastSyncTime":{"format":"date-time","type":"string","description":"最近一次同步时间","example":"2022-07-03T02:20:30.000Z"},"organizationCode":{"type":"string","description":"此同步任务绑定的组织机构。针对上游同步，需执行一次同步任务之后才会绑定组织机构；针对下游同步，创建同步任务的时候就需要设置。","example":"steamory"},"provisioningScope":{"description":"同步范围，**只针对下游同步任务有效**。为空表示同步整个组织机构。","allOf":[{"$ref":"#/components/schemas/SyncTaskProvisioningScope"}]},"fieldMapping":{"description":"字段映射配置","type":"array","items":{"$ref":"#/components/schemas/SyncTaskFieldMapping"}},"timedScheduler":{"description":"定时同步时间设置","allOf":[{"$ref":"#/components/schemas/SyncTaskTimedScheduler"}]}},"required":["syncTaskId","createdAt","updatedAt","syncTaskName","syncTaskType","syncFlow","syncTrigger","fieldMapping"]},"SyncTaskSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SyncTaskDto"}]}},"required":["statusCode","message","data"]},"SyncTaskPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/SyncTaskDto"}}},"required":["totalCount","list"]},"SyncTaskPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SyncTaskPagingDto"}]}},"required":["statusCode","message","data"]},"SyncTaskLarkClientConfig":{"type":"object","properties":{"app_id":{"type":"string","description":"飞书应用 App ID","example":""},"app_secret":{"type":"string","description":"飞书应用 App Secret","example":""},"encrypt_key":{"type":"string","description":"飞书事件订阅的 Encrypt Key，可以在飞书开放平台应用详情的「事件订阅」页面获取。如果你需要开启实时同步，此参数必填。","example":""},"verification_token":{"type":"string","description":"飞书事件订阅的 Verification Token，可以在飞书开放平台应用详情的「事件订阅」页面获取。如果你需要开启实时同步，此参数必填。","example":""}},"required":["app_id","app_secret"]},"SyncTaskWechatworkClientConfig":{"type":"object","properties":{"corpID":{"type":"string","description":"企业 ID（CorpId）","example":""},"secret":{"type":"string","description":"企业微信通讯录密钥 Secret","example":""},"token":{"type":"string","description":"通讯录事件同步 Token","example":""},"encodingAESKey":{"type":"string","description":"通讯录事件同步 EncodingAESKey","example":""},"agentUrl":{"type":"string","description":"代理地址","example":""}},"required":["corpID","secret"]},"SyncTaskDingtalkClientConfig":{"type":"object","properties":{"corpId":{"type":"string","description":"企业 ID（CorpId）","example":""},"appKey":{"type":"string","description":"钉钉应用的 AppKey","example":""},"appSecret":{"type":"string","description":"钉钉应用的 AppSecret","example":""},"aes_key":{"type":"string","description":"加密 aes_key","example":""},"token":{"type":"string","description":"签名 token","example":""}},"required":["corpId","appKey","appSecret"]},"SyncTaskMokaClientConfig":{"type":"object","properties":{"userName":{"type":"string","description":"User Name","example":""},"entCode":{"type":"string","description":"Ent Code","example":""},"apiCode_employee":{"type":"string","description":"Api Code Employee","example":""},"apiCode_department":{"type":"string","description":"Api Code Department","example":""},"privateKey":{"type":"string","description":"Private Key","example":""}},"required":["userName","entCode","apiCode_employee","apiCode_department","privateKey"]},"SyncTaskScimClientConfig":{"type":"object","properties":{"org_url":{"type":"string","description":"Group Url","example":""},"user_url":{"type":"string","description":"User Url","example":""},"token":{"type":"string","description":"Token","example":""},"root_department_id":{"type":"string","description":"Root Department Id","example":""},"parent_department":{"type":"string","description":"Parent Department","example":""},"department":{"type":"string","description":"Department","example":""}},"required":["user_url","token"]},"SyncTaskActiveDirectoryClientConfig":{"type":"object","properties":{"syncIdentityProviderCode":{"type":"string","description":"身份源唯一标志","example":""},"ticket_url":{"type":"string","description":"Provisioning Ticket Url","example":""}}},"SyncTaskLdapClientConfig":{"type":"object","properties":{"url":{"type":"string","description":"LDAP 链接","example":""},"bindDn":{"type":"string","description":"Bind DN","example":""},"bindCredentials":{"type":"string","description":"Bind DN 密码","example":""},"usersBaseDn":{"type":"string","description":"Users Base DN","example":""},"groupsBaseDn":{"type":"string","description":"Groups Base Dn","example":""},"userQueryCriteria":{"type":"string","description":"用户查询条件","example":"(|(objectclass=orgnizationPerson)(objectclass=person))"},"departmentQueryCriteria":{"type":"string","description":"部门查询条件","example":"(|(objectClass=organization)(objectClass=organizationalunit)(objectClass=domain))"}},"required":["url","bindDn","bindCredentials","usersBaseDn","groupsBaseDn","userQueryCriteria","departmentQueryCriteria"]},"SyncTaskItalentClientConfig":{"type":"object","properties":{"tenant_id":{"type":"string","description":"Tenant Id","example":""},"app_key":{"type":"string","description":"App Key","example":""},"app_secret":{"type":"string","description":"App Secret","example":""}},"required":["tenant_id","app_key","app_secret"]},"SyncTaskMaycurClientConfig":{"type":"object","properties":{"app_code":{"type":"string","description":"App Code","example":""},"app_secret":{"type":"string","description":"App Secret","example":""},"endpoint":{"type":"string","description":"登录域名","example":""}},"required":["app_code","app_secret","endpoint"]},"SyncTaskFxiaokeClientConfig":{"type":"object","properties":{"appId":{"type":"string","description":"App Id","example":""},"appSecret":{"type":"string","description":"App Secret","example":""},"permanentCode":{"type":"string","description":"Permanent Code","example":""},"currentOpenUserId":{"type":"string","description":"Current Open User Id","example":""}},"required":["appId","appSecret","permanentCode","currentOpenUserId"]},"SyncTaskXiaoshouyiClientConfig":{"type":"object","properties":{"client_id":{"type":"string","description":"销售易应用的 ClientId","example":""},"client_secret":{"type":"string","description":"销售易应用的 ClientSecret","example":""},"username":{"type":"string","description":"销售易应用的 UserName","example":""},"password":{"type":"string","description":"销售易应用的 Password","example":""}},"required":["client_id","client_secret","username","password"]},"SyncTaskKayangClientConfig":{"type":"object","properties":{"endpoint":{"type":"string","description":"Endpoint","example":""},"account":{"type":"string","description":"Account","example":""},"password":{"type":"string","description":"Password","example":""}},"required":["endpoint","account","password"]},"SyncTaskClientConfig":{"type":"object","properties":{"larkConfig":{"description":"飞书同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskLarkClientConfig"}]},"larkInternationalConfig":{"description":"飞书(国际版)同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskLarkClientConfig"}]},"wechatworkConfig":{"description":"企业微信同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskWechatworkClientConfig"}]},"dingtalkConfig":{"description":"钉钉同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskDingtalkClientConfig"}]},"mokaConfig":{"description":"Moka 同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskMokaClientConfig"}]},"scimConfig":{"description":"自定义同步源同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskScimClientConfig"}]},"activeDirectoryConfig":{"description":"Windows AD 同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskActiveDirectoryClientConfig"}]},"ldapConfig":{"description":"LDAP 同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskLdapClientConfig"}]},"italentConfig":{"description":"北森同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskItalentClientConfig"}]},"maycurConfig":{"description":"每刻报销同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskMaycurClientConfig"}]},"fxiaokeConfig":{"description":"纷享销客同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskFxiaokeClientConfig"}]},"xiaoshouyiConfig":{"description":"销售易同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskXiaoshouyiClientConfig"}]},"kayangConfig":{"description":"嘉扬同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskKayangClientConfig"}]}}},"CreateSyncTaskDto":{"type":"object","properties":{"syncTaskName":{"type":"string","description":"同步任务名称","example":"我的飞书同步任务"},"syncTaskType":{"type":"string","description":"同步任务类型:\n- `lark`: 飞书\n- `lark-international`: 飞书国际版\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `active-directory`: Windows AD\n- `ldap`: LDAP\n- `italent`: 北森\n- `maycur`: 每刻报销\n- `moka`: Moka\n- `fxiaoke`: 纷享销客\n- `xiaoshouyi`: 销售易\n- `kayang`: 嘉扬 HR\n- `scim`: 自定义同步源\n    ","enum":["lark","lark-international","wechatwork","dingtalk","active-directory","italent","maycur","ldap","moka","fxiaoke","scim","xiaoshouyi","kayang","custom"],"example":"lark"},"clientConfig":{"description":"同步任务配置信息","allOf":[{"$ref":"#/components/schemas/SyncTaskClientConfig"}]},"syncTaskFlow":{"type":"string","description":"同步任务数据流向：\n- `upstream`: 作为上游，将数据同步到 Authing\n- `downstream`: 作为下游，将 Authing 数据同步到此系统\n    ","enum":["upstream","downstream"],"example":"upstream"},"syncTaskTrigger":{"type":"string","description":"同步任务触发类型：\n- `manually`: 手动触发执行\n- `timed`: 定时触发\n- `automatic`: 根据事件自动触发\n","enum":["manually","timed","automatic"],"example":"manually"},"organizationCode":{"type":"string","description":"此同步任务绑定的组织机构。针对上游同步，需执行一次同步任务之后才会绑定组织机构；针对下游同步，创建同步任务的时候就需要设置。","example":"steamory"},"provisioningScope":{"description":"同步范围，**只针对下游同步任务有效**。为空表示同步整个组织机构。","allOf":[{"$ref":"#/components/schemas/SyncTaskProvisioningScope"}]},"fieldMapping":{"description":"字段映射配置","type":"array","items":{"$ref":"#/components/schemas/SyncTaskFieldMapping"}},"timedScheduler":{"description":"定时同步时间设置","allOf":[{"$ref":"#/components/schemas/SyncTaskTimedScheduler"}]}},"required":["syncTaskName","syncTaskType","clientConfig","syncTaskFlow","syncTaskTrigger","fieldMapping"]},"UpdateSyncTaskDto":{"type":"object","properties":{"syncTaskId":{"type":"number","description":"同步任务 ID","example":1000},"syncTaskName":{"type":"string","description":"同步任务名称","example":"我的飞书同步任务"},"syncTaskType":{"type":"string","description":"同步任务类型:\n- `lark`: 飞书\n- `lark-international`: 飞书国际版\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `active-directory`: Windows AD\n- `ldap`: LDAP\n- `italent`: 北森\n- `maycur`: 每刻报销\n- `moka`: Moka\n- `fxiaoke`: 纷享销客\n- `xiaoshouyi`: 销售易\n- `kayang`: 嘉扬 HR\n- `scim`: 自定义同步源\n    ","enum":["lark","lark-international","wechatwork","dingtalk","active-directory","italent","maycur","ldap","moka","fxiaoke","scim","xiaoshouyi","kayang","custom"],"example":"lark"},"clientConfig":{"description":"同步任务配置信息","allOf":[{"$ref":"#/components/schemas/SyncTaskClientConfig"}]},"syncTaskFlow":{"type":"string","description":"同步任务数据流向：\n- `upstream`: 作为上游，将数据同步到 Authing\n- `downstream`: 作为下游，将 Authing 数据同步到此系统\n    ","enum":["upstream","downstream"],"example":"upstream"},"syncTaskTrigger":{"type":"string","description":"同步任务触发类型：\n- `manually`: 手动触发执行\n- `timed`: 定时触发\n- `automatic`: 根据事件自动触发\n","enum":["manually","timed","automatic"],"example":"manually"},"organizationCode":{"type":"string","description":"此同步任务绑定的组织机构。针对上游同步，需执行一次同步任务之后才会绑定组织机构；针对下游同步，创建同步任务的时候就需要设置。","example":"steamory"},"provisioningScope":{"description":"同步范围，**只针对下游同步任务有效**。为空表示同步整个组织机构。","allOf":[{"$ref":"#/components/schemas/SyncTaskProvisioningScope"}]},"fieldMapping":{"description":"字段映射配置","type":"array","items":{"$ref":"#/components/schemas/SyncTaskFieldMapping"}},"timedScheduler":{"description":"定时同步时间设置","allOf":[{"$ref":"#/components/schemas/SyncTaskTimedScheduler"}]}},"required":["syncTaskId"]},"TriggerSyncTaskDto":{"type":"object","properties":{"syncTaskId":{"type":"number","description":"同步任务 ID","example":1000}},"required":["syncTaskId"]},"TriggerSyncTaskDataDto":{"type":"object","properties":{"syncJobId":{"type":"number","description":"此次执行同步任务的同步作业 ID","example":1}},"required":["syncJobId"]},"TriggerSyncTaskRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TriggerSyncTaskDataDto"}]}},"required":["statusCode","message","data"]},"SyncJobDto":{"type":"object","properties":{"syncJobId":{"type":"number","description":"同步作业 ID","example":1},"syncTaskId":{"type":"number","description":"此同步作业对应的同步任务 ID","example":1000},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"},"syncStatus":{"type":"string","description":"当前同步状态:\n- `free`: 空闲状态，从未执行\n- `pending`: 等待系统执行\n- `onProgress`: 正在执行\n- `success`: 成功\n- `failed`: 失败\n    ","enum":["free","pending","onProgress","success","failed"],"example":"success"},"syncFlow":{"type":"string","description":"同步任务数据流向：\n- `upstream`: 作为上游，将数据同步到 Authing\n- `downstream`: 作为下游，将 Authing 数据同步到此系统\n    ","enum":["upstream","downstream"],"example":"upstream"},"syncTrigger":{"type":"string","description":"同步任务触发类型：\n- `manually`: 手动触发执行\n- `timed`: 定时触发\n- `automatic`: 根据事件自动触发\n","enum":["manually","timed","automatic"],"example":"manually"},"departmentCountAll":{"type":"number","description":"需要同步的部门个数","example":0},"departmentCountSucc":{"type":"number","description":"成功同步的部门个数","example":0},"departmentUpdateCountAll":{"type":"number","description":"需要更新的部门个数","example":0},"departmentUpdateCountSucc":{"type":"number","description":"成功更新的部门个数","example":0},"accountCountAll":{"type":"number","description":"需要同步的用户个数","example":0},"accountCountSucc":{"type":"number","description":"成功同步的用户个数","example":0},"accountUpdateCountAll":{"type":"number","description":"需要更新的用户个数","example":0},"accountUpdateCountSucc":{"type":"number","description":"成功更新的用户个数","example":0},"errMsg":{"type":"string","description":"错误信息","example":""}},"required":["syncJobId","syncTaskId","createdAt","updatedAt","syncStatus","syncFlow","syncTrigger","departmentCountAll","departmentCountSucc","departmentUpdateCountAll","departmentUpdateCountSucc","accountCountAll","accountCountSucc","accountUpdateCountAll","accountUpdateCountSucc"]},"SyncJobSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SyncJobDto"}]}},"required":["statusCode","message","data"]},"SyncJobPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/SyncJobDto"}}},"required":["totalCount","list"]},"SyncJobPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SyncJobPagingDto"}]}},"required":["statusCode","message","data"]},"SyncRiskOperationDto":{"type":"object","properties":{"syncRiskOperationId":{"type":"number","description":"同步任务风险操作 ID","example":1},"syncTaskId":{"type":"number","description":"同步任务 ID","example":1000},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"},"status":{"type":"string","description":"执行状态:\n- `PENDING`: 待执行\n- `SUCCESS`: 成功\n- `FAILED`: 失败\n- `CANCELED`: 已取消\n- `EXECUTING`: 执行中\n    ","enum":["PENDING","SUCCESS","FAILED","CANCELED","EXECUTING"],"example":"SUCCESS"},"level":{"type":"number","description":"优先级，数字越小表示优先级越高。","example":0},"objectType":{"type":"string","description":"操作对象类型:\n- `department`: 部门\n- `user`: 用户\n    ","enum":["DEPARTMENT","USER"],"example":"DEPARTMENT"},"objectName":{"type":"string","description":"操作对象（用户、分组、部门）名称","example":"张三"},"objectId":{"type":"string","description":"操作对象 ID","example":"624cf96f7axxx7918478ee7"},"errMsg":{"type":"string","description":"执行失败的错误信息","example":""}},"required":["syncRiskOperationId","syncTaskId","createdAt","updatedAt","status","level","objectType","objectName","objectId"]},"SyncRiskOperationPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/SyncRiskOperationDto"}}},"required":["totalCount","list"]},"SyncRiskOperationPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SyncRiskOperationPagingDto"}]}},"required":["statusCode","message","data"]},"TriggerSyncRiskOperationDto":{"type":"object","properties":{"syncRiskOperationIds":{"description":"同步任务风险操作 ID","example":[1,2],"type":"array","items":{"type":"number"}}},"required":["syncRiskOperationIds"]},"TriggerSyncRiskOperationsDataDto":{"type":"object","properties":{"successList":{"description":"成功执行的风险操作任务","example":[1,2],"type":"array","items":{"type":"number"}},"faildList":{"description":"执行失败的风险操作任务","example":[3,4],"type":"array","items":{"type":"number"}}},"required":["successList","faildList"]},"TriggerSyncRiskOperationsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TriggerSyncRiskOperationsDataDto"}]}},"required":["statusCode","message","data"]},"CancelSyncRiskOperationDto":{"type":"object","properties":{"syncRiskOperationIds":{"description":"同步任务风险操作 ID","example":[1,2],"type":"array","items":{"type":"number"}}},"required":["syncRiskOperationIds"]},"CancelSyncRiskOperationsDataDto":{"type":"object","properties":{"successList":{"description":"成功取消的风险操作任务","example":[1,2],"type":"array","items":{"type":"number"}},"faildList":{"description":"取消失败的风险操作任务","example":[3,4],"type":"array","items":{"type":"number"}}},"required":["successList","faildList"]},"CancelSyncRiskOperationsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CancelSyncRiskOperationsDataDto"}]}},"required":["statusCode","message","data"]},"ListWebhooksDto":{"type":"object","properties":{"page":{"type":"number","description":"当前页数，从 1 开始","default":1,"example":1},"limit":{"type":"number","description":"每页数目，最大不能超过 50，默认为 10","default":10,"example":10}}},"GetUserActionLogsDto":{"type":"object","properties":{"requestId":{"type":"string","description":"请求 ID","example":"xxx"},"clientIp":{"type":"string","description":"客户端 IP","example":"xxx"},"eventType":{"type":"string","description":"事件类型","example":"login"},"userId":{"type":"string","description":"用户 ID","example":"xxx"},"appId":{"type":"string","description":"应用 ID","example":"xxx"},"start":{"type":"number","description":"开始时间戳","example":11},"end":{"type":"number","description":"结束时间戳","example":111},"success":{"type":"boolean","description":"请求是否成功","example":true},"pagination":{"description":"分页","allOf":[{"$ref":"#/components/schemas/ListWebhooksDto"}]}}},"ParsedUserAgent":{"type":"object","properties":{"device":{"type":"string","description":"使用的设备类型","example":"Desktop"},"browser":{"type":"string","description":"浏览器名称","example":"Chrome"},"os":{"type":"string","description":"操作系统","example":"Windows"}},"required":["device","browser","os"]},"GeoIpLocation":{"type":"object","properties":{"lon":{"type":"number","description":"经度","example":116.3889},"lat":{"type":"number","description":"纬度","example":39.9288}},"required":["lon","lat"]},"GeoIp":{"type":"object","properties":{"location":{"description":"地理位置","allOf":[{"$ref":"#/components/schemas/GeoIpLocation"}]},"country_name":{"type":"string","description":"Country Name","example":"China"},"country_code2":{"type":"string","description":"Country Code 2","example":"CN"},"country_code3":{"type":"string","description":"Country Code 3","example":"CN"},"region_name":{"type":"string","description":"Region Name","example":"Beijing"},"region_code":{"type":"string","description":"Region Code","example":"BJ"},"city_name":{"type":"string","description":"城市名称","example":"Beijing"},"continent_code":{"type":"string","description":"Continent Code","example":"AS"},"timezone":{"type":"string","description":"时区","example":"Asia/Shanghai"}},"required":["location","country_name","country_code2","country_code3","region_name","region_code","city_name","continent_code","timezone"]},"UserActionLogDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID","example":"xxx"},"userAvatar":{"type":"string","description":"用户头像","example":"https://files.authing.co/authing-console/default-app-logo.png"},"userDisplayName":{"type":"string","description":"用户显示名称，按照以下用户字段顺序进行展示：nickname > username > name > givenName > familyName -> email -> phone -> id","example":"张三"},"userLoginsCount":{"type":"number","description":"用户登录次数","example":3},"appId":{"type":"string","description":"应用 ID","example":"xxx"},"appName":{"type":"string","description":"应用名称","example":"示例应用"},"clientIp":{"type":"string","description":"客户端 IP，可根据登录时的客户端 IP 进行筛选。默认不传获取所有登录 IP 的登录历史。","example":"127.0.0.1"},"eventType":{"type":"string","description":"事件类型：\n- `login`: 登录\n- `logout`: 登出\n- `register`: 注册\n- `verifyMfa`: 验证 MFA\n- `updateUserProfile`: 修改用户信息\n- `updateUserPassword`: 修改密码\n- `updateUserEmail`: 修改邮箱\n- `updateUserPhone`: 修改手机号\n- `bindMfa`: 绑定 MFA\n- `bindEmail`: 绑定邮箱\n- `bindPhone`: 绑定手机号\n- `unbindPhone`: 解绑手机号\n- `unbindEmail`: 解绑邮箱\n- `unbindMFA`: 解绑 MFA\n- `deleteAccount`: 注销账号\n- `verifyFirstLogin`: 首次登录验证 \n    ","enum":["login","logout","register","verifyMfa","updateUserPrefile","updateUserPassword","updateUserEmail","updateUserPhone","bindMfa","bindEmail","bindPhone","unbindPhone","unbindEmail","unbindMFA","refreshUserTokenBySelf","deleteAccount","verifyFirstLogin"],"example":"login"},"eventDetail":{"type":"string","description":"事件详情","example":"登录账户「 test@example.com 」"},"success":{"type":"boolean","description":"是否成功","example":true},"appLoginUrl":{"type":"string","description":"应用登录地址","example":"https://example.authing.cn/login"},"appLogo":{"type":"string","description":"应用 Logo","example":"https://files.authing.co/authing-console/default-app-logo.png"},"userAgent":{"type":"string","description":"User Agent","example":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"},"parsedUserAgent":{"description":"解析过后的 User Agent","allOf":[{"$ref":"#/components/schemas/ParsedUserAgent"}]},"geoip":{"description":"地理位置","allOf":[{"$ref":"#/components/schemas/GeoIp"}]},"timestamp":{"type":"string","description":"时间","example":"2022-09-20T08:55:00.188+0800"},"requestId":{"type":"string","description":"请求 ID","example":"b63b9772-384c-4f2d-981b-01d1feed964d"}},"required":["userId","userAvatar","userDisplayName","userLoginsCount","appId","appName","eventType","success","appLoginUrl","appLogo","userAgent","parsedUserAgent","geoip","timestamp","requestId"]},"UserActionLogRespData":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","example":1},"list":{"description":"返回列表","type":"array","items":{"$ref":"#/components/schemas/UserActionLogDto"}}},"required":["totalCount","list"]},"UserActionLogRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserActionLogRespData"}]}},"required":["statusCode","message","data"]},"GetAdminAuditLogsDto":{"type":"object","properties":{"requestId":{"type":"string","description":"请求 ID","example":"xxx"},"clientIp":{"type":"string","description":"客户端 IP","example":"xxx"},"operationType":{"type":"string","description":"操作类型","example":"create"},"resourceType":{"type":"string","description":"资源类型","example":"user"},"userId":{"type":"string","description":"管理员用户 ID","example":"xxx"},"success":{"type":"boolean","description":"请求是否成功","example":true},"start":{"type":"number","description":"开始时间戳","example":11},"end":{"type":"number","description":"结束时间戳","example":111},"pagination":{"description":"分页","allOf":[{"$ref":"#/components/schemas/ListWebhooksDto"}]}}},"AdminAuditLogDto":{"type":"object","properties":{"adminUserId":{"type":"string","description":"管理员的用户 ID","example":"xxx"},"adminUserAvatar":{"type":"string","description":"管理员用户头像","example":"https://files.authing.co/authing-console/default-app-logo.png"},"adminUserDisplayName":{"type":"string","description":"管理员用户显示名称，按照以下用户字段顺序进行展示：nickname > username > name > givenName > familyName -> email -> phone -> id","example":"张三"},"clientIp":{"type":"string","description":"客户端 IP，可根据登录时的客户端 IP 进行筛选。默认不传获取所有登录 IP 的登录历史。","example":"127.0.0.1"},"operationType":{"type":"string","description":"操作类型：\n- `create`: 创建\n- `delete`: 删除\n- `import`: 导入\n- `export`: 导出\n- `update`: 修改\n- `refresh`: 刷新\n- `sync`: 同步\n- `invite`: 邀请\n- `resign`: 离职\n- `recover`: 恢复\n- `disable`: 禁用\n- `userEnable`: 启用\n    ","enum":["all","create","delete","import","export","update","refresh","sync","invite","resign","recover","disable","userEnable","activate","deactivate"],"example":"create"},"resourceType":{"type":"string","description":"事件类型：\n- `user`: 用户\n- `userpool`: 用户池\n- `tenant`: 租户\n- `userLoginState`: 用户登录态\n- `userAccountState`: 用户账号状态\n- `userGroup`: 用户分组\n- `fieldEncryptState`: 字段加密状态\n- `syncTask`: 同步任务\n- `socialConnection`: 社会化身份源\n- `enterpriseConnection`: 社会化身份源\n- `customDatabase`: 自定义数据库\n- `org`: 组织机构\n- `cooperator`: 协作管理员\n- `application`: 应用\n- `resourceNamespace`: 权限分组\n- `resource`: 资源\n- `role`: 角色\n- `roleAssign`: 角色授权\n- `policy`: 策略\n    ","enum":["all","user","userpool","tenant","userLoginState","userAccountState","userGroup","fieldEncryptState","syncTask","socialConnection","enterpriseConnection","customDatabase","org","cooperator","application","resourceNamespace","resource","role","roleAssign","policy"],"example":"user"},"eventDetail":{"type":"string","description":"事件详情","example":"修改了集成应用「Discourse」"},"operationParam":{"type":"string","description":"具体的操作参数","example":"{\"ext\":{\"_dontFinishNotYet\":true,\"_appName\":\"Discourse\"},\"protocol\":\"oidc\",\"isAsa\":false,\"name\":\"Discourse\",\"oidcConfig\":{\"grant_types\":[\"authorization_code\",\"password\",\"refresh_token\"],\"response_types\":[\"code\"],\"id_token_signed_response_alg\":\"RS256\",\"token_endpoint_auth_method\":\"client_secret_post\",\"introspection_endpoint_auth_method\":\"client_secret_post\",\"revocation_endpoint_auth_method\":\"client\"}"},"originValue":{"type":"string","description":"原始值","example":""},"targetValue":{"type":"string","description":"新值","example":""},"success":{"type":"boolean","description":"是否成功","example":true},"userAgent":{"type":"string","description":"User Agent","example":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"},"parsedUserAgent":{"description":"解析过后的 User Agent","allOf":[{"$ref":"#/components/schemas/ParsedUserAgent"}]},"geoip":{"description":"地理位置","allOf":[{"$ref":"#/components/schemas/GeoIp"}]},"timestamp":{"type":"string","description":"时间","example":"2022-09-20T08:55:00.188+0800"},"requestId":{"type":"string","description":"请求 ID","example":"b63b9772-384c-4f2d-981b-01d1feed964d"}},"required":["adminUserId","adminUserAvatar","adminUserDisplayName","operationType","resourceType","success","userAgent","parsedUserAgent","geoip","timestamp","requestId"]},"AdminAuditLogRespData":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","example":1},"list":{"description":"返回列表","type":"array","items":{"$ref":"#/components/schemas/AdminAuditLogDto"}}},"required":["totalCount","list"]},"AdminAuditLogRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/AdminAuditLogRespData"}]}},"required":["statusCode","message","data"]},"EmailTemplateDto":{"type":"object","properties":{"customizeEnabled":{"type":"boolean","description":"是否启用自定义模版","example":true},"type":{"type":"string","description":"模版类型:\n- `WELCOME_EMAIL`: 欢迎邮件\n- `FIRST_CREATED_USER`: 首次创建用户通知\n- `REGISTER_VERIFY_CODE`: 注册验证码\n- `LOGIN_VERIFY_CODE`: 登录验证码\n- `MFA_VERIFY_CODE`: MFA 验证码\n- `INFORMATION_COMPLETION_VERIFY_CODE`: 注册信息补全验证码\n- `FIRST_EMAIL_LOGIN_VERIFY`: 首次邮箱登录验证\n- `CONSOLE_CONDUCTED_VERIFY`: 在控制台发起邮件验证\n- `USER_PASSWORD_UPDATE_REMIND`: 用户到期提醒\n- `ADMIN_RESET_USER_PASSWORD_NOTIFICATION`: 管理员重置用户密码成功通知\n- `USER_PASSWORD_RESET_NOTIFICATION`: 用户密码重置成功通知\n- `RESET_PASSWORD_VERIFY_CODE`: 重置密码验证码\n- `SELF_UNLOCKING_VERIFY_CODE`: 自助解锁验证码\n- `EMAIL_BIND_VERIFY_CODE`: 绑定邮箱验证码\n- `EMAIL_UNBIND_VERIFY_CODE`: 解绑邮箱验证码\n    ","enum":["WELCOME_EMAIL","FIRST_CREATED_USER","REGISTER_VERIFY_CODE","LOGIN_VERIFY_CODE","MFA_VERIFY_CODE","INFORMATION_COMPLETION_VERIFY_CODE","FIRST_EMAIL_LOGIN_VERIFY","CONSOLE_CONDUCTED_VERIFY","USER_PASSWORD_UPDATE_REMIND","ADMIN_RESET_USER_PASSWORD_NOTIFICATION","USER_PASSWORD_RESET_NOTIFICATION","RESET_PASSWORD_VERIFY_CODE","SELF_UNLOCKING_VERIFY_CODE","EMAIL_BIND_VERIFY_CODE","EMAIL_UNBIND_VERIFY_CODE"],"example":"WELCOME_EMAIL"},"name":{"type":"string","description":"邮件模版名称","example":"欢迎邮件"},"subject":{"type":"string","description":"邮件主题","example":"欢迎加入 {{app_name}}"},"sender":{"type":"string","description":"邮件发件人名称","example":"{{client_name}}"},"content":{"type":"string","description":"邮件内容模版","example":"xxx"},"expiresIn":{"type":"number","description":"验证码/邮件有效时间，只有验证类邮件才有有效时间。","example":300},"redirectTo":{"type":"string","description":"完成邮件验证之后跳转到的地址，只针对 `FIRST_EMAIL_LOGIN_VERIFY` 和 `CONSOLE_CONDUCTED_VERIFY` 类型的模版有效。","example":"https://example.com"},"tplEngine":{"type":"string","description":"模版渲染引擎。Authing 邮件模版目前支持两种渲染引擎：\n- `handlebar`: 详细使用方法请见：[handlebars 官方文档](https://handlebarsjs.com/)\n- `ejs`: 详细使用方法请见：[ejs 官方文档](https://ejs.co/)\n\n默认将使用 `handlerbar` 作为膜拜渲染引擎。\n","enum":["handlebar","ejs"],"example":"handlebar","default":"handlebar"}},"required":["customizeEnabled","type","name","subject","sender","content"]},"EmailTemplateCategoryDto":{"type":"object","properties":{"title":{"type":"string","description":"类别名称","example":"通知模版"},"titleEn":{"type":"string","description":"类别英文名称","example":"Notification Template"},"desc":{"type":"string","description":"描述","example":"支持欢迎邮件和首次创建用户通知的邮件内容"},"descEn":{"type":"string","description":"英文描述","example":"We support the content of the Welcome Email and First-Created Account Notification"}},"required":["title","titleEn","desc","descEn"]},"GetEmailTemplatesDataDto":{"type":"object","properties":{"templates":{"description":"模版列表","type":"array","items":{"$ref":"#/components/schemas/EmailTemplateDto"}},"categories":{"description":"模版类型列表","type":"array","items":{"$ref":"#/components/schemas/EmailTemplateCategoryDto"}}},"required":["templates","categories"]},"GetEmailTemplatesRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetEmailTemplatesDataDto"}]}},"required":["statusCode","message","data"]},"UpdateEmailTemplateDto":{"type":"object","properties":{"type":{"type":"string","description":"模版类型:\n- `WELCOME_EMAIL`: 欢迎邮件\n- `FIRST_CREATED_USER`: 首次创建用户通知\n- `REGISTER_VERIFY_CODE`: 注册验证码\n- `LOGIN_VERIFY_CODE`: 登录验证码\n- `MFA_VERIFY_CODE`: MFA 验证码\n- `INFORMATION_COMPLETION_VERIFY_CODE`: 注册信息补全验证码\n- `FIRST_EMAIL_LOGIN_VERIFY`: 首次邮箱登录验证\n- `CONSOLE_CONDUCTED_VERIFY`: 在控制台发起邮件验证\n- `USER_PASSWORD_UPDATE_REMIND`: 用户到期提醒\n- `ADMIN_RESET_USER_PASSWORD_NOTIFICATION`: 管理员重置用户密码成功通知\n- `USER_PASSWORD_RESET_NOTIFICATION`: 用户密码重置成功通知\n- `RESET_PASSWORD_VERIFY_CODE`: 重置密码验证码\n- `SELF_UNLOCKING_VERIFY_CODE`: 自助解锁验证码\n- `EMAIL_BIND_VERIFY_CODE`: 绑定邮箱验证码\n- `EMAIL_UNBIND_VERIFY_CODE`: 解绑邮箱验证码\n    ","enum":["WELCOME_EMAIL","FIRST_CREATED_USER","REGISTER_VERIFY_CODE","LOGIN_VERIFY_CODE","MFA_VERIFY_CODE","INFORMATION_COMPLETION_VERIFY_CODE","FIRST_EMAIL_LOGIN_VERIFY","CONSOLE_CONDUCTED_VERIFY","USER_PASSWORD_UPDATE_REMIND","ADMIN_RESET_USER_PASSWORD_NOTIFICATION","USER_PASSWORD_RESET_NOTIFICATION","RESET_PASSWORD_VERIFY_CODE","SELF_UNLOCKING_VERIFY_CODE","EMAIL_BIND_VERIFY_CODE","EMAIL_UNBIND_VERIFY_CODE"],"example":"WELCOME_EMAIL"},"customizeEnabled":{"type":"boolean","description":"是否启用自定义模版","example":true},"name":{"type":"string","description":"邮件模版名称","example":"欢迎邮件"},"subject":{"type":"string","description":"邮件主题","example":"欢迎加入 {{app_name}}"},"sender":{"type":"string","description":"邮件发件人名称","example":"{{client_name}}"},"content":{"type":"string","description":"邮件内容模版","example":"xxx"},"expiresIn":{"type":"number","description":"验证码/邮件有效时间，只有验证类邮件才有有效时间。","example":300,"minimum":1},"redirectTo":{"type":"string","description":"完成邮件验证之后跳转到的地址，只针对 `FIRST_EMAIL_LOGIN_VERIFY` 和 `CONSOLE_CONDUCTED_VERIFY` 类型的模版有效。","example":"https://example.com"},"tplEngine":{"type":"string","description":"模版渲染引擎。Authing 邮件模版目前支持两种渲染引擎：\n- `handlebar`: 详细使用方法请见：[handlebars 官方文档](https://handlebarsjs.com/)\n- `ejs`: 详细使用方法请见：[ejs 官方文档](https://ejs.co/)\n\n默认将使用 `handlerbar` 作为膜拜渲染引擎。\n    ","enum":["handlebar","ejs"],"example":"handlebar","default":"handlebar"}},"required":["type","customizeEnabled","name","subject","sender","content"]},"EmailTemplateSingleItemRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/EmailTemplateDto"}]}},"required":["statusCode","message","data"]},"PreviewEmailTemplateDto":{"type":"object","properties":{"type":{"type":"string","description":"模版类型:\n- `WELCOME_EMAIL`: 欢迎邮件\n- `FIRST_CREATED_USER`: 首次创建用户通知\n- `REGISTER_VERIFY_CODE`: 注册验证码\n- `LOGIN_VERIFY_CODE`: 登录验证码\n- `MFA_VERIFY_CODE`: MFA 验证码\n- `INFORMATION_COMPLETION_VERIFY_CODE`: 注册信息补全验证码\n- `FIRST_EMAIL_LOGIN_VERIFY`: 首次邮箱登录验证\n- `CONSOLE_CONDUCTED_VERIFY`: 在控制台发起邮件验证\n- `USER_PASSWORD_UPDATE_REMIND`: 用户到期提醒\n- `ADMIN_RESET_USER_PASSWORD_NOTIFICATION`: 管理员重置用户密码成功通知\n- `USER_PASSWORD_RESET_NOTIFICATION`: 用户密码重置成功通知\n- `RESET_PASSWORD_VERIFY_CODE`: 重置密码验证码\n- `SELF_UNLOCKING_VERIFY_CODE`: 自助解锁验证码\n- `EMAIL_BIND_VERIFY_CODE`: 绑定邮箱验证码\n- `EMAIL_UNBIND_VERIFY_CODE`: 解绑邮箱验证码\n    ","enum":["WELCOME_EMAIL","FIRST_CREATED_USER","REGISTER_VERIFY_CODE","LOGIN_VERIFY_CODE","MFA_VERIFY_CODE","INFORMATION_COMPLETION_VERIFY_CODE","FIRST_EMAIL_LOGIN_VERIFY","CONSOLE_CONDUCTED_VERIFY","USER_PASSWORD_UPDATE_REMIND","ADMIN_RESET_USER_PASSWORD_NOTIFICATION","USER_PASSWORD_RESET_NOTIFICATION","RESET_PASSWORD_VERIFY_CODE","SELF_UNLOCKING_VERIFY_CODE","EMAIL_BIND_VERIFY_CODE","EMAIL_UNBIND_VERIFY_CODE"],"example":"WELCOME_EMAIL"},"content":{"type":"string","description":"邮件内容模版，可选，如果不传默认使用用户池配置的邮件模版进行渲染。","example":"xxx"},"subject":{"type":"string","description":"邮件主题，可选，如果不传默认使用用户池配置的邮件模版进行渲染。","example":"欢迎加入 {{app_name}}"},"sender":{"type":"string","description":"邮件发件人名称，可选，如果不传默认使用用户池配置的邮件模版进行渲染。","example":"{{client_name}}"},"expiresIn":{"type":"number","description":"验证码/邮件有效时间，只有验证类邮件才有有效时间。可选，如果不传默认使用用户池配置的邮件模版进行渲染。","example":300,"minimum":1},"tplEngine":{"type":"string","description":"模版渲染引擎。Authing 邮件模版目前支持两种渲染引擎：\n- `handlebar`: 详细使用方法请见：[handlebars 官方文档](https://handlebarsjs.com/)\n- `ejs`: 详细使用方法请见：[ejs 官方文档](https://ejs.co/)\n\n默认将使用 `handlerbar` 作为膜拜渲染引擎。\n    ","enum":["handlebar","ejs"],"example":"handlebar","default":"handlebar"}},"required":["type"]},"PreviewEmailTemplateDataDto":{"type":"object","properties":{"content":{"type":"string","description":"预览的邮件主体内容，为 html 格式文本","example":"xxx"},"subject":{"type":"string","description":"预览的邮件主题内容","example":"欢迎加入 Authing"},"sender":{"type":"string","description":"预览的邮件发件人内容","example":"test@example.com"}},"required":["content","subject","sender"]},"PreviewEmailTemplateRespDto":{"type":"object","properties":{"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PreviewEmailTemplateDataDto"}]}},"required":["data"]},"SMTPEmailProviderConfig":{"type":"object","properties":{"smtpHost":{"type":"string","description":"SMTP 地址","example":"smtp.example.com"},"smtpPort":{"type":"number","description":"SMTP 端口","example":465},"sender":{"type":"string","description":"用户名","example":"test"},"senderPass":{"type":"string","description":"密码","example":"passw0rd"},"enableSSL":{"type":"boolean","description":"是否启用 SSL","example":true}},"required":["smtpHost","smtpPort","sender","senderPass","enableSSL"]},"SendGridEmailProviderConfig":{"type":"object","properties":{"sender":{"type":"string","description":"用户名","example":"test"},"apikey":{"type":"string","description":"SendGrid API Key，详情请见 [SendGrid 文档](https://docs.sendgrid.com/ui/account-and-settings/api-keys)。","example":"xxxxxxxxxx"}},"required":["sender","apikey"]},"AliExmailEmailProviderConfig":{"type":"object","properties":{"sender":{"type":"string","description":"用户名","example":"test"},"senderPass":{"type":"string","description":"密码","example":"passw0rd"}},"required":["sender","senderPass"]},"TencentExmailEmailProviderConfig":{"type":"object","properties":{"sender":{"type":"string","description":"用户名","example":"test"},"senderPass":{"type":"string","description":"密码","example":"passw0rd"}},"required":["sender","senderPass"]},"EmailProviderDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否启用，如果不启用，将默认使用 Authing 内置的邮件服务","example":true},"type":{"type":"string","description":"第三方邮件服务商类型:\n- `smtp`: 标准 SMTP 邮件服务\n- `ali`: [阿里企业邮箱](https://www.ali-exmail.cn/Land/)\n- `tencent`: [腾讯企业邮箱](https://work.weixin.qq.com/mail/)\n- `sendgrid`: [SendGrid 邮件服务](https://sendgrid.com/)\n    ","enum":["smtp","ali","tencent","sendgrid"],"example":"smtp"},"smtpConfig":{"description":"SMTP 邮件服务配置","allOf":[{"$ref":"#/components/schemas/SMTPEmailProviderConfig"}]},"sendGridConfig":{"description":"SendGrid 邮件服务配置","allOf":[{"$ref":"#/components/schemas/SendGridEmailProviderConfig"}]},"aliExmailConfig":{"description":"阿里企业邮件服务配置","allOf":[{"$ref":"#/components/schemas/AliExmailEmailProviderConfig"}]},"tencentExmailConfig":{"description":"腾讯企业邮件服务配置","allOf":[{"$ref":"#/components/schemas/TencentExmailEmailProviderConfig"}]}},"required":["enabled"]},"SMTPEmailProviderConfigInput":{"type":"object","properties":{"smtpHost":{"type":"string","description":"SMTP 地址","example":"smtp.example.com"},"smtpPort":{"type":"number","description":"SMTP 端口","example":465},"sender":{"type":"string","description":"用户名","example":"test"},"senderPass":{"type":"string","description":"密码","example":"passw0rd"},"enableSSL":{"type":"boolean","description":"是否启用 SSL","example":true}},"required":["smtpHost","smtpPort","sender","senderPass","enableSSL"]},"SendGridEmailProviderConfigInput":{"type":"object","properties":{"sender":{"type":"string","description":"用户名","example":"test"},"apikey":{"type":"string","description":"SendGrid API Key，详情请见 [SendGrid 文档](https://docs.sendgrid.com/ui/account-and-settings/api-keys)。","example":"xxxxxxxxxx"}},"required":["sender","apikey"]},"AliExmailEmailProviderConfigInput":{"type":"object","properties":{"sender":{"type":"string","description":"用户名","example":"test"},"senderPass":{"type":"string","description":"密码","example":"passw0rd"}},"required":["sender","senderPass"]},"TencentExmailEmailProviderConfigInput":{"type":"object","properties":{"sender":{"type":"string","description":"用户名","example":"test"},"senderPass":{"type":"string","description":"密码","example":"passw0rd"}},"required":["sender","senderPass"]},"ConfigEmailProviderDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否启用，如果不启用，将默认使用 Authing 内置的邮件服务","example":true},"type":{"type":"string","description":"第三方邮件服务商类型:\n- `smtp`: 标准 SMTP 邮件服务\n- `ali`: [阿里企业邮箱](https://www.ali-exmail.cn/Land/)\n- `tencent`: [腾讯企业邮箱](https://work.weixin.qq.com/mail/)\n- `sendgrid`: [SendGrid 邮件服务](https://sendgrid.com/)\n    ","enum":["smtp","ali","tencent","sendgrid"],"example":"smtp"},"smtpConfig":{"description":"SMTP 邮件服务配置","allOf":[{"$ref":"#/components/schemas/SMTPEmailProviderConfigInput"}]},"sendGridConfig":{"description":"SendGrid 邮件服务配置","allOf":[{"$ref":"#/components/schemas/SendGridEmailProviderConfigInput"}]},"aliExmailConfig":{"description":"阿里企业邮件服务配置","allOf":[{"$ref":"#/components/schemas/AliExmailEmailProviderConfigInput"}]},"tencentExmailConfig":{"description":"腾讯企业邮件服务配置","allOf":[{"$ref":"#/components/schemas/TencentExmailEmailProviderConfigInput"}]}},"required":["enabled","type"]},"ApplicationDefaultLoginMethod":{"type":"object","properties":{"connectionType":{"type":"string","description":"默认的登录类型\n  - `PASSWORD`: 密码类型，取决于你开启的基础登录方式，支持手机号/邮箱/用户名 + 密码进行登录\n  - `PASSCODE`: 验证码类型，取决于你开启的基础登录方式，支持手机号/邮箱 + 验证码进行登录\n  - `QRCODE`: 扫码登录类型，目前包含自建 APP 扫码登录、关注微信公众号扫码登录、微信小程序扫码登录三种类型\n      ","enum":["PASSCODE","PASSWORD","QRCODE","LDAP","AD"],"example":"PASSCODE"},"qrcodeType":{"type":"string","description":"当 `connectionType` 为 `QRCODE` 时，此参数表示二维码类型。\n- `SELF_BUILT_APP`: 自建 APP 扫码\n- `WECHAT_OFFICIAL_ACCOUNT`: 扫码关注微信公众号登录\n- `WECHAT_MINI_PROGRAM`: 微信小程序扫码登录\n    ","enum":["SELF_BUILT_APP","WECHAT_OFFICIAL_ACCOUNT","WECHAT_MINI_PROGRAM"],"example":"WECHAT_OFFICIAL_ACCOUNT"},"qrcodeExtIdpConnId":{"type":"string","description":"当 `connectionType` 为 `QRCODE` 时，你需要通过此参数指定具体的扫码登录身份源连接的 ID。","example":"6303a2bf2xxxxx7f665f01bf1"},"adExtIdpConnId":{"type":"string","description":"当 `connectionType` 为 `AD` 时，你需要通过此参数指定具体的 AD 身份源连接的 ID。","example":"6303a2bf2xxxxx7f665f01bf1"},"ldapExtIdpConnId":{"type":"string","description":"当 `connectionType` 为 `LDAP` 时，你需要通过此参数指定具体的 LDAP 身份源连接的 ID。","example":"6303a2bf2xxxxx7f665f01bf1"}},"required":["connectionType","qrcodeType","qrcodeExtIdpConnId","adExtIdpConnId","ldapExtIdpConnId"]},"ApplicationEnabledExtIdpConnDto":{"type":"object","properties":{"isSocial":{"type":"boolean","description":"是否为社会化登录身份源连接","example":true},"extIdpId":{"type":"string","description":"身份源 ID","example":"6303a2bf2xxxxx7f665f01bf1"},"extIdpType":{"type":"string","description":"身份源类型","enum":["oidc","oauth2","saml","ldap","ad","cas","azure-ad","wechat","google","qq","wechatwork","dingtalk","weibo","github","alipay","apple","baidu","lark","gitlab","twitter","facebook","slack","linkedin","yidun","qingcloud","gitee","instagram","welink"],"example":"ad"},"extIdpConnId":{"type":"string","description":"身份源连接 ID","example":"6303a2bf2xxxxx7f665f01bf1"},"extIdpConnType":{"type":"string","description":"身份源连接类型","enum":["oidc","oauth","saml","ldap","ad","cas","azure-ad","alipay","facebook","twitter","google:mobile","google","wechat:pc","wechat:mobile","wechat:webpage-authorization","wechatmp-qrcode","wechat:miniprogram:default","wechat:miniprogram:qrconnect","wechat:miniprogram:app-launch","github","qq","wechatwork:corp:qrconnect","wechatwork:agency:qrconnect","wechatwork:service-provider:qrconnect","wechatwork:mobile","wechatwork:agency:mobile","dingtalk","dingtalk:provider","weibo","apple","apple:web","baidu","lark-internal","lark-public","gitlab","linkedin","slack","yidun","qingcloud","gitee","instagram","welink","ad-kerberos"],"example":"wechatwork:mobile"},"extIdpConnIdentifier":{"type":"string","description":"身份源连接可读唯一标志","example":"6303a2bf2xxxxx7f665f01bf1"},"extIdpConnDisplayName":{"type":"string","description":"微信","example":"6303a2bf2xxxxx7f665f01bf1"},"extIdpConnLogo":{"type":"string","description":"身份源连接 Logo","example":"https://files.authing.co/authing-console/social-connections/wechatBrowser.svg"}},"required":["isSocial","extIdpId","extIdpType","extIdpConnId","extIdpConnType","extIdpConnIdentifier","extIdpConnDisplayName","extIdpConnLogo"]},"ApplicationLoginConfigDto":{"type":"object","properties":{"mergeLoginAndRegisterPage":{"type":"boolean","description":"是否开启登录注册合并","default":false,"example":false},"enabledBasicLoginMethods":{"type":"array","description":"开启的基础登录方式","example":["EMAIL_CODE","EMAIL_PASSWORD"],"items":{"type":"string","enum":["PHONE_CODE","EMAIL_CODE","PHONE_PASSWORD","EMAIL_PASSWORD","USERNAME_PASSWORD","SELF_BUILT_APP_QRCODE"]}},"defaultLoginMethod":{"description":"应用默认登录方式（不包含社会化登录和企业身份源登录）","example":{"connectionType":"QRCODE","qrcodeExtIdpConnId":"6303a2bf2xxxxx7f665f01bf1"},"allOf":[{"$ref":"#/components/schemas/ApplicationDefaultLoginMethod"}]},"enabledExtIdpConns":{"description":"开启的外部身份源连接","example":["6303a2bf2xxxx7f665f01bf1","6321397b6xxxx1b8481ccfc0"],"type":"array","items":{"$ref":"#/components/schemas/ApplicationEnabledExtIdpConnDto"}},"showAuthorizationPage":{"type":"boolean","description":"是否展示用户授权页面","example":false}},"required":["mergeLoginAndRegisterPage","enabledBasicLoginMethods","defaultLoginMethod","enabledExtIdpConns","showAuthorizationPage"]},"ApplicationRegisterConfig":{"type":"object","properties":{"enabledBasicRegisterMethods":{"type":"array","description":"开启的注册方式","example":["EMAIL_CODE","PHONE_CODE"],"items":{"type":"string","enum":["PHONE_CODE","EMAIL_CODE","EMAIL_PASSWORD"]}},"defaultRegisterMethod":{"type":"string","description":"默认的注册类型\n    - `PASSWORD`: 密码类型，支持邮箱 + 密码进行登录\n    - `PASSCODE`: 验证码类型，取决于你开启的注册方式，支持手机号/邮箱 + 验证码进行登录\n        ","enum":["PASSCODE","PASSWORD"],"example":{"connectionType":"PASSWORD"}}},"required":["enabledBasicRegisterMethods","defaultRegisterMethod"]},"ApplicationAgreementDto":{"type":"object","properties":{"displayAt":{"type":"array","description":"展示的页面（可多选）：\n- `LoginPage`: 登录页面\n- `RegisterPage`: 注册页面\n    ","example":["LoginPage","RegisterPage"],"items":{"type":"string","enum":["LoginPage","RegisterPage"]}},"isRequired":{"type":"boolean","description":"是否要求必须勾选","example":true,"default":true},"lang":{"type":"string","description":"此协议针对什么语言有效:\n- `zh-CN`: 简体中文\n- `zh-TW`: 繁体中文\n- `en-US`: 英文\n- `ja-JP`: 日语\n    ","enum":["zh-CN","en-US","zh-TW","ja-JP"],"example":"zh-CN"},"content":{"type":"string","description":"此协议针对什么语言有效","example":"我已阅读并同意隐私协议与服务条款"}},"required":["displayAt","isRequired","lang","content"]},"ApplicationBrandingConfig":{"type":"object","properties":{"customCSSEnabled":{"type":"boolean","description":"是否开启自定义 CSS","example":false,"default":false},"customCSS":{"type":"string","description":"自定义 CSS 内容","example":"/* \nEdit login page css\neg：\n.authing-guard-layout {\n  background: black !important;\n}\nChange the background color\n*/"},"guardVersion":{"type":"string","description":"Guard 版本：\n- `Advanced`: 高级版\n- `Classical`: 经典版\n    ","enum":["Advanced","Classical"],"default":"Advanced","example":"Advanced"},"customLoadingImage":{"type":"string","description":"自定义加载图标，当登录框加载时会展示","example":"https://files.authing.co/user-contents/photos/cbd51df7-efb1-4b50-b38c-d8e5a04b1830.png"},"customBackground":{"type":"string","description":"自定义登录页背景，示例：\n- 图片背景：`url(https://files.authing.co/user-contents/photos/6c6b3726-4a04-4ba7-b686-1a275f81a47a.png) center/cover`\n- 纯色背景：`rgba(37,49,122,1)`\n    ","example":"https://files.authing.co/user-contents/photos/cbd51df7-efb1-4b50-b38c-d8e5a04b1830.png"},"showChangeLanguageButton":{"type":"boolean","description":"是否显示切换语言按钮","example":false,"default":false},"defaultLanguage":{"type":"string","description":"默认语言:\n- `zh-CN`: 简体中文\n- `zh-TW`: 繁体中文\n- `en-US`: 英文\n- `ja-JP`: 日语\n    ","enum":["zh-CN","en-US","zh-TW","ja-JP"],"example":"zh-CN"},"showForgetPasswordButton":{"type":"boolean","description":"是否显示忘记密码按钮","example":true,"default":true},"showEnterpriseConnections":{"type":"boolean","description":"是否显示企业身份源登录方式","example":true,"default":true},"showSocialConnections":{"type":"boolean","description":"是否显示社会化登录方式","example":true,"default":true},"showAgreement":{"type":"boolean","description":"是否展示登录注册协议","example":false,"default":false},"agreements":{"description":"展示的登录注册协议列表","type":"array","items":{"$ref":"#/components/schemas/ApplicationAgreementDto"}}},"required":["customCSSEnabled","guardVersion","showChangeLanguageButton","defaultLanguage","showForgetPasswordButton","showEnterpriseConnections","showSocialConnections","showAgreement","agreements"]},"OIDCConfig":{"type":"object","properties":{}},"SamlIdpConfig":{"type":"object","properties":{}},"OauthIdpConfig":{"type":"object","properties":{}},"CasIdPConfig":{"type":"object","properties":{}},"ApplicationDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"62eaa95fe0xxxx9a5295bf7c"},"appIdentifier":{"type":"string","description":"应用唯一标志","example":"example"},"appName":{"type":"string","description":"应用名称","example":"示例应用"},"appLogo":{"type":"string","description":"应用 Logo 链接","example":"示例应用"},"appDescription":{"type":"string","description":"应用描述信息","example":"示例描述信息"},"appType":{"type":"string","description":"应用类型","enum":["web","spa","native","api"],"example":"web"},"userPoolId":{"type":"string","description":"用户池 ID","example":""},"isIntegrateApp":{"type":"boolean","description":"是否为集成应用","example":false},"defaultProtocol":{"type":"string","description":"默认应用协议类型","enum":["oidc","oauth","saml","cas","asa"],"example":"oidc"},"redirectUris":{"description":"应用登录回调地址","example":["https://example.com/callback"],"type":"array","items":{"type":"string"}},"logoutRedirectUris":{"description":"应用退出登录回调地址","example":["https://example.com/logout-callback"],"type":"array","items":{"type":"string"}},"initLoginUri":{"type":"string","description":"发起登录地址：在 Authing 应用详情点击「体验登录」或在应用面板点击该应用图标时，会跳转到此 URL，默认为 Authing 登录页。","example":["https://example.com/login"]},"ssoEnabled":{"type":"boolean","description":"是否开启 SSO 单点登录","example":true},"ssoEnabledAt":{"format":"date-time","type":"string","description":"开启 SSO 单点登录的时间","example":"2022-07-03T02:20:30.000Z"},"loginConfig":{"description":"登录配置","allOf":[{"$ref":"#/components/schemas/ApplicationLoginConfigDto"}]},"registerConfig":{"description":"注册配置","allOf":[{"$ref":"#/components/schemas/ApplicationRegisterConfig"}]},"brandingConfig":{"description":"品牌化配置","allOf":[{"$ref":"#/components/schemas/ApplicationBrandingConfig"}]},"oidcConfig":{"description":"OIDC 协议配置","allOf":[{"$ref":"#/components/schemas/OIDCConfig"}]},"samlProviderEnabled":{"type":"boolean","description":"是否开启 SAML 身份提供商","example":false,"default":false},"samlConfig":{"description":"SAML 协议配置","allOf":[{"$ref":"#/components/schemas/SamlIdpConfig"}]},"oauthProviderEnabled":{"type":"boolean","description":"是否开启 OAuth 身份提供商","example":false,"default":false},"oauthConfig":{"description":"OAuth2.0 协议配置","allOf":[{"$ref":"#/components/schemas/OauthIdpConfig"}]},"casProviderEnabled":{"type":"boolean","description":"是否开启 CAS 身份提供商","example":false,"default":false},"casConfig":{"description":"CAS 协议配置","allOf":[{"$ref":"#/components/schemas/CasIdPConfig"}]},"customBrandingEnabled":{"type":"boolean","description":"是否自定义本应用的登录框，默认走全局的登录框配置。","example":false,"default":false},"customSecurityEnabled":{"type":"boolean","description":"是否自定义本应用的安全规则，默认走全局的安全配置。","example":false,"default":false},"template":{"type":"string","description":"集成应用的模版类型","example":"github"}},"required":["appId","appIdentifier","appName","appLogo","appType","userPoolId","isIntegrateApp","defaultProtocol","redirectUris","logoutRedirectUris","initLoginUri","ssoEnabled","loginConfig","registerConfig","brandingConfig","oidcConfig","samlProviderEnabled","oauthProviderEnabled","casProviderEnabled","customBrandingEnabled","customSecurityEnabled"]},"ApplicationSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ApplicationDto"}]}},"required":["statusCode","message","data"]},"ApplicationPaginatedDataDto":{"type":"object","properties":{"list":{"description":"列表数据","type":"array","items":{"$ref":"#/components/schemas/ApplicationDto"}},"totalCount":{"type":"number","description":"记录总数","example":10}},"required":["list","totalCount"]},"ApplicationPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ApplicationPaginatedDataDto"}]}},"required":["statusCode","message","data"]},"ApplicationSimpleInfoDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"62eaa95fe0xxxx9a5295bf7c"},"appIdentifier":{"type":"string","description":"应用唯一标志","example":"example"},"appName":{"type":"string","description":"应用名称","example":"示例应用"},"appLogo":{"type":"string","description":"应用 Logo 链接","example":"示例应用"},"appDescription":{"type":"string","description":"应用描述信息","example":"示例描述信息"},"appType":{"type":"string","description":"应用类型","enum":["web","spa","native","api"],"example":"web"},"isIntegrateApp":{"type":"boolean","description":"是否为集成应用","example":false}},"required":["appId","appIdentifier","appName","appLogo","appType","isIntegrateApp"]},"ApplicationSimpleInfoSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ApplicationSimpleInfoDto"}]}},"required":["statusCode","message","data"]},"ApplicationSimpleInfoPaginatedDataDto":{"type":"object","properties":{"list":{"description":"列表数据","type":"array","items":{"$ref":"#/components/schemas/ApplicationSimpleInfoDto"}},"totalCount":{"type":"number","description":"记录总数","example":10}},"required":["list","totalCount"]},"ApplicationSimpleInfoPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ApplicationSimpleInfoPaginatedDataDto"}]}},"required":["statusCode","message","data"]},"ApplicationDefaultLoginMethodInput":{"type":"object","properties":{"connectionType":{"type":"string","description":"默认的登录类型\n  - `PASSWORD`: 密码类型，取决于你开启的基础登录方式，支持手机号/邮箱/用户名 + 密码进行登录\n  - `PASSCODE`: 验证码类型，取决于你开启的基础登录方式，支持手机号/邮箱 + 验证码进行登录\n  - `QRCODE`: 扫码登录类型，目前包含自建 APP 扫码登录、关注微信公众号扫码登录、微信小程序扫码登录三种类型\n      ","enum":["PASSCODE","PASSWORD","QRCODE","LDAP","AD"],"example":"PASSCODE"},"qrcodeType":{"type":"string","description":"当 `connectionType` 为 `QRCODE` 时，此参数表示二维码类型。\n- `SELF_BUILT_APP`: 自建 APP 扫码\n- `WECHAT_OFFICIAL_ACCOUNT`: 扫码关注微信公众号登录\n- `WECHAT_MINI_PROGRAM`: 微信小程序扫码登录\n    ","enum":["SELF_BUILT_APP","WECHAT_OFFICIAL_ACCOUNT","WECHAT_MINI_PROGRAM"],"example":"WECHAT_OFFICIAL_ACCOUNT"},"qrcodeExtIdpConnId":{"type":"string","description":"当 `connectionType` 为 `QRCODE` 时，你需要通过此参数指定具体的扫码登录身份源连接的 ID。","example":"6303a2bf2xxxxx7f665f01bf1"},"adExtIdpConnId":{"type":"string","description":"当 `connectionType` 为 `AD` 时，你需要通过此参数指定具体的 AD 身份源连接的 ID。","example":"6303a2bf2xxxxx7f665f01bf1"},"ldapExtIdpConnId":{"type":"string","description":"当 `connectionType` 为 `LDAP` 时，你需要通过此参数指定具体的 LDAP 身份源连接的 ID。","example":"6303a2bf2xxxxx7f665f01bf1"}},"required":["connectionType"]},"ApplicationEnabledExtIdpConnInputDto":{"type":"object","properties":{"extIdpConnId":{"type":"string","description":"身份源连接 ID","example":"6303a2bf2xxxxx7f665f01bf1"}},"required":["extIdpConnId"]},"ApplicationLoginConfigInputDto":{"type":"object","properties":{"mergeLoginAndRegisterPage":{"type":"boolean","description":"是否开启登录注册合并","default":false,"example":false},"enabledBasicLoginMethods":{"type":"array","description":"开启的基础登录方式","default":["EMAIL_CODE","EMAIL_PASSWORD"],"items":{"type":"string","enum":["PHONE_CODE","EMAIL_CODE","PHONE_PASSWORD","EMAIL_PASSWORD","USERNAME_PASSWORD","SELF_BUILT_APP_QRCODE"]}},"defaultLoginMethod":{"description":"应用默认登录方式（不包含社会化登录和企业身份源登录）","example":{"connectionType":"QRCODE","qrcodeExtIdpConnId":"6303a2bf2xxxxx7f665f01bf1"},"allOf":[{"$ref":"#/components/schemas/ApplicationDefaultLoginMethodInput"}]},"enabledExtIdpConnIds":{"description":"开启的外部身份源连接","example":[{"extIdpConnId":"xxx"}],"type":"array","items":{"$ref":"#/components/schemas/ApplicationEnabledExtIdpConnInputDto"}},"enabledAllExtIdpConns":{"type":"boolean","description":"开启所有的外部身份源连接","default":false,"example":false},"showAuthorizationPage":{"type":"boolean","description":"是否展示用户授权页面","example":false}},"required":["showAuthorizationPage"]},"ApplicationRegisterConfigInputDto":{"type":"object","properties":{"enabledBasicRegisterMethods":{"type":"array","description":"开启的注册方式","example":["EMAIL_CODE","PHONE_CODE"],"items":{"type":"string","enum":["PHONE_CODE","EMAIL_CODE","EMAIL_PASSWORD"]}},"defaultRegisterMethod":{"type":"string","description":"默认的注册类型\n- `PASSWORD`: 密码类型，支持邮箱 + 密码进行登录\n- `PASSCODE`: 验证码类型，取决于你开启的注册方式，支持手机号/邮箱 + 验证码进行登录\n        ","enum":["PASSCODE","PASSWORD"],"example":"PASSWORD"}},"required":["enabledBasicRegisterMethods","defaultRegisterMethod"]},"ApplicationBrandingConfigInputDto":{"type":"object","properties":{"customCSSEnabled":{"type":"boolean","description":"是否开启自定义 CSS","example":false,"default":false},"customCSS":{"type":"string","description":"自定义 CSS 内容","example":"/* \nEdit login page css\neg：\n.authing-guard-layout {\n  background: black !important;\n}\nChange the background color\n*/"},"guardVersion":{"type":"string","description":"Guard 版本：\n- `Advanced`: 高级版\n- `Classical`: 经典版\n    ","enum":["Advanced","Classical"],"default":"Advanced","example":"Advanced"},"customLoadingImage":{"type":"string","description":"自定义加载图标，当登录框加载时会展示","example":"https://files.authing.co/user-contents/photos/cbd51df7-efb1-4b50-b38c-d8e5a04b1830.png"},"customBackground":{"type":"string","description":"自定义登录页背景，示例：\n- 图片背景：`url(https://files.authing.co/user-contents/photos/6c6b3726-4a04-4ba7-b686-1a275f81a47a.png) center/cover`\n- 纯色背景：`rgba(37,49,122,1)`\n    ","example":"https://files.authing.co/user-contents/photos/cbd51df7-efb1-4b50-b38c-d8e5a04b1830.png"},"showChangeLanguageButton":{"type":"boolean","description":"是否显示切换语言按钮","example":false,"default":false},"defaultLanguage":{"type":"string","description":"展示的默认语言：\n- `zh-CN`: 简体中文\n- `zh-TW`: 繁体中文\n- `en-US`: 英文\n- `ja-JP`: 日语\n\n默认情况下，Authing 登录页会根据用户浏览器语言自动渲染。\n    ","enum":["zh-CN","en-US","zh-TW","ja-JP"],"example":"zh-CN"},"showForgetPasswordButton":{"type":"boolean","description":"是否显示忘记密码按钮","example":true,"default":true},"showEnterpriseConnections":{"type":"boolean","description":"是否显示企业身份源登录方式","example":true,"default":true},"showSocialConnections":{"type":"boolean","description":"是否显示社会化登录方式","example":true,"default":true}}},"CreateApplicationDto":{"type":"object","properties":{"appName":{"type":"string","description":"应用名称","example":"示例应用"},"template":{"type":"string","description":"集成应用模版类型，**集成应用必填**。集成应用只需要填 `template` 和 `templateData` 两个字段，其他的字段将被忽略。","example":"github"},"templateData":{"type":"string","description":"集成应用配置信息，**集成应用必填**。","example":"github"},"appIdentifier":{"type":"string","description":"应用唯一标志，**自建应用必填**。","example":"example"},"appLogo":{"type":"string","description":"应用 Logo 链接","example":"示例应用"},"appDescription":{"type":"string","description":"应用描述信息","example":"示例描述信息"},"appType":{"type":"string","description":"应用类型","enum":["web","spa","native","api"],"example":"web","default":"web"},"defaultProtocol":{"type":"string","description":"默认应用协议类型","enum":["oidc","oauth","saml","cas","asa"],"example":"oidc"},"redirectUris":{"description":"应用登录回调地址","example":["https://example.com/callback"],"type":"array","items":{"type":"string"}},"logoutRedirectUris":{"description":"应用退出登录回调地址","example":["https://example.com/logout-callback"],"type":"array","items":{"type":"string"}},"initLoginUri":{"type":"string","description":"发起登录地址：在 Authing 应用详情点击「体验登录」或在应用面板点击该应用图标时，会跳转到此 URL，默认为 Authing 登录页。","example":["https://example.com/login"]},"ssoEnabled":{"type":"boolean","description":"是否开启 SSO 单点登录","example":false},"oidcConfig":{"description":"OIDC 协议配置","default":{"grant_types":["authorization_code","password","refresh_token"],"response_types":["code"],"id_token_signed_response_alg":"HS256","jwks_uri":null,"token_endpoint_auth_method":"client_secret_post","introspection_endpoint_auth_method":"client_secret_post","revocation_endpoint_auth_method":"client_secret_post","request_object_encryption_enc":null,"request_object_encryption_alg":null,"request_object_signing_alg":null,"userinfo_encrypted_response_enc":null,"userinfo_encrypted_response_alg":null,"userinfo_signed_response_alg":null,"id_token_encrypted_response_enc":null,"id_token_encrypted_response_alg":null,"jwks":null,"authorization_code_expire":600,"id_token_expire":1209600,"access_token_expire":1209600,"refresh_token_expire":2592000,"cas_expire":1209600,"skip_consent":true},"allOf":[{"$ref":"#/components/schemas/OIDCConfig"}]},"samlProviderEnabled":{"type":"boolean","description":"是否开启 SAML 身份提供商","example":false,"default":false},"samlConfig":{"description":"SAML 协议配置","default":{"acs":"REPLACE ME","authnContextClassRef":"urn:oasis:names:tc:SAML:2.0:ac:classes:unspecified","digestAlgorithm":"http://www.w3.org/2000/09/xmldsig#sha1","lifetimeInSeconds":3600,"nameIdentifierFormat":"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified","signatureAlgorithm":"http://www.w3.org/2000/09/xmldsig#rsa-sha1"},"allOf":[{"$ref":"#/components/schemas/SamlIdpConfig"}]},"oauthProviderEnabled":{"type":"boolean","description":"是否开启 OAuth 身份提供商","example":false,"default":false},"oauthConfig":{"description":"OAuth2.0 协议配置。【重要提示】不再推荐使用 OAuth2.0，建议切换到 OIDC。","example":{"grants":["authorization_code"],"access_token_lifetime":1209600,"refresh_token_lifetime":2592000,"introspection_endpoint_auth_method":"client_secret_post","revocation_endpoint_auth_method":"client_secret_post"},"allOf":[{"$ref":"#/components/schemas/OauthIdpConfig"}]},"casProviderEnabled":{"type":"boolean","description":"是否开启 CAS 身份提供商","example":false,"default":false},"casConfig":{"description":"CAS 协议配置","example":{"casUserIdentifier":"${user.username}","customAttributes":{"customAttr1":"123"},"stLifetime":300},"allOf":[{"$ref":"#/components/schemas/CasIdPConfig"}]},"loginConfig":{"description":"登录配置","allOf":[{"$ref":"#/components/schemas/ApplicationLoginConfigInputDto"}]},"registerConfig":{"description":"注册配置","allOf":[{"$ref":"#/components/schemas/ApplicationRegisterConfigInputDto"}]},"brandingConfig":{"description":"品牌化配置","allOf":[{"$ref":"#/components/schemas/ApplicationBrandingConfigInputDto"}]}},"required":["appName"]},"DeleteApplicationDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9"}},"required":["appId"]},"GetApplicationSecretDataDto":{"type":"object","properties":{"secret":{"type":"string","description":"应用密钥","example":"860830c5a647xxxxxx7bd4d0dd94bf23"}},"required":["secret"]},"GetApplicationSecretRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetApplicationSecretDataDto"}]}},"required":["statusCode","message","data"]},"RefreshApplicationSecretDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9"}},"required":["appId"]},"RefreshApplicationSecretDataDto":{"type":"object","properties":{"secret":{"type":"string","description":"新的应用密钥","example":"860830c5a647xxxxxx7bd4d0dd94bf23"}},"required":["secret"]},"RefreshApplicationSecretRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RefreshApplicationSecretDataDto"}]}},"required":["statusCode","message","data"]},"ListApplicationActiveUsersOptionsDto":{"type":"object","properties":{"pagination":{"description":"分页配置","example":{"page":1,"limit":10},"allOf":[{"$ref":"#/components/schemas/PaginationDto"}]},"withCustomData":{"type":"boolean","description":"是否获取自定义数据","default":false,"example":true},"withIdentities":{"type":"boolean","description":"是否获取 identities","default":false,"example":true},"withDepartmentIds":{"type":"boolean","description":"是否获取部门 ID 列表","default":false,"example":true}}},"ListApplicationActiveUsersDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9"},"options":{"description":"可选项","allOf":[{"$ref":"#/components/schemas/ListApplicationActiveUsersOptionsDto"}]}},"required":["appId"]},"GetApplicationPermissionStrategyDataDto":{"type":"object","properties":{"permissionStrategy":{"type":"string","description":"应用访问授权策略","enum":["ALLOW_ALL","DENY_ALL"],"example":"ALLOW_ALL"}},"required":["permissionStrategy"]},"GetApplicationPermissionStrategyRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetApplicationPermissionStrategyDataDto"}]}},"required":["statusCode","message","data"]},"UpdateApplicationPermissionStrategyDataDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9"},"permissionStrategy":{"type":"string","description":"应用访问授权策略","enum":["ALLOW_ALL","DENY_ALL"],"example":"ALLOW_ALL"}},"required":["appId","permissionStrategy"]},"ApplicationPermissionRecordItem":{"type":"object","properties":{"targetType":{"type":"string","description":"主体类型","enum":["USER","ROLE","GROUP","ORG"],"example":"USER"},"namespaceCode":{"type":"string","description":"权限分组 code，当主体类型为 \"ROLE\" 时必传","example":"code1"},"inheritByChildren":{"type":"boolean","description":"当主体类型为 \"ORG\" 时，授权是否被子节点继承","example":true,"default":true},"targetIdentifier":{"description":"主体标识列表，当主体类型为 \"USER\" 时，值应为用户 ID；当主体类型为 \"GROUP\" 时，值应为分组 code；当主体类型为 \"ROLE\" 时，值应为角色 code；当主体类型为 \"ORG\" 时，值应为组织节点 ID。最多 50 条。","example":["6229ffaxxxxxxxxcade3e3d9"],"type":"array","items":{"type":"string"}},"effect":{"type":"string","description":"授权作用，允许或拒绝","enum":["ALLOW","DENY"],"example":"ALLOW"}},"required":["targetType","targetIdentifier","effect"]},"AddApplicationPermissionRecord":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9"},"list":{"description":"授权主体列表，最多 10 条","type":"array","items":{"$ref":"#/components/schemas/ApplicationPermissionRecordItem"}}},"required":["appId","list"]},"DeleteApplicationPermissionRecordItem":{"type":"object","properties":{"targetType":{"type":"string","description":"主体类型","enum":["USER","ROLE","GROUP","ORG"],"example":"USER"},"namespaceCode":{"type":"string","description":"权限分组 code，当主体类型为 \"ROLE\" 时必传","example":"code1"},"targetIdentifier":{"description":"主体标识列表，当主体类型为 \"USER\" 时，值应为用户 ID；当主体类型为 \"GROUP\" 时，值应为分组 code；当主体类型为 \"ROLE\" 时，值应为角色 code；当主体类型为 \"ORG\" 时，值应为组织节点 ID。最多 50 条。","example":["6229ffaxxxxxxxxcade3e3d9"],"type":"array","items":{"type":"string"}}},"required":["targetType","targetIdentifier"]},"DeleteApplicationPermissionRecord":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9"},"list":{"description":"授权主体列表，最多 10 条","type":"array","items":{"$ref":"#/components/schemas/DeleteApplicationPermissionRecordItem"}}},"required":["appId","list"]},"CheckDomainAvailable":{"type":"object","properties":{"domain":{"type":"string","description":"域名","example":"domain-a"}},"required":["domain"]},"CheckDomainAvailableDataDto":{"type":"object","properties":{"available":{"type":"boolean","description":"是否可用","example":true}},"required":["available"]},"CheckDomainAvailableSecretRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CheckDomainAvailableDataDto"}]}},"required":["statusCode","message","data"]},"ChangeEmailStrategyDto":{"type":"object","properties":{"verifyOldEmail":{"type":"boolean","description":"修改邮箱时是否验证旧邮箱","example":true,"default":true}},"required":["verifyOldEmail"]},"ChangePhoneStrategyDto":{"type":"object","properties":{"verifyOldPhone":{"type":"boolean","description":"修改手机号时是否验证旧手机号","example":true,"default":true}},"required":["verifyOldPhone"]},"CookieSettingsDto":{"type":"object","properties":{"cookieExpiresIn":{"type":"number","description":"Cookie 有效时间：用户登录状态的有效时间（默认为 1209600 秒/ 14 天），过期后用户需要重新登录。对于应用面板及已加入应用面板的应用，将使用此 cookie  过期时间。","example":1209600,"default":1209600},"cookieExpiresOnBrowserSession":{"type":"boolean","description":"Cookie 过期时间基于浏览器会话：当前浏览器关闭后立即过期，下次打开需重新登录。","example":false,"default":false}},"required":["cookieExpiresIn","cookieExpiresOnBrowserSession"]},"RegisterAnomalyDetectionConfigDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否开启频繁注册限制","example":false,"default":false},"limit":{"type":"number","description":"在一定时间周期内，对于同一个 IP，最多只能注册多少次。","example":50,"default":50},"timeInterval":{"type":"number","description":"限定周期时间长度，单位为秒。","example":300,"default":300}},"required":["enabled","limit","timeInterval"]},"LoginFailCheckConfigDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否开启登录失败次数限制。","example":false,"default":false},"limit":{"type":"number","description":"在一定时间周期内，对于同一个 IP，最多登录失败多少次后会触发安全策略。","example":50,"default":50},"timeInterval":{"type":"number","description":"限定周期时间长度，单位为秒。","example":300,"default":300}},"required":["enabled","limit","timeInterval"]},"LoginPassowrdFailCheckConfigDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否开启登录失败次数限制。","example":false,"default":false},"limit":{"type":"number","description":"在一定时间周期内，对于同一个 IP，最多因为密码错误导致登录失败多少次后会触发安全策略。","example":50,"default":50},"timeInterval":{"type":"number","description":"限定周期时间长度，单位为秒。","example":300,"default":300}},"required":["enabled","limit","timeInterval"]},"LoginAnomalyDetectionConfigDto":{"type":"object","properties":{"loginFailStrategy":{"type":"string","description":"登录安全策略。当用户触发登录失败频率检测时，采用什么策略。目前支持验证码和锁定账号两种策略。当选择账号锁定策略的时候，只可以开启「登录密码错误限制」。","enum":["captcha","block-account"],"example":"captcha","default":"captcha"},"loginFailCheck":{"description":"登录失败次数限制：当用户登录输入信息错误的时候会被按照「登录安全策略」规则触发相对应的策略。","allOf":[{"$ref":"#/components/schemas/LoginFailCheckConfigDto"}]},"loginPasswordFailCheck":{"description":"登录密码错误限制：当用户登录输入密码信息错误的时候会被按照「登录安全策略」规则触发相对应的策略。","allOf":[{"$ref":"#/components/schemas/LoginPassowrdFailCheckConfigDto"}]}},"required":["loginFailStrategy","loginFailCheck","loginPasswordFailCheck"]},"SelfUnlockAccountConfigDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否允许用户自助解锁账号。","default":false,"example":false},"strategy":{"type":"string","description":"自助解锁方式，目前支持原密码 + 验证码和验证码两种方式。","enum":["captcha","password-captcha"],"default":"captcha","example":"captcha"}},"required":["enabled","strategy"]},"QrcodeLoginStrategyDto":{"type":"object","properties":{"qrcodeExpiresIn":{"type":"number","description":"二维码有效时间（秒）","example":120,"default":120},"ticketExpiresIn":{"type":"number","description":"ticket 有效时间（秒）","example":300,"default":300},"allowExchangeUserInfoFromBrowser":{"type":"boolean","description":"Web 轮询接口返回完整用户信息，详情见此文档：Web 轮询接口返回完整用户信息","example":true,"default":true},"returnFullUserInfo":{"type":"boolean","description":"允许在浏览器使用 ticket 换取用户信息，详情见此文档：Web 轮询接口返回完整用户信息","example":true,"default":false}},"required":["qrcodeExpiresIn","ticketExpiresIn","allowExchangeUserInfoFromBrowser","returnFullUserInfo"]},"SecuritySettingsDto":{"type":"object","properties":{"allowedOrigins":{"description":"安全域（CORS）","example":["https://example.com"],"type":"array","items":{"type":"string"}},"authingTokenExpiresIn":{"type":"number","description":"Authing Token 有效时间（秒）","example":1296000,"default":129600},"verifyCodeLength":{"type":"number","description":"验证码长度。包含短信验证码、邮件验证码和图形验证码。","example":6,"default":6},"verifyCodeMaxAttempts":{"type":"number","description":"验证码尝试次数。在一个验证码有效周期内（默认为 60 s），用户输入验证码错误次数超过此阈值之后，将会导致当前验证码失效，需要重新发送。","example":1,"default":1},"changeEmailStrategy":{"description":"用户修改邮箱的安全策略","example":{"verifyOldEmail":true},"allOf":[{"$ref":"#/components/schemas/ChangeEmailStrategyDto"}]},"changePhoneStrategy":{"description":"用户修改手机号的安全策略","example":{"verifyOldPhone":true},"allOf":[{"$ref":"#/components/schemas/ChangePhoneStrategyDto"}]},"cookieSettings":{"description":"Cookie 过期时间设置","allOf":[{"$ref":"#/components/schemas/CookieSettingsDto"}]},"registerDisabled":{"type":"boolean","description":"是否禁止用户注册，开启之后，用户将无法自主注册，只能管理员为其创建账号。针对 B2B 和 B2E 类型用户池，默认开启。","example":false,"default":false},"registerAnomalyDetection":{"description":"频繁注册检测配置","allOf":[{"$ref":"#/components/schemas/RegisterAnomalyDetectionConfigDto"}]},"completePasswordAfterPassCodeLogin":{"type":"boolean","description":"验证码注册后是否要求用户设置密码（仅针对 Authing 登录页和 Guard 有效，不针对 API 调用）。","example":false,"default":false},"loginAnomalyDetection":{"description":"登录防暴破配置","allOf":[{"$ref":"#/components/schemas/LoginAnomalyDetectionConfigDto"}]},"loginRequireEmailVerified":{"type":"boolean","description":"当使用邮箱登录时，未验证的邮箱登录时是否禁止登录并发送认证邮件。当用户收到邮件并完成验证之后，才能进行登录。"},"selfUnlockAccount":{"description":"用户自助解锁配置。注：只有绑定了手机号/邮箱的用户才可以自助解锁","allOf":[{"$ref":"#/components/schemas/SelfUnlockAccountConfigDto"}]},"enableLoginAccountSwitch":{"type":"boolean","description":"Authing 登录页面是否开启登录账号选择","example":false,"default":false},"qrcodeLoginStrategy":{"description":"APP 扫码登录安全配置","example":false,"default":false,"allOf":[{"$ref":"#/components/schemas/QrcodeLoginStrategyDto"}]}},"required":["authingTokenExpiresIn","verifyCodeLength","verifyCodeMaxAttempts","changeEmailStrategy","changePhoneStrategy","registerDisabled","registerAnomalyDetection","completePasswordAfterPassCodeLogin","loginAnomalyDetection","loginRequireEmailVerified","selfUnlockAccount","enableLoginAccountSwitch","qrcodeLoginStrategy"]},"SecuritySettingsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SecuritySettingsDto"}]}},"required":["statusCode","message","data"]},"UpdateSecuritySettingsDto":{"type":"object","properties":{"allowedOrigins":{"description":"安全域（CORS）","example":["https://example.com"],"type":"array","items":{"type":"string"}},"authingTokenExpiresIn":{"type":"number","description":"Authing Token 有效时间（秒）","example":1296000,"default":129600},"verifyCodeLength":{"type":"number","description":"验证码长度。包含短信验证码、邮件验证码和图形验证码。","example":6,"default":6},"verifyCodeMaxAttempts":{"type":"number","description":"验证码尝试次数。在一个验证码有效周期内（默认为 60 s），用户输入验证码错误次数超过此阈值之后，将会导致当前验证码失效，需要重新发送。","example":1,"default":1},"changeEmailStrategy":{"description":"用户修改邮箱的安全策略","example":{"verifyOldEmail":true},"allOf":[{"$ref":"#/components/schemas/ChangeEmailStrategyDto"}]},"changePhoneStrategy":{"description":"用户修改手机号的安全策略","example":{"verifyOldPhone":true},"allOf":[{"$ref":"#/components/schemas/ChangePhoneStrategyDto"}]},"cookieSettings":{"description":"Cookie 过期时间设置","allOf":[{"$ref":"#/components/schemas/CookieSettingsDto"}]},"registerDisabled":{"type":"boolean","description":"是否禁止用户注册，开启之后，用户将无法自主注册，只能管理员为其创建账号。针对 B2B 和 B2E 类型用户池，默认开启。","example":false,"default":false},"registerAnomalyDetection":{"description":"频繁注册检测配置","allOf":[{"$ref":"#/components/schemas/RegisterAnomalyDetectionConfigDto"}]},"completePasswordAfterPassCodeLogin":{"type":"boolean","description":"验证码注册后是否要求用户设置密码（仅针对 Authing 登录页和 Guard 有效，不针对 API 调用）。","example":false,"default":false},"loginAnomalyDetection":{"description":"登录防暴破配置","allOf":[{"$ref":"#/components/schemas/LoginAnomalyDetectionConfigDto"}]},"loginRequireEmailVerified":{"type":"boolean","description":"当使用邮箱登录时，未验证的邮箱登录时是否禁止登录并发送认证邮件。当用户收到邮件并完成验证之后，才能进行登录。"},"selfUnlockAccount":{"description":"用户自助解锁配置。注：只有绑定了手机号/邮箱的用户才可以自助解锁","allOf":[{"$ref":"#/components/schemas/SelfUnlockAccountConfigDto"}]},"enableLoginAccountSwitch":{"type":"boolean","description":"Authing 登录页面是否开启登录账号选择","example":false,"default":false},"qrcodeLoginStrategy":{"description":"APP 扫码登录安全配置","example":false,"default":false,"allOf":[{"$ref":"#/components/schemas/QrcodeLoginStrategyDto"}]}}},"MFASettingsDto":{"type":"object","properties":{"enabledFactors":{"type":"array","description":"开启的 MFA 认证因素列表","example":["SMS"],"default":[],"items":{"type":"string","enum":["OTP","SMS","EMAIL","FACE"]}}},"required":["enabledFactors"]},"MFASettingsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/MFASettingsDto"}]}},"required":["statusCode","message","data"]},"GoodsPackageDto":{"type":"object","properties":{"name":{"type":"string","description":"套餐包名称 name","example":"测试套餐包"},"nameEn":{"type":"string","description":"套餐包名称 nameEn","example":"test package"},"unitPrice":{"type":"string","description":"套餐包单价","example":"99.00"},"code":{"type":"string","description":"套餐包编码 code","example":"V4_B2C_Enterprise:1000"},"group":{"type":"string","description":"套餐包版本","example":"Enterprise"},"sceneCode":{"type":"string","description":"套餐包场景编码","example":"B2C"},"amount":{"type":"string","description":"套餐包 MAU 数量","example":"1000"}},"required":["name","nameEn","unitPrice","code","group","sceneCode","amount"]},"CostCurrentPackageInfo":{"type":"object","properties":{"code":{"type":"string","description":"套餐包编码","example":"V4_B2C_Enterprise:1000"},"endTime":{"type":"string","description":"套餐结束时间","example":"2022-09-09 00:00:00"},"overdueDays":{"type":"string","description":"套餐逾期天数","example":"0"},"goodsPackage":{"description":"套餐包信息","example":"套餐包信息","allOf":[{"$ref":"#/components/schemas/GoodsPackageDto"}]}},"required":["code","endTime","overdueDays","goodsPackage"]},"CostGetCurrentPackageRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CostCurrentPackageInfo"}]}},"required":["statusCode","message","data"]},"CurrentUsageDto":{"type":"object","properties":{"amount":{"type":"string","description":"权益总量","example":"0"},"current":{"type":"string","description":"权益当前使用量","example":"0"},"experience":{"type":"boolean","description":"是否是体验期权益","example":true},"modelCode":{"type":"string","description":"权益编码","example":"SocialConnections"},"modelName":{"type":"string","description":"权益名称","example":"SocialConnections：社交账号链接"}},"required":["amount","current","experience","modelCode","modelName"]},"CurrentUsageRespDto":{"type":"object","properties":{"usages":{"description":"当前用量实体","type":"array","items":{"$ref":"#/components/schemas/CurrentUsageDto"}}},"required":["usages"]},"CostGetCurrentUsageRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CurrentUsageRespDto"}]}},"required":["statusCode","message","data"]},"MauPeriodUsageHistoryDto":{"type":"object","properties":{"periodStartTime":{"type":"string","description":"周期开始时间(年月日)","example":"20210901"},"periodEndTime":{"type":"string","description":"周期结束时间(年月日)","example":"20220901"},"amount":{"type":"string","description":"当前周期使用的 mau 总数量","example":"0"},"current":{"type":"string","description":"当前周期使用的 mau 数量","example":"0"}},"required":["periodStartTime","periodEndTime","amount","current"]},"MauPeriodUsageHistory":{"type":"object","properties":{"records":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/MauPeriodUsageHistoryDto"}}},"required":["records"]},"CostGetMauPeriodUsageHistoryRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/MauPeriodUsageHistory"}]}},"required":["statusCode","message","data"]},"RightItemDto":{"type":"object","properties":{"rightsModelCode":{"type":"string","description":"权益编码","example":"SocialConnections"},"rightsModelName":{"type":"string","description":"权益名称","example":"SocialConnections"},"dataType":{"type":"string","description":"权益数据类型","example":"1：数量类型，2：数字只读，不做计量，3：断言类型，4：字符串只读"},"dataValue":{"type":"string","description":"权益值","example":"0"}},"required":["rightsModelCode","rightsModelName","dataType","dataValue"]},"RightItemRes":{"type":"object","properties":{"rightsItems":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/RightItemDto"}}},"required":["rightsItems"]},"CostGetAllRightItemRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RightItemRes"}]}},"required":["statusCode","message","data"]},"OrderItem":{"type":"object","properties":{"orderNo":{"type":"string","description":"订单号","example":"202209251234224"},"goodsName":{"type":"string","description":"套餐包名中文"},"goodsNameEn":{"type":"string","description":"套餐包名英文"},"goodsUnitPrice":{"type":"string","description":"单价"},"quantity":{"type":"string","description":"数量"},"actualAmount":{"type":"string","description":"实际金额"},"status":{"type":"string","description":"订单状态","example":"1：未支付，2：已支付，3：已完成，4：已取消，5：已过期"},"orderType":{"type":"string","description":"订单类型","example":"New：新购，Upgrade：升级，Renew：续费，Overdue_Correct：逾期纠正，Overflowed_Correct：逾量纠正"},"createTime":{"type":"string","description":"创建时间"},"source":{"type":"string","description":"Licence：license 订单，Offline：线下交易，Eadmin：后台开通，SelfHelp：自助下单，Cdkey：Cdkey 活动兑换"}},"required":["orderNo","goodsName","goodsNameEn","goodsUnitPrice","quantity","actualAmount","status","orderType","createTime","source"]},"GetOrdersRes":{"type":"object","properties":{"totalCount":{"type":"string","description":"总数","example":0},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/OrderItem"}}},"required":["totalCount","list"]},"CostGetOrdersRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetOrdersRes"}]}},"required":["statusCode","message","data"]},"CostGetOrderDetailRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/OrderItem"}]}},"required":["statusCode","message","data"]},"CostGetOrderPayDetailRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"orderNo":{"type":"string","description":"订单号","example":"2022080911591337da0aae9660"},"channelOrderNo":{"type":"string","description":"渠道订单号","example":"Mock22e7ecfd-745d-46ad-b563-ef4db5719bfb"},"paidAmount":{"type":"string","description":"渠道订单号","example":"7.9"},"paidTime":{"type":"string","description":"支付时间","example":"2022-08-09 11:59:46"},"paidAccountNo":{"type":"string","description":"支付账号","example":"62bec1591aeb41ad3f1a6503"},"payStatus":{"type":"string","description":"支付状态","example":"3"},"createTime":{"type":"string","description":"创建时间","example":"2022-08-09 11:59:20"},"payType":{"type":"string","description":"支付方式","example":"Alipay"}},"required":["statusCode","message","orderNo","channelOrderNo","paidAmount","paidTime","paidAccountNo","payStatus","createTime","payType"]},"SetUserCustomDataDto":{"type":"object","properties":{"success":{"type":"boolean","description":"操作是否成功","example":true}},"required":["success"]},"SetUserCustomDataRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SetUserCustomDataDto"}]}},"required":["statusCode","message","data"]},"RolesDto":{"type":"object","properties":{"description":{"type":"string","description":"用户描述","example":"6229c4deb3e4d8a20b6021ff"},"code":{"type":"string","description":"用户识别码，权限组下唯一","example":"6229c4deb3e4d8a20b6021ff"},"namespace":{"type":"string","description":"权限分组","example":"6229c4deb3e4d8a20b6021ff"}},"required":["description","code","namespace"]},"ResetPrincipalAuthenticationInfoRespDto":{"type":"object","properties":{"success":{"type":"boolean","description":"操作是否成功","example":true}},"required":["success"]},"Role":{"type":"object","properties":{}},"AccessTokenDto":{"type":"object","properties":{}}}},"paths":{"/api/v3/get-management-token":{"post":{"operationId":"V3ManagementController_getManagementToken","x-authing-hidden-from-sdk":true,"summary":"获取 Management API Token","description":"通过 AccessKey ID 与 AccessKey Secret 获取 Management API Token，此 Token 可以用来操作 Management API。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetManagementAccessTokenDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetManagementTokenRespDto"}}}}},"tags":["Token 管理"],"security":[{"bearer":[]}]}},"/api/v3/list-users":{"post":{"operationId":"UsersManagementController_listUsers","summary":"获取/搜索用户列表","description":"\n此接口用于获取用户列表，支持模糊搜索，以及通过用户基础字段、用户自定义字段、用户所在部门、用户历史登录应用等维度筛选用户。\n\n### 模糊搜素示例\n\n模糊搜索默认会从 `phone`, `email`, `name`, `username`, `nickname` 五个字段对用户进行模糊搜索，你也可以通过设置 `options.fuzzySearchOn`\n决定模糊匹配的字段范围：\n\n```json\n{\n  \"query\": \"北京\",\n  \"options\": {\n    \"fuzzySearchOn\": [\n      \"address\"\n    ]\n  }\n}\n```\n\n### 高级搜索示例\n\n你可以通过 `advancedFilter` 进行高级搜索，高级搜索支持通过用户的基础信息、自定义数据、所在部门、用户来源、登录应用、外部身份源信息等维度对用户进行筛选。\n**且这些筛选条件可以任意组合。**\n\n#### 筛选状态为禁用的用户\n\n用户状态（`status`）为字符串类型，可选值为 `Activated` 和 `Suspended`： \n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"status\",\n      \"operator\": \"EQUAL\",\n      \"value\": \"Suspended\"\n    }\n  ]\n}\n```\n\n#### 筛选邮箱中包含 `@example.com` 的用户\n\n用户邮箱（`email`）为字符串类型，可以进行模糊搜索：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"email\",\n      \"operator\": \"CONTAINS\",\n      \"value\": \"@example.com\"\n    }\n  ]\n}\n```\n\n#### 根据用户的任意扩展字段进行搜索\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"some-custom-key\",\n      \"operator\": \"EQUAL\",\n      \"value\": \"some-value\"\n    }\n  ]\n}\n```\n\n#### 根据用户登录次数筛选\n\n筛选登录次数大于 10 的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"loginsCount\",\n      \"operator\": \"GREATER\",\n      \"value\": 10\n    }\n  ]\n}\n```\n\n筛选登录次数在 10 - 100 次的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"loginsCount\",\n      \"operator\": \"BETWEEN\",\n      \"value\": [10, 100]\n    }\n  ]\n}\n```\n\n#### 根据用户上次登录时间进行筛选\n\n筛选最近 7 天内登录过的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"lastLoginTime\",\n      \"operator\": \"GREATER\",\n      \"value\": new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n    }\n  ]\n}\n```\n\n筛选在某一段时间内登录过的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"lastLoginTime\",\n      \"operator\": \"BETWEEN\",\n      \"value\": [\n        new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),\n        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n      ]\n    }\n  ]\n}\n```\n\n#### 根据用户曾经登录过的应用筛选\n\n筛选出曾经登录过应用 `appId1` 或者 `appId2` 的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"loggedInApps\",\n      \"operator\": \"IN\",\n      \"value\": [\n        \"appId1\",\n        \"appId2\"\n      ]\n    }\n  ]\n}\n```\n\n#### 根据用户所在部门进行筛选\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"department\",\n      \"operator\": \"IN\",\n      \"value\": [\n        {\n          \"organizationCode\": \"steamory\",\n          \"departmentId\": \"root\",\n          \"departmentIdType\": \"department_id\",\n          \"includeChildrenDepartments\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListUsersRequestDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserPaginatedRespDto userPaginatedRespDto = await managementClient.ListUsers(new ListUsersRequestDto\r\n            {\r\n                Options = new ListUsersOptionsDto\r\n                {\r\n                    Pagination = new PaginationDto\r\n                    {\r\n                        Limit = 50,\r\n                        Page = 1\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listUsers(array(\n    \"options\" => array(\n        \"pagination\" => array(\n            \"page\" => 1,\n            \"limit\" => 10,\n        ),\n    ),\n));\nprint_r($data);"}},"get":{"operationId":"UsersManagementController_listUsersLegacy","summary":"获取用户列表","description":"获取用户列表接口，支持分页，可以选择获取自定义数据、identities 等。","deprecated":true,"parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"status","required":false,"in":"query","description":"账户当前状态，如 已停用、已离职、正常状态、已归档","example":"Activated","schema":{"enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"type":"string"}},{"name":"updatedAtStart","required":false,"in":"query","description":"用户创建、修改开始时间，为精确到秒的 UNIX 时间戳；支持获取从某一段时间之后的增量数据","example":1655714763890,"schema":{"type":"number"}},{"name":"updatedAtEnd","required":false,"in":"query","description":"用户创建、修改终止时间，为精确到秒的 UNIX 时间戳；支持获取某一段时间内的增量数据。默认为当前时间","example":1655714763890,"schema":{"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-user":{"get":{"operationId":"UsersManagementController_getUser","summary":"获取用户信息","description":"通过用户 ID，获取用户详情，可以选择获取自定义数据、identities、选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserSingleRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n// 通过用户 ID 获取用户信息\n$data = $managementClient->getUser(array(\n    // 替换成真实的用户 ID\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n\n// 通过邮箱获取用户信息\n$data = $managementClient->getUser(array(\n    // 替换成真实的邮箱\n    \"userId\" => \"test@example.com\",\n    \"userIdType\" => \"email\",\n));\nprint_r($data);"}}},"/api/v3/get-user-batch":{"get":{"operationId":"UsersManagementController_getUserBatch","summary":"批量获取用户信息","description":"通过用户 ID 列表，批量获取用户信息，可以选择获取自定义数据、identities、选择指定用户 ID 类型等。","parameters":[{"name":"userIds","required":true,"in":"query","description":"用户 ID 数组","example":["6229ffaxxxxxxxxcade3e3d9","6229ffaxxxxxxxxcade3e3d0"],"schema":{"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            string userIds = \"AUTHING_USERID,AUTHING_USERID1\";\r\n\r\n            UserListRespDto userListRespDto = await managementClient.GetUserBatch(new GetUserBatchDto { UserIds = userIds });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n// 通过用户 ID 批量获取用户信息\n$data = $managementClient->getUserBatch(array(\n    // 替换成真实的用户 ID\n    \"userIds\" => [\n        \"635215b413xxxxf5f63c511a\"\n    ],\n));\nprint_r($data);\n\n// 通过邮箱批量获取用户信息\n$data = $managementClient->getUserBatch(array(\n    // 替换成真实的邮箱\n    \"userIds\" => [\n        \"test@example.com\"\n    ],\n    \"userIdType\" => \"email\",\n));\nprint_r($data);"}}},"/api/v3/create-user":{"post":{"operationId":"UsersManagementController_createUser","summary":"创建用户","description":"创建用户，邮箱、手机号、用户名必须包含其中一个，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份创建用户因此不需要进行手机号验证码检验等安全检测。  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUserReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserSingleRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateUserReqDto dto = new CreateUserReqDto()\r\n            {\r\n                Username = \"AUTHING_USERNAME\",\r\n                Status = CreateUserReqDto.status.ACTIVATED,\r\n                Password = \"AUTHING_PASSWORD\",\r\n                Options = new CreateUserOptionsDto { DepartmentIdType = CreateUserOptionsDto.departmentIdType.DEPARTMENT_ID }\r\n            };\r\n\r\n            UserSingleRespDto userSingleRespDto = await managementClient.CreateUser(dto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createUser(array(\n    \"username\" => \"test\",\n    \"password\" => \"passw0rd\"\n));\nprint_r($data);\n"}}},"/api/v3/create-users-batch":{"post":{"operationId":"UsersManagementController_createUsersBatch","summary":"批量创建用户","description":"批量创建用户，邮箱、手机号、用户名必须包含其中一个，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份创建用户因此不需要进行手机号验证码检验等安全检测。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUserBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateUserBatchReqDto reqDto = new CreateUserBatchReqDto()\r\n            {\r\n                List = new List<CreateUserInfoDto> { new CreateUserInfoDto()\r\n                    {\r\n                        Username = \"AUTHING_USERNAME\",\r\n                        Status = CreateUserInfoDto.status.ACTIVATED,\r\n                        Password = \"AUTHING_PASSWORD\"\r\n                    },\r\n                    new CreateUserInfoDto()\r\n                    {\r\n                        Username = \"AUTHING_USERNAME\" ,\r\n                        Status = CreateUserInfoDto.status.ACTIVATED,\r\n                        Password = \"AUTHINGPASSWORD\"\r\n                    }},\r\n                Options = new CreateUserOptionsDto { KeepPassword = true, ResetPasswordOnFirstLogin = false }\r\n            };\r\n\r\n\r\n\r\n            UserListRespDto userListRespDto = await managementClient.CreateUsersBatch(reqDto);\r\n        }\r\n    }\r\n}using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateUserBatchReqDto reqDto = new CreateUserBatchReqDto()\r\n            {\r\n                List = new List<CreateUserInfoDto> { new CreateUserInfoDto()\r\n                    {\r\n                        Username = \"AUTHING_USERNAME\",\r\n                        Status = CreateUserInfoDto.status.ACTIVATED,\r\n                        Password = \"AUTHING_PASSWORD\"\r\n                    },\r\n                    new CreateUserInfoDto()\r\n                    {\r\n                        Username = \"AUTHING_USERNAME\" ,\r\n                        Status = CreateUserInfoDto.status.ACTIVATED,\r\n                        Password = \"AUTHINGPASSWORD\"\r\n                    }},\r\n                Options = new CreateUserOptionsDto { KeepPassword = true, ResetPasswordOnFirstLogin = false }\r\n            };\r\n\r\n\r\n\r\n            UserListRespDto userListRespDto = await managementClient.CreateUsersBatch(reqDto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createUsersBatch(array(\n    \"list\" => array(\n        array(\n            \"username\" => \"test\",\n            \"password\" => \"passw0rd\"\n        )\n    )\n));\nprint_r($data);\n"}}},"/api/v3/update-user":{"post":{"operationId":"UsersManagementController_updateUser","summary":"修改用户资料","description":"通过用户 ID，修改用户资料，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份修改用户资料因此不需要进行手机号验证码检验等安全检测。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateUserReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserSingleRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UpdateUserReqDto dto = new UpdateUserReqDto()\r\n            {\r\n                UserId = \"AUTHING_USERID\",\r\n                Name = \"AUTHING_USER_NAME\",\r\n                Status = UpdateUserReqDto.status.ACTIVATED\r\n            };\r\n\r\n            UserSingleRespDto user = await managementClient.UpdateUser(dto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateUser(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n    \"nickname\" => \"张三\"\n));\nprint_r($data);\n"}}},"/api/v3/update-user-batch":{"post":{"operationId":"UsersManagementController_updateUserBatch","summary":"批量修改用户资料","description":"批量修改用户资料，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份修改用户资料因此不需要进行手机号验证码检验等安全检测。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateUserBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateUserBatch(array(\n    \"list\" => array(\n        array(\n            \"userId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n            \"nickname\" => \"张三\"\n        )\n    )\n));\nprint_r($data);"}}},"/api/v3/delete-users-batch":{"post":{"operationId":"UsersManagementController_deleteUsersBatch","summary":"删除用户","description":"通过用户 ID 列表，删除用户，支持批量删除，可以选择指定用户 ID 类型等。","deprecated":false,"parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteUsersBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DeleteUsersBatchDto dto = new DeleteUsersBatchDto()\r\n            {\r\n                UserIds = new List<string> { \"AUTHING_USERID\", \"AUTHING_USERID1\" }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccessDto = await managementClient.DeleteUsersBatch(dto);\r\n\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteUsersBatch(array(\n    \"userIds\" => array(\"635215b413xxxxf5f63c511a\"),\n));\nprint_r($data);\n"}}},"/api/v3/get-user-identities":{"get":{"operationId":"UsersManagementController_getUserIdentities","summary":"获取用户的外部身份源","description":"通过用户 ID，获取用户的外部身份源、选择指定用户 ID 类型。","deprecated":false,"parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IdentityListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            IdentityListRespDto identityListRespDto = await managementClient.GetUserIdentities(new GetUserIdentitiesDto\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserIdentities(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\"\n));\nprint_r($data);\n"}}},"/api/v3/get-user-roles":{"get":{"operationId":"UsersManagementController_getUserRoles","summary":"获取用户角色列表","description":"通过用户 ID，获取用户角色列表，可以选择所属权限分组 code、选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RolePaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RolePaginatedRespDto rolePaginatedRespDto = await managementClient.GetUserRoles(new GetUserRolesDto\r\n            {\r\n                UserId = \"AUTHING_USERID\",\r\n                Namespace = \"AUTHING_NAMESPACE\"\r\n            });\r\n\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserRoles(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\"\n));\nprint_r($data);\n"}}},"/api/v3/get-user-principal-authentication-info":{"get":{"operationId":"UsersManagementController_getUserPrincipalAuthenticationInfo","summary":"获取用户实名认证信息","description":"通过用户 ID，获取用户实名认证信息，可以选择指定用户 ID 类型。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PrincipalAuthenticationInfoPaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            PrincipalAuthenticationInfoPaginatedRespDto principalAuthenticationInfoPaginatedRespDto = await managementClient.GetUserPrincipalAuthenticationInfo(new GetUserPrincipalAuthenticationInfoDto\r\n            { \r\n                UserId = \"AUTHING_USERID,\r\n                UserIdType = \"user_id\" \r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserPrincipalAuthenticationInfo(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\"\n));\nprint_r($data);\n"}}},"/api/v3/reset-user-principal-authentication-info":{"post":{"operationId":"UsersManagementController_resetUserPrincipalAuthenticationInfo","summary":"删除用户实名认证信息","description":"通过用户 ID，删除用户实名认证信息，可以选择指定用户 ID 类型等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResetUserPrincipalAuthenticationInfoDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ResetUserPrincipalAuthenticationInfoDto resetUserPrincipalAuthenticationInfoDto = new ResetUserPrincipalAuthenticationInfoDto()\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            };\r\n\r\n            IsSuccessRespDto isSuccessDto = await managementClient.ResetUserPrincipalAuthenticationInfo(resetUserPrincipalAuthenticationInfoDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->resetUserPrincipalAuthenticationInfo(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\"\n));\nprint_r($data);\n"}}},"/api/v3/get-user-departments":{"get":{"operationId":"UsersManagementController_getUserDepartments","summary":"获取用户部门列表","description":"通过用户 ID，获取用户部门列表，支持分页，可以选择获取自定义数据、选择指定用户 ID 类型、增序或降序等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"sortBy","required":false,"in":"query","description":"排序依据，如 部门创建时间、加入部门时间、部门名称、部门标志符","example":"JoinDepartmentAt","schema":{"default":"JoinDepartmentAt","enum":["DepartmentCreatedAt","JoinDepartmentAt","DepartmentName","DepartmemtCode"],"type":"string"}},{"name":"orderBy","required":false,"in":"query","description":"增序或降序","example":"Desc","schema":{"default":"Desc","enum":["Asc","Desc"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserDepartmentPaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ResetUserPrincipalAuthenticationInfoDto resetUserPrincipalAuthenticationInfoDto = new ResetUserPrincipalAuthenticationInfoDto()\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            };\r\n\r\n            UserDepartmentPaginatedRespDto userDepartmentPaginatedRespDto = await managementClient.GetUserDepartments(new GetUserDepartmentsDto\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserDepartments(array(\n    \"userId\" => \"6351448ebe6d8742dedbc68a\"\n));\nprint_r($data);\n"}}},"/api/v3/set-user-departments":{"post":{"operationId":"UsersManagementController_setUserDepartments","summary":"设置用户所在部门","description":"通过用户 ID，设置用户所在部门，可以选择指定用户 ID 类型等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetUserDepartmentsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            SetUserDepartmentsDto setUserDepartmentDto = new SetUserDepartmentsDto()\r\n            {\r\n                UserId = \"AUTHING_USERID\",\r\n                Departments = new List<SetUserDepartmentDto>()\r\n                {\r\n                        new SetUserDepartmentDto{ DepartmentId= \"AUTHING_DEP_ID\",\r\n                        IsLeader=true,\r\n                        IsMainDepartment=false}\r\n                }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccessRespDto = await managementClient.SetUserDepartments(setUserDepartmentDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->setUserDepartments(array(\n    \"userId\" => \"6351448ebe6d8742dedbc68a\",\n    \"departments\" => array(\n        array(\n            // 需要替换成真实的部门 ID\n            \"departmentId\" => \"60b49eb83xxxxadb96f26e68\",\n            \"isLeader\" => true,\n            \"isMainDepartment\" => true,\n        )\n    ),\n));\nprint_r($data);"}}},"/api/v3/get-user-groups":{"get":{"operationId":"UsersManagementController_getUserGroups","summary":"获取用户分组列表","description":"通过用户 ID，获取用户分组列表，可以选择指定用户 ID 类型等。","deprecated":false,"parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupPaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            GroupPaginatedRespDto groupPaginatedRespDto = await managementClient.GetUserGroups(new GetUserGroupsDto\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserGroups(array(\n    \"userId\" => \"6351448ebe6d8742dedbc68a\"\n));\nprint_r($data);\n"}}},"/api/v3/get-user-mfa-info":{"get":{"operationId":"UsersManagementController_getUserMfaInfo","summary":"获取用户 MFA 绑定信息","description":"通过用户 ID，获取用户 MFA 绑定信息，可以选择指定用户 ID 类型等。","deprecated":false,"parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserMfaSingleRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserMfaSingleRespDto userMfaSingleRespDto = await managementClient.GetUserMfaInfo(new GetUserMfaInfoDto \r\n            { \r\n                UserId = \"AUTHING_USERID\", \r\n                UserIdType = \"user_id\" \r\n            });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserMfaInfo(array(\n    \"userId\" => \"6351448ebe6d8742dedbc68a\"\n));\nprint_r($data);\n"}}},"/api/v3/list-archived-users":{"get":{"operationId":"UsersManagementController_listArchivedUsers","summary":"获取已归档的用户列表","description":"获取已归档的用户列表，支持分页，可以筛选开始时间等。","deprecated":false,"parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"startAt","required":false,"in":"query","description":"开始时间，为精确到秒的 UNIX 时间戳，默认不指定","example":1655714763890,"schema":{"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListArchivedUsersSingleRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ListArchivedUsersSingleRespDto result = await managementClient.ListArchivedUsers(new ListArchivedUsersDto { });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listArchivedUsers(array(\n    \"page\" => 1,\n    \"limit\" => 10,\n));\nprint_r($data);\n"}}},"/api/v3/kick-users":{"post":{"operationId":"UsersManagementController_kickUsers","summary":"强制下线用户","description":"通过用户 ID、App ID 列表，强制让用户下线，可以选择指定用户 ID 类型等。","deprecated":false,"parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/KickUsersDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            KickUsersDto kickUsersDto = new KickUsersDto()\r\n            {\r\n                AppIds = new List<string> { \"AUTHING_APPID\" },\r\n                UserId = \"AUTHING_USERID\"\r\n            };\r\n\r\n            IsSuccessRespDto userSingleRespDto = await managementClient.KickUsers(kickUsersDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->kickUsers(array(\n    \"userId\" => \"6351448ebe6d8742dedbc68a\",\n));\nprint_r($data);\n"}}},"/api/v3/is-user-exists":{"post":{"operationId":"UsersManagementController_isUserExists","summary":"判断用户是否存在","description":"根据条件判断用户是否存在，可以筛选用户名、邮箱、手机号、第三方外部 ID 等。","deprecated":false,"parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsUserExistsReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsUserExistsRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            IsUserExistsReqDto dto = new IsUserExistsReqDto()\r\n            {\r\n                Username = \"AUTHING_USERNAME\"\r\n            };\r\n\r\n            IsUserExistsRespDto userSingleRespDto = await managementClient.IsUserExists(dto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->isUserExists(array(\n    \"email\" => \"test@example.com\",\n));\nprint_r($data);\n"}}},"/api/v3/get-user-accessible-apps":{"get":{"operationId":"UsersManagementController_getUserAccessibleApps","summary":"获取用户可访问的应用","description":"通过用户 ID，获取用户可访问的应用，可以选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AppListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AppListRespDto appListResp = await managementClient.GetUserAccessibleApps(new GetUserAccessibleAppsDto\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserAccessibleApps(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n"}}},"/api/v3/get-user-authorized-apps":{"get":{"operationId":"UsersManagementController_getUserAuthorizedApps","summary":"获取用户授权的应用","description":"通过用户 ID，获取用户授权的应用，可以选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AppListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AppListRespDto appListResp = await managementClient.GetUserAuthorizedApps(new GetUserAuthorizedAppsDto \r\n            { \r\n                UserId = \"AUTHING_USERID\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserAuthorizedApps(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n"}}},"/api/v3/has-any-role":{"post":{"operationId":"UsersManagementController_hasAnyRole","summary":"判断用户是否有某个角色","description":"通过用户 ID，判断用户是否有某个角色，支持传入多个角色，可以选择指定用户 ID 类型等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/HasAnyRoleReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HasAnyRoleRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            HasAnyRoleReqDto dto = new HasAnyRoleReqDto()\r\n            {\r\n                UserId = \"AUTHING_USERID\",\r\n                Roles = new List<HasRoleRolesDto>() { new HasRoleRolesDto { Code = \"AUTHING_ROLE_CODE\", Namespace = \"AUTHING_NAMESPACE\" } }\r\n            };\r\n\r\n            HasAnyRoleRespDto hasAnyRole = await managementClient.HasAnyRole(dto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->hasAnyRole(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n    \"roles\" => array(\n        array(\n            \"namespace\" => \"default\",\n            \"code\" => \"admin\",\n        )\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/get-user-login-history":{"get":{"operationId":"UsersManagementController_getUserLoginHistory","summary":"获取用户的登录历史记录","description":"通过用户 ID，获取用户登录历史记录，支持分页，可以选择指定用户 ID 类型、应用 ID、开始与结束时间戳等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}},{"name":"appId","required":false,"in":"query","description":"应用 ID","schema":{"type":"string"}},{"name":"clientIp","required":false,"in":"query","description":"客户端 IP","example":"127.0.0.1","schema":{"type":"string"}},{"name":"start","required":false,"in":"query","description":"开始时间戳（毫秒）","example":1647360000000,"schema":{"type":"number"}},{"name":"end","required":false,"in":"query","description":"结束时间戳（毫秒）","example":1648051199000,"schema":{"type":"number"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserLoginHistoryPaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserLoginHistoryPaginatedRespDto dto = await managementClient.GetUserLoginHistory(new GetUserLoginHistoryDto \r\n            { \r\n                UserId = \"AUTHING_USERID\",\r\n                Start = 1666341169000, \r\n                End = 1666341169000\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserLoginHistory(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n"}}},"/api/v3/get-user-loggedin-apps":{"get":{"operationId":"UsersManagementController_getUserLoggedinApps","summary":"获取用户曾经登录过的应用","description":"通过用户 ID，获取用户曾经登录过的应用，可以选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserLoggedInAppsListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserLoggedInAppsListRespDto dto = await managementClient.GetUserLoggedinApps(new GetUserLoggedinAppsDto\r\n            { \r\n                UserId = \"AUTHING_USERID\" \r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserLoggedinApps(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n"}}},"/api/v3/get-user-logged-in-identities":{"get":{"operationId":"UsersManagementController_getUserLoggedinIdentities","summary":"获取用户曾经登录过的身份源","description":"通过用户 ID，获取用户曾经登录过的身份源，可以选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserLoggedInIdentitiesRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserLoggedInIdentitiesRespDto dto = await managementClient.GetUserLoggedinIdentities(new GetUserLoggedInIdentitiesDto \r\n            { \r\n                UserId = \"AUTHING_USERID\" \r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserLoggedinIdentities(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n"}}},"/api/v3/resign-user":{"post":{"operationId":"UsersManagementController_resignUser","summary":"用户离职","description":"通过用户 ID，对用户进行离职操作","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResignUserReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResignUserRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ResignUserRespDto dto = await managementClient.ResignUser(new ResignUserReqDto\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->resignUser(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n"}}},"/api/v3/resign-user-batch":{"post":{"operationId":"UsersManagementController_resignUserBatch","summary":"批量用户离职","description":"通过用户 ID，对用户进行离职操作","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResignUserBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResignUserRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ResignUserRespDto dto = await managementClient.ResignUserBatch(new ResignUserBatchReqDto\r\n\r\n            {\r\n                UserIds = new List<string> { \"AUTHING_USERID\", \"AUTHING_USERID1\" }\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->resignUserBatch(array(\n    \"userIds\" => array(\"6229ffaxxxxxxxxcade3e3d9\")\n));\nprint_r($data);\n"}}},"/api/v3/get-user-authorized-resources":{"get":{"operationId":"UsersManagementController_getUserAuthorizedResources","summary":"获取用户被授权的所有资源","description":"通过用户 ID，获取用户被授权的所有资源，可以选择指定用户 ID 类型等，用户被授权的资源是用户自身被授予、通过分组继承、通过角色继承、通过组织机构继承的集合。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity"],"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}},{"name":"resourceType","required":false,"in":"query","description":"资源类型，如 数据、API、菜单、按钮","schema":{"enum":["DATA","API","MENU","BUTTON","UI"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthorizedResourcePaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AuthorizedResourcePaginatedRespDto dto = await managementClient.GetUserAuthorizedResources(new GetUserAuthorizedResourcesDto \r\n            {\r\n                UserId = \"AUTHING_USERID\",\r\n                Namespace = \"AUTHING_NAMESPACE\"\r\n            });\r\n\r\n        }\r\n    }\r\n}"}}},"/api/v3/check-session-status":{"post":{"operationId":"UsersManagementController_checkSessionStatus","summary":"检查某个用户在应用下是否具备 Session 登录态","description":"检查某个用户在应用下是否具备 Session 登录态","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckSessionStatusDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckSessionStatusRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CommonResponseDto dto = await managementClient.ImportOtp(new ImportOtpReqDto\r\n            {\r\n                List = new List<ImportOtpItemDto>\r\n                {\r\n                    new ImportOtpItemDto\r\n                    {\r\n                        Otp=new ImportOtpItemDataDto\r\n                        {\r\n                            RecoveryCode=\"AUTHING_RECOVERY_CODE\",\r\n                            Secret=\"AUTHING_OTP_SECRET\"\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->checkSessionStatus(array(\n    \"userId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n    \"appId\" => \"REPLACE_WITH_REAL_APP_ID\",\n));\nprint_r($data);\n"}}},"/api/v3/import-otp":{"post":{"operationId":"UsersManagementController_importOtp","summary":"导入用户的 OTP","description":"导入用户的 OTP","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImportOtpReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->importOtp(array(\n    \"list\" => array(\n        array(\n            \"userId\" => \"635215b413xxxxf5f63c511a\",\n            \"otp\" => array(\n                \"secret\" => \"HZ2F6J3AGNAVSOTV\",\n                \"recoveryCode\" => \"b471-8ec0-874a-087f-bccb-cd54\",\n            ),\n\n        )\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/get-organization":{"get":{"operationId":"OrganizationsManagementController_getOrganization","summary":"获取组织机构详情","description":"获取组织机构详情","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 Code（organizationCode）","example":"steamory","schema":{"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationSingleRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getOrganization(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n));\nprint_r($data);"}}},"/api/v3/get-organization-batch":{"get":{"operationId":"OrganizationsManagementController_getOrganizationsBatch","summary":"批量获取组织机构详情","description":"批量获取组织机构详情","parameters":[{"name":"organizationCodeList","required":true,"in":"query","description":"组织 Code（organizationCode）列表","example":["code1","code2"],"schema":{"type":"array","items":{"type":"string"}}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationListRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getOrganizationsBatch(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCodeList\" => \"code1,code2\",\n));\nprint_r($data);\n"}}},"/api/v3/list-organizations":{"get":{"operationId":"OrganizationsManagementController_listOrganizations","summary":"获取组织机构列表","description":"获取组织机构列表，支持分页。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"fetchAll","required":false,"in":"query","description":"拉取所有","example":false,"schema":{"default":false,"type":"boolean"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationPaginatedRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            OrganizationPaginatedRespDto dto = await managementClient.ListOrganizations(new ListOrganizationsDto\r\n            {\r\n                Limit = 50,\r\n                Page = 1,\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listOrganizations(array(\n    \"page\" => 1,\n    \"limit\" => 10,\n));\nprint_r($data);\n"}}},"/api/v3/create-organization":{"post":{"operationId":"OrganizationsManagementController_createOrganization","summary":"创建组织机构","description":"创建组织机构，会创建一个只有一个节点的组织机构，可以选择组织描述信息、根节点自定义 ID、多语言等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateOrganizationReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationSingleRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateOrganizationReqDto reqDto = new CreateOrganizationReqDto()\r\n            {\r\n                OrganizationCode = \"AUTHING_ORG_CODE\",\r\n                OrganizationName = \"AUTHING_ORG_NAME\",\r\n                Description = \"AUTHING_ORG_DESCRIPTION\",\r\n                OpenDepartmentId = \"AUTHING_OPENDEPARTMENTID\"\r\n            };\r\n\r\n            OrganizationSingleRespDto dto = await managementClient.CreateOrganization(reqDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createOrganization(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"organizationName\" => \"蒸汽记忆\",\n    \"description\" => \"组织描述信息\",\n));\nprint_r($data);\n"}}},"/api/v3/update-organization":{"post":{"operationId":"OrganizationsManagementController_updateOrganization","summary":"修改组织机构","description":"通过组织 code，修改组织机构，可以选择部门描述、新组织 code、组织名称等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateOrganizationReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationSingleRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UpdateOrganizationReqDto reqDto = new UpdateOrganizationReqDto()\r\n            {\r\n                OrganizationCode = \"AUTHING_ORG_CODE\",\r\n                OrganizationName = \"AUTHING_ORG_NAME\",\r\n                OrganizationNewCode = \"AUTHING_ORG_NEWCODE\"\r\n            };\r\n\r\n            OrganizationSingleRespDto dto = await managementClient.UpdateOrganization(reqDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateOrganization(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"description\" => \"新的描述信息\",\n));\nprint_r($data);\n"}}},"/api/v3/delete-organization":{"post":{"operationId":"OrganizationsManagementController_deleteOrganization","summary":"删除组织机构","description":"通过组织 code，删除组织机构树。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteOrganizationReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DeleteOrganizationReqDto reqDto = new DeleteOrganizationReqDto()\r\n            {\r\n                OrganizationCode = \"AUTHING_ORG_CODE\r\n            };\r\n\r\n            IsSuccessRespDto result = managementClient.DeleteOrganization(reqDto).Result;\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteOrganization(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n));\nprint_r($data);\n"}}},"/api/v3/search-organizations":{"get":{"operationId":"OrganizationsManagementController_searchOrganizations","summary":"搜索组织机构列表","description":"通过搜索关键词，搜索组织机构列表，支持分页。","parameters":[{"name":"keywords","required":true,"in":"query","description":"搜索关键词，如组织机构名称","example":"Authing","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationPaginatedRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            OrganizationPaginatedRespDto respDto = await managementClient.SearchOrganizations(new SearchOrganizationsDto\r\n            {\r\n                Keywords = \"AUTHING_KEYWORDS\" \r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->searchOrganizations(array(\n    \"keywords\" => \"test\",\n    \"page\" => 1,\n    \"limit\" => 10,\n));\nprint_r($data);\n"}}},"/api/v3/get-department":{"get":{"operationId":"DepartmentsManagementController_getDepartment","summary":"获取部门信息","description":"通过组织 code 以及 部门 ID 或 部门 code，获取部门信息，可以获取自定义数据。","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":false,"in":"query","description":"部门 ID，根部门传 `root`。departmentId 和 departmentCode 必传其一。","example":"root","schema":{"type":"string"}},{"name":"departmentCode","required":false,"in":"query","description":"部门 code。departmentId 和 departmentCode 必传其一。","example":"example","schema":{"type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id"],"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentSingleRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n            \r\n            DepartmentSingleRespDto dto = await managementClient.GetDepartment(new GetDepartmentDto { DepartmentCode = \"AUTHING_DEP_CODE\", OrganizationCode = \"AUTHING_ORG_CODE\" });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getDepartment(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n));\nprint_r($data);\n"}}},"/api/v3/create-department":{"post":{"operationId":"DepartmentsManagementController_createDepartment","summary":"创建部门","description":"通过组织 code、部门名称、父部门 ID，创建部门，可以设置多种参数。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateDepartmentReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentSingleRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateDepartmentReqDto reqDto = new CreateDepartmentReqDto()\r\n            {\r\n                ParentDepartmentId = \"AUTHING_DEP_ID\",\r\n                OrganizationCode = \"AUTHING_ORG_CODE\",\r\n                Code = \"AUTHING_DEP_CPDE\",\r\n                Name = \"AUTHING_DEP_NAME\",\r\n                Description = \"AUTHING_DEP_DESCRIPTION\",\r\n                OpenDepartmentId = \"AUTHING_DEP_OPENDEPARTMENTID\",\r\n                DepartmentIdType = CreateDepartmentReqDto.departmentIdType.DEPARTMENT_ID\r\n\r\n            };\r\n\r\n            DepartmentSingleRespDto dto = await managementClient.CreateDepartment(reqDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createDepartment(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"openDepartmentId\" => \"ou_7dab8a3d3cdccxxxxxx777c7ad535d62\",\n    \"name\" => \"开发部\",\n    \"description\" => \"技术研发部门\",\n    \"parentDepartmentId\" => \"root\",\n));\nprint_r($data);\n"}}},"/api/v3/update-department":{"post":{"operationId":"DepartmentsManagementController_updateDepartment","summary":"修改部门","description":"通过组织 code、部门 ID，修改部门，可以设置多种参数。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateDepartmentReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentSingleRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UpdateDepartmentReqDto reqDto = new UpdateDepartmentReqDto()\r\n            {\r\n                ParentDepartmentId = \"AUTHING_DEP_ID\",\r\n                OrganizationCode = \"AUTHING_ORG_CODE\",\r\n                Code = \"AUTHING_DEP_CPDE\",\r\n                Name = \"AUTHING_DEP_NAME\",\r\n                Description = \"AUTHING_DEP_DESCRIPTION\",\r\n                DepartmentIdType = UpdateDepartmentReqDto.departmentIdType.DEPARTMENT_ID\r\n\r\n            };\r\n\r\n            DepartmentSingleRespDto dto = await managementClient.UpdateDepartment(reqDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateDepartment(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n    \"description\" => \"新的描述信息\",\n));\nprint_r($data);\n"}}},"/api/v3/delete-department":{"post":{"operationId":"DepartmentsManagementController_deleteDepartment","summary":"删除部门","description":"通过组织 code、部门 ID，删除部门。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteDepartmentReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DeleteDepartmentReqDto reqDto = new DeleteDepartmentReqDto()\r\n            {\r\n\r\n                OrganizationCode = \"AUTHING_ORG_CODE\",\r\n                DepartmentId = \"AUTHING_DEP_ID\",\r\n                DepartmentIdType = DeleteDepartmentReqDto.departmentIdType.DEPARTMENT_ID\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess = await managementClient.DeleteDepartment(reqDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteDepartment(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    // 需要替换成真实的部门 ID\n    \"departmentId\" => \"60b49eb83xxxxadb96f26e68\",\n));\nprint_r($data);\n"}}},"/api/v3/search-departments":{"post":{"operationId":"DepartmentsManagementController_searchDepartments","summary":"搜索部门","description":"通过组织 code、搜索关键词，搜索部门，可以搜索组织名称等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SearchDepartmentsReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentListRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            SearchDepartmentsReqDto reqDto = new SearchDepartmentsReqDto()\r\n            {\r\n\r\n                Keywords = \"AUTHING_KEY_WORDS\",\r\n                OrganizationCode = \"AUTHING_ORG_CODE\"\r\n            };\r\n\r\n            DepartmentListRespDto respDto = await managementClient.SearchDepartments(reqDto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->searchDepartments(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"keywords\" => \"test\",\n));\nprint_r($data);\n"}}},"/api/v3/list-children-departments":{"get":{"operationId":"DepartmentsManagementController_listChildrenDepartments","summary":"获取子部门列表","description":"通过组织 code、部门 ID，获取子部门列表，可以选择获取自定义数据、虚拟组织等。","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":true,"in":"query","description":"需要获取的部门 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id"],"type":"string"}},{"name":"excludeVirtualNode","required":false,"in":"query","description":"是否要排除虚拟组织","example":false,"schema":{"default":false,"type":"boolean"}},{"name":"onlyVirtualNode","required":false,"in":"query","description":"是否只包含虚拟组织","example":false,"schema":{"default":false,"type":"boolean"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentPaginatedRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DepartmentPaginatedRespDto respDto = await managementClient.ListChildrenDepartments(new ListChildrenDepartmentsDto { OrganizationCode = \"AUTHING_ORG_CODE\", DepartmentId = \"AUTHING_DEP_ID\" });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listChildrenDepartments(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n));\nprint_r($data);\n"}}},"/api/v3/list-department-members":{"get":{"operationId":"DepartmentsManagementController_listDepartmentMembers","summary":"获取部门成员列表","description":"通过组织 code、部门 ID、排序，获取部门成员列表，支持分页，可以选择获取自定义数据、identities 等。","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":true,"in":"query","description":"部门 ID，根部门传 `root`","example":"root","schema":{"type":"string"}},{"name":"sortBy","required":true,"in":"query","description":"排序依据","example":"JoinDepartmentAt","schema":{"default":"JoinDepartmentAt","enum":["Default","JoinDepartmentAt"],"type":"string"}},{"name":"orderBy","required":true,"in":"query","description":"增序还是倒序","example":"Desc","schema":{"default":"Desc","enum":["Asc","Desc"],"type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id"],"type":"string"}},{"name":"includeChildrenDepartments","required":false,"in":"query","description":"是否包含子部门的成员","example":false,"schema":{"default":false,"type":"boolean"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserPaginatedRespDto respDto = await managementClient.ListDepartmentMembers(new ListDepartmentMembersDto { DepartmentId = \"AUTHING_DEP_ID\", DepartmentIdType = \"department_id\", OrganizationCode = \"AUTHING_ORG_CODE\" });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listDepartmentMembers(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n));\nprint_r($data);\n"}}},"/api/v3/list-department-member-ids":{"get":{"operationId":"DepartmentsManagementController_listDepartmentMemberIds","summary":"获取部门直属成员 ID 列表","description":"通过组织 code、部门 ID，获取部门直属成员 ID 列表。","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":true,"in":"query","description":"部门 ID，根部门传 `root`","example":"root","schema":{"type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserIdListRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var respDto = await managementClient.ListDepartmentMemberIds(new ListDepartmentMemberIdsDto { DepartmentId = \"634e6a074033a8c4fe39f873\", OrganizationCode = \"AUTHING_ORG_CODE\" });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listDepartmentMemberIds(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n));\nprint_r($data);\n"}}},"/api/v3/search-department-members":{"get":{"operationId":"DepartmentsManagementController_searchDepartmentMembers","summary":"搜索部门下的成员","description":"通过组织 code、部门 ID、搜索关键词，搜索部门下的成员，支持分页，可以选择获取自定义数据、identities 等。","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":true,"in":"query","description":"部门 ID，根部门传 `root`","example":"root","schema":{"type":"string"}},{"name":"keywords","required":true,"in":"query","description":"搜索关键词，如成员名称","example":"张三","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id"],"type":"string"}},{"name":"includeChildrenDepartments","required":false,"in":"query","description":"是否包含子部门的成员","example":false,"schema":{"default":false,"type":"boolean"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserPaginatedRespDto respDto = await managementClient.SearchDepartmentMembers(new SearchDepartmentMembersDto \r\n            { \r\n                DepartmentId = \"AUTHING_DEP_ID\", \r\n                DepartmentIdType = \"department_id\", \r\n                Keywords = \"AUTHING_KEYWORDS\", \r\n                OrganizationCode = \"AUTHING_ORG_CODE\" \r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->searchDepartmentMembers(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n    \"keywords\" => \"张三\",\n));\nprint_r($data);\n"}}},"/api/v3/add-department-members":{"post":{"operationId":"DepartmentsManagementController_addDepartmentMembers","summary":"部门下添加成员","description":"通过部门 ID、组织 code，添加部门下成员。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AddDepartmentMembersReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AddDepartmentMembersReqDto addDepartmentMembersReqDto = new AddDepartmentMembersReqDto()\r\n            {\r\n                DepartmentId = \"AUTHING_DEP_ID\",\r\n                OrganizationCode = \"AUTHING_ORG_CODE\",\r\n                UserIds = new List<string> { \"AUTHING_USERID\", \"AUTHNG_USERID2\" }\r\n            };\r\n\r\n            IsSuccessRespDto respDto = await managementClient.AddDepartmentMembers(addDepartmentMembersReqDto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->addDepartmentMembers(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n    \"userIds\" => array(\"623c20b2a0xxxxaaf41b17da\"),\n));\nprint_r($data);\n"}}},"/api/v3/remove-department-members":{"post":{"operationId":"DepartmentsManagementController_removeDepartmentMembers","summary":"部门下删除成员","description":"通过部门 ID、组织 code，删除部门下成员。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveDepartmentMembersReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RemoveDepartmentMembersReqDto remove = new RemoveDepartmentMembersReqDto()\r\n            {\r\n                DepartmentId = \"AUTHING_DEP_ID\",\r\n                OrganizationCode = \"AUTHING_ORG_ID\",\r\n                UserIds = new List<string> { \"AUTHING_USERID\", \"AUTHING_USERID2\" }\r\n            };\r\n\r\n            IsSuccessRespDto respDto = await managementClient.RemoveDepartmentMembers(remove);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->removeDepartmentMembers(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n    \"userIds\" => array(\"623c20b2a0xxxxaaf41b17da\"),\n));\nprint_r($data);\n"}}},"/api/v3/get-parent-department":{"get":{"operationId":"DepartmentsManagementController_getParentDepartment","summary":"获取父部门信息","description":"通过组织 code、部门 ID，获取父部门信息，可以选择获取自定义数据等。","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":true,"in":"query","description":"部门 ID","example":"root","schema":{"type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id"],"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentSingleRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DepartmentSingleRespDto respDto = await managementClient.GetParentDepartment(new GetParentDepartmentDto \r\n            {\r\n                DepartmentId = \"AUTHING_DEP_ID\",\r\n                OrganizationCode = \"AUTHING_ORG_CODE\" \r\n            });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getParentDepartment(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    // 需要替换成真实的部门 ID\n    \"departmentId\" => \"623c20b2a0xxxxaaf41b17da\",\n));\nprint_r($data);\n"}}},"/api/v3/is-user-in-department":{"get":{"operationId":"DepartmentsManagementController_isUserInDepartment","summary":"判断用户是否在某个部门下","description":"通过组织 code、部门 ID，判断用户是否在某个部门下，可以选择包含子部门。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":true,"in":"query","description":"部门 ID，根部门传 `root`。departmentId 和 departmentCode 必传其一。","example":"root","schema":{"type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id"],"type":"string"}},{"name":"includeChildrenDepartments","required":false,"in":"query","description":"是否包含子部门","example":false,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsUserInDepartmentRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            IsUserInDepartmentRespDto respDto = await managementClient.IsUserInDepartment(new IsUserInDepartmentDto\r\n            {\r\n                UserId = \"AUTHING_USERID\",\r\n                DepartmentId = \"AUTHING_DEP_ID\",\r\n                OrganizationCode = \"AUTHING_ORG_CODE\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->isUserInDepartment(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    // 需要替换成真实的部门 ID\n    \"departmentId\" => \"623c20b2a0xxxxaaf41b17da\",\n    // 需要替换成真实的用户 ID\n    \"userId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n));\nprint_r($data);\n"}}},"/api/v3/get-group":{"get":{"operationId":"GroupsManagementController_getGroup","summary":"获取分组详情","description":"通过分组 code，获取分组详情。","parameters":[{"name":"code","required":true,"in":"query","description":"分组 code","example":"developer","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupSingleRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            GroupSingleRespDto dto = await managementClient.GetGroup(new GetGroupDto { Code = \"AUTHING_GROUP_CODE\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getGroup(array(\n    \"code\" => \"developer\"\n));\nprint_r($data);\n"}}},"/api/v3/list-groups":{"get":{"operationId":"GroupsManagementController_listGroups","summary":"获取分组列表","description":"获取分组列表，支持分页。","parameters":[{"name":"keywords","required":false,"in":"query","description":"搜索分组 code 或分组名称","example":"分组1","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupPaginatedRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            GroupPaginatedRespDto dto = await managementClient.ListGroups(new ListGroupsDto { Page = 1, Limit = 10 });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listGroups(array(\n    \"page\" => 1,\n    \"limit\" => 10,\n));\nprint_r($data);\n"}}},"/api/v3/create-group":{"post":{"operationId":"GroupsManagementController_createGroup","summary":"创建分组","description":"创建分组，一个分组必须包含分组名称与唯一标志符 code，且必须为一个合法的英文标志符，如 developers。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateGroupReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupSingleRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateGroupReqDto createGroupReqDto = new CreateGroupReqDto()\r\n            {\r\n                Name = \"开发者\",\r\n                Code = \"developer\",\r\n                Description = \"描述内容\"\r\n            };\r\n\r\n            GroupSingleRespDto dto = await managementClient.CreateGroup(createGroupReqDto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createGroup(array(\n    \"code\" => \"developer\",\n    \"name\" => \"开发者\",\n    \"description\" => \"描述内容\",\n));\nprint_r($data);\n"}}},"/api/v3/create-groups-batch":{"post":{"operationId":"GroupsManagementController_createGroupsBatch","summary":"批量创建分组","description":"批量创建分组，一个分组必须包含分组名称与唯一标志符 code，且必须为一个合法的英文标志符，如 developers。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateGroupBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupListRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            List<CreateGroupReqDto> group = new List<CreateGroupReqDto>()\r\n                {\r\n                    new CreateGroupReqDto()\r\n                    {\r\n                        Name = \"AUTHING_GROUP_NAME\",\r\n                        Code = \"AUTHING_GROUP_CODE\" ,\r\n                        Description = \"AUTHING_DESCRIPTION\"\r\n                    }\r\n                };\r\n\r\n\r\n            CreateGroupBatchReqDto reqDto = new CreateGroupBatchReqDto()\r\n            {\r\n                List = group\r\n            };\r\n\r\n            GroupListRespDto dto = await managementClient.CreateGroupsBatch(reqDto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createGroupsBatch(array(\n    \"list\" => array(\n        array(\n            \"code\" => \"developer\",\n            \"name\" => \"开发者\",\n            \"description\" => \"描述内容\",\n\n        )\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/update-group":{"post":{"operationId":"GroupsManagementController_updateGroup","summary":"修改分组","description":"通过分组 code，修改分组，可以修改此分组的 code。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateGroupReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupSingleRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UpdateGroupReqDto dto = new UpdateGroupReqDto()\r\n            {\r\n                Name = \"AUTHING_GROUP_NAME\",\r\n                Code = \"AUTHING_GROUP_CODE\",\r\n                Description = \"AUTHING_DESCRIPTION\",\r\n                NewCode = \"AUTHING_GROUP_NEWCODE\"\r\n            };\r\n\r\n            GroupSingleRespDto groupSingle = await managementClient.UpdateGroup(dto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateGroup(array(\n    \"code\" => \"developer\",\n    \"description\" => \"新的描述内容\",\n));\nprint_r($data);\n"}}},"/api/v3/delete-groups-batch":{"post":{"operationId":"GroupsManagementController_deleteGroupsBatch","summary":"批量删除分组","description":"通过分组 code，批量删除分组。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteGroupsReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DeleteGroupsReqDto dto = new DeleteGroupsReqDto()\r\n            {\r\n                CodeList = new List<string> { \"AUTHING_GROUP_CODE\", \"AUTHING_GROUP_CODE2\" }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess = await managementClient.DeleteGroupsBatch(dto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteGroupsBatch(array(\n    \"codeList\" => array(\"developer\"),\n));\nprint_r($data);\n"}}},"/api/v3/add-group-members":{"post":{"operationId":"GroupsManagementController_addGroupMembers","summary":"添加分组成员","description":"添加分组成员，成员以用户 ID 数组形式传递。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AddGroupMembersReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AddGroupMembersReqDto dto = new AddGroupMembersReqDto()\r\n            {\r\n                Code = \"AUTHING_GROUP_CODE\",\r\n                UserIds = new List<string> { \"AUTHING_USERID\" }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess = await managementClient.AddGroupMembers(dto);\r\n\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->addGroupMembers(array(\n    \"code\" => \"developer\",\n    \"userIds\" => array(\"6229ffaxxxxxxxxcade3e3d9\"),\n));\nprint_r($data);\n"}}},"/api/v3/remove-group-members":{"post":{"operationId":"GroupsManagementController_RemoveGroupMembers","summary":"批量移除分组成员","description":"批量移除分组成员，成员以用户 ID 数组形式传递。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveGroupMembersReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RemoveGroupMembersReqDto dto = new RemoveGroupMembersReqDto()\r\n            {\r\n                Code = \"AUTHING_GROUP_CODE\",\r\n                UserIds = new List<string> { \"AUTHING_USERID\" }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess = await managementClient.RemoveGroupMembers(dto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->removeGroupMembers(array(\n    \"code\" => \"developer\",\n    \"userIds\" => array(\"6229ffaxxxxxxxxcade3e3d9\"),\n));\nprint_r($data);\n"}}},"/api/v3/list-group-members":{"get":{"operationId":"GroupsManagementController_ListGroupMembers","summary":"获取分组成员列表","description":"通过分组 code，获取分组成员列表，支持分页，可以获取自定义数据、identities、部门 ID 列表。","parameters":[{"name":"code","required":true,"in":"query","description":"分组 code","example":"developer","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserPaginatedRespDto isSuccess = await managementClient.ListGroupMembers(new ListGroupMembersDto { Code = \"AUTHING_GROUP_CODE\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listGroupMembers(array(\n    \"code\" => \"developer\",\n    \"page\" => 1,\n    \"limit\" => 10,\n));\nprint_r($data);\n"}}},"/api/v3/get-group-authorized-resources":{"get":{"operationId":"GroupsManagementController_getGroupAuthorizedResources","summary":"获取分组被授权的资源列表","description":"通过分组 code，获取分组被授权的资源列表，可以通过资源类型、权限分组 code 筛选。","parameters":[{"name":"code","required":true,"in":"query","description":"分组 code","example":"developer","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}},{"name":"resourceType","required":false,"in":"query","description":"资源类型","schema":{"enum":["DATA","API","MENU","BUTTON","UI"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthorizedResourceListRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AuthorizedResourceListRespDto dto = await managementClient.GetGroupAuthorizedResources(new GetGroupAuthorizedResourcesDto { Code = \"AUTHING_GROUP_CODE\", Namespace = \"AUTHING_NAMESPACE\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getGroupAuthorizedResources(array(\n    \"code\" => \"developer\"\n));\nprint_r($data);\n"}}},"/api/v3/get-role":{"get":{"operationId":"RolesManagementController_getRole","summary":"获取角色详情","description":"通过权限分组内角色 code，获取角色详情。","parameters":[{"name":"code","required":true,"in":"query","description":"权限分组内角色的唯一标识符","example":"manager","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleSingleRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RoleSingleRespDto dto = await managementClient.GetRole(new GetRoleDto\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getRole(array(\n    \"code\" => \"admin\",\n));\nprint_r($data);\n"}}},"/api/v3/assign-role":{"post":{"operationId":"RolesManagementController_assignRole","summary":"分配角色","description":"通过权限分组内角色 code，分配角色，被分配者可以是用户或部门。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssignRoleDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AssignRoleDto dto = new AssignRoleDto()\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n                Targets = new List<TargetDto>\r\n                    {\r\n                        new TargetDto\r\n                        {\r\n                            TargetIdentifier = \"AUTHING_USERID\",\r\n                            TargetType = TargetDto.targetType.USER\r\n                        }\r\n                    }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccessResp = await managementClient.AssignRole(dto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->assignRole(array(\n    \"code\" => \"manager\",\n    \"targets\" => array(\n        array(\n            \"targetType\" => \"USER\",\n            \"targetIdentifier\" => \"60b49eb83fxxxdb96f26e68\",\n        )\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/revoke-role":{"post":{"operationId":"RolesManagementController_revokeRole","summary":"移除分配的角色","description":"通过权限分组内角色 code，移除分配的角色，被分配者可以是用户或部门。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RevokeRoleDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RevokeRoleDto dto = new RevokeRoleDto()\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n                Targets = new List<TargetDto>\r\n                    {\r\n                        new TargetDto\r\n                        {\r\n                            TargetIdentifier = \"AUTHING_USERID\",\r\n                            TargetType = TargetDto.targetType.USER\r\n                        }\r\n                    }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccessResp = await managementClient.RevokeRole(dto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->revokeRole(array(\n    \"code\" => \"manager\",\n    \"targets\" => array(\n        array(\n            \"targetType\" => \"USER\",\n            \"targetIdentifier\" => \"60b49eb83fxxxdb96f26e68\",\n        )\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/get-role-authorized-resources":{"get":{"operationId":"RolesManagementController_getRoleAuthorizedResources","summary":"获取角色被授权的资源列表","description":"通过权限分组内角色 code，获取角色被授权的资源列表。","parameters":[{"name":"code","required":true,"in":"query","description":"权限分组内角色的唯一标识符","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}},{"name":"resourceType","required":false,"in":"query","description":"资源类型，如 数据、API、按钮、菜单","example":"DATA","schema":{"enum":["DATA","API","MENU","BUTTON","UI"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAuthorizedResourcePaginatedRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RoleAuthorizedResourcePaginatedRespDto dto = await managementClient.GetRoleAuthorizedResources(new GetRoleAuthorizedResourcesDto\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n\r\n            });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getRoleAuthorizedResources(array(\n    \"code\" => \"manager\",\n));\nprint_r($data);\n"}}},"/api/v3/list-role-members":{"get":{"operationId":"RolesManagementController_listRoleMembers","summary":"获取角色成员列表","description":"通过权限分组内内角色 code，获取角色成员列表，支持分页，可以选择或获取自定义数据、identities 等。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"code","required":true,"in":"query","description":"权限分组内角色的唯一标识符","example":"manager","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserPaginatedRespDto dto = await managementClient.ListRoleMembers(new ListRoleMembersDto\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n            });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listRoleMembers(array(\n    \"code\" => \"manager\",\n));\nprint_r($data);\n"}}},"/api/v3/list-role-departments":{"get":{"operationId":"RolesManagementController_listRoleDepartments","summary":"获取角色的部门列表","description":"通过权限分组内角色 code，获取角色的部门列表，支持分页。","parameters":[{"name":"code","required":true,"in":"query","description":"权限分组内角色的唯一标识符","example":"manager","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleDepartmentListPaginatedRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RoleDepartmentListPaginatedRespDto dto = await managementClient.ListRoleDepartments(new ListRoleDepartmentsDto\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\"\r\n            });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listRoleDepartments(array(\n    \"code\" => \"manager\",\n));\nprint_r($data);\n"}}},"/api/v3/create-role":{"post":{"operationId":"RolesManagementController_createRole","summary":"创建角色","description":"通过权限分组内角色 code，创建角色，可以选择权限分组、角色描述等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateRoleDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleSingleRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RolePaginatedRespDto roleSingle = await managementClient.ListRoles(new ListRolesDto \r\n            {\r\n                Namespace = \"AUTHING_NAMESPACE\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createRole(array(\n    \"code\" => \"manager\",\n    \"namespace\" => \"default\",\n    \"description\" => \"this is manager\",\n));\nprint_r($data);\n"}}},"/api/v3/list-roles":{"get":{"operationId":"RolesManagementController_listRoles","summary":"获取角色列表","description":"获取角色列表，支持分页。","parameters":[{"name":"keywords","required":false,"in":"query","description":"用于根据角色的 code 进行模糊搜索，可选。","example":"admin","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"default":"default","type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RolePaginatedRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listRoles(array(\n    \"page\" => 1,\n    \"limit\" => 10,\n));\nprint_r($data);\n"}}},"/api/v3/delete-roles-batch":{"post":{"operationId":"RolesManagementController_deleteRolesBatch","summary":"删除角色","description":"删除角色，可以批量删除。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteRoleDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateRoleDto dto = new CreateRoleDto()\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n                Description = \"AUTHING_DESCRIPTION\"\r\n            };\r\n\r\n            RoleSingleRespDto roleSingle = await managementClient.CreateRole(dto);\r\n\r\n            dto = new CreateRoleDto()\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE1\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n                Description = \"AUTHING_DESCRIPTION\"\r\n            };\r\n\r\n            roleSingle = await managementClient.CreateRole(dto);\r\n\r\n\r\n            DeleteRoleDto deleteRoleDto = new DeleteRoleDto()\r\n            {\r\n                CodeList = new List<string> { \"AUTHING_ROLE_CODE\", \"AUTHING_ROLE_CODE1\" },\r\n                Namespace = \"AUTHING_NAMESPACE\"\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess = await managementClient.DeleteRolesBatch(deleteRoleDto);\r\n\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteRolesBatch(array(\n    \"codeList\" => array(\"manager\"),\n));\nprint_r($data);\n"}}},"/api/v3/create-roles-batch":{"post":{"operationId":"RolesManagementController_createRolesBatch","summary":"批量创建角色","description":"批量创建角色，可以选择权限分组、角色描述等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateRolesBatch"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n\r\n            CreateRolesBatch createRoleDto = new CreateRolesBatch()\r\n            {\r\n                List = new List<RoleListItem>\r\n                    {\r\n                        new RoleListItem\r\n                        {\r\n                            Code = \"AUTHING_ROLE_CODE\",\r\n                            Namespace = \"AUTHING_NAMESPACE\",\r\n                            Description = \"AUTHING_DESCRIPTION\"\r\n                        },\r\n                         new RoleListItem\r\n                        {\r\n                            Code = \"AUTHING_ROLE_CODE\",\r\n                            Namespace = \"AUTHING_NAMESPACE\",\r\n                            Description = \"AUTHING_DESCRIPTION\"\r\n                        }\r\n\r\n                    }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess = await managementClient.CreateRolesBatch(createRoleDto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createRolesBatch(array(\n    \"list\" => array(\n        array(\n            \"code\" => \"my-role-code\",\n            \"description\" => \"this is a description about the role\",\n        )\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/update-role":{"post":{"operationId":"RolesManagementController_updateRole","summary":"修改角色","description":"通过权限分组内角色新旧 code，修改角色，可以选择角色描述等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateRoleDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n\r\n\r\n            UpdateRoleDto updateRoleDto = new UpdateRoleDto()\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n                Description = \"AUTHING_DESCRIPTION\"\r\n            };\r\n\r\n            IsSuccessRespDto isSuccessRespDto = await managementClient.UpdateRole(updateRoleDto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateRole(array(\n    \"code\" => \"manager\",\n    \"description\" => \"new description\",\n));\nprint_r($data);\n"}}},"/api/v3/list-ext-idp":{"get":{"operationId":"ExtIdpManagementController_listExtIdp","summary":"获取身份源列表","description":"获取身份源列表，可以指定 租户 ID 筛选。","parameters":[{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"appId","required":false,"in":"query","description":"应用 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpListPaginatedRespDto"}}}}},"tags":["管理身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ExtIdpListPaginatedRespDto dto = await managementClient.ListExtIdp(new ListExtIdpDto\r\n            {\r\n                AppId = \"AUTHING_APPID\",\r\n\r\n            });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listExtIdp();\nprint_r($data);\n"}}},"/api/v3/get-ext-idp":{"get":{"operationId":"ExtIdpManagementController_getExtIdp","summary":"获取身份源详情","description":"通过 身份源 ID，获取身份源详情，可以指定 租户 ID 筛选。","parameters":[{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"appId","required":false,"in":"query","description":"应用 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"id","required":true,"in":"query","description":"身份源 ID","example":"6268b0e5e4b9a0e8ffa8fd60","schema":{"type":"string"}},{"name":"type","required":false,"in":"query","description":"身份源类型","schema":{"enum":["social","enterprise"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpDetailSingleRespDto"}}}}},"tags":["管理身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ExtIdpDetailSingleRespDto dto = await managementClient.GetExtIdp(new GetExtIdpDto\r\n            {\r\n                Id = \"AUTHING_IDP_ID\",\r\n                AppId = \"AUTHING_APPID\"\r\n            });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getExtIdp(array(\n    // 需要替换成真实的身份源 ID\n    \"id\" => \"6268b0e5e4xxxxe8ffa8fd60\",\n));\nprint_r($data);\n"}}},"/api/v3/create-ext-idp":{"post":{"operationId":"ExtIdpManagementController_createExtIdp","summary":"创建身份源","description":"创建身份源，可以设置身份源名称、连接类型、租户 ID 等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateExtIdpDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpSingleRespDto"}}}}},"tags":["管理身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateExtIdpDto createExtIdpDto = new CreateExtIdpDto()\r\n            {\r\n                Name = \"AUTHING_IDP_NAME\",\r\n                TenantId = \"AUTHING_TENANTID\",\r\n                Type = CreateExtIdpDto.type.AD\r\n\r\n            };\r\n\r\n            ExtIdpSingleRespDto dto = await managementClient.CreateExtIdp(createExtIdpDto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createExtIdp(array(\n    \"name\" => \"exampleName\",\n    \"type\" => \"wechat\",\n));\nprint_r($data);\n"}}},"/api/v3/update-ext-idp":{"post":{"operationId":"ExtIdpManagementController_updateExtIdp","summary":"更新身份源配置","description":"更新身份源配置，可以设置身份源 ID 与 名称。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateExtIdpDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpSingleRespDto"}}}}},"tags":["管理身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ExtIdpListPaginatedRespDto dto = await managementClient.ListExtIdp(new ListExtIdpDto\r\n            {\r\n                AppId = \"AUTHING_APPID\",\r\n\r\n            });\r\n\r\n            UpdateExtIdpDto updateExtIdpDto = new UpdateExtIdpDto()\r\n            {\r\n                Name = \"exampleNameUpdate\",\r\n                Id = dto.Data.List.First().Id,\r\n            };\r\n\r\n            ExtIdpSingleRespDto result = await managementClient.UpdateExtIdp(updateExtIdpDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateExtIdp(array(\n    \"name\" => \"exampleName\",\n    \"id\" => \"60b49eb83xxxxadb96f26e68\",\n));\nprint_r($data);\n"}}},"/api/v3/delete-ext-idp":{"post":{"operationId":"ExtIdpManagementController_deleteExtIdp","summary":"删除身份源","description":"通过身份源 ID，删除身份源。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteExtIdpDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ExtIdpListPaginatedRespDto dto = await managementClient.ListExtIdp(new ListExtIdpDto\r\n            {\r\n                TenantId = \"AUTHING_TENANTID\",\r\n\r\n            });\r\n\r\n            DeleteExtIdpDto deleteExtIdpDto = new DeleteExtIdpDto()\r\n            {\r\n                Id = dto.Data.List.First().Id\r\n            };\r\n\r\n            IsSuccessRespDto result = await managementClient.DeleteExtIdp(deleteExtIdpDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteExtIdp(array(\n    \"id\" => \"60b49eb83xxxxadb96f26e68\",\n));\nprint_r($data);\n"}}},"/api/v3/create-ext-idp-conn":{"post":{"operationId":"ExtIdpManagementController_createExtIdpConn","summary":"在某个已有身份源下创建新连接","description":"在某个已有身份源下创建新连接，可以设置身份源图标、是否只支持登录等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateExtIdpConnDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpConnDetailSingleRespDto"}}}}},"tags":["管理身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateExtIdpConnDto createExtIdpConnDto = new CreateExtIdpConnDto()\r\n            {\r\n                ExtIdpId = \"AUTHING_EXTIDPID\",\r\n                DisplayName = \"AUTHING_DISPLAYNAME\",\r\n                Identifier = \"AUTHING_IDENTIFIER\",\r\n                LoginOnly = false,\r\n                Logo = \"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png\",\r\n                Type = CreateExtIdpConnDto.type.GITHUB,\r\n                Fields = new { clientId = \"AUTHING_APPID\", clientSecret = \"AUTHING_APPSECRET \" }\r\n            };\r\n            ExtIdpConnDetailSingleRespDto dto = await managementClient.CreateExtIdpConn(createExtIdpConnDto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createExtIdpConn(array(\n    \"extIdpId\" => \"60b49eb83fd80adb96f26e68\",\n    \"type\" => \"ad\",\n    \"identifier\" => \"60b49eb83fd80adb96f26e68\",\n    \"loginOnly\" => false,\n    \"logo\" => \"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png\",\n    \"displayName\" => \"登录页\",\n    \"fields\" => array(\n        \"clientId\"=> \"身份源上的 clientId\",\n        \"clientSecret\"=> \"身份源上的 clientSecret\"\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/update-ext-idp-conn":{"post":{"operationId":"ExtIdpManagementController_updateExtIdpConn","summary":"更新身份源连接","description":"更新身份源连接，可以设置身份源图标、是否只支持登录等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateExtIdpConnDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpConnDetailSingleRespDto"}}}}},"tags":["管理身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UpdateExtIdpConnDto createExtIdpConnDto = new UpdateExtIdpConnDto()\r\n            {\r\n                DisplayName = \"AUTHING_DISPLAYNAME\",\r\n                LoginOnly = false,\r\n                Fields = new { clientId = \"AUTHING_APPID\", clientSecret = \"AUTHING_APPSECRET \" },\r\n                Logo = \"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png\",\r\n                Id = \"AUTHING_IDPCONN_ID\",\r\n            };\r\n\r\n            ExtIdpConnDetailSingleRespDto dto =await managementClient.UpdateExtIdpConn(createExtIdpConnDto);\r\n        \r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateExtIdpConn(array(\n    \"id\" => \"60b49eb83fd80adb96f26e68\",\n    \"displayName\" => \"exampleName\",\n    \"fields\" => array(\n        \"clientId\"=> \"clientId\"\n    ),\n    \"logo\" => \"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png\",\n    \"loginOnly\" => false,\n));\nprint_r($data);\n"}}},"/api/v3/delete-ext-idp-conn":{"post":{"operationId":"ExtIdpManagementController_deleteExtIdpConn","summary":"删除身份源连接","description":"通过身份源连接 ID，删除身份源连接。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteExtIdpConnDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DeleteExtIdpConnDto enableExtIdpConnDto = new DeleteExtIdpConnDto()\r\n            {\r\n                Id = \"ATUHING_IDP_CONN_ID\",\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.DeleteExtIdpConn(enableExtIdpConnDto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteExtIdpConn(array(\n    \"id\" => \"60b49eb83fd80adb96f26e68\",\n));\nprint_r($data);\n"}}},"/api/v3/change-ext-idp-conn-state":{"post":{"operationId":"ExtIdpManagementController_changeExtIdpConnState","summary":"身份源连接开关","description":"身份源连接开关，可以打开或关闭身份源连接。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangeExtIdpConnStateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->changeExtIdpConnState(array(\n    \"id\" => \"60b49eb83fd80adb96f26e68\",\n    \"enabled\" => false,\n    \"appId\" => \"60b49eb83fd80adb96f26e68\",\n));\nprint_r($data);\n"}}},"/api/v3/change-ext-idp-conn-association-state":{"post":{"operationId":"ExtIdpManagementController_changeExtIdpConnAssociationState","summary":"租户关联身份源","description":"租户可以关联或取消关联身份源连接。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangeExtIdpAssociationStateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-tenant-ext-idp":{"get":{"operationId":"ExtIdpManagementController_listTenantExtIdp","summary":"租户控制台获取身份源列表","description":"在租户控制台内获取身份源列表，可以根据 应用 ID 筛选。","parameters":[{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"appId","required":false,"in":"query","description":"应用 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"type","required":false,"in":"query","description":"身份源类型","schema":{"enum":["social","enterprise"],"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpListPaginatedRespDto"}}}}},"tags":["管理身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.ListTenantExtIdp(new ListTenantExtIdpDto\r\n            {\r\n                AppId = \"AUTHING_APPID\",\r\n                TenantId = \"AUTHING_TENANT_ID\",\r\n                Type = \"Github\"\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/ext-idp-conn-apps":{"get":{"operationId":"ExtIdpManagementController_extIdpConnStateByApps","summary":"身份源下应用的连接详情","description":"在身份源详情页获取应用的连接情况","parameters":[{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"appId","required":false,"in":"query","description":"应用 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"id","required":true,"in":"query","description":"身份源 ID","example":"6268b0e5e4b9a0e8ffa8fd60","schema":{"type":"string"}},{"name":"type","required":false,"in":"query","description":"身份源类型","schema":{"enum":["social","enterprise"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpListPaginatedRespDto"}}}}},"tags":["管理身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.ExtIdpConnStateByApps(new ExtIdpConnAppsDto\r\n            {\r\n                AppId = \"AUTHING_ID\",\r\n                Id = \"AUTHING_IDP_CONN_ID\",\r\n                TenantId = \"AUTHING_TENENT_ID\",\r\n                Type = \"Github\"\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-user-base-fields":{"get":{"operationId":"CustomFieldsManagementController_getUserBaseFields","summary":"获取用户内置字段列表","description":"获取用户内置的字段列表","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CustomFieldListRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.GetUserBaseFields();\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserBaseFields();\nprint_r($data);\n"}}},"/api/v3/set-user-base-fields":{"post":{"operationId":"CustomFieldsManagementController_setUserBaseFields","summary":"修改用户内置字段配置","description":"修改用户内置字段配置，内置字段不允许修改数据类型、唯一性。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetUserBaseFieldsReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CustomFieldListRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.SetUserBaseFields(new SetUserBaseFieldsReqDto\r\n            {\r\n                List = new List<SetUserBaseFieldDto>\r\n                {\r\n                    new SetUserBaseFieldDto { Key=\"nickname\",Label=\"昵称修改\"}\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->setUserBaseFields(\n    array(\n        \"list\" => array(\n            array(\n                \"key\" => \"nickname\",\n                \"label\" => \"显示名称\"\n            )\n        )\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-custom-fields":{"get":{"operationId":"CustomFieldsManagementController_getCustomFields","summary":"获取自定义字段列表","description":"通过主体类型，获取用户、部门或角色的自定义字段列表。","parameters":[{"name":"targetType","required":true,"in":"query","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","example":"USER","schema":{"enum":["USER","ROLE","GROUP","DEPARTMENT"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CustomFieldListRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CustomFieldListRespDto dto =await managementClient.GetCustomFields(new GetCustomFieldsDto { TargetType = \"USER\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getCustomFields(\n    array(\n        \"targetType\" => \"USER\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/set-custom-fields":{"post":{"operationId":"CustomFieldsManagementController_setCustomFields","summary":"创建/修改自定义字段定义","description":"创建/修改用户、部门或角色自定义字段定义，如果传入的 key 不存在则创建，存在则更新。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetCustomFieldsReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CustomFieldListRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            SetCustomFieldsReqDto setCustomFieldsReqDto = new SetCustomFieldsReqDto()\r\n            {\r\n                List = new List<SetCustomFieldDto>()\r\n                    {\r\n                        new SetCustomFieldDto()\r\n                        {\r\n                            TargetType=SetCustomFieldDto.targetType.USER,\r\n                           DataType = SetCustomFieldDto.dataType.STRING,\r\n                           Description = \"DESCRIPTION\",\r\n                           Key = \"AUTHING_KEY\",\r\n                           Label = \"AUTHING_LABEL\",\r\n                           Encrypted=false,\r\n                           Options = new List<CustomFieldSelectOption>\r\n                           {\r\n                                new CustomFieldSelectOption\r\n                                {\r\n                                    Label = \"AUTHING_LABEL\", Value = \"ATUHING_VALUE\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n            };\r\n\r\n            CustomFieldListRespDto dto =await managementClient.SetCustomFields(setCustomFieldsReqDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->setCustomFields(\n    array(\n        \"list\" => array(\n            array(\n                \"targetType\" => \"USER\",\n                \"key\" => \"school\",\n                \"dataType\" => \"ENUM\",\n                \"label\" => \"学校\",\n                \"description\" => \"学校\",\n                \"encrypted\" => false,\n                \"isUnique\" => false,\n                \"userEditable\" => false,\n                \"visibleInAdminConsole\" => true,\n                \"visibleInUserCenter\" => true,\n                \"options\" => array(\n                    array(\n                        \"value\" => \"hust\",\n                        \"label\" => \"华中科技大学\",\n                    )\n                )\n            )\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/set-custom-data":{"post":{"operationId":"CustomFieldsManagementController_setCustomData","summary":"设置自定义字段的值","description":"给用户、角色或部门设置自定义字段的值，如果存在则更新，不存在则创建。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetCustomDataReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            SetCustomDataReqDto setCustomFieldsReqDto = new SetCustomDataReqDto()\r\n            {\r\n                TargetType = SetCustomDataReqDto.targetType.USER,\r\n                TargetIdentifier = \"AUTHING_TARGETIDENTIFIER\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n                List = new List<SetCustomDataDto>()\r\n                    {\r\n                        new SetCustomDataDto()\r\n                        {\r\n\r\n                           Key = \"AUTHING_KEY\",\r\n                           Value=\"AUTHING_VALUE\"\r\n                        }\r\n                    }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess =await managementClient.SetCustomData(setCustomFieldsReqDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->setCustomData(\n    array(\n        \"targetType\" => \"USER\",\n        // 需要替换成真实的用户 ID\n        \"targetIdentifier\" => \"xxxxxxxxx\",\n        \"namespace\" => \"default\",\n        \"list\" => array(\n            array(\n                \"key\" => \"school\",\n                \"value\" => \"pku\",\n            )\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-custom-data":{"get":{"operationId":"CustomFieldsManagementController_getCustomData","summary":"获取用户、分组、角色、组织机构的自定义字段值","description":"通过筛选条件，获取用户、分组、角色、组织机构的自定义字段值。","parameters":[{"name":"targetType","required":true,"in":"query","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","example":"USER","schema":{"enum":["USER","ROLE","GROUP","DEPARTMENT"],"type":"string"}},{"name":"targetIdentifier","required":true,"in":"query","description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","example":"userId1","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code，当 targetType 为角色的时候需要填写，否则可以忽略","example":"default","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetCustomDataRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            GetCustomDataRespDto getCustomDataRespDto =await managementClient.GetCustomData(new GetCustomDataDto { Namespace = \"AUTHING_NAMESPACE\", TargetIdentifier = \"AUTHING_TARGETIDENTIGIER\", TargetType = \"USER\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getCustomData(\n    array(\n        \"targetType\" => \"USER\",\n        // 需要替换成真实的用户 ID\n        \"targetIdentifier\" => \"xxxxxxxxx\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-resource":{"post":{"operationId":"ResourceManagementController_createResource","summary":"创建资源","description":"创建资源，可以设置资源的描述、定义的操作类型、URL 标识等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResourceRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateResourceDto createResourceDto = new CreateResourceDto()\r\n            {\r\n                Code = \"ecs\",\r\n                Description = \"服务器\",\r\n                Type = CreateResourceDto.type.API,\r\n                Actions = new List<ResourceAction>\r\n                    {\r\n                        new ResourceAction\r\n                        {\r\n                            Name = \"ecs:start\",\r\n                            Description = \"启动 ECS 服务器\"\r\n                        } ,\r\n                         new ResourceAction\r\n                        {\r\n                            Name = \"ecs:stop\",\r\n                            Description = \"启动 ECS 服务器\"\r\n                        }\r\n                    },\r\n                ApiIdentifier = \"https://my-awesome-api.com/api\",\r\n                Namespace = \"634cf98aa5b1455a52949d33\"\r\n            };\r\n\r\n            ResourceRespDto dto = await managementClient.CreateResource(createResourceDto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createResource(\n    array(\n        \"code\" => \"ecs\",\n        \"description\" => \"服务器\",\n        \"type\" => \"API\",\n        \"actions\" => array(\n            array(\n                \"name\" => \"ecs:Start\",\n                \"description\" => \"ecs:Start\",\n\n            )\n        ),\n        \"apiIdentifier\" => \"https://my-awesome-api.com/api\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-resources-batch":{"post":{"operationId":"ResourceManagementController_createResourcesBatch","summary":"批量创建资源","description":"批量创建资源，可以设置资源的描述、定义的操作类型、URL 标识等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateResourcesBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateResourcesBatchDto createResourcesBatchDto = new CreateResourcesBatchDto()\r\n            {\r\n                List = new List<CreateResourceBatchItemDto>\r\n                    {\r\n                        new CreateResourceBatchItemDto\r\n                        {\r\n                            Code = \"ecs1\" ,\r\n                            Description = \"服务器\" ,\r\n                            Type = CreateResourceBatchItemDto.type.API,\r\n                            Actions = new List<ResourceAction>\r\n                            {\r\n                                new ResourceAction\r\n                                {\r\n                                    Name = \"ecs:start\",\r\n                                    Description = \"启动 ECS 服务器\"\r\n                                } ,\r\n                                 new ResourceAction\r\n                                {\r\n                                    Name = \"ecs:stop\",\r\n                                    Description = \"启动 ECS 服务器\"\r\n                                }\r\n                            },\r\n                            ApiIdentifier = \"https://my-awesome-api.com/api\",\r\n                        },\r\n                         new CreateResourceBatchItemDto\r\n                        {\r\n                            Code = \"ecs2\" ,\r\n                            Description = \"服务器\" ,\r\n                            Type = CreateResourceBatchItemDto.type.API,\r\n                            Actions = new List<ResourceAction>\r\n                            {\r\n                                new ResourceAction\r\n                                {\r\n                                    Name = \"ecs:start\",\r\n                                    Description = \"启动 ECS 服务器\"\r\n                                } ,\r\n                                 new ResourceAction\r\n                                {\r\n                                    Name = \"ecs:stop\",\r\n                                    Description = \"启动 ECS 服务器\"\r\n                                }\r\n                            },\r\n                            ApiIdentifier = \"https://my-awesome-api.com/api\",\r\n                        }\r\n                    },\r\n                Namespace = \"634cf98aa5b1455a52949d33\"\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.CreateResourcesBatch(createResourcesBatchDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createResourcesBatch(\n    array(\n        \"list\" => array(\n            array(\n                \"code\" => \"ecs\",\n                \"description\" => \"服务器\",\n                \"type\" => \"API\",\n                \"actions\" => array(\n                    array(\n                        \"name\" => \"ecs:Start\",\n                        \"description\" => \"ecs:Start\",\n\n                    )\n                ),\n                \"apiIdentifier\" => \"https://my-awesome-api.com/api\",\n            )\n        )\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-resource":{"get":{"operationId":"ResourceManagementController_getResource","summary":"获取资源详情","description":"根据筛选条件，获取资源详情。","parameters":[{"name":"code","required":true,"in":"query","description":"资源唯一标志符","example":"ecs","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResourceRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ResourceRespDto dto = await managementClient.GetResource(new GetResourceDto { Code = \"order\", Namespace = \"634cf98aa5b1455a52949d33\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getResource(\n    array(\n        \"code\" => \"ecs\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-resources-batch":{"get":{"operationId":"ResourceManagementController_getResourcesBatch","summary":"批量获取资源详情","description":"根据筛选条件，批量获取资源详情。","parameters":[{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}},{"name":"codeList","required":true,"in":"query","description":"资源 code 列表，批量可以使用逗号分隔","example":["code1","code2"],"schema":{"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResourceListRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n           \r\n            ResourceListRespDto dto = await managementClient.GetResourcesBatch(new GetResourcesBatchDto { CodeList = string.Join(\",\", new List<string> { \"ecs\" }), Namespace = \"default\" });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getResourcesBatch(\n    array(\n        \"codeList\" => \"ecs,ec2\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/list-resources":{"get":{"operationId":"ResourceManagementController_listResources","summary":"分页获取资源列表","description":"根据筛选条件，分页获取资源详情列表。","parameters":[{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}},{"name":"type","required":false,"in":"query","description":"资源类型","example":"DATA","schema":{"enum":["DATA","API","MENU","BUTTON","UI"],"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResourcePaginatedRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ResourcePaginatedRespDto dto = await managementClient.ListResources(new ListResourcesDto { Type = \"API\", Namespace = \"default\" });\r\n\r\n            Console.WriteLine(dto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listResources(\n    array(\n        \"page\" => 1,\n        \"limit\" => 10,\n    )\n);\nprint_r($data);\n"}}},"/api/v3/update-resource":{"post":{"operationId":"ResourceManagementController_updateResource","summary":"修改资源","description":"修改资源，可以设置资源的描述、定义的操作类型、URL 标识等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResourceRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var resource = managementClient.GetResource(new GetResourceDto { Code = \"ecs\", Namespace = \"634cf98aa5b1455a52949d33\" }).Result;\r\n\r\n            UpdateResourceDto updateResourceDto = new UpdateResourceDto()\r\n            {\r\n                Code = resource.Data.Code,\r\n                Actions = resource.Data.Actions,\r\n                Description = \"update\",\r\n                Type = UpdateResourceDto.type.API,\r\n                Namespace = resource.Data.Namespace\r\n            };\r\n\r\n            ResourceRespDto dto = await managementClient.UpdateResource(updateResourceDto);\r\n\r\n            Console.WriteLine(dto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateResource(\n    array(\n        \"code\" => \"ecs\",\n        \"description\" => \"新的描述信息\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/delete-resource":{"post":{"operationId":"ResourceManagementController_deleteResource","summary":"删除资源","description":"通过资源唯一标志符以及所属权限分组，删除资源。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var resource = managementClient.GetResource(new GetResourceDto { Code = \"ecs\", Namespace = \"634cf98aa5b1455a52949d33\" }).Result;\r\n\r\n            DeleteResourceDto deleteResourceDto = new DeleteResourceDto()\r\n            {\r\n                Code = \"ecs\",\r\n                Namespace = \"default\"\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.DeleteResource(deleteResourceDto);\r\n\r\n            Console.WriteLine(dto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteResource(\n    array(\n        \"code\" => \"ecs\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/delete-resources-batch":{"post":{"operationId":"ResourceManagementController_deleteResourcesBatch","summary":"批量删除资源","description":"通过资源唯一标志符以及所属权限分组，批量删除资源","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteResourcesBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DeleteResourcesBatchDto deleteResourcesBatchDto = new DeleteResourcesBatchDto()\r\n            {\r\n                CodeList = new List<string> { \"ecs1\", \"ecs2\" },\r\n                Namespace = \"default\"\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.DeleteResourcesBatch(deleteResourcesBatchDto);\r\n\r\n            Console.WriteLine(dto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteResourcesBatch(\n    array(\n        \"codeList\" => array(\"ecs\", \"ec2\")\n    )\n);\nprint_r($data);\n"}}},"/api/v3/associate-tenant-resource":{"post":{"operationId":"ResourceManagementController_associationTenantResource","summary":"关联/取消关联应用资源到租户","description":"通过资源唯一标识以及权限分组，关联或取消关联资源到租户","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssociationTenantResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->associationTenantResource(\n    array(\n        \"code\" => \"ecs\",\n        \"association\" => true,\n        // 需要替换成真实的应用 ID\n        \"appId\" => \"60b49eb83fd80adb96f26e68\",\n        // 需要替换成真实的租户 ID\n        \"tenantId\" => \"60b49eb83fd80adb96f26e68\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-namespace":{"post":{"operationId":"NamespaceManagementController_createNamespace","summary":"创建权限分组","description":"创建权限分组，可以设置分组名称与描述信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateNamespaceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NamespaceRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateNamespaceDto createNamespaceDto = new CreateNamespaceDto()\r\n            {\r\n                Code = \"my-namespace\",\r\n                Name = \"我的权限分组\",\r\n                Description = \"我的权限分组描述\"\r\n            };\r\n\r\n            NamespaceRespDto dto = await managementClient.CreateNamespace(createNamespaceDto);\r\n\r\n            Console.WriteLine(dto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createNamespace(\n    array(\n        \"code\" => \"my-namespace\",\n        \"name\" => \"我的权限分组\",\n        \"description\" => \"我的权限分组描述\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-namespaces-batch":{"post":{"operationId":"NamespaceManagementController_createNamespacesBatch","summary":"批量创建权限分组","description":"批量创建权限分组，可以分别设置分组名称与描述信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateNamespacesBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateNamespacesBatchDto createNamespacesBatchDto = new CreateNamespacesBatchDto()\r\n            {\r\n                List = new List<CreateNamespacesBatchItemDto>\r\n                    {\r\n                        new CreateNamespacesBatchItemDto()\r\n                            {\r\n                                Code = \"my-namespace1\",\r\n                                Name = \"我的权限分组\",\r\n                                Description = \"我的权限分组描述\"\r\n                            },\r\n                          new CreateNamespacesBatchItemDto()\r\n                            {\r\n                                Code = \"my-namespace2\",\r\n                                Name = \"我的权限分组\",\r\n                                Description = \"我的权限分组描述\"\r\n                            }\r\n                    }\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.CreateNamespacesBatch(createNamespacesBatchDto);\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createNamespacesBatch(\n    array(\n        \"list\" => array(\n            array(\n                \"code\" => \"my-namespace\",\n                \"name\" => \"我的权限分组\",\n                \"description\" => \"我的权限分组描述\",\n            )\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-namespace":{"get":{"operationId":"NamespaceManagementController_getNamespace","summary":"获取权限分组详情","description":"通过权限分组唯一标志符，获取权限分组详情。","parameters":[{"name":"code","required":true,"in":"query","description":"权限分组唯一标志符","example":"my-namespace","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NamespaceRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            NamespaceRespDto dto = await managementClient.GetNamespace(new GetNamespaceDto { Code = \"my-namespace\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getNamespace(\n    array(\n        \"code\" => \"my-namespace\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-namespaces-batch":{"get":{"operationId":"NamespaceManagementController_getNamespacesBatch","summary":"批量获取权限分组详情","description":"分别通过权限分组唯一标志符，批量获取权限分组详情。","parameters":[{"name":"codeList","required":true,"in":"query","description":"资源 code 列表，批量可以使用逗号分隔","example":"code1,code2","schema":{"minItems":0,"maxItems":50,"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NamespaceListRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n           \r\n            NamespaceListRespDto dto = await managementClient.GetNamespacesBatch(new GetNamespacesBatchDto { CodeList = string.Join(\",\", new List<string> { \"default\", \"system\" }) });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getNamespacesBatch(\n    array(\n        \"codeList\" => \"my-namespace,my-namespace-2\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/update-namespace":{"post":{"operationId":"NamespaceManagementController_updateNamespace","summary":"修改权限分组信息","description":"修改权限分组信息，可以修改名称、描述信息以及新的唯一标志符。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateNamespaceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateNamespaceRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateNamespaceDto createNamespaceDto = new CreateNamespaceDto()\r\n            {\r\n                Code = \"my-namespace\",\r\n                Name = \"我的权限分组\",\r\n                Description = \"我的权限分组描述\"\r\n            };\r\n\r\n            NamespaceRespDto createDto = await managementClient.CreateNamespace(createNamespaceDto);\r\n\r\n\r\n            UpdateNamespaceDto updateNamespaceDto = new UpdateNamespaceDto()\r\n            {\r\n                Code = \"my-namespace\",\r\n                Name = \"我的权限分组\",\r\n                Description = \"示例应用的描述\",\r\n                NewCode = \"my-new-namespace\"\r\n            };\r\n\r\n\r\n            UpdateNamespaceRespDto dto = await managementClient.UpdateNamespace(updateNamespaceDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateNamespace(\n    array(\n        \"code\" => \"my-namespace\",\n        \"description\" => \"新的描述信息\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/delete-namespace":{"post":{"operationId":"NamespaceManagementController_deleteNamespace","summary":"删除权限分组信息","description":"通过权限分组唯一标志符，删除权限分组信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteNamespaceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateNamespaceDto createNamespaceDto = new CreateNamespaceDto()\r\n            {\r\n                Code = \"my-namespace\",\r\n                Name = \"我的权限分组\",\r\n                Description = \"我的权限分组描述\"\r\n            };\r\n\r\n            NamespaceRespDto namespaceRespDto = await managementClient.CreateNamespace(createNamespaceDto);\r\n\r\n\r\n            DeleteNamespaceDto deleteNamespaceDto = new DeleteNamespaceDto()\r\n            {\r\n                Code = \"my-new-namespace\",\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.DeleteNamespace(deleteNamespaceDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteNamespace(\n    array(\n        \"code\" => \"my-namespace\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/delete-namespaces-batch":{"post":{"operationId":"NamespaceManagementController_deleteNamespacesBatch","summary":"批量删除权限分组","description":"分别通过权限分组唯一标志符，批量删除权限分组。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteNamespacesBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateNamespacesBatchDto createNamespacesBatchDto = new CreateNamespacesBatchDto()\r\n            {\r\n                List = new List<CreateNamespacesBatchItemDto>\r\n                    {\r\n                        new CreateNamespacesBatchItemDto()\r\n                            {\r\n                                Code = \"my-namespace1\",\r\n                                Name = \"我的权限分组\",\r\n                                Description = \"我的权限分组描述\"\r\n                            },\r\n                          new CreateNamespacesBatchItemDto()\r\n                            {\r\n                                Code = \"my-namespace2\",\r\n                                Name = \"我的权限分组\",\r\n                                Description = \"我的权限分组描述\"\r\n                            }\r\n                    }\r\n            };\r\n\r\n            DeleteNamespacesBatchDto deleteNamespacesBatchDto = new DeleteNamespacesBatchDto()\r\n            {\r\n                CodeList = new List<string> { \"my-namespace1\", \"my-namespace2\" }\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.DeleteNamespacesBatch(deleteNamespacesBatchDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteNamespacesBatch(\n    array(\n        \"codeList\" => array(\n            \"my-namespace\",\n            \"my-namespace-2\"\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/authorize-resources":{"post":{"operationId":"AccessControlManagementController_authorizeResources","summary":"授权资源","description":"将一个/多个资源授权给用户、角色、分组、组织机构等主体，且可以分别指定不同的操作权限。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthorizeResourcesDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            List<ResourceAction> resourceActions = new List<ResourceAction>();\r\n            resourceActions.Add(new ResourceAction { Name = \"start\", Description = \"启动 ECS 服务器\" });\r\n            resourceActions.Add(new ResourceAction { Name = \"stop\", Description = \"启动 ECS 服务器\" });\r\n\r\n            List<AuthorizeResourceItem> items = new List<AuthorizeResourceItem>();\r\n\r\n            List<ResourceItemDto> resourceItemDtos = new List<ResourceItemDto>();\r\n            resourceItemDtos.Add(new ResourceItemDto { Actions = new List<string> { \"start\", \"stop\" }, Code = \"ecs\", ResourceType = ResourceItemDto.resourceType.API });\r\n\r\n\r\n\r\n            items.Add(new AuthorizeResourceItem { TargetType = AuthorizeResourceItem.targetType.USER, TargetIdentifiers = new List<string> { \"634fc0a6ebc13285a2ac8dd2\" }, Resources = resourceItemDtos });\r\n\r\n            AuthorizeResourcesDto authorizedResourceDto = new AuthorizeResourcesDto()\r\n            {\r\n                Namespace = \"default\",\r\n                List = items\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.AuthorizeResources(authorizedResourceDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->authorizeResources(\n    array(\n        \"list\" => array(\n            array(\n                \"targetType\" => \"USER\",\n                // 需要替换成真实的用户 ID\n                \"targetIdentifiers\" => array(\"userId1\",\"userId2\"),\n                \"resources\" => array(\n                    array(\n                        \"code\" => \"ecs\",\n                        \"actions\" => array(\"ecs:Stop\",\"ecs:Start\"),\n                        \"resourceType\" => \"DATA\",\n                    )\n                ),\n            )\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-authorized-resources":{"get":{"operationId":"AccessControlManagementController_getAuthorizedResources","summary":"获取某个主体被授权的资源列表","description":"根据筛选条件，获取某个主体被授权的资源列表。","parameters":[{"name":"targetType","required":true,"in":"query","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","example":"USER","schema":{"enum":["USER","ROLE","GROUP","DEPARTMENT"],"type":"string"}},{"name":"targetIdentifier","required":true,"in":"query","description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","example":"userId1","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}},{"name":"resourceType","required":false,"in":"query","description":"限定资源类型，如数据、API、按钮、菜单","example":"DATA","schema":{"enum":["DATA","API","MENU","BUTTON","UI"],"type":"string"}},{"name":"resourceList","required":false,"in":"query","description":"限定查询的资源列表，如果指定，只会返回所指定的资源列表。","schema":{"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}}},{"name":"withDenied","required":false,"in":"query","description":"是否获取被拒绝的资源","schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthorizedResourcePaginatedRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            List<ResourceAction> resourceActions = new List<ResourceAction>();\r\n            resourceActions.Add(new ResourceAction { Name = \"start\", Description = \"启动 ECS 服务器\" });\r\n            resourceActions.Add(new ResourceAction { Name = \"stop\", Description = \"启动 ECS 服务器\" });\r\n\r\n            List<AuthorizeResourceItem> items = new List<AuthorizeResourceItem>();\r\n\r\n            List<ResourceItemDto> resourceItemDtos = new List<ResourceItemDto>();\r\n            resourceItemDtos.Add(new ResourceItemDto { Actions = new List<string> { \"start\", \"stop\" }, Code = \"ecs\", ResourceType = ResourceItemDto.resourceType.API });\r\n\r\n\r\n\r\n            items.Add(new AuthorizeResourceItem { TargetType = AuthorizeResourceItem.targetType.USER, TargetIdentifiers = new List<string> { \"634fc0a6ebc13285a2ac8dd2\" }, Resources = resourceItemDtos });\r\n\r\n            AuthorizeResourcesDto authorizedResourceDto = new AuthorizeResourcesDto()\r\n            {\r\n                Namespace = \"default\",\r\n                List = items\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.AuthorizeResources(authorizedResourceDto);\r\n\r\n            AuthorizedResourcePaginatedRespDto authorized = await managementClient.GetAuthorizedResources(new GetAuthorizedResourcesDto { TargetIdentifier = \"634fc0a6ebc13285a2ac8dd2\", Namespace = \"634cf98aa5b1455a52949d33\", ResourceType = \"API\", TargetType = \"USER\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getAuthorizedResources(\n    array(\n        \"targetType\" => \"USER\",\n        // 需要替换成真实的用户 ID\n        \"targetIdentifier\" => \"userId1\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/is-action-allowed":{"post":{"operationId":"AccessControlManagementController_isActionAllowed","summary":"判断用户是否对某个资源的某个操作有权限","description":"判断用户是否对某个资源的某个操作有权限。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsActionAllowedDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsActionAllowedRespDtp"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            IsActionAllowedDto isActionAllowedDto = new IsActionAllowedDto\r\n            {\r\n                Action = \"start\",\r\n                Namespace = \"default\",\r\n                Resource = \"ecs:*\",\r\n                UserId = \"USER_ID\"\r\n            };\r\n\r\n            var dto = await managementClient.IsActionAllowed(isActionAllowedDto);\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->isActionAllowed(\n    array(\n        // 需要替换成真实的用户 ID\n        \"userId\" => \"userId1\",\n        \"resource\" => \"ecs:1\",\n        \"action\" => \"ecs:Start\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-resource-authorized-targets":{"post":{"operationId":"AccessControlManagementController_getResourceAuthorizedTargets","summary":"获取资源被授权的主体","description":"获取资源被授权的主体","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetResourceAuthorizedTargetsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetResourceAuthorizedTargetRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.GetResourceAuthorizedTargets(new GetResourceAuthorizedTargetsDto { Resource = \"ecs\", Namespace = \"default\", Limit = 50, Page = 1, TargetType = GetResourceAuthorizedTargetsDto.targetType.USER });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getResourceAuthorizedTargets(\n    array(\n        \"resource\" => \"ecs:1\",\n        \"targetType\" => \"USER\",\n        \"page\" => 1,\n        \"limit\" => 10,\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-pipeline-function":{"post":{"operationId":"PipelineManagementController_createPipelineFunction","summary":"创建 Pipeline 函数","description":"创建 Pipeline 函数","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePipelineFunctionDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PipelineFunctionSingleRespDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.CreatePipelineFunction(new CreatePipelineFunctionDto\r\n            {\r\n                FuncName = \"每周日凌晨 3-6 点系统维护禁止注册/登录\",\r\n                FuncDescription = \"每周日凌晨 3-6 点系统维护禁止注册/登录。\",\r\n                Scene = CreatePipelineFunctionDto.scene.PRE_REGISTER,\r\n                SourceCode = \"async function pipe(user, context, callback) {\\n  const date = new Date();\\n  const d = date.getDay();\\n  const n = date.getHours();\\n  \" +\r\n                   \"// 每周日凌晨 3-6 点禁止注册\\n  if (d === 0 && (3 <= n && n <= 6)) \" +\r\n                   \"{\\n    return callback(new Error('系统维护中，暂时停止注册！'));\\n  }\\n  \" +\r\n                   \"callback(null, user, context)\\n}\",\r\n                Timeout = 10,\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-pipeline-function":{"get":{"operationId":"PipelineManagementController_getPipelineFunction","summary":"获取 Pipeline 函数详情","description":"获取 Pipeline 函数详情","parameters":[{"name":"funcId","required":true,"in":"query","description":"Pipeline 函数 ID","example":"62ce9135dxxxxb83e373f5d6","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PipelineFunctionSingleRespDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListPipelineFunctions(new ListPipelineFunctionDto { });\r\n            var target = res1.Data.List.First();\r\n            var res = await managementClient.GetPipelineFunction(new GetPipelineFunctionDto { FuncId = target.FuncId });\r\n\r\n        }\r\n    }\r\n}"}}},"/api/v3/reupload-pipeline-function":{"post":{"operationId":"PipelineManagementController_reuploadPipelineFunction","summary":"重新上传 Pipeline 函数","description":"当 Pipeline 函数上传失败时，重新上传 Pipeline 函数","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ReUploadPipelineFunctionDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PipelineFunctionSingleRespDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListPipelineFunctions(new ListPipelineFunctionDto { });\r\n            var target = res1.Data.List.First();\r\n            var res = await managementClient.ReuploadPipelineFunction(new ReUploadPipelineFunctionDto() { FuncId = target.FuncId });\r\n        }\r\n    }\r\n}"}}},"/api/v3/update-pipeline-function":{"post":{"operationId":"PipelineManagementController_updatePipelineFunction","summary":"修改 Pipeline 函数","description":"修改 Pipeline 函数","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdatePipelineFunctionDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PipelineFunctionSingleRespDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListPipelineFunctions(new ListPipelineFunctionDto { });\r\n            var target = res1.Data.List.First();\r\n            var res = await managementClient.UpdatePipelineFunction(new UpdatePipelineFunctionDto() { FuncId = target.FuncId, Timeout = 20 });\r\n        }\r\n    }\r\n}"}}},"/api/v3/update-pipeline-order":{"post":{"operationId":"PipelineManagementController_updatePipelineOrder","summary":"修改 Pipeline 函数顺序","description":"修改 Pipeline 函数顺序","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdatePipelineOrderDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListPipelineFunctions(new ListPipelineFunctionDto { });\r\n            var target = res1.Data.List.First();\r\n            var res2 = await managementClient.UpdatePipelineOrder(new UpdatePipelineOrderDto\r\n            {\r\n                Scene = UpdatePipelineOrderDto.scene.PRE_REGISTER,\r\n                Order = new List<string>() { target.FuncId }\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/delete-pipeline-function":{"post":{"operationId":"PipelineManagementController_deletePipelineFunction","summary":"删除 Pipeline 函数","description":"删除 Pipeline 函数","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeletePipelineFunctionDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"\r\nusing Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListPipelineFunctions(new ListPipelineFunctionDto { });\r\n            var target = res1.Data.List.First();\r\n            var res2 = await managementClient.DeletePipelineFunction(new DeletePipelineFunctionDto\r\n            {\r\n                FuncId = target.FuncId\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/list-pipeline-functions":{"get":{"operationId":"PipelineManagementController_listPipelineFunctions","summary":"获取 Pipeline 函数列表","description":"获取 Pipeline 函数列表","parameters":[{"name":"scene","required":true,"in":"query","description":"通过函数的触发场景进行筛选（可选，默认返回所有）：\n- `PRE_REGISTER`: 注册前\n- `POST_REGISTER`: 注册后\n- `PRE_AUTHENTICATION`: 认证前\n- `POST_AUTHENTICATION`: 认证后\n- `PRE_OIDC_ID_TOKEN_ISSUED`: OIDC ID Token 签发前\n- `PRE_OIDC_ACCESS_TOKEN_ISSUED`: OIDC Access Token 签发前\n- `PRE_COMPLETE_USER_INFO`: 补全用户信息前\n    ","example":"PRE_REGISTER","schema":{"enum":["PRE_REGISTER","POST_REGISTER","PRE_AUTHENTICATION","POST_AUTHENTICATION","PRE_OIDC_ID_TOKEN_ISSUED","PRE_OIDC_ACCESS_TOKEN_ISSUED","PRE_COMPLETE_USER_INFO"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PipelineFunctionPaginatedRespDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-pipeline-logs":{"get":{"operationId":"PipelineManagementController_getPipelineLogs","summary":"获取 Pipeline 日志","description":"获取 Pipeline ","parameters":[{"name":"funcId","required":true,"in":"query","description":"Pipeline 函数 ID","example":"62cc23737exxxx8341b1ce16","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PipelineFunctionPaginatedRespDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListPipelineFunctions(new ListPipelineFunctionDto { });\r\n            var target = res1.Data.List.First();\r\n            var res2 = await managementClient.GetPipelineLogs(new GetPipelineLogsDto\r\n            {\r\n                FuncId = target.FuncId\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/create-webhook":{"post":{"operationId":"WebhookManagementController_createWebhook","summary":"创建 Webhook","description":"你需要指定 Webhoook 名称、Webhook 回调地址、请求数据格式、用户真实名称来创建 Webhook。还可选是否启用、请求密钥进行创建","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateWebhookDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateWebhookRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.CreateWebhook(new CreateWebhookDto\r\n            {\r\n                Name = \"AUTHING_NAME\",\r\n                Url = \"https://www.baidu.com/callback\",\r\n                Events = new List<string>() { \"user:created\" },\r\n                ContentType = CreateWebhookDto.contentType.APPLICATION_JSON\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/list-webhooks":{"get":{"operationId":"WebhookManagementController_listWebhooks","summary":"获取 Webhook 列表","description":"获取 Webhook 列表，可选页数、分页大小来获取","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetWebhooksRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListWebhooks(new ListWebhooksDto { });\r\n        }\r\n    }\r\n}"}}},"/api/v3/update-webhook":{"post":{"operationId":"WebhookManagementController_updateWebhook","summary":"修改 Webhook 配置","description":"需要指定 webhookId，可选 Webhoook 名称、Webhook 回调地址、请求数据格式、用户真实名称、是否启用、请求密钥参数进行修改 webhook","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateWebhookDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateWebhooksRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListWebhooks(new ListWebhooksDto { });\r\n            var item = res.Data.List.First();\r\n            var res2 = await managementClient.UpdateWebhook(new UpdateWebhookDto { WebhookId = item.WebhookId, Enabled = false });\r\n\r\n        }\r\n    }\r\n}"}}},"/api/v3/delete-webhook":{"post":{"operationId":"WebhookManagementController_deleteWebhook","summary":"删除 Webhook","description":"通过指定多个 webhookId，以数组的形式进行 webhook 的删除","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteWebhookDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteWebhookRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListWebhooks(new ListWebhooksDto { });\r\n            var item = res.Data.List.First();\r\n            var res2 = await managementClient.DeleteWebhook(new DeleteWebhookDto { WebhookIds = new List<string>() { $\"{item.WebhookId}\" } });\r\n\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-webhook-logs":{"post":{"operationId":"WebhookManagementController_getWebhookLogs","summary":"获取 Webhook 日志","description":"通过指定 webhookId，可选 page 和 limit 来获取 webhook 日志","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListWebhookLogs"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListWebhookLogsRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListWebhooks(new ListWebhooksDto { });\r\n            var item = res.Data.List.First();\r\n            var res2 = await managementClient.GetWebhookLogs(new ListWebhookLogs { Page = 1, Limit = 10, WebhookId = item.WebhookId });\r\n\r\n        }\r\n    }\r\n}"}}},"/api/v3/trigger-webhook":{"post":{"operationId":"WebhookManagementController_triggerWebhook","summary":"手动触发 Webhook 执行","description":"通过指定 webhookId，可选请求头和请求体进行手动触发 webhook 执行","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerWebhookDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerWebhookRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListWebhooks(new ListWebhooksDto { });\r\n            var item = res.Data.List.First();\r\n            var res2 = await managementClient.TriggerWebhook(new TriggerWebhookDto { WebhookId = item.WebhookId });\r\n\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-webhook":{"get":{"operationId":"WebhookManagementController_getWebhook","summary":"获取 Webhook 详情","description":"根据指定的 webhookId 获取 webhook 详情","parameters":[{"name":"webhookId","required":true,"in":"query","description":"Webhook ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetWebhookRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListWebhooks(new ListWebhooksDto { });\r\n            var item = res.Data.List.First();\r\n            var res2 = await managementClient.GetWebhook(new GetWebhookDto() { WebhookId = item.WebhookId });\r\n\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-webhook-event-list":{"get":{"operationId":"WebhookManagementController_getWebhookEventList","summary":"获取 Webhook 事件列表","description":"返回事件列表和分类列表","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebhookEventListRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetWebhookEventList();\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-sync-task":{"get":{"operationId":"SyncCenterManagementController_getSyncTask","summary":"获取同步任务详情","description":"获取同步任务详情","parameters":[{"name":"syncTaskId","required":true,"in":"query","description":"同步任务 ID","example":1000,"schema":{"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncTaskSingleRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n            var target = res1.Data.List.First();\r\n            var res2 = await managementClient.GetSyncTask(new GetSyncTaskDto { SyncTaskId = target.SyncTaskId });\r\n        }\r\n    }\r\n}"}}},"/api/v3/list-sync-tasks":{"get":{"operationId":"SyncCenterManagementController_listSyncTasks","summary":"获取同步任务列表","description":"获取同步任务列表","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncTaskPaginatedRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n        }\r\n    }\r\n}"}}},"/api/v3/create-sync-task":{"post":{"operationId":"SyncCenterManagementController_createSyncTask","summary":"创建同步任务","description":"创建同步任务","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateSyncTaskDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncTaskPaginatedRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.CreateSyncTask(new CreateSyncTaskDto\r\n            {\r\n                SyncTaskName = \"SDK\",\r\n                SyncTaskType = CreateSyncTaskDto.syncTaskType.ACTIVE_DIRECTORY,\r\n                ClientConfig = new SyncTaskClientConfig()\r\n                {\r\n                    ActiveDirectoryConfig = new SyncTaskActiveDirectoryClientConfig\r\n                    {\r\n                        SyncIdentityProviderCode = \"AUTHING_SYNC_TASK\",\r\n                        Ticket_url = \"https://whoami.com/whocare\"\r\n                    }\r\n                },\r\n                SyncTaskFlow = CreateSyncTaskDto.syncTaskFlow.UPSTREAM,\r\n                SyncTaskTrigger = CreateSyncTaskDto.syncTaskTrigger.MANUALLY,\r\n                FieldMapping = new List<SyncTaskFieldMapping>()\r\n                {\r\n                    new SyncTaskFieldMapping\r\n                    {\r\n                        Expression = \"mobile\",\r\n                        TargetKey = \"phone\"\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/update-sync-task":{"post":{"operationId":"SyncCenterManagementController_updateSyncTask","summary":"修改同步任务","description":"修改同步任务","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateSyncTaskDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncTaskPaginatedRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res2 = await managementClient.UpdateSyncTask(new UpdateSyncTaskDto\r\n            {\r\n                SyncTaskId = target.SyncTaskId,\r\n                SyncTaskType = UpdateSyncTaskDto.syncTaskType.ACTIVE_DIRECTORY,\r\n                SyncTaskName = \"AUTHING_TASK_NAME\"\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/trigger-sync-task":{"post":{"operationId":"SyncCenterManagementController_triggerSyncTask","summary":"执行同步任务","description":"执行同步任务","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerSyncTaskDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerSyncTaskRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res2 = await managementClient.TriggerSyncTask(new TriggerSyncTaskDto { SyncTaskId = target.SyncTaskId });\r\n\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-sync-job":{"get":{"operationId":"SyncCenterManagementController_getSyncJob","summary":"获取同步作业详情","description":"获取同步作业详情","parameters":[{"name":"syncJobId","required":true,"in":"query","description":"同步作业 ID","example":1,"schema":{"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncJobSingleRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res2 = await managementClient.ListSyncJobs(new ListSyncJobsDto { SyncTaskId = target.SyncTaskId });\r\n        }\r\n    }\r\n}"}}},"/api/v3/list-sync-jobs":{"get":{"operationId":"SyncCenterManagementController_listSyncJobs","summary":"获取同步作业详情","description":"获取同步作业详情","parameters":[{"name":"syncTaskId","required":true,"in":"query","description":"同步任务 ID","example":1000,"schema":{"type":"number"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"syncTrigger","required":false,"in":"query","description":"同步任务触发类型：\n- `manually`: 手动触发执行\n- `timed`: 定时触发\n- `automatic`: 根据事件自动触发\n","example":"manually","schema":{"enum":["manually","timed","automatic"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncJobPaginatedRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-sync-job-logs":{"get":{"operationId":"SyncCenterManagementController_listSyncJobLogs","summary":"获取同步作业详情","description":"获取同步作业详情","parameters":[{"name":"syncJobId","required":true,"in":"query","description":"同步作业 ID","example":1000,"schema":{"type":"number"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"success","required":false,"in":"query","description":"根据是否操作成功进行筛选","example":true,"schema":{"type":"boolean"}},{"name":"action","required":false,"in":"query","description":"根据操作类型进行筛选：\n- `CreateUser`: 创建用户\n- `UpdateUser`: 修改用户信息\n- `DeleteUser`: 删除用户\n- `UpdateUserIdentifier`: 修改用户唯一标志符\n- `ChangeUserDepartment`: 修改用户部门\n- `CreateDepartment`: 创建部门\n- `UpdateDepartment`: 修改部门信息\n- `DeleteDepartment`: 删除部门\n- `MoveDepartment`: 移动部门\n- `UpdateDepartmentLeader`: 同步部门负责人\n- `CreateGroup`: 创建分组\n- `UpdateGroup`: 修改分组\n- `DeleteGroup`: 删除分组\n- `Updateless`: 无更新\n    ","example":"CreateUser","schema":{"enum":["CreateUser","UpdateUser","DeleteUser","UpdateUserIdentifier","ChangeUserDepartment","CreateDepartment","UpdateDepartment","DeleteDepartment","MoveDepartment","UpdateDepartmentLeader","CreateGroup","UpdateGroup","DeleteGroup","Updateless"],"type":"string"}},{"name":"objectType","required":false,"in":"query","description":"操作对象类型:\n- `department`: 部门\n- `user`: 用户\n    ","example":"DEPARTMENT","schema":{"enum":["DEPARTMENT","USER"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerSyncTaskRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res2 = await managementClient.ListSyncJobs(new ListSyncJobsDto { SyncTaskId = target.SyncTaskId });\r\n\r\n            var target2 = res2.Data.List.First();\r\n            var res3 = await managementClient.GetSyncJob(new GetSyncJobDto { SyncJobId = target2.SyncJobId });\r\n\r\n            var dto = await managementClient.ListSyncJobLogs(new ListSyncJobLogsDto\r\n            {\r\n                SyncJobId = target2.SyncJobId,\r\n                Action = \"AUTHING_ACTION\"\r\n\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/list-sync-risk-operations":{"get":{"operationId":"SyncCenterManagementController_listSyncRiskOperations","summary":"获取同步风险操作列表","description":"获取同步风险操作列表","parameters":[{"name":"syncTaskId","required":true,"in":"query","description":"同步任务 ID","example":1000,"schema":{"type":"number"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"status","required":false,"in":"query","description":"根据执行状态筛选","example":["SUCCESS","FAILED"],"schema":{"minItems":1,"maxItems":50,"type":"array","items":{"type":"string","enum":["PENDING","SUCCESS","FAILED","CANCELED","EXECUTING"]}}},{"name":"objectType","required":false,"in":"query","description":"根据操作对象类型，默认获取所有类型的记录：\n- `department`: 部门\n- `user`: 用户\n    ","example":["DEPARTMENT","USER"],"schema":{"type":"array","items":{"type":"string","enum":["DEPARTMENT","USER"]}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncRiskOperationPaginatedRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res = await managementClient.ListSyncRiskOperations(new ListSyncRiskOperationsDto { SyncTaskId = target.SyncTaskId });\r\n\r\n        }\r\n    }\r\n}"}}},"/api/v3/trigger-sync-risk-operations":{"post":{"operationId":"SyncCenterManagementController_triggerSyncRiskOperations","summary":"执行同步风险操作","description":"执行同步风险操作","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerSyncRiskOperationDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerSyncRiskOperationsRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res2 = await managementClient.ListSyncRiskOperations(new ListSyncRiskOperationsDto { SyncTaskId = target.SyncTaskId });\r\n\r\n            var target2 = res2.Data.List.Last();\r\n            var res3 = await managementClient.TriggerSyncRiskOperations(new TriggerSyncRiskOperationDto\r\n            {\r\n                SyncRiskOperationIds = new List<long>() { target2.SyncRiskOperationId }\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/cancel-sync-risk-operation":{"post":{"operationId":"SyncCenterManagementController_cancelSyncRiskOperation","summary":"取消同步风险操作","description":"取消同步风险操作","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CancelSyncRiskOperationDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CancelSyncRiskOperationsRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res2 = await managementClient.ListSyncRiskOperations(new ListSyncRiskOperationsDto { SyncTaskId = target.SyncTaskId });\r\n\r\n            var target2 = res2.Data.List.Last();\r\n            var res3 = await managementClient.CancelSyncRiskOperation(new CancelSyncRiskOperationDto\r\n            {\r\n                SyncRiskOperationIds = new List<long>() { target2.SyncRiskOperationId }\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-user-action-logs":{"post":{"operationId":"UserActionLogsController_getUserActionLogs","summary":"获取用户行为日志","description":"可以选择请求 ID、客户端 IP、用户 ID、应用 ID、开始时间戳、请求是否成功、分页参数去获取用户行为日志","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetUserActionLogsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserActionLogRespDto"}}}}},"tags":["获取审计日志/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetUserActionLogs(new GetUserActionLogsDto { });\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-admin-audit-logs":{"post":{"operationId":"AuditLogsController_getAdminAuditLogs","summary":"获取管理员操作日志","description":"可以选择请求 ID、客户端 IP、操作类型、资源类型、管理员用户 ID、请求是否成功、开始时间戳、结束时间戳、分页来获取管理员操作日志接口","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAdminAuditLogsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AdminAuditLogRespDto"}}}}},"tags":["获取审计日志/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetAdminAuditLogs(new GetAdminAuditLogsDto { });\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-email-templates":{"get":{"operationId":"MessageManagementController_getEmailTemplates","summary":"获取邮件模版列表","description":"获取邮件模版列表","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetEmailTemplatesRespDto"}}}}},"tags":["管理消息服务/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetEmailTemplates();\r\n        }\r\n    }\r\n}"}}},"/api/v3/update-email-template":{"post":{"operationId":"MessageManagementController_updateEmailTemplate","summary":"修改邮件模版","description":"修改邮件模版","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateEmailTemplateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailTemplateSingleItemRespDto"}}}}},"tags":["管理消息服务/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.UpdateEmailTemplate(new UpdateEmailTemplateDto\r\n            {\r\n                Type = UpdateEmailTemplateDto.type.WELCOME_EMAIL,\r\n                Subject = \"AUTHING_MAIL_SUBJECT\",\r\n                Name = \"AUTHING_MAIL_NAME\",\r\n                Sender = \"AUTHING_MAIL_SENDER\",\r\n                Content = \"AUTHING_MAIL_CONTENT\",\r\n                CustomizeEnabled = true,\r\n                ExpiresIn = 999999\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/preview-email-template":{"post":{"operationId":"MessageManagementController_previewEmailTemplate","summary":"预览邮件模版","description":"预览邮件模版","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PreviewEmailTemplateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PreviewEmailTemplateRespDto"}}}}},"tags":["管理消息服务/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.PreviewEmailTemplate(new PreviewEmailTemplateDto { Type = PreviewEmailTemplateDto.type.WELCOME_EMAIL, ExpiresIn = 1 });\r\n\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-email-provider":{"get":{"operationId":"MessageManagementController_getEmailProvider","summary":"获取第三方邮件服务配置","description":"获取第三方邮件服务配置","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailProviderDto"}}}}},"tags":["管理消息服务/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/config-email-provier":{"post":{"operationId":"MessageManagementController_configEmailProvider","summary":"配置第三方邮件服务","description":"配置第三方邮件服务","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConfigEmailProviderDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailProviderDto"}}}}},"tags":["管理消息服务/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ConfigEmailProvider(new ConfigEmailProviderDto\r\n            {\r\n                Type = ConfigEmailProviderDto.type.ALI,\r\n                AliExmailConfig = new AliExmailEmailProviderConfigInput\r\n                {\r\n                    Sender = \"AUTHING_MAIL_USERNAME\",\r\n                    SenderPass = \"AUTHING_MAIL_PASSWORD\"\r\n                }\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-application":{"get":{"operationId":"ApplicationsManagementController_getApplication","summary":"获取应用详情","description":"通过应用 ID，获取应用详情。","parameters":[{"name":"appId","required":true,"in":"query","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApplicationSingleRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.GetApplication(new GetApplicationDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getApplication(\n    array(\n        \"appId\" => \"635143ae1xxxx1b9afb54c39\"\n    )\n);\nprint_r($data);\n"}}},"/api/v3/list-applications":{"get":{"operationId":"ApplicationsManagementController_listApplications","summary":"获取应用列表","description":"获取应用列表","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"isIntegrateApp","required":false,"in":"query","description":"是否为集成应用","schema":{"default":false,"type":"boolean"}},{"name":"isSelfBuiltApp","required":false,"in":"query","description":"是否为自建应用","schema":{"default":false,"type":"boolean"}},{"name":"ssoEnabled","required":false,"in":"query","description":"是否开启单点登录","schema":{"default":false,"type":"boolean"}},{"name":"keyword","required":false,"in":"query","description":"模糊搜索字符串","example":"test","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApplicationPaginatedRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.ListApplications(new ListApplicationsDto { Keyword = \"AUTHING_APPNAME\", IsSelfBuiltApp = true });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listApplications(\n    array(\n        \"page\" => 1,\n        \"limit\" => 10,\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-application-simple-info":{"get":{"operationId":"ApplicationsManagementController_getApplicationSimpleInfo","summary":"获取应用简单信息","description":"通过应用 ID，获取应用简单信息。","parameters":[{"name":"appId","required":true,"in":"query","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApplicationSimpleInfoSingleRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.GetApplicationSimpleInfo(new GetApplicationSimpleInfoDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getApplicationSimpleInfo(\n    array(\n       \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\"\n    )\n);\nprint_r($data);\n"}}},"/api/v3/list-application-simple-info":{"get":{"operationId":"ApplicationsManagementController_listApplicationSimpleInfo","summary":"获取应用简单信息列表","description":"获取应用简单信息列表","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"isIntegrateApp","required":false,"in":"query","description":"是否为集成应用","schema":{"default":false,"type":"boolean"}},{"name":"isSelfBuiltApp","required":false,"in":"query","description":"是否为自建应用","schema":{"default":false,"type":"boolean"}},{"name":"ssoEnabled","required":false,"in":"query","description":"是否开启单点登录","schema":{"default":false,"type":"boolean"}},{"name":"keyword","required":false,"in":"query","description":"模糊搜索字符串","example":"test","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApplicationSimpleInfoPaginatedRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.ListApplicationSimpleInfo(new ListApplicationSimpleInfoDto { IsSelfBuiltApp = true });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listApplicationSimpleInfo(\n    array(\n        \"page\" => 1,\n        \"limit\" => 10,\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-application":{"post":{"operationId":"ApplicationsManagementController_createApplication","summary":"创建应用","description":"创建应用","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateApplicationDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApplicationPaginatedRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.CreateApplication(new CreateApplicationDto\r\n            {\r\n                AppName = \"AUTHING_APPNAME\",\r\n                AppIdentifier = \"AUTHING_APPIDENTIFIER\",\r\n                SsoEnabled = false,\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/delete-application":{"post":{"operationId":"ApplicationsManagementController_deleteApplication","summary":"删除应用","description":"通过应用 ID，删除应用。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteApplicationDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.DeleteApplication(new DeleteApplicationDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteApplication(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-application-secret":{"get":{"operationId":"ApplicationsManagementController_getApplicationSecret","summary":"获取应用密钥","description":"获取应用密钥","parameters":[{"name":"appId","required":true,"in":"query","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetApplicationSecretRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.GetApplicationSecret(new GetApplicationSecretDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getApplicationSecret(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/refresh-application-secret":{"post":{"operationId":"ApplicationsManagementController_refreshApplicationSecret","summary":"刷新应用密钥","description":"刷新应用密钥","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RefreshApplicationSecretDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RefreshApplicationSecretRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.RefreshApplicationSecret(new RefreshApplicationSecretDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->refreshApplicationSecret(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/list-application-active-users":{"post":{"operationId":"ApplicationsManagementController_listApplicationActiveUsers","summary":"获取应用当前登录用户","description":"获取应用当前处于登录状态的用户","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListApplicationActiveUsersDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.ListApplicationActiveUsers(new ListApplicationActiveUsersDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listApplicationActiveUsers(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-application-permission-strategy":{"get":{"operationId":"ApplicationsManagementController_getApplicationPermissionStrategy","summary":"获取应用默认访问授权策略","description":"获取应用默认访问授权策略","parameters":[{"name":"appId","required":true,"in":"query","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetApplicationPermissionStrategyRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.GetApplicationPermissionStrategy(new GetApplicationPermissionStrategyDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getApplicationPermissionStrategy(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/update-application-permission-strategy":{"post":{"operationId":"ApplicationsManagementController_updateApplicationPermissionStrategy","summary":"更新应用默认访问授权策略","description":"更新应用默认访问授权策略","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateApplicationPermissionStrategyDataDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.UpdateApplicationPermissionStrategy(new UpdateApplicationPermissionStrategyDataDto\r\n            {\r\n                AppId = \"AUTHING_APPID\",\r\n                PermissionStrategy = UpdateApplicationPermissionStrategyDataDto.permissionStrategy.DENY_ALL\r\n            });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateApplicationPermissionStrategy(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n        \"permissionStrategy\" => \"ALLOW_ALL\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/authorize-application-access":{"post":{"operationId":"ApplicationsManagementController_authorizeApplicationAccess","summary":"授权应用访问权限","description":"给用户、分组、组织或角色授权应用访问权限","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AddApplicationPermissionRecord"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->authorizeApplicationAccess(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n        \"list\" => array(\n            array(\n                \"targetType\" => \"USER\",\n                \"namespaceCode\" => \"code1\",\n                \"inheritByChildren\" => true,\n                \"targetIdentifier\" => array(\"6229ffaxxxxxxxxcade3e3d9\"),\n                \"effect\" => \"ALLOW\",\n            )\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/revoke-application-access":{"post":{"operationId":"ApplicationsManagementController_revokeApplicationAccess","summary":"删除应用访问授权记录","description":"取消给用户、分组、组织或角色的应用访问权限授权","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteApplicationPermissionRecord"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->revokeApplicationAccess(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n        \"list\" => array(\n            array(\n                \"targetType\" => \"USER\",\n                \"namespaceCode\" => \"code1\",\n                \"inheritByChildren\" => true,\n                \"targetIdentifier\" => array(\"6229ffaxxxxxxxxcade3e3d9\"),\n                \"effect\" => \"ALLOW\",\n            )\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/check-domain-available":{"post":{"operationId":"ApplicationsManagementController_checkDomainAvailable","summary":"检测域名是否可用","description":"检测域名是否可用于创建新应用或更新应用域名","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckDomainAvailable"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckDomainAvailableSecretRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.CheckDomainAvailable(new CheckDomainAvailable\r\n            {\r\n                Domain = \"AUTHING_DOMAIN\"\r\n            });\r\n        }\r\n    }\r\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"635124373e1cd646feecbeb9\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"c3eaf45f7b467003158fd8615367ba6e\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->checkDomainAvailable(\n    array(\n        \"domain\" => \"example\"\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-security-settings":{"get":{"operationId":"SecurityAPIV3Controller_getSecuritySettings","summary":"获取安全配置","description":"无需传参获取安全配置","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SecuritySettingsRespDto"}}}}},"tags":["管理安全配置/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetSecuritySettings();\r\n        }\r\n    }\r\n}"}}},"/api/v3/update-security-settings":{"post":{"operationId":"SecurityAPIV3Controller_updateSecuritySettings","summary":"修改安全配置","description":"可选安全域、Authing Token 有效时间（秒）、验证码长度、验证码尝试次数、用户修改邮箱的安全策略、用户修改手机号的安全策略、Cookie 过期时间设置、是否禁止用户注册、频繁注册检测配置、验证码注册后是否要求用户设置密码、未验证的邮箱登录时是否禁止登录并发送认证邮件、用户自助解锁配置、Authing 登录页面是否开启登录账号选择、APP 扫码登录安全配置进行修改安全配置","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateSecuritySettingsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SecuritySettingsRespDto"}}}}},"tags":["管理安全配置/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.UpdateSecuritySettings(new UpdateSecuritySettingsDto\r\n            {\r\n                AllowedOrigins = new List<string>() { \"AUTHING_ALLOW_ORIGIN\" }\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-global-mfa-settings":{"get":{"operationId":"SecurityAPIV3Controller_getGlobalMfaSettings","summary":"获取全局多因素认证配置","description":"无需传参获取全局多因素认证配置","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MFASettingsRespDto"}}}}},"tags":["管理安全配置/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetGlobalMfaSettings();\r\n        }\r\n    }\r\n}"}}},"/api/v3/update-global-mfa-settings":{"post":{"operationId":"SecurityAPIV3Controller_updateGlobalMfaSettings","summary":"修改全局多因素认证配置","description":"传入 MFA 认证因素列表进行修改","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MFASettingsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MFASettingsRespDto"}}}}},"tags":["管理安全配置/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.UpdateGlobalMfaSettings(new MFASettingsDto\r\n            {\r\n                EnabledFactors = new List<string>() { \"OTP\", \"SMS\", \"EMAIL\", \"FACE\" }\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-current-package-info":{"get":{"operationId":"CostManagementController_getCurrentPackageInfo","summary":"获取套餐详情","description":"获取当前用户池套餐详情。","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetCurrentPackageRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetCurrentPackageInfo();\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-usage-info":{"get":{"operationId":"CostManagementController_getUsageInfo","summary":"获取用量详情","description":"获取当前用户池用量详情。","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetCurrentUsageRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetUsageInfo();\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-mau-period-usage-history":{"get":{"operationId":"CostManagementController_getMauPeriodUsageHistory","summary":"获取 MAU 使用记录","description":"获取当前用户池 MAU 使用记录","parameters":[{"name":"startTime","required":true,"in":"query","description":"起始时间（年月日）","example":"20220202","schema":{"type":"string"}},{"name":"endTime","required":true,"in":"query","description":"截止时间（年月日）","example":"20220802","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetMauPeriodUsageHistoryRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetMauPeriodUsageHistory(new GetMauPeriodUsageHistoryDto\r\n            {\r\n                StartTime = \"20220101\",\r\n                EndTime = \"20221030\"\r\n            });\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-all-rights-items":{"get":{"operationId":"CostManagementController_getAllRightsItem","summary":"获取所有权益","description":"获取当前用户池所有权益","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetAllRightItemRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetAllRightsItem();\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-orders":{"get":{"operationId":"CostManagementController_getOrders","summary":"获取订单列表","description":"获取当前用户池订单列表","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetOrdersRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetOrders(new GetOrdersDto { });\r\n\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-order-detail":{"get":{"operationId":"CostManagementController_getOrderDetail","summary":"获取订单详情","description":"获取当前用户池订单详情","parameters":[{"name":"orderNo","required":true,"in":"query","description":"订单号","example":"2022080410062060e26f7fd6b9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetOrderDetailRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetOrderDetail(new GetOrderDetailDto { OrderNo = \"AUTHING_ORDER_NO\" });\r\n\r\n        }\r\n    }\r\n}"}}},"/api/v3/get-order-pay-detail":{"get":{"operationId":"CostManagementController_getOrderPayDetail","summary":"获取订单支付明细","description":"获取当前用户池订单支付明细","parameters":[{"name":"orderNo","required":true,"in":"query","description":"订单号","example":"2022080410062060e26f7fd6b9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetOrderPayDetailRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetOrderPayDetail(new GetOrderPayDetailDto { OrderNo = \"AUTHING_ORDER_NO\" });\r\n\r\n        }\r\n    }\r\n}"}}}},"x-tagGroups":[{"name":"开发准备","tags":["开发准备/介绍","开发准备/基本概念","开发准备/HTTP 请求","开发准备/分页接口","开发准备/鉴权机制","开发准备/密码安全传输","开发准备/接口限流","开发准备/服务器 IP","开发准备/错误处理","开发准备/使用认证 API"]},{"name":"事件订阅","tags":["事件订阅/概述","事件订阅/事件安全验证","事件订阅/事件列表","事件订阅/事件出口 IP"]},{"name":"管理用户","tags":["管理用户/概述","管理用户/使用自定义数据库存储用户数据","管理用户/API 列表","管理用户/事件","管理用户/常见问题"]},{"name":"管理组织机构","tags":["管理组织机构/概述","管理组织机构/从第三方导入组织机构","管理组织机构/API 列表","管理组织机构/事件","管理组织机构/常见问题"]},{"name":"管理角色","tags":["管理角色/概述","管理角色/API 列表","管理角色/事件","管理角色/常见问题"]},{"name":"管理用户分组","tags":["管理用户分组/概述","管理用户分组/API 列表","管理用户分组/事件","管理用户分组/常见问题"]},{"name":"管理自定义字段","tags":["管理自定义字段/概述","管理自定义字段/基本概念","管理自定义字段/API 列表","管理自定义字段/事件","管理自定义字段/常见问题"]},{"name":"管理资源与权限","tags":["管理资源与权限/概述","管理资源与权限/权限模型介绍","管理资源与权限/API 列表","管理资源与权限/事件","管理资源与权限/常见问题"]},{"name":"管理应用","tags":["管理应用/概述","管理应用/成为身份源（IdP）","管理应用/API 列表","管理应用/事件","管理应用/常见问题"]},{"name":"管理单点登录应用面板","tags":["管理单点登录应用面板/概述","管理单点登录应用面板/什么是单点登录","管理单点登录应用面板/什么是应用面板","管理单点登录应用面板/前端如何实现单点登录","管理单点登录应用面板/API 列表","管理单点登录应用面板/事件","管理单点登录应用面板/常见问题"]},{"name":"管理多租户","tags":["管理多租户/概述","管理多租户/基本概念","管理多租户/API 列表","管理多租户/事件","管理多租户/常见问题"]},{"name":"管理身份源","tags":["管理身份源/概述","管理身份源/基本概念","管理身份源/API 列表","管理身份源/事件","管理身份源/常见问题"]},{"name":"管理安全配置","tags":["管理安全配置/概述","管理安全配置/基本概念","管理安全配置/最佳实践","管理安全配置/API 列表","管理安全配置/事件","管理安全配置/常见问题"]},{"name":"管理全局登录框配置","tags":["管理全局登录框配置/概述","管理全局登录框配置/API 列表","管理全局登录框配置/常见问题"]},{"name":"管理消息服务","tags":["管理消息服务/概述","管理消息服务/API 列表","管理消息服务/常见问题"]},{"name":"管理同步中心","tags":["管理同步中心/概述","管理同步中心/基本概念","管理同步中心/API 列表","管理同步中心/事件","管理同步中心/常见问题"]},{"name":"管理 Pipeline","tags":["管理 Pipeline/概述","管理 Pipeline/基本概念","管理 Pipeline/API 列表","管理 Pipeline/常见问题"]},{"name":"管理 Webhook","tags":["管理 Webhook/概述","管理 Webhook/基本概念","管理 Webhook/API 列表","管理 Webhook/常见问题"]},{"name":"获取审计日志","tags":["获取审计日志/概述","获取审计日志/API 列表","获取审计日志/常见问题"]},{"name":"获取统计数据","tags":["获取统计数据/概述","获取统计数据/API 列表","获取统计数据/常见问题"]},{"name":"管理计量计费","tags":["管理计量计费/概述","管理计量计费/API 列表"]},{"name":"最佳实践","tags":["最佳实践/最佳实践"]},{"name":"常见问题","tags":["常见问题/常见问题"]},{"name":"工具与资源","tags":["工具与资源/Authing 认证 API","工具与资源/Quick Start","工具与资源/SDK 列表","工具与资源/使用文档"]},{"name":"获取帮助","tags":["获取帮助/获取帮助"]}]}