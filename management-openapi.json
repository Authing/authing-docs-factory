{"openapi":"3.0.0","info":{"title":"Authing 管理 API","description":"\n\n[Authing](https://authing.co/) 是一款国内领先的、基于云原生架构的 IDaaS 产品，兼容 OAuth 2.0, OIDC, SAML, AD/LDAP, WS-Fed 等所有主流认证 / 授权协议，可以帮助你快速实现任何 Web、App 和企业软件的身份认证和用户管理，为你的客户和员工提供安全且完善的登录解决方案。\n\n<img src=\"https://files.authing.co/api-explorer/what-is-authing.jpg\" alt=\"drawing\"/>  \n","version":"3.0","contact":{},"x-logo":{"url":"https://files.authing.co/authing-logo.png","href":"https://authing.co","altText":"Authing Website"},"x-servers":[{"url":"https://api.authing.cn","description":"你的应用域名"}],"x-meta":{"title":"Authing 管理 API（V3）","description":"Authing 是一款国内领先的、基于云原生架构的 IDaaS 产品，兼容 OAuth 2.0、OIDC、SAML、AD/LDAP、WS-Fed 等所有主流认证 / 授权协议，可以帮助你快速实现任何 Web、App 和企业软件的身份认证和用户管理，为你的客户和员工提供安全且完善的登录解决方案。","keywords":"Documentation, Authing, IDaaS, OIDC, OAuth, 微信, 社会化登录","image":"https://authing.co/favicon.ico"}},"tags":[{"name":"开发准备/基本概念","description":"此文档为 Authing 管理 API 文档，适用版本为 Authing 管理 API（V3）。Authing 管理 API 指的是以管理员（Administrator）的身份进行请求，用于管理用户池资源和执行管理任务，如管理用户、组织机构、角色、应用、权限、用户池配置等。一般来说，你在 [Authing 控制台](https://console.authing.cn/)中能做的所有操作，都能用此模块完成。\n\n在你正式进入开发前，需要先了解一下 Authing 几个最核心的概念。\n\n## 用户池\n\n**用户池**是 Authing 租户与租户之间的隔离单位，你拥有的所有用户数据、应用、资源等，都在一个**用户池**下。如果你还没有注册 Authing 账号，或者还未创建**用户池**，请先前往 [https://authing.co/](https://authing.co/) 创建你的第一个**用户池**。当你需要调用此部分的 API 时，你会需要用到**用户池 ID**和**用户池密钥**，在下面的**鉴权机制**中会讲到如何使用。\n\n<details>\n<summary>点此展开如何获取用户池 ID 和用户池密钥</summary>\n\n在 [Authing 控制台](https://console.authing.cn)的**设置** -> **基础设置** -> **密钥管理**页面，可以获取到用户池 ID（UserPool Id）和用户池密钥（UserPool Secret），如下图所示：\n\n![](https://files.authing.co/authing-docs-v2/20220328-182903.png)\n\n</details>\n\n## 应用\n\nAuthing 中的**应用**对应了你实际开发的应用，比如当你要基于 Authing 开发一个商城 APP 的时候，你在 Authing 的用户池中也会[创建一个对应的应用](https://docs.authing.cn/v2/guides/app-new/create-app/create-app.html)。\n","x-displayName":"基本概念"},{"name":"开发准备/HTTP 请求","description":"## API 端点\n\nAuthing 管理 API（V3） Root 端点为：[https://api.authing.cn](#)。\n\n所有接口均通过 HTTPS 加密传输，如非特殊标记，请求参数和返回数据均通过 `application.json` 格式传递。\n\n> 如果是私有化部署的 Authing 服务，API 端点信息请联系你的客户经理获取。\n\n## HTTP 请求动词\n\nAuthing 管理 API（V3） 目前使用到了两种 HTTP 动词：\n\n| HTTP 请求动词 | 描述                       |\n| ------------- | -------------------------- |\n| GET           | 用于获取资源。             |\n| POST          | 用于创建、修改、删除资源。 |\n\n## HTTP 路径\n\nAuthing 管理 API（V3） 接口一般遵循 `/api/v3/verb` 的接口命名规范，`verb` 如果包含多个单词，使用 `-` 隔开，如：\n\n- 获取用户列表：`/api/v3/list-users`\n- 执行同步任务：`/api/v3/trigger-sync-task`\n\n## HTTP 请求头\n\n**调用 Authing 管理 API（V3） 时必须携带以下请求头**：\n\n<!-- | 请求头                      | 是否必填 | 含义 ​                                                                                                                                                                 |\n| --------------------------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| content-type                | 是       | 如接口未特殊说明，请填 `application/json`                                                                                                                              |\n| date                        | 是       | 客户端请求时刻的时间，为标准 GMT 格式，如 `Wed, 21 Oct 2015 07:28:00 GMT`，详情见 [Http date header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date)。 |\n| x-authing-signature-nonce   | 是       | 签名随机字符串，详情见[鉴权机制](#鉴权机制)。                                                                                                                          |\n| x-authing-signature-method  | 是       | 签名方式，目前仅支持 `HMAC-SHA1`，详情见[鉴权机制](#鉴权机制)。                                                                                                        |\n| x-authing-signature-version | 是       | 签名方式，目前为 `1.0`，详情见[鉴权机制](#鉴权机制)。                                                                                                                  |\n| authorization               | 是       | 使用 `Access Key ID` 和 `Access Key Secret` 对请求上下文的签名，详情见[鉴权机制](#鉴权机制)。                                                                          | -->\n\n| 请求头           | 是否必填 | 含义 ​                                                                                        |\n| ---------------- | -------- | --------------------------------------------------------------------------------------------- |\n| x-authing-userpool-id | 是       | Authing 用户池 ID                                                                             |\n| authorization    | 是       | 使用 `Access Key ID` 和 `Access Key Secret` 对请求上下文的签名，详情见[鉴权机制](#tag/开发准备/鉴权机制)。 |\n\n## HTTP 重定向\n\n在某些情况下，Authing 管理 API（V3） 接口会返回一个 **HTTP 重定向** 的响应，重定向的内容将会放在 **Response Header** 的 `Location` 字段上。\n\n## 分页请求\n\n默认情况下，分页接口默认一页会返回 10 个元素，并且如果无特殊说明，每页最大值为 50 个，你可以通过 `page` 和 `limit` 参数指定对应的页码和每页包含的元素个数。示例：\n\n```bash\ncurl 'https://<YOUR_DOMAIN>.authing.cn/api/v3/list-users?page=2&limit=50'\n```\n\n## HTTP 响应结构\n\n如非接口特殊声明，Authing 管理 API（V3） 的响应体格式如下：\n\n```json\n{\n  \"statusCode\": <STATUS_CODE>,\n  \"apiCode\": <API_CODE>, // 详细错误类型，当请求失败时会返回\n  \"message\": <ERROR_MESSAGE>, // 错误描述信息\n  \"requestId\": <REQUEST_ID>, // 错误请求 ID，当请求失败时会返回\n  \"data\": <RESPONSE_DATA>, // 具体响应数据\n}\n```\n\n`statusCode` 和 `apiCode` 的具体描述和错误处理方式见[错误处理](#tag/开发准备/错误处理)。\n","x-displayName":"HTTP 请求"},{"name":"开发准备/鉴权机制","description":"<!-- Authing 管理 API（V3） 使用的是 AK/SK 本地对请求数据的摘要进行签名的鉴权机制，客户端在调用 API 时，需要使用 SK 对请求数据的摘要进行签名计算，并将签名结果传输给服务器端进行签名验证。\n\n## 为什么使用 AK/SK 签名的方式\n\nAuthing 管理 API（V3） 使用 AK/SK 本地签名的鉴权机制，主要从以下几点安全性进行考虑：\n\n1. 验证客户端的合法性\n2. 防止请求数据在网络传输过程中被篡改\n3. 在请求数据中加入时间戳元素，防止[重放攻击](https://zh.wikipedia.org/wiki/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB)\n\n## 如何查看我的 AK/SK\n\n在 Authing 中，目前有两种类型的 AK/SK：\n\n- 用户池全局 AK/SK：具备用户池内所有资源的全局操作权限。你可以在 [Authing 控制台](https://console.authing.cn) 的**设置** - **基础设置** - **密钥管理** 获取到**用户池 ID** 和**用户池密钥**，其中**用户池 ID**为 AK（Access Key ID）,**用户池密钥**为 SK（Access Key Secret）。\n- 协作管理员 AK/SK：可针对用户池内的资源进行细粒度授权，协作管理员的 AK/SK 只能调用其被授权的 API。\n\n## 摘要签名机制原理说明\n\n拿到了你的 AK/SK 之后，下面我们来看如何使用 AK/SK 对一次 API 请求进行签名。\n\n### 将请求数据生成摘要\n\n假设在不考虑任何签名机制的情况下，我们有一个原始的获取用户列表的请求，如下所示：\n\n```\ncurl --request POST \\\n  --url https://api.authing.cn/api/v3/list-users \\\n  --header 'content-type: application/json' \\\n  --header 'some-other-header: some-random-value' \\\n  --data '{\n  \"options\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"limit\": 10\n    }\n  }\n}'\n```\n\nHTTP 请求数据如下：\n\n- 请求方式：`POST`；\n- 请求 API URL：`/api/v3/list-users`，不带域名和 Query 参数；\n- 请求头：携带了两个请求头 `content-type: application/json;charset=utf-8` 和 `some-other-header: some-random-value`；\n- 请求体：在请求体中传递了一个对象。\n\n在此基础上添加上 Authing API 签名要求的必要**请求头**：\n\n- `date` 请求头：客户端请求时刻的时间，为标准 GMT 格式，如 `Wed, 21 Oct 2015 07:28:00 GMT`，详情见 [Http date header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date)；\n- `x-authing-signature-nonce`: 签名随机字符串；\n- `x-authing-signature-method`: 签名算法，目前仅支持 `HMAC-SHA1`；\n- `x-authing-signature-version`: 签名算法版本，目前为 `1.0`。\n\n```text{1-10}\ncurl --request POST \\\n  --url https://api.authing.cn/api/v3/list-users \\\n  --header 'content-type: application/json;charset=utf-8' \\\n  --header 'some-other-header: some-random-value' \\\n  --header 'date: Sun, 09 Oct 2022 06:14:00 GMT'' \\\n  --header 'x-authing-signature-nonce: f02a938cdbcf1b1f10bf14887eda6659' \\\n  --header 'x-authing-signature-method: HMAC-SHA1' \\\n  --header 'x-authing-signature-version: 1.0' \\\n  --data '{\n  \"options\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"limit\": 10\n    }\n  }\n}'\n```\n\n在此之后，我们将上述的请求数据转换成下面这种格式的字符串：\n\n```\nHTTP-Verb\nContent-Type\nDate\nCanonicalizedAuthingHeaders\nCanonicalizedResource\n```\n\n其中每一项的释义如下：\n\n- `HTTP-Verb`: HTTP 请求动词，在这个例子里，为 `POST`；\n- `Content-Type`: HTTP 请求数据格式，在这个例子里，为 `application/json;charset=utf-8`\n- `Date`: 客户端请求时刻的时间，为标准 GMT 格式，如 `Wed, 21 Oct 2015 07:28:00 GMT`，详情见 [Http date header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date)；在这个例子里，为 `Sun, 09 Oct 2022 06:14:00 GMT`；\n- `CanonicalizedAuthingHeaders`: 经过规范化处理的 Authing 相关请求头，下面会介绍如何拼接；\n- `CanonicalizedResource`: 经过规范化处理的 API 资源，下面会介绍如何拼接；\n\n于是我们得到：\n\n```\nPOST\napplication/json;charset=utf-8\nWed, 21 Oct 2015 07:28:00 GMT\nCanonicalizedAuthingHeaders\nCanonicalizedResource\n```\n\n下面我们再分别介绍 CanonicalizedAuthingHeaders 和 CanonicalizedResource 的构建过程。\n\n#### 构建 CanonicalizedAuthingHeaders 参数\n\nCanonicalizedAuthingHeaders 的构建过程如下：\n\n1. 只需包含以 `x-authing-` 开头的请求头。\n2. 需要将每个 HTTP 标头名称转换为小写。例如，将 `X-Authing-Signature-Method` 转换为 `x-authing-signature-method`。\n3. 需要根据请求头名称按**字典顺序**进行排序。例如，`x-authing-signature-method` 应该在 `x-authing-signature-nonce` 之前。\n4. 每个请求头按照 `key=value` 的格式进行拼接，`key` 和 `value` 之间不应该包含空格。\n5. 不同的请求头之间通过换行符号（`\\n`）分隔。\n\n于是得到如下结果：\n\n```\nPOST\napplication/json;charset=utf-8\nWed, 21 Oct 2015 07:28:00 GMT\nx-authing-signature-method:HMAC-SHA1\nx-authing-signature-nonce:11223344\nx-authing-signature-version:1.0\nCanonicalizedResource\n```\n\n#### 构建 CanonicalizedResource 参数\n\nCanonicalizedResource 的构建过程如下：\n\n1. 不管是 `GET` 请求还是 `POST` 请求，格式需遵循 `<API_URL>?<API_DATA>`，中间使用 `?` 分隔。\n2. `<API_URL>` 部分不应该包含域名和 Query 和 Query 参数。例如：`https://api.authing.cn/api/v3/list-users?a=b` 这个请求，只保留 `/api/v3/list-users` 部分。\n3. `<API_DATA>` 部分规则如下：\n\n- 如果是 `GET` 请求，使用 Query 中的查询参数作为 `<API_DATA>` 需要的数据；\n- 如果是 `POST` 请求，使用 Body 中的请求体作为 `<API_DATA>` 需要的数据。\n\n遍历`<API_DATA>` 需要的数据的每一个 key，将此 key 和这个 key 对应的 value 按照 `key=value` 的方式进行拼接（如果 value 为字符串、数字、布尔值等原始值，无需做额外处理；如果 value 是一个对象，需要先转换成 JSON 字符串再[编吗为 URL 格式](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)）。不同的 key/value 对之间使用 `&` 符号进行连接。\n\n于是我们再得到如下结果：\n\n```\nPOST\napplication/json;charset=utf-8\nWed, 21 Oct 2015 07:28:00 GMT\nx-authing-signature-method:HMAC-SHA1\nx-authing-signature-nonce:11223344\nx-authing-signature-version:1.0\n/api/v3/list-users?options=%7B%22pagination%22:%7B%22page%22:1,%22limit%22:10%7D%7D\n```\n\n下文中我们会将这个最终得到的字符串叫做 `stringToSign`。\n\n### 将生成的摘要使用 SK 计算签名\n\nAuthing API 的签名鉴权机制使用 `HMAC-SHA1` 算法，并生成 `base64` 格式的摘要。\n\n以 `Node.js` 代码为例：\n\n```js\nexport function buildSignature(accessKeySecret: string, stringToSign: string) {\n  return crypto\n    .createHmac('sha1', accessKeySecret)\n    .update(Buffer.from(stringToSign, 'utf8'))\n    .digest('base64');\n}\n```\n\n于是我们再得到类似下面的结果：\n\n```\nPFboTzV5F7WjU4yKCFmcRDTZ6tk=\n```\n\n### 根据 AK/SK + 签名构建 Authorization 请求头\n\n得到了签名之后，我们按照如下格式拼接 `Authorization` 请求头的内容：\n\n```\nauthing <accessKeyId>:<signature>\n```\n\n于是我们得到最终的结果：\n\n```\nauthing 62eaa95ffxxxxee52ae6b90c:PFboTzV5F7WjU4yKCFmcRDTZ6tk=\n```\n\n我们需要将其放到 `Authorization` 中并传输给 Authing 服务器。\n\n### 发出最终请求\n\n```text{1-10}\ncurl --request POST \\\n  --url https://api.authing.cn/api/v3/list-users \\\n  --header 'content-type: application/json;charset=utf-8' \\\n  --header 'some-other-header: some-random-value' \\\n  --header 'date: Sun, 09 Oct 2022 06:14:00 GMT'' \\\n  --header 'x-authing-signature-nonce: f02a938cdbcf1b1f10bf14887eda6659' \\\n  --header 'x-authing-signature-method: HMAC-SHA1' \\\n  --header 'x-authing-signature-version: 1.0' \\\n  --header 'authorization: authing 62eaa95ffxxxxee52ae6b90c:PFboTzV5F7WjU4yKCFmcRDTZ6tk=' \\\n  --data '{\n  \"options\": {\n    \"pagination\": {\n      \"page\": 1,\n      \"limit\": 10\n    }\n  }\n}'\n```\n\n## 摘要算法示例代码\n\n你可以在此查看不同语言的摘要示例代码。\n\n## 使用 SDK 请求 API\n\n我们为开发中提供了不同语言的 SDK，SDK 内置了相关签名逻辑，使得你需要过多考虑这些 -->\n\nAuthing 管理 API（V3） 通过 AK/SK 获取 `access_token` 的方式对接口进行鉴权，获取到 `access_token` 之后，你需要将其设置到 HTTP 的 `authorization` 请求头中，如下所示：\n\n```bash\ncurl -XPOST 'https://api.authing.cn/api/v3/list-users' \\\n  -H 'authorization: <替换成真实的 access_token>' \\\n  -H 'x-authing-userpool-id: <替换成真实的用户池 ID>'\n```\n\n详情请见[获取 access_token](#tag/鉴权机制/获取%20Access%20Token)。\n","x-displayName":"鉴权机制"},{"name":"开发准备/密码安全传输","description":"## HTTPS 加密传输\n\nAuthing 所有 API 均通过 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 `RSA256` 和[国密 SM2](https://baike.baidu.com/item/SM2/15081831) 两种方式对密码进行加密。\n\n## RSA256\n\nAuthing 支持使用 RSA256 非对称加密方式对密码进行安全传输，你需要使用 Authing 的 RSA 公钥对密码进行加密，发送到 Authing 服务器后端之后，Authing 服务器会使用私钥进行解密。\n\nAuthing 的 RSA 公钥如下，你也可以通过此[端点](#tag/公开信息端点/API%20列表/operation/PublicAPIV3Controller_getSystemInfo)拉取：\n\n```\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC4xKeUgQ+Aoz7TLfAfs9+paePb\n5KIofVthEopwrXFkp8OCeocaTHt9ICjTT2QeJh6cZaDaArfZ873GPUn00eOIZ7Ae\n+TiA2BKHbCvloW3w5Lnqm70iSsUi5Fmu9/2+68GZRH9L7Mlh8cFksCicW2Y2W2uM\nGKl64GDcIq3au+aqJQIDAQAB\n-----END PUBLIC KEY-----\n\n```\n\n你可以参考[此 Demo](https://github.com/Authing/password-encryption)，其包含了使用 RSA256 加密密码的示例。\n\n如果你只是简单调试，可以使用[此在线调试工具](http://www.metools.info/code/c81.html)使用上面的公钥对密码进行加密。\n\n## 国密 SM2\n\nAuthing 支持使用国密 SM2 加密方式对密码进行安全传输，你需要使用 Authing 的 SM2 公钥对密码进行加密，发送到 Authing 服务器后端之后，Authing 服务器会使用私钥进行解密。\n\nAuthing 的 SM2 公钥如下，你也可以通过此[端点](#tag/公开信息端点/API%20列表/operation/PublicAPIV3Controller_getSystemInfo)拉取：\n\n```\n042bc07187cc3bdcfe63b37902eead6dc400734d386e8e2be05d26159bce3259ae602c608052204079e5f49c12ef3296df8ceeff6314b45e2cf110dd58e96a47e4\n```\n\n你可以参考[此 Demo](https://github.com/Authing/password-encryption)，其包含了使用 SM2 加密密码的示例。\n\n如果你只是简单调试，可以使用[此在线调试工具](http://www.lzltool.com/SM2)使用上面的公钥对密码进行加密。\n","x-displayName":"密码安全传输"},{"name":"开发准备/接口限流","description":"针对免费账户，Authing 默认的接口限流频率为 300 QPS / 用户池。如果触发了我们的 QPS 限制，你将收到以下错误提示：HTTP code 为 `429`，响应体为：\n\n```json\n{\n  \"statusCode\": 429,\n  \"message\": \"您的请求已超过最大数量限制，请稍后重试\"\n}\n```\n\n> 如果你触发了接口限流阈值，请升级套餐并联系 Authing 客服申请更大的 QPS 限制。\n","x-displayName":"接口限流"},{"name":"开发准备/服务器 IP","description":"当你进行配置自定义数据库、接收 Webhook 通知等操作时，你可能需要获取 Authing 服务的对外 IP，并修改防火墙配置。Authing 服务的对外 IP 可以通过[此端点](https://api.authing.cn/openapi/v3/authentication/#tag/公开信息端点/API%20列表/operation/PublicAPIV3Controller_getSystemInfo)获取。\n","x-displayName":"服务器 IP"},{"name":"开发准备/错误处理","description":"Authing API（V3） 采取了和标准 RESTful API 不完全一致的错误处理方案，如果没有特殊说明，\n所有接口返回的 HTTP 状态码均为 `200`。一个 HTTP 状态码为 `200` 的响应，不能视为操作成功，你需要通过响应体的具体内容进行判断。\n\nAuthing API（V3） 接口响应体中，包含了两个状态码：`statusCode` 和 `apiCode`：\n\n- `statusCode`: `statusCode` 为请求状态码，不包含具体的业务错误信息。**当且仅当 `statusCode` 为 `200` 时，表示接口请求成功**，此时不会带有 `apiCode`。`statusCode` 不为 `200` 的情况下，\n  表示接口请求失败或者需要进行额外操作（比如登录接口需要进行 MFA 二次验证），你需要对此进行关注，进行必要的错误处理。每个 `statusCode` 对应一个类型的错误，\n  具体的错误分类请见下文。在大多数情况下，除非你需要对某些特定的异常做出响应，否则你只需要关注 `statusCode`，不需要关注 `apiCode`。\n- `apiCode`: `apiCode` 为业务状态码，每个 `apiCode` 具备特定的错误含义，具体的 `apiCode` 列表见下文。`apiCode` 只会在 `statusCode` 非 200 且错误原因具备业务含义时才会返回。\n\n## statusCode\n\n| 错误码大类 | 错误类型           | 包含详细错误码                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| ---------- | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 2xx        | 请求正常           | - 200: OK                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| 4xx        | 客户端异常         | - [400]InvalidArgumentError：请求参数格式错误 <br> - [401]UnauthorizedError：用户未登录 <br>- [402]PaymentNeededError：此接口需要升级套餐之后使用<br>- [403]ForbiddenError：没有权限执行某操作<br>- [404]NotFoundError：找不到资源<br>- [409]ConflictError：要创建的资源和已有资源存在字段冲突<br>- [413]PayloadTooLargeError：请求体过大<br>- [422]InvalidOperationError：非法操作（参数格式正确，但不符合业务限制）<br>- [429]ThrottleError：触发限流机制<br>- [499]ClientError：通用客户端异常 |\n| 5xx        | 服务器端异常       | - [500]ServerError：通用服务端异常<br>- [501]UnsupportedOperationError：服务器不支持的操作<br> - [502]BadGatewayError：微服务调用出错<br> - [503]ServiceUnavailableError：维护中                                                                                                                                                                                                                                                                                                                  |\n| 6xx        | 第三方服务调用异常 | - [601]EndpointRequestError：请求第三方端点失败<br>- [602]EndpointResponseError：第三方端点返回了错误<br>- [603]CustomCodeError：自定义代码出错，例如 pipeline 或自定义数据库                                                                                                                                                                                                                                                                                                                     |\n\n## apiCode\n\n| apiCode | 描述                                                       |\n| :------ | :--------------------------------------------------------- |\n| 1300    | AK/SK 签名不合法                                           |\n| 1301    | AK/SK 签名方式和服务端不匹配                               |\n| 1302    | AK/SK 签名版本和服务端不匹配                               |\n| 1303    | AK/SK 签名时间戳格式不正确，应该是单位为毫秒的 Unix 时间戳 |\n| 1304    | 使用 AK/SK 签名机制时，请求头中没有 date 请求头            |\n| 1305    | AK/SK 签名时间戳和服务器时间戳相差较大，此次请求不被允许   |\n| 1306    | AK/SK 签名已经被消费过，此次请求不被允许                   |\n| 1600    | 认证后流程成功完成，登录态已设置                           |\n| 1635    | 个人（个人中心绑定）MFA                                    |\n| 1636    | 企业（应用下配置的） MFA                                   |\n| 1639    | 首次登录重置密码（不需要验证旧密码）                       |\n| 1640    | 触发联邦认证询问身份绑定，只允许绑定现有账号               |\n| 1641    | 触发联邦认证询问身份绑定，允许绑定现有账号和创建新账号     |\n| 1642    | 登录信息补全                                               |\n| 1643    | 用户自主解锁                                               |\n| 1699    | 提前终止认证后流程，返回登录界面                           |\n| 1700    | 未上传人脸识别的照片                                       |\n| 1701    | 人脸对比时，未上传需要对比的图片                           |\n| 1702    | 人脸校验错误                                               |\n| 1703    | 未绑定邮箱或手机号，无法绑定人脸                           |\n| 1704    | 绑定人脸时，手机验证失败                                   |\n| 1705    | 绑定人脸时，邮箱验证失败                                   |\n| 1706    | 人脸已被绑定                                               |\n| 1707    | 绑定人脸失败                                               |\n| 2004    | 用户未找到                                                 |\n| 2005    | 用户已锁定                                                 |\n| 2006    | 密码错误                                                   |\n| 2011    | 应用不存在                                                 |\n| 2020    | 尚未登录，无权限访问此请求                                 |\n| 2031    | 应用已禁止注册用户                                         |\n| 2039    | 应用域名已被占用                                           |\n| 2040    | 用户池域名已被占用                                         |\n| 2058    | 强制重置密码（需要验证旧密码）                             |\n| 2224    | 用户池不存在                                               |\n| 2333    | 用户名或密码错误                                           |\n| 4021    | 计量计费错误                                               |\n| 6001    | Totp 码错误                                                |\n| 6002    | Totp 恢复码错误                                            |\n| 6003    | 未输入 Totp 安全码                                         |\n| 6004    | 未输入 Totp 恢复码                                         |\n| 2120008 | 用户已停用或不是此租户成员                                 |\n| 2130010 | 用户无权限登录此租户                                       |\n| 2820002 | 无效的 LDAP 链接                                           |\n\n## 响应数据示例\n\n一个成功的请求响应数据示例如下：\n\n```json\n{\n  // 此响应表示请求成功，所以不会返回 apiCode\n  \"statusCode\": 200,\n  \"message\": \"\",\n  \"data\": {\n    // ... 省略具体数据\n  }\n}\n```\n\n一个失败的请求响应数据示例如下：\n\n```json\n{\n  // 此类型错误不具备具体的业务含义，所以不会返回 apiCode\n  \"statusCode\": 429,\n  \"message\": \"您的请求已超过最大数量限制，请稍后重试\"\n}\n```\n\n以及：\n\n```json\n{\n  // 账号不存在或密码错误具备业务含义，所以返回了对应的 apiCode: 2333\n  \"statusCode\": 403,\n  \"apiCode\": 2333,\n  \"message\": \"Account not exists or password is incorrect.\",\n  \"requestId\": \"xxxxxx-xxxxxx-xxxxxx-xxxxxx\"\n}\n```\n\n## 我该如何处理 statusCode 和 apiCode\n\n在大多数情况下，除非你需要对某些特定的异常做出响应，否则你只需要关注 `statusCode`，不需要关注 `apiCode`。\n比如登录接口，如果你只需要在用户登录失败的时候给出错误提示，可以不用关心 `apiCode`；但是如果你需要对某一种\n特定的业务错误进行额外处理，就需要根据 `apiCode` 进行判断。\n","x-displayName":"错误处理"},{"name":"鉴权机制/获取 Access Token","description":"通过 AccessKey ID 与 AccessKey Secret 获取 Management API 的 Access Token，此 Access Token 可以用来操作 Management API。\n\n在 Authing 中，目前有两种类型的 AK/SK：\n\n- 用户池全局 AK/SK：具备用户池内所有资源的全局操作权限。你可以在 [Authing 控制台](https://console.authing.cn)的**设置** - **基础设置** - **密钥管理**获取到用户池 ID 和用户池密钥，其中用户池 ID 为 AK（Access Key ID）,用户池密钥为 SK（Access Key Secret）。\n- 协作管理员 AK/SK：可针对用户池内的资源进行细粒度授权，协作管理员的 AK/SK 只能调用其被授权的 API。（正在开发中，敬请期待。）\n\n你可以根据自己的需求选择合适的 AK/SK。\n\n获取到此接口返回的`access_token` 之后，你可以使用此 `access_token` 去调用 Authing 管理 API(v3) 中的 API，如下所示：\n\n- `authorization` 请求头：此接口获取到的 `access_token`。\n- `x-authing-userpool-id` 请求头：用户池 ID。\n\n```\ncurl -XPOST 'https://api.authing.cn/api/v3/list-users'\n  -H 'authorization: <替换成真实的 access_token>'\n  -H 'x-authing-userpool-id: <替换成真实的用户池 ID>'\n```\n\n`access_token` 的有效时间默认为 7200 秒，应用程序中应该维护 `access_token` 的状态，当 `access_token` 过期之后重新获取。\n","x-displayName":"获取 Access Token"},{"name":"鉴权机制/事件","description":"","x-displayName":"事件"},{"name":"管理用户/使用自定义数据库存储用户数据","description":"此模块用于管理 Authing 的用户目录。\n\n你可以把 Authing 用户目录理解为存储了你所有用户资料的目录，你可以在用户目录中搜索用户、查看用户资料、修改用户信息；这个用户目录的 Schema 是可扩展的，你可以添加自定义的用户字段。\n\n默认情况下，Authing 会将用户数据存储在 Authing 的数据库（Authing User Store），但是如果你有老的数据库需要迁移，或者想使用自己的数据库，如 MySQL，MongoDB，SQL Server 等（Custom User Store），你可以使用自定义数据库功能。详情请[查看文档](https://docs.authing.cn/v2/guides/database-connection/overview.html)。\n\n使用了自定义数据库的情况下，API 调用形式不受影响。\n\n![](https://files.authing.co/api-explorer/manage-user.jpg)","x-displayName":"使用自定义数据库存储用户数据"},{"name":"管理用户/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理用户/事件","description":"当你对用户进行了增删改操作之后，你可以获得对应的 Webhook 事件通知，详情请见[使用 Webhook 监听事件](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"事件"},{"name":"管理用户/常见问题","description":"## 如何迁移历史用户的密码\n\n假如你可以解密得到用户的原始密码，可以直接在创建用户的时候设置用户的密码；更多情况下，你可能无法获取用户的原始密码，但是你肯定有办法可以**验证用户密码**的合法性。通过以下两步可以实现无缝迁移历史用户的密码：\n\n- 第一步，配置自定义密码函数：你需要编写**加密密码**和**验证密码**两个函数，**加密密码函数**用于对新用户的密码进行自定义加密，**验证密码函数**用于对用户的密码进行自定义验证。详情请见[配置自定义密码函数](https://docs.authing.cn/v2/guides/migrations/custom-password-script/)。\n- 第二步，调用批量创建用户 API 创建用户时，设置 `options.keepPassword` 为 `true`，开启这个开关之后，用户的 `password` 字段会直接写入 Authing 数据库，Authing 不会再次加密此字段。后续用户验证密码时，将会使用你配置的自定义密码函数进行验证。\n","x-displayName":"常见问题"},{"name":"管理公共账号/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理组织机构/从第三方导入组织机构","description":"和一般的 OA 系统、人事管理系统不一样，Authing 的组织机构是支持多租户的，也就是一个用户池中可能有多个相互隔离的组织机构。所以在 Authing 的组织机构模型中，你需要明确区分两个概念：\n\n- `组织机构（Organization）`：组织机构是一组部门在逻辑上的集合。从数据结构上体现，每个组织机构有一棵独立的树状结构，树的节点对应的是部门；对应到现实生活中，你可以理解为一家独立的公司。\n- `部门（Department）`：部门对应的是一个原子化单位，对应到现实中，你可以理解为一个公司中的某个部门。\n\n对应的，Authing 组织机构管理 API 包含两部分：\n\n- 组织机构的管理：一级组织机构的创建、修改、删除、查询。\n- 部门的管理：在某个组织机构中，进行添加部门、修改部门、删除子部门、移动部门、获取子部门列表、添加成员、删除成员、获取成员列表等操作。\n\n在现实中，你很有可能在一个第三方的系统（比如飞书、钉钉、企业微信或者是任何自建的 HR 系统）中维护了你的组织机构数据，针对这种场景，Authing 推出了**同步中心**的功能。同步中心可以使企业管理者免于在各个系统中手动维护应用账号， 真正实现**一处管理、处处同步**，既提高了员工生命周期流转效率，又帮助企业降低了运维成本。\n\n![](https://cdn.authing.co/authing-docs-v2/1.3.123/assets/img/main.fd9b2a9e.jpg)\n\n详情请了解[同步中心](https://docs.authing.cn/v2/guides/sync-new/)。\n","x-displayName":"从第三方导入组织机构"},{"name":"管理组织机构/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理组织机构/事件","description":"当你对组织机构进行了增删改操作之后，你可以获得对应的 Webhook 事件通知，详情请见[使用 Webhook 监听事件](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"事件"},{"name":"管理角色/概述","description":"此模块用于介绍如何使用 API 管理你的角色。在查看具体的 API 列表之前，你应该还需要简单了解一下我们经常说的 RBAC（Role-Based Access Control，即基于角色的访问控制） 权限模型。\n\n## 什么是基于角色的访问控制（RBAC）\n\n基于角色的访问控制（Role-Based Access Control，简称 RBAC），指的是通过用户的角色（Role）授权其相关权限，这实现了更灵活的访问控制，相比直接授予用户权限，要更加简单、高效、可扩展。\n\n![](https://cdn.authing.co/authing-docs-v2/1.3.128/assets/img/rbac.60e79b81.png)\n\n当使用 RBAC 时，通过分析系统用户的实际情况，基于共同的职责和需求，授予他们不同角色。你可以授予给用户一个或多个角色，每个角色具有一个或多个权限，这种 用户-角色、角色-权限 间的关系，让我们可以不用再单独管理单个用户，用户从授予的角色里面继承所需的权限。\n\n以一个简单的场景（Gitlab 的权限系统）为例，用户系统中有 Admin、Maintainer、Operator 三种角色，这三种角色分别具备不同的权限，比如只有 Admin 具备创建代码仓库、删除代码仓库的权限，其他的角色都不具备。\n\n![](https://cdn.authing.co/authing-docs-v2/1.3.128/assets/img/rbac.d582f1b7.png)\n\n我们授予某个用户「Admin」这个角色，他就具备了「创建代码仓库」和「删除代码仓库」这两个权限。\n\n不直接给用户授权策略，是为了之后的扩展性考虑。比如存在多个用户拥有相同的权限，在分配的时候就要分别为这几个用户指定相同的权限，修改时也要为这几个用户的权限进行一一修改。有了角色后，我们只需要为该角色制定好权限后，给不同的用户分配不同的角色，后续只需要修改角色的权限，就能自动修改角色内所有用户的权限。\n","x-displayName":"概述"},{"name":"管理角色/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理角色/事件","description":"当你对角色进行了增删改操、授权作之后，你可以获得对应的 Webhook 事件通知，详情请见[使用 Webhook 监听事件](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"事件"},{"name":"管理用户分组/概述","description":"在 Authing 中，分组和角色在含义上是有区别的，用户组是纯粹代表一群用户的集合，比如我们生活中的微信群、临时的项目小组；而角色往往会附带上权限，用户被分配了某个角色，就具备了这个角色拥有的权限。当你的「分组」需要涉及到权限的时候，你更应该去使用「角色」。\n","x-displayName":"概述"},{"name":"管理用户分组/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理用户分组/事件","description":"当你对用户分组进行了增删改操作之后，你可以获得对应的 Webhook 事件通知，详情请见[使用 Webhook 监听事件](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"事件"},{"name":"管理自定义字段/基本概念","description":"针对用户、部门、角色，除了 Authing 为开发者内置的字段，你还可以在此基础上对用户、部门、角色的 Schema 进行一定程度的自定义，比如创建自定义的字段，修改内置字段的限制条件等。\n\n设计到自定义字段相关的 API 时，你需要明确两个概念：**自定义字段定义**和**自定义字段的值**：\n\n- 自定义字段定义：定义了这个自定义字段的元信息，如描述、数据类型、限制条件等，可以理解为 Schema，只有你在 Authing 中先定义了一个自定义字段，才能设置对应的值。\n- 自定义字段的值：实际存储的自定义数据，这些自定义数据需要满足「自定义字段定义」Schema 的要求。\n","x-displayName":"基本概念"},{"name":"管理自定义字段/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理自定义字段/事件","description":"当你对自定义数据进行了增删改操作之后，你可以获得对应的 Webhook 事件通知，详情请见[使用 Webhook 监听事件](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"事件"},{"name":"管理资源与权限/基本概念","description":"此模块用于介绍如何使用 API 管理你的资源与资源授权。在查看具体的 API 列表之前，你应该还需要简单了解一下我们经常说的 ABAC（Attribute-Based Access Control，即基于角色的访问控制） 权限模型。\n\n## 什么是基于属性的访问控制（ABAC）\n\n基于属性的访问控制（Attribute-Based Access Control，简称 ABAC）是一种非常灵活的授权模型，不同于 RBAC，ABAC 则是通过各种属性来动态判断一个操作是否可以被允许。\n\n### ABAC 的主要组成部分\n\n在 ABAC 中，一个操作是否被允许是基于对象、资源、操作和环境信息共同动态计算决定的。\n\n- 对象：对象是当前请求访问资源的用户。用户的属性包括 ID，个人资源，角色，部门和组织成员身份等；\n- 资源：资源是当前访问用户要访问的资产或对象（例如文件，数据，服务器，甚至 API）。资源属性包含文件的创建日期，文件所有者，文件名和类型以及数据敏感性等等；\n- 操作：操作是用户试图对资源进行的操作。常见的操作包括“读取”，“写入”，“编辑”，“复制”和“删除”；\n- 环境：环境是每个访问请求的上下文。环境属性包含访问尝试的时间和位置，对象的设备，通信协议和加密强度等。\n\n### ABAC 如何使用属性动态计算出决策结果\n\n在 ABAC 的决策语句的执行过程中，决策引擎会根据定义好的决策语句，结合对象、资源、操作、环境等因素动态计算出决策结果。\n\n每当发生访问请求时，ABAC 决策系统都会分析属性值是否与已建立的策略匹配。如果有匹配的策略，访问请求就会被通过。\n\n例如，策略「当一个文档的所属部门跟用户的部门相同时，用户可以访问这个文档」会被以下属性匹配：\n\n- 对象（用户）的部门 = 资源的所属部门；\n- 资源 = “文档”；\n- 操作 = “访问”；\n\n策略「早上九点前禁止 A 部门的人访问 B 系统；」会被以下属性匹配：\n\n- 对象的部门 = A 部门；\n- 资源 = “B 系统”；\n- 操作 = “访问”；\n- 环境 = “时间是早上 9 点”。\n\n### ABAC 应用场景\n\n在 ABAC 权限模型下，你可以轻松地实现以下权限控制逻辑：\n\n1. 授权 A 具体某部门的编辑权限；\n2. 当一个文档的所属部门跟用户的部门相同时，用户可以访问这个文档；\n3. 当用户是一个文档的拥有者并且文档的状态是草稿，用户可以编辑这个文档；\n4. 早上九点前禁止 A 部门的人访问 B 系统；\n5. 在除了上海以外的地方禁止以管理员身份访问 A 系统；\n6. 上述的逻辑中有几个共同点：\n\n- 具体到某一个而不是某一类资源；\n- 具体到某一个操作；\n- 能通过请求的上下文（如时间、地理位置、资源 Tag）动态执行策略；\n\n如果浓缩到一句话，你可以**细粒度地授权在何种情况下对某个资源具备某个特定的权限。**\n\n## 我该如何选择使用哪种权限模型\n\n在这里，组织的规模是至关重要的因素。由于 ABAC 最初的设计和实施困难，对于小型企业而言，考虑起来可能太复杂了。\n\n对于中小型企业，RBAC 是 ABAC 的简单替代方案。每个用户都有一个唯一的角色，并具有相应的权限和限制。当用户转移到新角色时，其权限将更改为新职位的权限。这意味着，在明确定义角色的层次结构中，可以轻松管理少量内部和外部用户。\n\n但是，当必须手动建立新角色时，对于大型组织而言，效率不高。一旦定义了属性和规则，当用户和利益相关者众多时，ABAC 的策略就更容易应用，同时还降低了安全风险。\n\n简而言之，如果满足以下条件，请选择 ABAC：\n\n- 你在一个拥有许多用户的大型组织中；\n- 你需要深入的特定访问控制功能；\n- 你有时间投资远距离的模型；\n- 你需要确保隐私和安全合规；\n\n但是，如果满足以下条件，请考虑 RBAC：\n\n- 你所在的是中小型企业；\n- 你的访问控制策略广泛；\n- 你的外部用户很少，并且你的组织角色得到了明确定义；\n","x-displayName":"基本概念"},{"name":"管理资源与权限/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理资源与权限/事件","description":"","x-displayName":"事件"},{"name":"管理数据资源与权限/概述","description":"数据权限模块我们提供了丰富的 API，供开发人员使用，在查看具体的 API 列表之前，你可以通过文档：[对用户进行权限管理](https://docs.authing.cn/v2/guides/access-control/) 进行了解一下我们的权限模型相关概念\n\n## API 目录\n\n### 权限空间\n\n- [创建权限空间](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/PermissionNamespaceManagementController_createPermissionNamespace)（重点）\n- [批量创建权限空间](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/PermissionNamespaceManagementController_createPermissionNamespacesBatch)\n- [获取权限空间详情](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/PermissionNamespaceManagementController_getPermissionNamespace)\n- [批量获取权限空间详情](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/PermissionNamespaceManagementController_getPermissionNamespacesBatch)\n- [分页获取权限空间列表](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/PermissionNamespaceManagementController_ListPermissionNamespaces)\n- [修改权限空间](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/PermissionNamespaceManagementController_updatePermissionNamespace)\n- [删除权限空间](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/PermissionNamespaceManagementController_deletePermissionNamespace)\n- [批量删除权限空间](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/PermissionNamespaceManagementController_deletePermissionNamespacesBatch)\n- [校验权限空间下 Code 或名称是否可用](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/PermissionNamespaceManagementController_checkPermissionNamespaceExists)\n- [分页查询权限空间下所有的角色列表](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/PermissionNamespaceManagementController_ListPermissionNamespaceRoles)\n\n### 数据资源\n\n- [创建数据资源](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesManagementController_createDataResource)（推荐、重点）\n- [创建字符串类型数据资源](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesManagementController_createDataResourceByString)\n- [创建数组类型数据资源](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesManagementController_createDataResourceByArray)\n- [创建树类型数据资源](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesManagementController_createDataResourceByTree)\n- [获取数据资源列表](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesManagementController_listDataResources)\n- [获取数据资源详情](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesManagementController_getDataResource)\n- [修改数据资源](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesManagementController_updateDataResource)\n- [删除数据资源](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesManagementController_deleteDataResource)\n- [检查数据资源 Code 或名称是否可用](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesManagementController_checkDataResourceExists)\n\n### 数据策略\n\n- [创建数据策略](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesPolicyManagementController_createDataPolicy)（重点）\n- [获取数据策略列表](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesPolicyManagementController_listDataPolices)\n- [获取数据策略简略信息列表](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesPolicyManagementController_listSimpleDataPolices)\n- [获取数据策略详情](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesPolicyManagementController_getDataPolicy)\n- [修改数据策略](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesPolicyManagementController_updateDataPolicy)\n- [删除数据策略](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesPolicyManagementController_deleteDataPolicy)\n- [检查数据策略名称是否可用](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesPolicyManagementController_checkDataPolicyExists)\n\n### 授权\n\n- [授权数据策略](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesPolicyManagementController_authorizeDataPolicies)（重点）\n- [获取数据策略授权的主体列表](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesPolicyManagementController_listDataPolicyTargets)\n- [删除数据策略授权](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataResourcesPolicyManagementController_revokeDataPolicy)\n\n### 鉴权\n\n- [获取用户权限列表](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataAuthenticationManagementController_getUserPermissionList)\n- [判断用户权限](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataAuthenticationManagementController_checkPermission)（重点）\n- [判断外部用户权限](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataAuthenticationManagementController_checkExternalUserPermission)\n- [获取用户拥有某些资源的权限列表](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataAuthenticationManagementController_getUserResourcePermissionList)（推荐）\n- [获取拥有某些资源权限的用户列表](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataAuthenticationManagementController_listResourceTargets)\n- [获取用户拥有指定资源的权限及资源结构信息](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataAuthenticationManagementController_getUserResourceStruct)\n- [获取外部用户拥有指定资源的权限及资源结构信息](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataAuthenticationManagementController_getExternalUserResourceStruct)\n- [判断用户在树资源同层级下的权限](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataAuthenticationManagementController_checkUserSameLevelPermission)（推荐）\n- [获取权限视图数据列表](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataPermissionViewManagementController_listPermissionView)\n\n## API 使用完整示例\n\n### 业务场景说明\n\n作为使用 Authing 的数据权限功能模块的开发者，我现在需要使用它实现对公司研发和运维人员使用的内部平台进行权限管控，该平台的菜单如下：\n\n- 知识库 (knowledge base)\n  > 一级菜单\n  - 研发知识库 (rd knowledge base)\n    > 二级菜单，点击后显示所有研发创建的一系列文档数据，我们规定只有研发人员可以访问此菜单并且如果能访问就可以对所有的文档数据做任何操作。\n  - 运维知识库 (devops knowledge base)\n    > 二级菜单，点击后显示所有运维创建的一系列文档数据，我们规定只有运维人员可以访问此菜单并且如果能访问就可以对所有的文档数据做任何操作。\n- 数据库 (db)\n  > 一级菜单，点击后显示所有环境的数据库，有：生产、测试、开发。 其中运维人员可以在所有环境进行 `执行 SQL` 操作，研发人员只能在测试、开发环境进行 `执行 SQL`。\n\n### 业务分析\n\n根据上面的业务场景，可以得出以下结论：\n\n1. 公司员工登录该平台后，不同角色的人员能够访问的菜单不同，针对这种具备层级结构的资源，则对应数据资源类型为：树\n2. 对于研发和运维知识库的二级菜单，只要能访问则可以对所有的文档数据做任何操作，无需针对单条文档进行权限管控，所以这里我们只需要对菜单进行权限管控即可。\n3. 对于数据库菜单下的数据（各个环境），我们需要进行更细致力度的权限管控，即：研发人员只能访问测试、开发环境，运维人员可以访问所有环境。我们可以将这些环境以同层级的方式存储到一个树类型数据资源中，这样可以配置更细致的权限策略。\n\n### 业务实现\n\n根据上面的业务分析，我们需要进行如下步骤：\n\n1. 定义权限空间\n2. 将我们的业务数据对象导入到 Authing 的数据资源中\n3. 定义数据策略\n4. 对用户进行授权数据策略\n5. 鉴权\n\n作为开发者，我将通过 Authing 提供的 API 按以下几个步骤进行具体实现：\n\n1. 创建权限空间\n   ```http\n   POST /api/v3/create-permission-namespace\n   {\n     \"name\": \"内部平台\",\n     \"code\": \"internal-platform\"\n   }\n   ```\n2. 将菜单数据导入到 Authing 的数据资源中，注意：菜单资源的操作只有 `access`，即：访问\n   ```http\n    POST /api/v3/create-data-resource\n    {\n      \"namespaceCode\": \"internal-platform\",\n      \"resourceName\": \"内部平台菜单\",\n      \"resourceCode\": \"internal-platform-menu\",\n      \"type\": \"TREE\",\n      \"struct\": [\n        {\n          \"name\": \"知识库\",\n          \"code\": \"knowledge-base\",\n          \"value\": \"Knowledge Base\",\n          \"children\": [\n            {\n              \"name\": \"研发知识库\",\n              \"code\": \"rd-knowledge-base\",\n              \"value\": \"RD Knowledge Base\"\n            },\n            {\n              \"name\": \"运维知识库\",\n              \"code\": \"devops-knowledge-base\",\n              \"value\": \"DevOps Knowledge Base\"\n            }\n          ]\n        },\n        {\n          \"name\": \"数据库\",\n          \"code\": \"db\",\n          \"value\": \"DB\"\n        }\n      ],\n      \"actions\": [\"access\"]\n    }\n   ```\n3. 将数据库环境数据导入到 Authing 的数据资源中\n   ```http\n   POST /api/v3/create-data-resource\n   {\n      \"namespaceCode\": \"internal-platform\",\n      \"resourceName\": \"数据库环境\",\n      \"resourceCode\": \"db-env\",\n      \"type\": \"TREE\",\n      \"struct\": [\n        {\n          \"name\": \"生产\",\n          \"code\": \"prod\",\n          \"value\": \"prod\"\n        },\n        {\n          \"name\": \"测试\",\n          \"code\": \"test\",\n          \"value\": \"test\"\n        },\n        {\n          \"name\": \"开发\",\n          \"code\": \"dev\",\n          \"value\": \"dev\"\n        }\n      ],\n      \"actions\": [\"execute-sql\"]\n   }\n   ```\n4. 创建研发人员的数据策略：能够访问研发知识库、数据库菜单，并且可以在数据库的测试和开放环境中进行 `执行 SQL` 操作\n   ```http\n   POST /api/v3/create-data-policy\n   {\n     \"policyName\": \"研发策略\",\n     \"statementList\": [\n       {\n         \"effect\": \"ALLOW\",\n         \"permissions\": [\n           \"internal-platform/internal-platform-menu/knowledge-base/rd-knowledge-base/access\",\n           \"internal-platform/internal-platform-menu/db/access\"\n         ]\n       },\n       {\n         \"effect\": \"ALLOW\",\n         \"permissions\": [\n           \"internal-platform/db-env/test/execute-sql\",\n           \"internal-platform/db-env/dev/execute-sql\"\n         ]\n       }\n     ]\n   }\n   ```\n5. 创建运维人员的数据策略: 能够访问运维知识库、数据库菜单，并且可以在所有数据库环境中进行 `执行 SQL` 操作\n   ```http\n   POST /api/v3/create-data-policy\n   {\n     \"policyName\": \"运维策略\",\n     \"statementList\": [\n       {\n         \"effect\": \"ALLOW\",\n         \"permissions\": [\n           \"internal-platform/internal-platform-menu/knowledge-base/devops-knowledge-base/access\",\n           \"internal-platform/internal-platform-menu/db/access\"\n         ]\n       },\n       {\n         \"effect\": \"ALLOW\",\n         \"permissions\": [\n           \"internal-platform/db-env/prod/execute-sql\",\n           \"internal-platform/db-env/test/execute-sql\",\n           \"internal-platform/db-env/dev/execute-sql\"\n         ]\n       }\n     ]\n   }\n   ```\n6. 为不同的角色（研发和运维）进行授权数据策略，注意：这里假设我们的员工数据已经同步到 Authing 中了\n   ```http\n   POST /api/v3/authorize-data-policies\n   {\n      \"policyIds\": [\"研发策略 ID\"],\n      \"targetList\": [\n        {\n          \"id\": \"研发角色 ID\",\n          \"type\": \"ROLE\"\n        }\n      ]\n   }\n   ```\n   ```http\n   POST /api/v3/authorize-data-policies\n   {\n      \"policyIds\": [\"运维策略 ID\"],\n      \"targetList\": [\n        {\n          \"id\": \"运维角色 ID\",\n          \"type\": \"ROLE\"\n        }\n      ]\n   }\n   ```\n7. 在内部平台的后端调用 Authing 鉴权 API，来实现权限控制\n\n   1. 假设某个研发用户登录内部平台后，需要渲染菜单，由于菜单是需要完整的树状结构，所以我们使用 [获取用户拥有指定资源的权限及资源结构信息](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataAuthenticationManagementController_getUserResourceStruct) API\n\n      请求：\n\n      ```http\n      POST /api/v3/get-user-resource-struct\n      {\n        \"namespaceCode\": \"internal-platform\",\n        \"userId\": \"研发用户 ID\",\n        \"resourceCode\": \"internal-platform-menu\"\n      }\n      ```\n\n      响应：\n\n      ```\n      {\n        \"statusCode\": 200,\n        \"message\": \"操作成功\",\n        \"apiCode\": 20001,\n        \"data\": {\n          \"namespaceCode\": \"internal-platform\",\n          \"resourceCode\": \"internal-platform-menu\",\n          \"resourceType\": \"TREE\",\n          \"treeResourceAuthAction\": {\n              \"nodeAuthActionList\": [\n                {\n                  \"code\": \"knowledge-base\",\n                  \"name\": \"知识库\",\n                  \"value\": \"Knowledge Base\",\n                  \"actions\": [\"access\"],\n                  \"children\": [\n                    {\n                      \"code\": \"rd-knowledge-base\",\n                      \"name\": \"研发知识库\",\n                      \"value\": \"RD Knowledge Base\",\n                      \"actions\": [\"access\"]\n                    }\n                  ]\n                },\n                {\n                    \"code\": \"db\",\n                    \"name\": \"数据库\",\n                    \"value\": \"DB\",\n                    \"actions\": [\"access\"]\n                }\n            ]\n          }\n        }\n      }\n      ```\n\n      > 返回参数中的 `nodeAuthActionList` 是一个树状结构，我们可以交给前端进行渲染即可\n\n   2. 该研发点击数据库菜单后，需要展示他能够`执行 SQL`的数据库环境，我们使用 [获取用户拥有指定资源的权限及资源结构信息](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataAuthenticationManagementController_getUserResourceStruct) API\n\n      请求：\n\n      ```http\n      POST /api/v3/get-user-resource-struct\n      {\n        \"namespaceCode\": \"internal-platform\",\n        \"userId\": \"研发用户 ID\",\n        \"resourceCode\": \"db-env\"\n      }\n      ```\n\n      响应：\n\n      ```\n      {\n        \"statusCode\": 200,\n        \"message\": \"操作成功\",\n        \"apiCode\": 20001,\n        \"data\": {\n          \"namespaceCode\": \"internal-platform\",\n          \"resourceCode\": \"db-env\",\n          \"resourceType\": \"TREE\",\n          \"treeResourceAuthAction\": {\n              \"nodeAuthActionList\": [\n                {\n                  \"code\": \"test\",\n                  \"name\": \"测试\",\n                  \"value\": \"test\",\n                  \"actions\": [\"execute-sql\"]\n                },\n                {\n                  \"code\": \"dev\",\n                  \"name\": \"开发\",\n                  \"value\": \"dev\",\n                  \"actions\": [\"execute-sql\"]\n                }\n            ]\n          }\n        }\n      }\n      ```\n\n      > 根据返回参数中 `nodeAuthActionList` 数组进行渲染即可\n\n   3. 当这名研发选择了`测试`环境并在表单中输入了一条 SQL，为了安全起见，我们还需要判断他是否能够进行该操作，则可以调用 [判断用户权限](https://api-explorer.authing.cn/?tag=tag/管理数据资源与权限/API%20列表/operation/DataAuthenticationManagementController_checkPermission) API\n      请求：\n      ```http\n      POST /api/v3/check-permission\n      {\n        \"namespaceCode\": \"internal-platform\",\n        \"userId\": \"研发用户 ID\",\n        \"resources\": [\"db-env/test\"],\n        \"action\": \"execute-sql\"\n      }\n      ```\n      响应：\n      ```\n      {\n        \"statusCode\": 200,\n        \"message\": \"操作成功\",\n        \"apiCode\": 20001,\n        \"data\": {\n          \"checkResultList\": [\n             {\n                 \"namespaceCode\": \"internal-platform\",\n                 \"resource\": \"db-env/test\",\n                 \"action\": \"execute-sql\",\n                 \"enabled\": true\n             }\n          ]\n        }\n      }\n      ```\n      > 如果返回参数中 `enabled` 是为 true，则表示他有此权限\n","x-displayName":"概述"},{"name":"管理数据资源与权限/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理数据资源与权限/事件","description":"","x-displayName":"事件"},{"name":"管理数据资源与权限/常见问题","description":"","x-displayName":"常见问题"},{"name":"管理应用/概述","description":"在 Authing 中，**用户池**是租户隔离的最小单位，存储了用户系统中所有的用户数据；而**应用**则对应的是现实中创建的业务应用。一个用户池可能会有多个应用，比如一个学校所有的学生在一个用户池里，而学校会同时开发了选课应用、邮箱应用、师生服务中心等多个应用，这些应用会使用同一个用户系统。详情请了解[相关文档](https://docs.authing.cn/v2/guides/app-new/create-app/)。\n","x-displayName":"概述"},{"name":"管理应用/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理应用/事件","description":"当你对应用进行创建、更新、删除、刷新密钥等操作之后，你可以获得对应的 Webhook 事件通知，详情请见[使用 Webhook 监听事件](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"事件"},{"name":"管理身份源/基本概念","description":"此部分 API 介绍如何管理你的用户池中的外部身份源以及外部身份源连接。在查看具体的 API 文档之前，你应该先明确下面两个基本的概念。\n\n## 外部身份源\n\n**外部身份源**（又称身份提供商，英文全称为 Identity Provider，简称 IdP）指的是一个负责收集、存储用户身份信息，如用户名、密码等，在用户登录时负责认证用户的第三方，比如我们经常使用**微信社会化登录**、**Google 社会化登录**等。使用外部身份源可以降低开发者等维护成本以及终端用户的使用成本。\n\n在 Authing 中，我们将身份提供商分为以下几种：\n\n- [社会化身份源](https://docs.authing.cn/v2/guides/connections/social.html)：如微信、支付宝、GitHub、Apple 这类面向所有公众开放的第三方应用。\n- [企业身份源](https://docs.authing.cn/v2/guides/connections/enterprise.html)：企业微信、钉钉、飞书、WeLink 这类一般面向于单个公司内部开放的应用，以及其他以 Windows AD、OIDC、SAML、LDAP、CAS、OAuth2.0 等标准协议对外提供服务的第三方应用。\n- [自定义数据库](https://docs.authing.cn/v2/guides/database-connection/overview.html)：采用配置自定义数据库连接和脚本的方式，将用户数据存储到你自己的数据库，Authing 将不再存储你的用户数据。\n\n## 外部身份源连接\n\n一个外部身份源，对外可能会暴露多种**连接方式**。就像微信，作为一个外部身份源，它会有微信 PC 扫码登录、PC 小程序扫码登录、小程序登录、移动端微信登录、公众号关注登录、微信网页授权等多种登录方式；再比如 Apple，也分为 Apple 移动端登录和 Apple Web 端登录。\n\n对于终端用户而言，不同的连接方式对应了在不同场景下的不同登录手段。但是对于一个终端用户，不同登录方式背后的身份是同一个。就好比用户使用微信登录你开发的 Web 应用时，可以采用微信 PC 扫码登录这种登录方式，而当要使用微信 APP 登录你的移动应用时，可以采用微信移动端登录这种登录方式，但是他们本质上都是使用一个身份进行登录。\n\n对于开发者而言，只需要关心在什么场景下需要给用户呈现哪种登录方式，至于如何将使用不同连接方式登录的终端用户识别为同一个账号，Authing 的认证引擎会为你省去这些繁琐的工作。\n\n根据连接方式的不同，不同类型的身份源连接方式在用户使用形式、接入方式上也存在差异。大致上可以分为三类：\n\n- **Web 端浏览器跳转类**：需要浏览器跳转到第三方身份源的登录页，用户完成授权之后，再回到当前页面。此类可以通过直接替换当前页面地址和弹出 Popup 窗口实现。例如微信 PC 扫码登录、Google 社会化登录等。\n- **Web 端内嵌二维码扫码登录类**：和「Web 端浏览器跳转类」不同，此类连接方式不需要浏览器跳转，而是让用户在移动端 APP 上扫码，浏览器采用二维码轮询的方式监听登录态。例如微信公众号关注登录和 Authing 自创的小程序扫码登录。\n- **移动端拉起第三方应用类**：在移动 APP 中，跳转到第三方身份源的 APP，用户完成授权之后，再回到当前 APP。例如在移动 APP 中使用微信、支付宝登录。\n","x-displayName":"基本概念"},{"name":"管理身份源/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理身份源/事件","description":"","x-displayName":"事件"},{"name":"管理安全配置/概述","description":"此模块用于介绍如何使用 API 管理你的用户池的安全配置，如修改禁止注册开关、修改全局 MFA 配置等。\n","x-displayName":"概述"},{"name":"管理安全配置/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理安全配置/事件","description":"","x-displayName":"事件"},{"name":"管理注册白名单/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理消息服务/概述","description":"此部分 API 介绍如何管理你的用户池中邮件模版和第三方邮件、短信服务商。有关这些内容的详细介绍请见[此文档](https://docs.authing.cn/v2/guides/userpool-config/email/)。\n","x-displayName":"概述"},{"name":"管理消息服务/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理消息服务/事件","description":"","x-displayName":"事件"},{"name":"管理同步中心/基本概念","description":"此部分介绍如何使用 API 管理你的同步中心相关业务，如创建同步任务、手动触发同步任务执行、获取同步任务执行日志等。有关同步中心的详细介绍，请见[此文档](https://docs.authing.cn/v2/guides/sync-new/)。\n\n在查看具体的 API 之前，你应该先明确区分下面几个概念：\n\n- 同步任务（Sync Task）：同步任务定义了如何去进行同步，比如上游同步源是什么、是周期性定时执行根据事件变动自动执行、上下游之间的字段映射关系是什么。一个同步任务可以被触发多次。\n- 同步作业（Sync Job）：同步作业指的是同步任务具体的某一次执行实例，一次同步作业会有成功、失败的状态，以及此次同步执行情况的数据统计。\n- 同步作业日志（Sync Job Log）：同步作业日志指的是在一次同步作业执行过程中，会产生很多日志，比如创建了哪些用户、修改了哪些用户、修改的用户中哪些字段发生了变化等。\n","x-displayName":"基本概念"},{"name":"管理同步中心/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理同步中心/事件","description":"","x-displayName":"事件"},{"name":"管理事件/概述","description":"此部分介绍如何使用 API 管理你的 Webhook，如创建 Webhook、查询 Webhook 日志等。有关 Webhook 的详细介绍，请见[此文档](https://docs.authing.cn/v2/guides/webhook/)。\n","x-displayName":"概述"},{"name":"管理事件/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理事件/事件","description":"","x-displayName":"事件"},{"name":"管理岗位/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理岗位/事件","description":"","x-displayName":"事件"},{"name":"管理数据对象/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理数据对象/事件","description":"","x-displayName":"事件"},{"name":"管理 Pipeline/基本概念","description":"此部分介绍如何使用 API 管理你的 Pipeline 函数，如创建 Pipeline 函数、查询 Pipeline 函数日志等。有关 Pipeline 的详细介绍，请见[此文档](https://docs.authing.cn/v2/guides/pipeline/)。\n\n## 什么是 Pipeline\n\nAuthing Pipeline 为一组运行在云端的用户自定义 JavaScript 代码，可以让开发者扩展、自定义 Authing 能力。\n\nAuthing Pipeline 函数均为用户可自定义，同时我们还提供了[丰富的函数模版](https://github.com/authing/pipeline)，帮助开发者快速上手开发。\n\n同时 Pipeline 为一组函数，和普通 Hooks 的区别在于，Pipeline 整个流程中的函数数据可以相互传递，实现工业流水线一样的效果。这种设计模式，可以使得开发者的自定义函数更加模块化，便于管理。\n\nAuthing Pipeline 后端使用 serverless 架构，所有的用户自定义代码均运行在云端，保证不同租户之间的隔离性，同时能弹性伸缩，既保证了安全性，又提升了运行效率。\n\n![](https://cdn.authing.cn/blog/authing-pipeline.png)\n\n## 应用场景\n\n借助 Authing Pipeline，开发者可以实现以下功能：\n\n- 白名单机制：如注册邮箱后缀白名单、注册 IP 白名单等。\n- 事件通知：如用户注册之后发送群通知、用户登录 IP 异常通知等。\n- 权限控制：如用户登录之后根据邮箱将其加入某用户组等。\n- 扩展用户字段：如给该请求用户添加自定义 metadata 等。\n- 自定义 token：如往 token 中加入自定义字段等。\n  ... 还有更多，想象空间是无穷的。\n","x-displayName":"基本概念"},{"name":"管理 Pipeline/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理 Pipeline/事件","description":"","x-displayName":"事件"},{"name":"管理 Webhook/概述","description":"此部分介绍如何获取 Authing 事件中心的事件列表以及如何往 Authing 事件中心推送自定义事件。\n","x-displayName":"概述"},{"name":"管理 Webhook/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理 Webhook/事件","description":"","x-displayName":"事件"},{"name":"管理审计日志/概述","description":"此部分介绍如何使用 API 查看用户池内的审计日志，并支持通过一定条件进行筛选。\n\nAuthing 提供的审计功能分为两个方面：\n\n- [管理员行为的操作日志](https://docs.authing.cn/v2/guides/audit/administrator-action.html)：你可以得到所有管理员用户通过身份管理平台的行为。\n- [用户行为的日志](https://docs.authing.cn/v2/guides/audit/user-action.html)：可以清晰得还原出用户在平台中的行为，以支持企业的合规管理，同时可用作事件发生后的回溯和定责。\n","x-displayName":"概述"},{"name":"管理审计日志/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理审计日志/事件","description":"","x-displayName":"事件"},{"name":"管理计量计费/概述","description":"此部分介绍如何使用 API 查看用户池内计量计费使用情况，如套餐使用情况、查询当月 MAU 等。\n","x-displayName":"概述"},{"name":"管理计量计费/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理计量计费/事件","description":"","x-displayName":"事件"},{"name":"管理终端设备/概述","description":"","x-displayName":"概述"},{"name":"管理终端设备/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理风险名单/API 列表","description":"","x-displayName":"API 列表"},{"name":"管理风险名单/事件","description":"","x-displayName":"事件"},{"name":"工具与资源/Authing 认证 API","description":"如果你需要进行登录、注册等用户自主发起的操作，[点此查看 Authing 用户认证 API (v3)](https://api.authing.cn/openapi/v3/authentication) 。\n","x-displayName":"Authing 认证 API"},{"name":"工具与资源/SDK 列表","description":"针对此部分 API，我们还提供了以下几种语言的 SDK，各个 SDK 的方法名、参数、返回值和 API 尽可能保持完全一致，可以帮助你更快集成：\n\n- [Java](https://docs.authing.cn/v3/reference/sdk/java/install.html)\n- [Node.js](https://docs.authing.cn/v3/reference/sdk/node/install.html)\n- [Golang](https://docs.authing.cn/v3/reference/sdk/go/install.html)\n- [Python](https://docs.authing.cn/v3/reference/sdk/python/install.html)\n- [PHP](https://docs.authing.cn/v3/reference/sdk/php/install.html)\n- [C#](https://docs.authing.cn/v3/reference/sdk/csharp/install.html)\n","x-displayName":"SDK 列表"},{"name":"工具与资源/使用文档","description":"如果你希望使用 Authing 控制台对用户池内的资源进行操作，可以阅读此部分的[使用指南](https://docs.authing.cn/v2/guides/)。\n","x-displayName":"使用文档"},{"name":"获取帮助/获取帮助","description":"有任何建议或者问题反馈，欢迎在 [Authing 论坛](https://forum.authing.cn/)中提出。\n","x-displayName":"获取帮助"}],"servers":[{"url":"https://api.authing.cn","description":"Beta"}],"components":{"securitySchemes":{"bearer":{"scheme":"bearer","bearerFormat":"JWT","type":"http"},"x-authing-userpool-id":{"type":"apiKey","in":"header","name":"x-authing-userpool-id","description":"Authing Userpool Id"}},"schemas":{"Condition":{"type":"object","properties":{"key":{"type":"string","description":"搜索字段的 key"},"value":{"type":"object","description":"搜索值"},"operator":{"type":"string","description":"操作类型：\n    - eq: 等于\n    - ne: 不等于\n    - co: 包含\n    - gt: 大于\n    - lt: 小于\n    - lte: 小于等于\n    - gte: 大于等于\n    - in: 数组包含\n    "}},"required":["key","value","operator"]},"ScopeDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"},"id":{"type":"string","description":"行 id"},"fieldId":{"type":"string","description":"字段 id"}},"required":["modelId","id","fieldId"]},"Expand":{"type":"object","properties":{"field":{"type":"string","description":"关联的字段 key"},"select":{"description":"展开哪些关联字段","type":"array","items":{"type":"string"}}},"required":["field","select"]},"FilterDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"},"keywords":{"type":"string","description":"关键字"},"conjunction":{"type":"string","description":"多个搜索条件的关系：\n    - and: 且\n    - or:  或\n    "},"conditions":{"description":"搜索条件","type":"array","items":{"$ref":"#/components/schemas/Condition"}},"sort":{"description":"排序条件","example":[{"key1":"desc"},{"key2":"asc"}],"type":"array","items":{"type":"object"}},"page":{"type":"number","description":"当前页数，从 1 开始","default":1,"example":1},"limit":{"type":"number","description":"每页数目，最大不能超过 50，默认为 10","default":10,"example":10},"fetchAll":{"type":"boolean","description":"是否不分页返回所有（仅支持树形结构获取子节点的场景）","default":false},"withPath":{"type":"boolean","description":"是否返回节点的全路径（仅支持树形结构）","default":false},"showFieldId":{"type":"boolean","description":"返回结果中是否使用字段 id 作为 key","default":false},"previewRelation":{"type":"boolean","description":"返回结果中是包含关联数据的预览（前三个）","default":false},"getRelationFieldDetail":{"type":"boolean","description":"是否返回关联数据的详细用户信息，当前只支持用户。","default":false},"scope":{"description":"限定检索范围为被某个功能关联的部分","allOf":[{"$ref":"#/components/schemas/ScopeDto"}]},"filterRelation":{"description":"过滤指定关联数据","allOf":[{"$ref":"#/components/schemas/ScopeDto"}]},"expand":{"description":"获取对应关联数据的详细字段","type":"array","items":{"$ref":"#/components/schemas/Expand"}}},"required":["modelId"]},"FunctionModelValueListDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"总行数"},"list":{"description":"响应数据","type":"array","items":{"type":"object"}}},"required":["totalCount","list"]},"FunctionModelValueListResDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。","example":20001},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/FunctionModelValueListDto"}]}},"required":["statusCode","message","data"]},"CellDto":{"type":"object","properties":{"fieldId":{"type":"string","description":"字段 id"},"value":{"type":"object","description":"数据内容"}},"required":["fieldId","value"]},"RowDto":{"type":"object","properties":{"rowId":{"type":"string","description":"行 id"},"cellList":{"description":"单元格列表","type":"array","items":{"$ref":"#/components/schemas/CellDto"}}},"required":["rowId","cellList"]},"FunctionModelValueResDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。","example":20001},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RowDto"}]}},"required":["statusCode","message","data"]},"GetRowBatchDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"},"rowIds":{"description":"行 id 列表","type":"array","items":{"type":"string"}}},"required":["modelId","rowIds"]},"MetadataListResDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。","example":20001},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/RowDto"}}},"required":["statusCode","message","data"]},"CreateRowDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"},"rowId":{"type":"string","description":"自定义行 id，默认自动生成。最长只允许 32 位。","maxLength":32},"data":{"type":"object","description":"数据内容"}},"required":["modelId","data"]},"UpdateRowDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"},"rowId":{"type":"string","description":"行 id"},"data":{"type":"object","description":"数据内容"},"showFieldId":{"type":"boolean","description":"响应中键是否为 FieldId","default":false}},"required":["modelId","rowId","data"]},"RemoveRowDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"},"rowIdList":{"description":"行 id","type":"array","items":{"type":"string"}},"recursive":{"type":"boolean","description":"如果当前行有子节点，是否递归删除，默认为 false。当为 false 时，如果有子节点，会提示错误。","default":false,"example":false}},"required":["modelId","rowIdList"]},"CommonResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"}},"required":["statusCode","message"]},"CreateFunctionModelDto":{"type":"object","properties":{"name":{"type":"string","description":"功能名称"},"description":{"type":"string","description":"功能描述","example":"会员等级","nullable":true},"type":{"type":"string","description":"功能类型：\n    - user: 用户\n    - post: 岗位\n    - group: 用户组\n    - ueba: ueba\n    - department: 树状结构数据\n    - organization: 组织\n    - device: 设备\n    - custom: 自定义\n    ","enum":["ueba","user","post","group","department","organization","device","device_rely","custom"]},"dataType":{"type":"string","description":"数据类型：\n    - list: 列表类型数据\n    - tree: 树状结构数据\n    ","enum":["list","tree"],"default":"list","example":"list"},"enable":{"type":"boolean","description":"功能是否启用:\n    - true: 启用\n    - false: 不启用\n    ","default":true,"nullable":true},"parentKey":{"type":"string","description":"父级菜单"}},"required":["name","description","type","enable","parentKey"]},"FunctionModelDto":{"type":"object","properties":{"id":{"type":"string","description":"功能 id"},"userPoolId":{"type":"string","description":"用户池 id"},"name":{"type":"string","description":"功能名称"},"description":{"type":"string","description":"功能描述"},"dataType":{"type":"string","description":"数据类型：\n    - list: 列表类型数据。\n    - tree: 树状结构数据。\n    ","enum":["list","tree"],"default":"list","example":"list"},"enable":{"type":"boolean","description":"功能是否启用:\n    - true: 启用\n    - false: 不启用\n    "},"parentKey":{"type":"string","description":"父级菜单"},"createdAt":{"type":"string","description":"创建时间"},"updatedAt":{"type":"string","description":"更新时间"},"type":{"type":"string","description":"功能类型：\n    - user: 用户\n    - post: 岗位\n    - group: 用户组\n    - ueba: ueba\n    - department: 树状结构数据\n    - organization: 组织\n    - device: 设备\n    - device_rely: 设备\n    - custom: 自定义\n    ","enum":["ueba","user","post","group","department","organization","device","device_rely","custom"]},"fieldOrder":{"type":"string","description":"字段排序"},"config":{"type":"object","description":"详情页配置"}},"required":["id","userPoolId","name","description","dataType","enable","parentKey","createdAt","updatedAt","type","fieldOrder","config"]},"FunctionModelResDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/FunctionModelDto"}]}},"required":["statusCode","message","data"]},"FunctionModelListDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/FunctionModelDto"}}},"required":["statusCode","message","list"]},"FunctionModelIdDto":{"type":"object","properties":{"id":{"type":"string","description":"功能 id 可以从控制台页面获取"}},"required":["id"]},"UpdateFunctionModelDto":{"type":"object","properties":{"id":{"type":"string","description":"功能 id"},"name":{"type":"string","description":"功能名称"},"description":{"type":"string","description":"功能描述","example":"描述 1","nullable":true},"enable":{"type":"boolean","description":"功能是否启用"},"parentKey":{"type":"string","description":"父级菜单"},"type":{"type":"string","description":"功能类型","enum":["ueba","user","post","group","department","organization","device","device_rely","custom"]},"fieldOrder":{"type":"string","description":"字段序"},"config":{"type":"object","description":"详情页配置"}},"required":["id","name","description","enable","parentKey","type","fieldOrder","config"]},"DropDownItemDto":{"type":"object","properties":{"key":{"type":"string","description":"选项 id"},"label":{"type":"string","description":"选项名称"}},"required":["key","label"]},"CreateFunctionModelFieldDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"},"name":{"type":"string","description":"字段名称"},"key":{"type":"string","description":"字段属性名"},"type":{"type":"string","description":"字段类型:\n    - 1: 单行文本\n    - 2: 多行文本\n    - 3: 数字\n    - 4: 布尔类型\n    - 5: 日期\n    - 6: 枚举\n    - 7: 关联类型\n    - 8: 反向关联数据展示\n    ","enum":["Text","Textarea","Number","Boolean","Date","Enum","Relation","ReverseRelation","Array"]},"show":{"type":"boolean","description":"是否展示:\n    - true: 展示\n    - false: 不展示\n    "},"editable":{"type":"boolean","description":"是否可编辑:\n    - true: 可编辑\n    - false: 不可编辑\n    "},"help":{"type":"string","description":"帮助说明"},"default":{"type":"object","description":"默认值"},"require":{"type":"boolean","description":"是否必填:\n    - true: 必填\n    - false: 不必填\n    "},"unique":{"type":"boolean","description":"是否唯一:\n    - true: 唯一\n    - false: 不唯一\n    "},"maxLength":{"type":"number","description":"字符串长度限制"},"max":{"type":"number","description":"如果类型是数字表示数字上限，如果类型是日期表示结束日期"},"min":{"type":"number","description":"如果类型是数字表示数字下限，如果类型是日期表示开始日期"},"regexp":{"type":"string","description":"字符串的校验匹配规则"},"format":{"type":"number","description":"前端格式化显示规则:","example":"\n    - 0: 原始数据\n    - 31: 保留一位小数\n    - 32: 保留两位小数\n    - 33: 保留三位小数\n    - 34: 保留四位小数\n    - 35: 千分位\n    - 36: 带小数的千分位\n    - 37: 百分比\n    - 38: 带小数的百分比\n    - 50: 'YYYY/MM/DD/ HH:mm:ss'\n    - 51: 'YYYY/MM/DD'\n    - 52: 'YYYY/MM/DDHH:mm'\n    - 53: 'YYYY-MM-DD'\n    - 54: 'YYYY-MM-DDHH:mm'\n    - 55: 'MM-DD'\n    - 56: 'MM/DD/YYYY'\n    - 57: 'DD/MM/YYYY'\n    "},"dropDown":{"description":"下拉菜单选项","allOf":[{"$ref":"#/components/schemas/DropDownItemDto"}]},"fuzzySearch":{"type":"boolean","description":"是否支持模糊搜索:\n    - true: 支持模糊搜索\n    - false: 不支持模糊搜索\n    ","default":false},"forLogin":{"type":"boolean","description":"是否可用于登录，仅在 user 模块下有意义:\n    - true: 用于登录\n    - false: 不用于登录\n    ","default":false},"relationType":{"type":"string","description":"关联类型"},"relationMultiple":{"type":"boolean","description":"关联关系是否为 1-N:\n    - true: 是 1-N 的关系\n    - false: 不是 1-N 的关系\n    ","default":false},"relationShowKey":{"type":"string","description":"关联数据要展示的属性"},"relationOptionalRange":{"description":"关联数据可选范围","allOf":[{"$ref":"#/components/schemas/Condition"}]},"userVisible":{"type":"boolean","description":"用户中心是否显示，仅在 user 模块下有意义:\n    - true: 用户中心展示\n    - false: 用户中心不展示\n    ","default":false}},"required":["modelId","name","key","type","show","editable","help","default","require","unique","maxLength","max","min","regexp","format","dropDown","fuzzySearch","forLogin","relationType","relationMultiple","relationShowKey","relationOptionalRange","userVisible"]},"RelationOptionalRange":{"type":"object","properties":{"conjunction":{"type":"string","description":"多个搜索条件的关系：\n    - and: 且\n    - or:  或\n    "},"conditions":{"description":"搜索条件","allOf":[{"$ref":"#/components/schemas/Condition"}]}},"required":["conjunction","conditions"]},"FunctionModelFieldDto":{"type":"object","properties":{"id":{"type":"string","description":"字段 id"},"modelId":{"type":"string","description":"功能 id"},"name":{"type":"string","description":"字段名称"},"key":{"type":"string","description":"字段属性名"},"type":{"type":"number","description":"字段类型:\n    - 1: 单行文本\n    - 2: 多行文本\n    - 3: 数字\n    - 4: 布尔类型\n    - 5: 日期\n    - 6: 枚举\n    - 7: 关联类型\n    - 8: 反向关联数据展示\n    "},"show":{"type":"boolean","description":"是否展示:\n    - true: 展示\n    - false: 不展示\n    "},"editable":{"type":"boolean","description":"是否可编辑:\n    - true: 可编辑\n    - false: 不可编辑\n    "},"help":{"type":"string","description":"帮助说明"},"default":{"type":"string","description":"默认值"},"require":{"type":"boolean","description":"是否必填:\n    - true: 必填\n    - false: 不必填\n    "},"unique":{"type":"boolean","description":"是否唯一:\n    - true: 唯一\n    - false: 不唯一\n    "},"maxLength":{"type":"number","description":"字符串长度限制"},"max":{"type":"number","description":"如果类型是数字表示数字上限，如果类型是日期表示结束日期"},"min":{"type":"number","description":"如果类型是数字表示数字下限，如果类型是日期表示开始日期"},"regexp":{"type":"string","description":"字符串的校验匹配规则"},"format":{"type":"number","description":"前端格式化显示规则:","example":"\n    - 0: 原始数据\n    - 31: 保留一位小数\n    - 32: 保留两位小数\n    - 33: 保留三位小数\n    - 34: 保留四位小数\n    - 35: 千分位\n    - 36: 带小数的千分位\n    - 37: 百分比\n    - 38: 带小数的百分比\n    - 50: 'YYYY/MM/DD/ HH:mm:ss'\n    - 51: 'YYYY/MM/DD'\n    - 52: 'YYYY/MM/DDHH:mm'\n    - 53: 'YYYY-MM-DD'\n    - 54: 'YYYY-MM-DDHH:mm'\n    - 55: 'MM-DD'\n    - 56: 'MM/DD/YYYY'\n    - 57: 'DD/MM/YYYY'\n    "},"dropDown":{"type":"number","description":"下拉菜单选项"},"relationType":{"type":"string","description":"关联数据要展示的属性"},"relationMultiple":{"type":"boolean","description":"关联关系是否为 1-N:\n    - true: 是 1-N 的关系\n    - false: 不是 1-N 的关系\n    "},"relationShowKey":{"type":"string","description":"关联数据要展示的属性"},"relationOptionalRange":{"description":"关联数据可选范围","allOf":[{"$ref":"#/components/schemas/RelationOptionalRange"}]},"userVisible":{"type":"boolean","description":"用户中心是否显示，仅在 user 模块下有意义:\n    - true: 用户中心展示\n    - false: 用户中心不展示\n    "}},"required":["id","modelId","name","key","type","show","editable","help","default","require","unique","maxLength","max","min","regexp","format","dropDown","relationType","relationMultiple","relationShowKey","relationOptionalRange","userVisible"]},"FunctionModelFieldResDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/FunctionModelFieldDto"}]}},"required":["statusCode","message","data"]},"UpdateFunctionModelFieldDto":{"type":"object","properties":{"id":{"type":"string","description":"字段 id"},"modelId":{"type":"string","description":"功能 id"},"name":{"type":"string","description":"字段名称"},"show":{"type":"boolean","description":"是否展示:\n    - true: 展示\n    - false: 不展示\n    "},"editable":{"type":"boolean","description":"是否可编辑:\n    - true: 可编辑\n    - false: 不可编辑\n    "},"help":{"type":"string","description":"帮助说明"},"default":{"type":"object","description":"默认值"},"require":{"type":"boolean","description":"是否必填:\n    - true: 必填\n    - false: 不必填\n    "},"unique":{"type":"boolean","description":"是否唯一:\n    - true: 唯一\n    - false: 不唯一\n    "},"maxLength":{"type":"number","description":"字符串长度限制"},"max":{"type":"number","description":"如果类型是数字表示数字上限，如果类型是日期表示结束日期"},"min":{"type":"number","description":"如果类型是数字表示数字下限，如果类型是日期表示开始日期"},"regexp":{"type":"string","description":"字符串的校验匹配规则"},"format":{"type":"number","description":"前端格式化规则","example":"\n    - 0: 原始数据\n    - 31: 保留一位小数\n    - 32: 保留两位小数\n    - 33: 保留三位小数\n    - 34: 保留四位小数\n    - 35: 千分位\n    - 36: 带小数的千分位\n    - 37: 百分比\n    - 38: 带小数的百分比\n    - 50: 'YYYY/MM/DD/ HH:mm:ss'\n    - 51: 'YYYY/MM/DD'\n    - 52: 'YYYY/MM/DDHH:mm'\n    - 53: 'YYYY-MM-DD'\n    - 54: 'YYYY-MM-DDHH:mm'\n    - 55: 'MM-DD'\n    - 56: 'MM/DD/YYYY'\n    - 57: 'DD/MM/YYYY'\n    "},"dropDown":{"description":"下拉菜单选项","type":"array","items":{"type":"string"}},"fuzzySearch":{"type":"boolean","description":"是否支持模糊搜索:\n    - true: 支持模糊搜索\n    - false: 不支持模糊搜索\n    ","default":false},"forLogin":{"type":"boolean","description":"是否可用于登录，仅在 user 模块下有意义:\n    - true: 用于登录\n    - false: 不用于登录\n    ","default":false},"relationShowKey":{"type":"string","description":"关联数据要展示的属性"},"relationOptionalRange":{"description":"关联数据可选范围","allOf":[{"$ref":"#/components/schemas/RelationOptionalRange"}]},"userVisible":{"type":"boolean","description":"用户中心是否显示，仅在 user 模块下有意义:\n    - true: 用户中心展示\n    - false: 用户中心不展示\n    ","default":false}},"required":["id","modelId","name","show","editable","help","default","require","unique","maxLength","max","min","regexp","format","dropDown","fuzzySearch","forLogin","relationShowKey","relationOptionalRange","userVisible"]},"FunctionModelFieldIdDto":{"type":"object","properties":{"id":{"type":"string","description":"功能字段 id"},"modelId":{"type":"string","description":"功能 id"}},"required":["id","modelId"]},"FunctionFieldListResDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/FunctionModelFieldDto"}}},"required":["statusCode","message","data"]},"ExportModelDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"},"idList":{"description":"导出范围","type":"array","items":{"type":"string"}}},"required":["modelId","idList"]},"ImportModelDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"},"file":{"type":"string","description":"导入的 excel 文件地址"}},"required":["modelId","file"]},"GetImportTemplateResDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。","example":20001},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RowDto"}]}},"required":["statusCode","message","data"]},"CreateOperateModelDto":{"type":"object","properties":{"modelId":{"type":"string","description":"modelId"},"operateKey":{"type":"string","description":"操作类型:\n    - openPage: 打开一个网页\n    "},"operateName":{"type":"string","description":"操作名称"},"config":{"type":"object","description":"操作配置"},"icon":{"type":"string","description":"图标"},"show":{"type":"boolean","description":"是否展示:\n    - true: 展示\n    - true: 不展示\n    "}},"required":["modelId","operateKey","operateName","config","icon","show"]},"FunctionModelOperateIdDto":{"type":"object","properties":{"id":{"type":"string","description":"自定义操作 id"},"modelId":{"type":"string","description":"功能 id"},"customConfig":{"type":"object","description":"执行时自定义参数"}},"required":["id","modelId","customConfig"]},"OperateModelDto":{"type":"object","properties":{"id":{"type":"string","description":"操作 id"},"userPoolId":{"type":"string","description":"用户池 id"},"modelId":{"type":"string","description":"功能 id"},"operateName":{"type":"string","description":"操作名称"},"operateKey":{"type":"string","description":"操作方法 key"},"show":{"type":"boolean","description":"是否展示:\n    - true: 展示\n    - false: 不展示\n    "},"isDefault":{"type":"boolean","description":"是否为默认操作:\n    - true 是默认操作\n    - fasle 不是默认操作\n    "},"createdAt":{"type":"string","description":"创建时间"},"updatedAt":{"type":"string","description":"更新时间"}},"required":["id","userPoolId","modelId","operateName","operateKey","show","isDefault","createdAt","updatedAt"]},"UpdateOperateModelDto":{"type":"object","properties":{"id":{"type":"string","description":"id"},"modelId":{"type":"string","description":"modelId"},"show":{"type":"boolean","description":"是否展示:\n    - true: 展示\n    - true: 不展示\n    "},"operateKey":{"type":"string","description":"操作 Key 值"},"operateName":{"type":"string","description":"操作名称"},"config":{"type":"object","description":"操作配置"},"icon":{"type":"string","description":"图标"}},"required":["id","modelId","show","operateKey","operateName","config","icon"]},"GetRelationInfoDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"},"idList":{"description":"关联 id 列表","type":"array","items":{"type":"string"}}},"required":["modelId","idList"]},"CreateRelationValueDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"},"fieldId":{"type":"string","description":"字段 id"},"rowId":{"type":"string","description":"行 id"},"valueList":{"description":"关联数据","type":"array","items":{"type":"string"}}},"required":["modelId","fieldId","rowId","valueList"]},"RelationValueListDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"type":"string"}}},"required":["totalCount","list"]},"RelationValueListResDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RelationValueListDto"}]}},"required":["statusCode","message","data"]},"RemoveRelationValueDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"},"rowId":{"type":"string","description":"行 id"},"fieldIds":{"description":"字段 id","type":"array","items":{"type":"string"}},"value":{"type":"string","description":"关联数据"}},"required":["modelId","rowId","fieldIds","value"]},"ExportMetadataDto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id"}},"required":["modelId"]},"ImportMetadataDto":{"type":"object","properties":{"file":{"type":"string","description":"导入的 json 文件地址"}},"required":["file"]},"CreateUEBADto":{"type":"object","properties":{"modelId":{"type":"string","description":"功能 id，如果不存在则会使用数据库中查到的第一个 type 为 ueba 的功能"},"data":{"type":"object","description":"数据内容","example":{"appId":"xxxxx","timestamp":1680241048891,"ip":"183.95.62.38","ua":"Mozilla/5.0 (iPad; CPU OS 13_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/87.0.4280.77 Mobile/15E148 Safari/604.1 Edg/111.0.0.0","originalIdentity":"123456789","behaviorType":"login","actionType":"Read","loginType":"wechat","someKey":"这是自定义的"}}},"required":["data"]},"CreateUEBARespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"type":"object","description":"响应数据"}},"required":["statusCode","message","data"]},"PostItemDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"name":{"type":"string","description":"分组名称","example":"研发"},"description":{"type":"string","description":"分组描述","example":"描述内容"},"userCount":{"type":"number","description":"岗位关联用户数，只有在 skipCount 不为 true 时才存在"},"departmentCount":{"type":"number","description":"岗位关联部门数，只有在 skipCount 不为 true 时才存在"},"metadataSource":{"description":"岗位元数据信息","type":"array","items":{"type":"string"}}},"required":["code","name","userCount","departmentCount","metadataSource"]},"PostPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/PostItemDto"}}},"required":["totalCount","list"]},"PostPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PostPagingDto"}]}},"required":["statusCode","message","data"]},"CreatePostDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"name":{"type":"string","description":"分组名称","example":"研发"},"description":{"type":"string","description":"分组描述","example":"描述内容"},"departmentIdList":{"type":"string","description":"部门 id 列表","example":["xxx"]}},"required":["code","name"]},"PostDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"name":{"type":"string","description":"分组名称","example":"研发"},"description":{"type":"string","description":"分组描述","example":"描述内容"}},"required":["code","name"]},"PostListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/PostDto"}}},"required":["statusCode","message","data"]},"GetPostByIdListDto":{"type":"object","properties":{"idList":{"type":"string","description":"部门 id 列表","example":["xxx"]},"withCustomData":{"type":"boolean","description":"是否获取自定义数据","example":false}}},"PostRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PostDto"}]}},"required":["statusCode","message","data"]},"PostInfoDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"name":{"type":"string","description":"分组名称","example":"研发"},"description":{"type":"string","description":"分组描述","example":"描述内容"},"departmentIdList":{"description":"岗位关联部门数","type":"array","items":{"type":"string"}}},"required":["code","name","departmentIdList"]},"CreatePostRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PostInfoDto"}]}},"required":["statusCode","message","data"]},"RemovePostDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"}},"required":["code"]},"SetUserPostsDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 id","example":"xxxx"},"postIds":{"description":"岗位 id 列表","example":"xxxx","type":"array","items":{"type":"string"}}},"required":["userId","postIds"]},"UserConnectionPostDto":{"type":"object","properties":{"postId":{"type":"string","description":"部门 id","example":"xxxx"},"userId":{"type":"string","description":"用户 id","example":"xxxx"}},"required":["postId","userId"]},"CreateTerminalDto":{"type":"object","properties":{"deviceUniqueId":{"type":"string","description":"设备唯一标识","example":"HZ2F6J3AGNAVSOTV"},"name":{"type":"string","description":"设备名称","example":"打印机"},"version":{"type":"string","description":"系统版本","example":"Android 1.0"},"hks":{"type":"string","description":"硬件存储秘钥","example":"lajldjaksjl"},"fde":{"type":"string","description":"磁盘加密","example":""},"hor":{"type":"boolean","description":"硬件越狱","default":false},"sn":{"type":"string","description":"设备序列号","example":"NHHYASKDJKJHKJHSD"},"type":{"type":"string","description":"设备类型","enum":["Browser","Mobile","Desktop"],"example":"Mobile"},"producer":{"type":"string","description":"制造商","example":"索尼"},"mod":{"type":"string","description":"设备模组","example":"Vig9a"},"os":{"type":"string","description":"设备系统","example":"iOS"},"imei":{"type":"string","description":"国际识别码","example":""},"meid":{"type":"string","description":"设备识别码","example":""},"description":{"type":"string","description":"设备描述","example":"这是公共设备"},"language":{"type":"string","description":"设备语言","example":"zh-CN"},"cookie":{"type":"boolean","description":"是否开启 Cookies","example":false,"default":false},"userAgent":{"type":"string","description":"用户代理","example":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"},"customData":{"type":"object","description":"自定义数据, 自定义数据的属性对应在元数据里自定义的字段"}},"required":["deviceUniqueId","type","customData"]},"TerminalInfoDto":{"type":"object","properties":{"id":{"type":"string","description":"主键 ID","example":"63688212be59d76a46f72663"},"deviceUniqueId":{"type":"string","description":"设备唯一标识","example":"HZ2F6J3AGNAVSOTV"}},"required":["id","deviceUniqueId"]},"TerminalInfoRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TerminalInfoDto"}]}},"required":["statusCode","message","data"]},"QueryTerminalAppsDto":{"type":"object","properties":{"deviceIds":{"description":"设备唯一标识列表","type":"array","items":{"type":"string"}},"userId":{"type":"string","description":"用户 ID"}},"required":["deviceIds"]},"DeleteTerminalUserDto":{"type":"object","properties":{"id":{"type":"string","description":"数据行 id，创建设备时返回的 `id`"},"userId":{"type":"string","description":"用户 ID"}},"required":["id","userId"]},"SuspendTerminalUserDto":{"type":"object","properties":{"id":{"type":"string","description":"数据行 id，创建设备时返回的 `id`"},"userId":{"type":"string","description":"用户 ID"},"endTime":{"format":"date-time","type":"string","description":"挂起到期时间，时间戳(毫秒)","example":1672502400000}},"required":["id","userId","endTime"]},"UpdateTerminalUserDto":{"type":"object","properties":{"id":{"type":"string","description":"数据行 id，创建设备时返回的 `id`"},"userId":{"type":"string","description":"用户 ID"}},"required":["id","userId"]},"TerminalBaseDto":{"type":"object","properties":{"id":{"type":"string","description":"数据行 id，创建设备时返回的 `id`"}},"required":["id"]},"DeviceStatusResponseDataDto":{"type":"object","properties":{"status":{"type":"string","description":"设备状态:\n- `activated`: 使用中\n- `suspended`: 挂起\n- `deactivated`: 停用\n  ","enum":["activated","suspended","deactivated"],"example":"activated"},"diffTime":{"type":"number","description":"设备挂起时的剩余秒数"}},"required":["status"]},"DeviceStatusRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/DeviceStatusResponseDataDto"}]}},"required":["statusCode","message"]},"DeleteTerminalDto":{"type":"object","properties":{"id":{"type":"string","description":"数据行 id，创建设备时返回的 `id`"}},"required":["id"]},"SuspendTerminalDto":{"type":"object","properties":{"id":{"type":"string","description":"数据行 id，创建设备时返回的 `id`"},"endTime":{"type":"number","description":"挂起到期时间，时间戳(毫秒)","example":1672502400000}},"required":["id","endTime"]},"UpdateTerminalDto":{"type":"object","properties":{"id":{"type":"string","description":"数据行 id，创建设备时返回的 `id`"}},"required":["id"]},"ListPublicAccountsAdvancedFilterItemDto":{"type":"object","properties":{"field":{"type":"string","description":"高级搜索指定的公共账号字段：\n- `id`: 公共账号 ID\n- `phone`: 手机号   \n- `email`: 邮箱\n- `username`: 用户名\n- `externalId`: 公共账号在外部系统的 ID\n- `name`: 姓名\n- `status`: 公共账号状态，可选值为 `Activated` 和 `Suspended`\n- `gender`: 公共账号性别，可选值为 `M`（男性）、`F`（女性） 和 `U`（未知）\n- `birthdate`: 出生日期\n- `givenName`: 名\n- `familyName`: 姓\n- `preferredUsername`: Preferred Username\n- `profile`: 个人资料\n- `country`: 国家\n- `province`: 省份\n- `zoneinfo`: 时区\n- `website`: 个人网站\n- `address`: 地址\n- `streetAddress`: 街道地址\n- `company`: 公司\n- `postalCode`: 邮政编码\n- `formatted`: 格式化的地址\n- `signedUp`: 注册时间\n- `locale`: 语言信息\n- `lastLogin`: 上次登录时间，为时间戳类型\n- `loginsCount`: 登录次数，为数字类型\n- `lastLoginApp`: 上次登录的应用 ID\n- `userSource`: 公共账号来源，具体使用见示例\n- `department`: 公共账号部门，具体使用见示例\n- `loggedInApps`: 曾经登录过的应用，具体使用见示例\n- ... 其他自定义字段\n","example":"nickname"},"operator":{"type":"string","description":"运算符，可选值为：\n- `EQUAL`: 全等，适用于数字和字符串的全等匹配\n- `NOT_EQUAL`: 不等于，适用于数字和字符串的匹配\n- `CONTAINS`: 字符串包含\n- `NOT_CONTAINS`: 字符串不包含\n- `IS_NULL`: 为空\n- `NOT_NULL`: 不为空\n- `IN`: 为某个数组中的元素\n- `GREATER`: 大于或等于，适用于数字、日期类型数据的比较\n- `LESSER`: 小于或等于，适用于数字、日期类型数据的比较\n- `BETWEEN`: 介于什么什么之间，适用于数字、日期类型数据的比较\n    ","enum":["EQUAL","NOT_EQUAL","CONTAINS","NOT_CONTAINS","IS_NULL","NOT_NULL","IN","GREATER","LESSER","BETWEEN"],"example":"EQUAL"},"value":{"type":"object","description":"搜索值，不同的 `field` 对应的 `value` 类型可能不一样，详情见示例。","example":"test"}},"required":["field","operator"]},"PaginationDto":{"type":"object","properties":{"page":{"type":"number","description":"当前页数，从 1 开始","default":1,"example":1},"limit":{"type":"number","description":"每页数目，最大不能超过 50，默认为 10","default":10,"example":10,"minimum":1,"maximum":50}}},"SortingDto":{"type":"object","properties":{"field":{"type":"string","description":"进行排序的字段，可选值为：\n- `createdAt`: 创建时间\n- `updatedAt`: 修改时间\n- `email`: 邮箱\n- `phone`: 手机号\n- `username`: 用户名\n- `externalId`: 外部 ID\n- `status`: 公共账号状态\n- `statusChangedAt`: 状态修改时间\n- `passwordLastSetAt`: 密码修改时间\n- `loginsCount`: 登录次数\n- `gender`: 性别\n- `lastLogin`: 上次登录时间\n- `userSourceType`: 公共账号注册来源\n- `lastMfaTime`: 上次 MFA 认证时间\n- `passwordSecurityLevel`: 密码安全等级\n- `phoneCountryCode`: 手机区号\n- `lastIp`: 上次登录时使用的 IP\n","example":"loginsCount","enum":["createdAt","updatedAt","email","username","externalId","phone","status","statusChangedAt","passwordLastSetAt","loginsCount","gender","lastLogin","userSourceType","lastMfaTime","passwordSecurityLevel","phoneCountryCode","lastIp"]},"order":{"type":"string","description":"排序顺序：\n- `desc`: 按照从大到小降序。\n- `asc`: 按照从小到大升序。\n    ","enum":["desc","asc"],"example":"desc"}},"required":["field","order"]},"ListPublicAccountsOptionsDto":{"type":"object","properties":{"pagination":{"description":"分页配置","example":{"page":1,"limit":10},"allOf":[{"$ref":"#/components/schemas/PaginationDto"}]},"sort":{"description":"排序设置，可以设置多项按照多个字段进行排序","example":[{"field":"createdAt","direction":"desc"},{"field":"loginsCount","direction":"desc"}],"type":"array","items":{"$ref":"#/components/schemas/SortingDto"}},"fuzzySearchOn":{"type":"array","description":"模糊搜索匹配的公共账号字段，可选值为：\n- `phone`: 公共账号手机号，不能包含手机号区号，默认包含\n- `email`: 公共账号邮箱，默认包含\n- `name`: 公共账号名称，默认包含\n- `username`: 用户名，默认包含\n- `nickname`: 公共账号昵称，默认包含\n- `id`: 公共账号 ID\n- `company`: 公司\n- `givenName`: 名\n- `familyName`: 姓\n- `middleName`: 中间名\n- `preferredUsername`: Preferred Username\n- `profile`: 个人资料\n- `website`: 个人网站\n- `address`: 地址\n- `formatted`: 格式化地址\n- `streetAddress`: 街道地址\n- `postalCode`: 邮编号码\n","default":["phone","email","name","username","nickname","identityNumber"],"items":{"type":"string","enum":["id","phone","email","name","username","externalId","nickname","company","givenName","familyName","middleName","profile","preferredUsername","website","address","formatted","streetAddress","postalCode","identityNumber"]}},"withCustomData":{"type":"boolean","description":"是否获取自定义数据","default":false,"example":true},"withDepartmentIds":{"type":"boolean","description":"是否获取部门 ID 列表","default":false,"example":true}}},"ListPublicAccountsRequestDto":{"type":"object","properties":{"keywords":{"type":"string","description":"模糊搜索关键字","example":"张三"},"advancedFilter":{"description":"高级搜索","example":[{"field":"status","operator":"EQUAL","value":"Activated"}],"type":"array","items":{"$ref":"#/components/schemas/ListPublicAccountsAdvancedFilterItemDto"}},"searchQuery":{"type":"object","description":"使用 ES 查询语句执行搜索命令","example":{"query":{"bool":{"must":[{"term":{"phone":"18818888888"}}],"must_not":[]}},"sort":["_score",{"created_at":"ASC"}]}},"options":{"description":"可选项","example":{"pagination":{"page":1,"limit":10},"fuzzySearchOn":["phone","email","name","username","nickname","identityNumber"],"withCustomData":true,"withDepartmentIds":true},"allOf":[{"$ref":"#/components/schemas/ListPublicAccountsOptionsDto"}]}}},"PublicAccountDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"},"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated"},"workStatus":{"type":"string","description":"账户当前工作状态","enum":["Closed","Active"],"example":"Active"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"loginsCount":{"type":"number","description":"历史总登录次数","example":3},"lastLogin":{"format":"date-time","type":"string","description":"上次登录时间","example":"2022-07-03T02:20:30.000Z"},"lastIp":{"type":"string","description":"上次登录 IP","example":"127.0.0.1"},"gender":{"type":"string","description":"性别:\n- `M`: 男性，`male`\n- `F`: 女性，`female`\n- `U`: 未知，`unknown`\n  ","enum":["M","F","U"],"example":"M"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"passwordLastSetAt":{"format":"date-time","type":"string","description":"用户上次密码修改时间","example":"2022-07-03T02:20:30.000Z"},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":"James"},"profile":{"type":"string","description":"Preferred Username","example":"alice"},"preferredUsername":{"type":"string","description":"Preferred Username","example":"alice"},"website":{"type":"string","description":"用户个人网页","example":"https://my-website.com"},"zoneinfo":{"type":"string","description":"用户时区信息","example":"GMT-08:00"},"locale":{"type":"string","description":"Locale","example":"af"},"formatted":{"type":"string","description":"标准的完整地址","example":"132, My Street, Kingston, New York 12401."},"region":{"type":"string","description":"用户所在区域","example":"Xinjiang Uyghur Autonomous Region"},"userSourceType":{"type":"string","description":"来源类型:\n- `excel`: 通过 excel 导入\n- `register`: 用户自主注册\n- `adminCreated`: 管理员后台手动创建（包含使用管理 API 创建用户 ）\n- `syncTask`: 同步中心的同步任务  \n","enum":["excel","register","adminCreated","sync"],"example":"register"},"userSourceId":{"type":"string","description":"应用 ID 或者同步任务 ID","example":""},"lastLoginApp":{"type":"string","description":"用户上次登录的应用 ID","example":""},"mainDepartmentId":{"type":"string","description":"用户主部门 ID","example":""},"lastMfaTime":{"format":"date-time","type":"string","description":"用户上次进行 MFA 认证的时间","example":""},"passwordSecurityLevel":{"type":"number","description":"用户密码安全强度等级","example":1},"resetPasswordOnNextLogin":{"type":"boolean","description":"下次登录要求重置密码","default":false},"registerSource":{"description":"注册方式","type":"array","items":{"type":"string"}},"departmentIds":{"description":"公共账号所属部门 ID 列表","example":["624d930c3xxxx5c08dd4986e","624d93102xxxx012f33cd2fe"],"type":"array","items":{"type":"string"}},"identityNumber":{"type":"string","description":"用户身份证号码","example":"420421xxxxxxxx1234"},"customData":{"type":"object","description":"公共账号的扩展字段数据","example":{"school":"北京大学","age":22}},"statusChangedAt":{"format":"date-time","type":"string","description":"公共账号状态上次修改时间","example":"2022-07-03T02:20:30.000Z"},"tenantId":{"type":"string","description":"用户租户 ID","example":""}},"required":["userId","createdAt","updatedAt","status","workStatus","gender","emailVerified","phoneVerified","userSourceType"]},"PublicAccountPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/PublicAccountDto"}}},"required":["totalCount","list"]},"PublicAccountPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PublicAccountPagingDto"}]}},"required":["statusCode","message","data"]},"PublicAccountSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PublicAccountDto"}]}},"required":["statusCode","message","data"]},"PublicAccountListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"公共账号列表","type":"array","items":{"$ref":"#/components/schemas/PublicAccountDto"}}},"required":["statusCode","message","data"]},"CreatePublicAccountOtpDto":{"type":"object","properties":{"secret":{"type":"string","description":"OTP 密钥","example":"HZ2F6J3AGNAVSOTV"},"recoveryCode":{"type":"string","description":"OTP Recovery Code","example":"b471-8ec0-874a-087f-bccb-cd54"}},"required":["secret"]},"SendCreateAccountNotificationDto":{"type":"object","properties":{"sendEmailNotification":{"type":"boolean","description":"创建账号之后，是否发送邮件通知","default":false,"example":false},"sendPhoneNotification":{"type":"boolean","description":"创建账号之后，是否发送短信通知","default":false,"example":false},"appId":{"type":"string","description":"发送登录地址时，指定的应用 id，会将此应用的登录地址发送给用户的邮箱或者手机号。默认为用户池应用面板的登录地址。","example":"appid1"}}},"CreatePublicAccountOptionsDto":{"type":"object","properties":{"keepPassword":{"type":"boolean","description":"该参数一般在迁移旧有用户数据到 Authing 的时候会设置。开启这个开关，password 字段会直接写入 Authing 数据库，Authing 不会再次加密此字段。如果你的密码不是明文存储，你应该保持开启，并编写密码函数计算。","default":false},"autoGeneratePassword":{"type":"boolean","description":"是否自动生成密码","default":false},"resetPasswordOnFirstLogin":{"type":"boolean","description":"是否强制要求用户在第一次的时候重置密码","default":false},"departmentIdType":{"type":"string","description":"此次调用中使用的父部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"default":"department_id"},"sendNotification":{"description":"重置密码发送邮件和手机号选项","example":{"sendEmailNotification":true,"sendPhoneNotification":true},"allOf":[{"$ref":"#/components/schemas/SendCreateAccountNotificationDto"}]},"passwordEncryptType":{"type":"string","description":"密码加密类型，支持使用 RSA256 和国密 SM2 算法进行加密。默认为 `none` 不加密。\n- `none`: 不对密码进行加密，使用明文进行传输。\n- `rsa`: 使用 RSA256 算法对密码进行加密，需要使用 Authing 服务的 RSA 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 RSA256 公钥。\n- `sm2`: 使用 [国密 SM2 算法](https://baike.baidu.com/item/SM2/15081831) 对密码进行加密，需要使用 Authing 服务的 SM2 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 SM2 公钥。\n  ","enum":["sm2","rsa","none"],"example":"none","default":"none"}}},"CreatePublicAccountReqDto":{"type":"object","properties":{"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated","default":"Activated"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"gender":{"type":"string","description":"性别","enum":["M","F","U"],"example":"M","default":"U"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":"James"},"profile":{"type":"string","description":"Preferred Username","example":"alice"},"preferredUsername":{"type":"string","description":"Preferred Username","example":"alice"},"website":{"type":"string","description":"用户个人网页","example":"https://my-website.com"},"zoneinfo":{"type":"string","description":"用户时区信息","example":"GMT-08:00"},"locale":{"type":"string","description":"Locale","example":"af"},"formatted":{"type":"string","description":"标准的完整地址","example":"132, My Street, Kingston, New York 12401."},"region":{"type":"string","description":"用户所在区域","example":"Xinjiang Uyghur Autonomous Region"},"password":{"type":"string","description":"用户密码，默认为明文。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"passw0rd"},"salt":{"type":"string","description":"加密用户密码的盐","example":"dgisaeieruur"},"otp":{"description":"公共账号的 OTP 验证器","example":{"recoveryCode":"b471-8ec0-874a-087f-bccb-cd54","secret":"HZ2F6J3AGNAVSOTV"},"allOf":[{"$ref":"#/components/schemas/CreatePublicAccountOtpDto"}]},"departmentIds":{"description":"用户所属部门 ID 列表","example":["624d930c3xxxx5c08dd4986e","624d93102xxxx012f33cd2fe"],"type":"array","items":{"type":"string"}},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}},"identityNumber":{"type":"string","description":"用户身份证号码","example":"420421xxxxxxxx1234"},"options":{"description":"可选参数","example":{"autoGeneratePassword":true,"resetPasswordOnFirstLogin":true,"passwordEncryptType":"none"},"allOf":[{"$ref":"#/components/schemas/CreatePublicAccountOptionsDto"}]}}},"CreatePublicAccountBatchReqDto":{"type":"object","properties":{"list":{"description":"公共账号列表","minItems":1,"maxItems":50,"example":[{"status":"Activated","email":"test@example.com","username":"bob","name":"张三","nickname":"张三","password":"passw0rd","photo":"https://files.authing.co/authing-console/default-user-avatar.png","gender":"M","birthdate":"2022-06-03","country":"CN","province":"BJ","city":"BJ","address":"北京朝阳","streetAddress":"北京朝阳区 xxx 街道","postalCode":"438100","company":"steamory","browser":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0","device":"iOS","givenName":"三","familyName":"张","middleName":"James","profile":"alice","preferredUsername":"alice","website":"https://my-website.com","zoneinfo":"GMT-08:00","locale":"af","formatted":"132, My Street, Kingston, New York 12401.","region":"Xinjiang Uyghur Autonomous Region"}],"type":"array","items":{"$ref":"#/components/schemas/CreatePublicAccountReqDto"}},"options":{"description":"可选参数","example":{"autoGeneratePassword":true,"resetPasswordOnFirstLogin":true,"passwordEncryptType":"none"},"allOf":[{"$ref":"#/components/schemas/CreatePublicAccountOptionsDto"}]}},"required":["list"]},"SendResetPasswordNotificationDto":{"type":"object","properties":{"sendDefaultEmailNotification":{"type":"boolean","description":"重置密码之后，是否发送用户默认邮件通知","default":false,"example":false},"sendDefaultPhoneNotification":{"type":"boolean","description":"重置密码之后，是否发送用户默认短信通知","default":false,"example":false},"inputSendEmailNotification":{"type":"string","description":"当用户密码修改之后，输入发送邮箱","example":"test@example.com"},"inputSendPhoneNotification":{"type":"string","description":"当用户密码修改之后，输入发送手机号","example":"183xxxx1234"},"appId":{"type":"string","description":"发送登录地址时，指定的应用 id，会将此应用的登录地址发送给用户的邮箱或者手机号。默认为用户池应用面板的登录地址。","example":"appid1"}}},"UpdatePublicAccountOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"},"resetPasswordOnFirstLogin":{"type":"boolean","description":"设置用户首次登录要求重置密码","default":false},"resetPasswordOnNextLogin":{"type":"boolean","description":"下次登录要求重置密码","default":false},"passwordEncryptType":{"type":"string","description":"密码加密类型，支持使用 RSA256 和国密 SM2 算法进行加密。默认为 `none` 不加密。\n- `none`: 不对密码进行加密，使用明文进行传输。\n- `rsa`: 使用 RSA256 算法对密码进行加密，需要使用 Authing 服务的 RSA 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 RSA256 公钥。\n- `sm2`: 使用 [国密 SM2 算法](https://baike.baidu.com/item/SM2/15081831) 对密码进行加密，需要使用 Authing 服务的 SM2 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 SM2 公钥。\n  ","enum":["sm2","rsa","none"],"example":"none","default":"none"},"autoGeneratePassword":{"type":"boolean","description":"是否自动生成密码","default":false},"sendPasswordResetedNotification":{"description":"重置密码发送邮件和手机号选项","example":{"sendDefaultEmailNotification":false,"sendDefaultPhoneNotification":false,"inputSendEmailNotification":"test@example.com","inputSendPhoneNotification":"136xxxx1234","appId":"app1"},"allOf":[{"$ref":"#/components/schemas/SendResetPasswordNotificationDto"}]}}},"UpdatePublicAccountReqDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated","default":"Activated"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"gender":{"type":"string","description":"性别","enum":["M","F","U"],"example":"M","default":"U"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"password":{"type":"string","description":"用户密码，默认为明文。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"passw0rd"},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":"James"},"profile":{"type":"string","description":"Preferred Username","example":"alice"},"preferredUsername":{"type":"string","description":"Preferred Username","example":"alice"},"website":{"type":"string","description":"用户个人网页","example":"https://my-website.com"},"zoneinfo":{"type":"string","description":"用户时区信息","example":"GMT-08:00"},"locale":{"type":"string","description":"Locale","example":"af"},"formatted":{"type":"string","description":"标准的完整地址","example":"132, My Street, Kingston, New York 12401."},"region":{"type":"string","description":"用户所在区域","example":"Xinjiang Uyghur Autonomous Region"},"identityNumber":{"type":"string","description":"用户身份证号码","example":"420421xxxxxxxx1234"},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}},"options":{"description":"可选参数","example":{"autoGeneratePassword":true,"resetPasswordOnFirstLogin":true,"passwordEncryptType":"none"},"allOf":[{"$ref":"#/components/schemas/UpdatePublicAccountOptionsDto"}]}},"required":["userId"]},"UpdatePublicAccountInfoDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated","default":"Activated"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"gender":{"type":"string","description":"性别","enum":["M","F","U"],"example":"M","default":"U"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"password":{"type":"string","description":"用户密码，默认为明文。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"passw0rd"},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":"James"},"profile":{"type":"string","description":"Preferred Username","example":"alice"},"preferredUsername":{"type":"string","description":"Preferred Username","example":"alice"},"website":{"type":"string","description":"用户个人网页","example":"https://my-website.com"},"zoneinfo":{"type":"string","description":"用户时区信息","example":"GMT-08:00"},"locale":{"type":"string","description":"Locale","example":"af"},"formatted":{"type":"string","description":"标准的完整地址","example":"132, My Street, Kingston, New York 12401."},"region":{"type":"string","description":"用户所在区域","example":"Xinjiang Uyghur Autonomous Region"},"identityNumber":{"type":"string","description":"用户身份证号码","example":"420421xxxxxxxx1234"},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}}},"required":["userId"]},"UpdatePublicAccountBatchOptionsDto":{"type":"object","properties":{"resetPasswordOnNextLogin":{"type":"boolean","description":"下次登录要求重置密码","default":false},"passwordEncryptType":{"type":"string","description":"密码加密类型，支持使用 RSA256 和国密 SM2 算法进行加密。默认为 `none` 不加密。\n- `none`: 不对密码进行加密，使用明文进行传输。\n- `rsa`: 使用 RSA256 算法对密码进行加密，需要使用 Authing 服务的 RSA 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 RSA256 公钥。\n- `sm2`: 使用 [国密 SM2 算法](https://baike.baidu.com/item/SM2/15081831) 对密码进行加密，需要使用 Authing 服务的 SM2 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 SM2 公钥。\n  ","enum":["sm2","rsa","none"],"example":"none","default":"none"},"autoGeneratePassword":{"type":"boolean","description":"是否自动生成密码","default":false},"sendPasswordResetedNotification":{"description":"重置密码发送邮件和手机号选项","example":{"sendDefaultEmailNotification":false,"sendDefaultPhoneNotification":false,"inputSendEmailNotification":"test@example.com","inputSendPhoneNotification":"136xxxx1234","appId":"app1"},"allOf":[{"$ref":"#/components/schemas/SendResetPasswordNotificationDto"}]}}},"UpdatePublicAccountBatchReqDto":{"type":"object","properties":{"list":{"description":"公共账号列表","example":[{"userId":"63f867961cxxxx41e7ccb582","status":"Activated","email":"test@example.com","username":"bob","name":"张三","nickname":"张三","password":"passw0rd","photo":"https://files.authing.co/authing-console/default-user-avatar.png","gender":"M","birthdate":"2022-06-03","country":"CN","province":"BJ","city":"BJ","address":"北京朝阳","streetAddress":"北京朝阳区 xxx 街道","postalCode":"438100","company":"steamory","browser":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0","device":"iOS","givenName":"三","familyName":"张","middleName":"James","profile":"alice","preferredUsername":"alice","website":"https://my-website.com","zoneinfo":"GMT-08:00","locale":"af","formatted":"132, My Street, Kingston, New York 12401.","region":"Xinjiang Uyghur Autonomous Region"}],"type":"array","items":{"$ref":"#/components/schemas/UpdatePublicAccountInfoDto"}},"options":{"description":"可选参数","example":{"autoGeneratePassword":true,"resetPasswordOnFirstLogin":true,"passwordEncryptType":"none"},"allOf":[{"$ref":"#/components/schemas/UpdatePublicAccountBatchOptionsDto"}]}},"required":["list"]},"DeletePublicAccountsBatchOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"}}},"DeletePublicAccountsBatchDto":{"type":"object","properties":{"userIds":{"description":"公共账号用户 ID 列表","minItems":1,"maxItems":50,"example":["userId1","userId2"],"type":"array","items":{"type":"string"}},"options":{"description":"可选参数","example":{"userIdType":"user_id"},"allOf":[{"$ref":"#/components/schemas/DeletePublicAccountsBatchOptionsDto"}]}},"required":["userIds"]},"IsSuccessDto":{"type":"object","properties":{"success":{"type":"boolean","description":"操作是否成功","example":true}},"required":["success"]},"IsSuccessRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"操作是否成功","allOf":[{"$ref":"#/components/schemas/IsSuccessDto"}]}},"required":["statusCode","message","data"]},"KickPublicAccountsOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"}}},"KickPublicAccountsDto":{"type":"object","properties":{"userId":{"type":"string","description":"公共账号 ID"},"appIds":{"description":"APP ID 列表","minItems":1,"maxItems":50,"example":["62188e71cxxxx3075289c580"],"type":"array","items":{"type":"string"}},"options":{"description":"可选参数","example":{"userIdType":"user_id"},"allOf":[{"$ref":"#/components/schemas/KickPublicAccountsOptionsDto"}]}},"required":["userId","appIds"]},"CreatePublicAccountFromUserDto":{"type":"object","properties":{"userId":{"type":"string","description":"公共账号 rowId"}},"required":["userId"]},"SetPublicAccountBatchReqDto":{"type":"object","properties":{"userIds":{"description":"用户 ID 数组","minItems":1,"maxItems":50,"example":["6229ffaxxxxxxxxcade3e3d9"],"type":"array","items":{"type":"string"}},"publicAccountId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"}},"required":["userIds","publicAccountId"]},"SetUserOfPublicAccountBatchReqDto":{"type":"object","properties":{"publicAccountIds":{"description":"用户 ID 数组","minItems":1,"maxItems":50,"example":["6229ffaxxxxxxxxcade3e3d9"],"type":"array","items":{"type":"string"}},"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"}},"required":["publicAccountIds","userId"]},"UnbindPublicAccountBatchReqDto":{"type":"object","properties":{"publicAccountId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"}},"required":["publicAccountId","userId"]},"LangUnit":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否已开启。若开启，且控制台选择该语言，则展示该内容。（默认关闭）","example":false},"value":{"type":"string","description":"多语言内容","example":false}},"required":["enabled","value"]},"LangObject":{"type":"object","properties":{"zh-CN":{"description":"多语言的中文内容","example":{"enabled":false,"value":"中文"},"allOf":[{"$ref":"#/components/schemas/LangUnit"}]},"en-US":{"description":"多语言的英文内容","example":{"enabled":false,"value":"English"},"allOf":[{"$ref":"#/components/schemas/LangUnit"}]},"zh-TW":{"description":"多语言的繁体中文内容","example":{"enabled":false,"value":"繁體中文"},"allOf":[{"$ref":"#/components/schemas/LangUnit"}]},"ja-JP":{"description":"多语言的日语内容","example":{"enabled":false,"value":"日本語"},"allOf":[{"$ref":"#/components/schemas/LangUnit"}]}},"required":["zh-CN","en-US","zh-TW","ja-JP"]},"OrganizationNameI18nDto":{"type":"object","properties":{"organizationName":{"description":"支持多语言的字段","example":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}},"allOf":[{"$ref":"#/components/schemas/LangObject"}]}},"required":["organizationName"]},"OrganizationDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"organizationName":{"type":"string","description":"组织名称","example":"蒸汽记忆"},"description":{"type":"string","description":"组织描述信息","example":"组织描述信息"},"createdAt":{"type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"type":"string","description":"修改时间","example":"2022-07-03T02:20:30.000Z"},"departmentId":{"type":"string","description":"根节点 ID","example":"60b49eb83fd80adb96f26e68"},"openDepartmentId":{"type":"string","description":"根节点自定义 ID","example":"60b49eb83fd80adb96f26e68"},"hasChildren":{"type":"boolean","description":"是否包含子节点","example":true},"leaderUserIds":{"description":"部门负责人 ID","example":["60b49eb83fd80adb96f26e68"],"type":"array","items":{"type":"string"}},"membersCount":{"type":"number","description":"部门人数","example":150},"isVirtualNode":{"type":"boolean","description":"是否是虚拟部门","example":false},"i18n":{"description":"多语言设置","example":{"organizationName":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/OrganizationNameI18nDto"}]},"customData":{"type":"object","description":"部门的扩展字段数据","example":{"icon":"https://example.com/logo"}},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"},"postIdList":{"description":"岗位 id 列表","example":["xxx"],"type":"array","items":{"type":"string"}},"status":{"type":"string","description":"状态","example":"false"},"allow":{"type":"string","description":"访问限制","example":["xxx"]}},"required":["organizationCode","organizationName","departmentId","hasChildren","membersCount","isVirtualNode"]},"OrganizationSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/OrganizationDto"}]}},"required":["statusCode","message","data"]},"OrganizationListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/OrganizationDto"}}},"required":["statusCode","message","data"]},"OrganizationPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/OrganizationDto"}}},"required":["totalCount","list"]},"OrganizationPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/OrganizationPagingDto"}]}},"required":["statusCode","message","data"]},"CreateOrganizationReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"organizationName":{"type":"string","description":"组织名称","example":"蒸汽记忆"},"description":{"type":"string","description":"组织描述信息","example":"组织描述信息"},"openDepartmentId":{"type":"string","description":"根节点自定义 ID","example":"60b49eb83fd80adb96f26e68"},"i18n":{"description":"多语言设置","example":{"organizationName":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/OrganizationNameI18nDto"}]},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"},"postIdList":{"description":"岗位 id 列表","example":["xxx"],"type":"array","items":{"type":"string"}},"metadata":{"type":"object","description":"元数据信息"}},"required":["organizationCode","organizationName","metadata"]},"UpdateOrganizationReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"description":{"type":"string","description":"部门描述","example":"技术研发部门"},"openDepartmentId":{"type":"string","description":"根节点自定义 ID","example":"60b49eb83fd80adb96f26e68"},"leaderUserIds":{"description":"部门负责人 ID","example":["60b49eb83fd80adb96f26e68"],"type":"array","items":{"type":"string"}},"i18n":{"description":"多语言设置","example":{"organizationName":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/OrganizationNameI18nDto"}]},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"},"organizationNewCode":{"type":"string","description":"新组织 code","example":"steamory2"},"organizationName":{"type":"string","description":"组织名称","example":"蒸汽记忆"},"postIdList":{"description":"岗位 id 列表","example":["xxx"],"type":"array","items":{"type":"string"}}},"required":["organizationCode"]},"DeleteOrganizationReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"}},"required":["organizationCode"]},"UpdateOrganizationStatusReqDto":{"type":"object","properties":{"status":{"type":"string","description":"状态","example":"false"},"rootNodeId":{"type":"string","description":"组织 id","example":"623c20b2a062aaaaf41b17da"}},"required":["rootNodeId"]},"DepartmentI18nDto":{"type":"object","properties":{"name":{"description":"支持多语言的字段","example":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}},"allOf":[{"$ref":"#/components/schemas/LangObject"}]}},"required":["name"]},"DepartmentDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 Code（organizationCode）","example":"steamory"},"departmentId":{"type":"string","description":"部门系统 ID（为 Authing 系统自动生成，不可修改）","example":"60b49eb83fd80adb96f26e68"},"createdAt":{"format":"date-time","type":"string","description":"部门创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"type":"string","description":"修改时间","example":"2022-07-03T02:20:30.000Z"},"openDepartmentId":{"type":"string","description":"自定义部门 ID，用于存储自定义的 ID","example":"ou_7dab8a3d3cdccxxxxxx777c7ad535d62"},"name":{"type":"string","description":"部门名称","example":"开发部"},"leaderUserIds":{"description":"部门负责人 ID","example":["60b49eb83fd80adb96f26e68"],"type":"array","items":{"type":"string"}},"description":{"type":"string","description":"部门描述","example":"技术研发部门"},"parentDepartmentId":{"type":"string","description":"父部门 id","example":"6229c4deb3e4d8a20b6021ff"},"code":{"type":"string","description":"部门识别码","example":"6229c4deb3e4d8a20b6021ff"},"parentDepartmentCode":{"type":"string","description":"父部门 code","example":"test"},"membersCount":{"type":"number","description":"部门人数（仅包含直属成员）","example":11},"hasChildren":{"type":"boolean","description":"是否包含子部门","example":true},"isVirtualNode":{"type":"boolean","description":"是否是虚拟部门","example":false},"i18n":{"description":"多语言设置","example":{"name":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/DepartmentI18nDto"}]},"customData":{"type":"object","description":"部门的扩展字段数据","example":{"icon":"https://example.com/logo"}},"posts":{"description":"部门关联的岗位","type":"array","items":{"type":"string"}},"postIdList":{"description":"岗位 id 列表","example":["xxx"],"type":"array","items":{"type":"string"}},"status":{"type":"boolean","description":"部门状态","example":"false"},"allow":{"type":"string","description":"访问限制","example":["xxx"]}},"required":["organizationCode","departmentId","createdAt","name","parentDepartmentId","parentDepartmentCode","membersCount","hasChildren"]},"DepartmentSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/DepartmentDto"}]}},"required":["statusCode","message","data"]},"CreateDepartmentReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 Code（organizationCode）","example":"steamory"},"openDepartmentId":{"type":"string","description":"自定义部门 ID，用于存储自定义的 ID","example":"ou_7dab8a3d3cdccxxxxxx777c7ad535d62"},"name":{"type":"string","description":"部门名称","example":"开发部"},"description":{"type":"string","description":"部门描述","example":"技术研发部门"},"parentDepartmentId":{"type":"string","description":"父部门 id","example":"6229c4deb3e4d8a20b6021ff"},"code":{"type":"string","description":"部门识别码","example":"6229c4deb3e4d8a20b6021ff"},"isVirtualNode":{"type":"boolean","description":"是否是虚拟部门","example":false},"i18n":{"description":"多语言设置","example":{"name":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/DepartmentI18nDto"}]},"customData":{"type":"object","description":"部门的扩展字段数据","example":{"icon":"https://example.com/logo"}},"departmentIdType":{"type":"string","description":"此次调用中使用的父部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"default":"department_id"},"postIdList":{"description":"岗位 id 列表","example":["xxx"],"type":"array","items":{"type":"string"}},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"},"metadata":{"type":"object","description":"元数据信息"}},"required":["organizationCode","name","parentDepartmentId","metadata"]},"UpdateDepartmentReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 Code（organizationCode）","example":"steamory"},"departmentId":{"type":"string","description":"部门系统 ID（为 Authing 系统自动生成，不可修改）","example":"60b49eb83fd80adb96f26e68"},"leaderUserIds":{"description":"部门负责人 ID","example":["60b49eb83fd80adb96f26e68"],"type":"array","items":{"type":"string"}},"description":{"type":"string","description":"部门描述","example":"技术研发部门"},"code":{"type":"string","description":"部门识别码","example":"6229c4deb3e4d8a20b6021ff"},"i18n":{"description":"多语言设置","example":{"name":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/DepartmentI18nDto"}]},"status":{"type":"boolean","description":"部门状态","example":"false"},"name":{"type":"string","description":"部门名称","example":"开发部"},"departmentIdType":{"type":"string","description":"此次调用中使用的部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"default":"department_id"},"parentDepartmentId":{"type":"string","description":"父部门 ID","example":"6229c4deb3e4d8a20b6021ff"},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"icon":"https://example.com/icon"}},"metadata":{"type":"object","description":"元数据信息"},"postIdList":{"description":"岗位 id 列表","example":["xxx"],"type":"array","items":{"type":"string"}},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"}},"required":["organizationCode","departmentId","metadata"]},"DeleteDepartmentReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 Code（organizationCode）","example":"steamory"},"departmentId":{"type":"string","description":"部门系统 ID（为 Authing 系统自动生成，不可修改）","example":"60b49eb83fd80adb96f26e68"},"departmentIdType":{"type":"string","description":"此次调用中使用的部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"default":"department_id"},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"}},"required":["organizationCode","departmentId"]},"SearchDepartmentsReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"keywords":{"type":"string","description":"搜索关键词，如组织名称等","example":"Authing"},"withCustomData":{"type":"boolean","description":"是否获取自定义数据","default":false,"example":true},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"}},"required":["organizationCode","keywords"]},"DepartmentListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/DepartmentDto"}}},"required":["statusCode","message","data"]},"SearchDepartmentsFilterItemDto":{"type":"object","properties":{"field":{"type":"string","description":"高级搜索指定的部门字段：\n- `updatedAt`: 更新时间，高级搜索请用时间戳\n- `createdAt`: 创建时间，高级搜索请用时间戳\n- `name`: 部门名称\n","example":""},"operator":{"type":"string","description":"运算符，可选值为：\n- `EQUAL`: 全等，适用于数字和字符串的全等匹配\n- `IN`: 为某个数组中的元素\n- `GREATER`: 大于或等于，适用于数字、日期类型数据的比较\n- `LESSER`: 小于或等于，适用于数字、日期类型数据的比较\n- `BETWEEN`: 介于什么什么之间，适用于数字、日期类型数据的比较\n- `CONTAINS`: 字符串包含\n    ","enum":["BETWEEN","EQUAL","IN","LESSER","GREATER","CONTAINS"],"example":"EQUAL"},"value":{"type":"object","description":"搜索值，不同的 `field` 对应的 `value` 类型可能不一样","example":"test"}},"required":["field","operator"]},"DepartmentSortingDto":{"type":"object","properties":{"field":{"type":"string","description":"进行排序的字段，可选值为：\n- `updatedAt`: 创建时间\n- `createdAt`: 修改时间\n- `name`: 邮箱\n","example":"createdAt","enum":["updatedAt","createdAt","name"]},"order":{"type":"string","description":"排序顺序：\n- `desc`: 按照从大到小降序。\n- `asc`: 按照从小到大升序。\n    ","enum":["desc","asc"],"example":"desc"}},"required":["field","order"]},"SearchDepartmentsListReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"withCustomData":{"type":"boolean","description":"是否获取自定义数据","default":false,"example":true},"withPost":{"type":"boolean","description":"是否获取 部门信息","default":false,"example":true},"page":{"type":"number","description":"当前页数，从 1 开始","default":1,"example":1},"limit":{"type":"number","description":"每页数目，最大不能超过 50，默认为 10","default":10,"example":10},"advancedFilter":{"description":"高级搜索","type":"array","items":{"$ref":"#/components/schemas/SearchDepartmentsFilterItemDto"}},"sortBy":{"type":"string","description":"排序依据，如 更新时间或创建时间","enum":["updatedAt","createdAt"],"example":"updatedAt","default":"updatedAt"},"orderBy":{"type":"string","description":"增序或降序","enum":["ASC","DESC"],"example":"DESC","default":"DESC"},"sort":{"description":"排序设置，可以设置多项按照多个字段进行排序","example":[{"field":"createdAt","direction":"desc"},{"field":"name","direction":"desc"}],"type":"array","items":{"$ref":"#/components/schemas/DepartmentSortingDto"}},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"}},"required":["organizationCode"]},"DepartmentPagingDto":{"type":"object","properties":{"totalCount":{"type":"boolean","description":"总数","example":10},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/DepartmentDto"}}},"required":["totalCount","list"]},"DepartmentPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/DepartmentPagingDto"}]}},"required":["statusCode","message","data"]},"IdentityDto":{"type":"object","properties":{"identityId":{"type":"string","description":"身份源 ID","example":"62299d8b866d2dab79a89dc4"},"extIdpId":{"type":"string","description":"身份源连接 ID","example":"6076bacxxxxxxxxd80d993b5"},"provider":{"type":"string","description":"外部身份源类型：\n- `wechat`: 微信\n- `qq`: QQ\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `weibo`: 微博\n- `github`: GitHub\n- `alipay`: 支付宝\n- `baidu`: 百度\n- `lark`: 飞书\n- `welink`: Welink\n- `yidun`: 网易易盾\n- `qingcloud`: 青云\n- `google`: Google\n- `gitlab`: GitLab\n- `gitee`: Gitee\n- `twitter`: Twitter\n- `facebook`: Facebook\n- `slack`: Slack\n- `linkedin`: Linkedin\n- `instagram`: Instagram\n- `oidc`: OIDC 型企业身份源\n- `oauth2`: OAuth2 型企业身份源\n- `saml`: SAML 型企业身份源\n- `ldap`: LDAP 型企业身份源\n- `ad`: AD 型企业身份源\n- `cas`: CAS 型企业身份源\n- `azure-ad`: Azure AD 型企业身份源\n    ","enum":["oidc","oauth2","saml","ldap","ad","cas","azure-ad","wechat","google","qq","wechatwork","dingtalk","weibo","github","alipay","apple","baidu","lark","gitlab","twitter","facebook","slack","linkedin","yidun","qingcloud","gitee","instagram","welink","huawei","honor","xiaomi","oppo","aws","amazon","douyin","kuaishou","line","sdbz"],"example":"wechat"},"type":{"type":"string","description":"Identity 类型，如 unionid, openid, primary","example":"openid"},"userIdInIdp":{"type":"string","description":"在外部身份源中的 ID","example":"oj7Nq05R-RRaqak0_YlMLnnIwsvg"},"userInfoInIdp":{"type":"object","description":"用户在 idp 中的身份信息"},"accessToken":{"type":"string","description":"在外部身份源中的 Access Token（此参数只会在用户主动获取时返回，管理侧接口不会返回）。","example":"57_fK0xgSL_NwVlS-gmUwlMQ2N6AONNIOAYxxxx"},"refreshToken":{"type":"string","description":"在外部身份源中的 Refresh Token（此参数只会在用户主动获取时返回，管理侧接口不会返回）。","example":"57_IZFu91Ak1Wg6DRytZFFIOd3upNF5lH7vPxxxxx"},"originConnIds":{"description":"身份来自的身份源连接 ID 列表","example":["605492ac41xxxxe0362f0707"],"type":"array","items":{"type":"string"}}},"required":["identityId","extIdpId","provider","type","userIdInIdp","userInfoInIdp","originConnIds"]},"UserDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"},"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated"},"workStatus":{"type":"string","description":"账户当前工作状态","enum":["Closed","Active"],"example":"Active"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"loginsCount":{"type":"number","description":"历史总登录次数","example":3},"lastLogin":{"format":"date-time","type":"string","description":"上次登录时间","example":"2022-07-03T02:20:30.000Z"},"lastIp":{"type":"string","description":"上次登录 IP","example":"127.0.0.1"},"gender":{"type":"string","description":"性别:\n- `M`: 男性，`male`\n- `F`: 女性，`female`\n- `U`: 未知，`unknown`\n  ","enum":["M","F","U"],"example":"M"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"passwordLastSetAt":{"format":"date-time","type":"string","description":"用户上次密码修改时间","example":"2022-07-03T02:20:30.000Z"},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":"James"},"profile":{"type":"string","description":"Preferred Username","example":"alice"},"preferredUsername":{"type":"string","description":"Preferred Username","example":"alice"},"website":{"type":"string","description":"用户个人网页","example":"https://my-website.com"},"zoneinfo":{"type":"string","description":"用户时区信息","example":"GMT-08:00"},"locale":{"type":"string","description":"Locale","example":"af"},"formatted":{"type":"string","description":"标准的完整地址","example":"132, My Street, Kingston, New York 12401."},"region":{"type":"string","description":"用户所在区域","example":"Xinjiang Uyghur Autonomous Region"},"userSourceType":{"type":"string","description":"来源类型:\n- `excel`: 通过 excel 导入\n- `register`: 用户自主注册\n- `adminCreated`: 管理员后台手动创建（包含使用管理 API 创建用户 ）\n- `syncTask`: 同步中心的同步任务  \n","enum":["excel","register","adminCreated","sync"],"example":"register"},"userSourceId":{"type":"string","description":"应用 ID 或者同步任务 ID","example":""},"lastLoginApp":{"type":"string","description":"用户上次登录的应用 ID","example":""},"mainDepartmentId":{"type":"string","description":"用户主部门 ID","example":""},"lastMfaTime":{"format":"date-time","type":"string","description":"用户上次进行 MFA 认证的时间","example":""},"passwordSecurityLevel":{"type":"number","description":"用户密码安全强度等级","example":1},"resetPasswordOnNextLogin":{"type":"boolean","description":"下次登录要求重置密码","default":false},"registerSource":{"description":"注册方式","type":"array","items":{"type":"string"}},"departmentIds":{"description":"用户所属部门 ID 列表","example":["624d930c3xxxx5c08dd4986e","624d93102xxxx012f33cd2fe"],"type":"array","items":{"type":"string"}},"identities":{"description":"外部身份源","type":"array","items":{"$ref":"#/components/schemas/IdentityDto"}},"identityNumber":{"type":"string","description":"用户身份证号码","example":"420421xxxxxxxx1234"},"customData":{"type":"object","description":"用户的扩展字段数据","example":{"school":"北京大学","age":22}},"postIdList":{"description":"用户关联的部门 Id","type":"array","items":{"type":"string"}},"statusChangedAt":{"format":"date-time","type":"string","description":"用户状态上次修改时间","example":"2022-07-03T02:20:30.000Z"},"tenantId":{"type":"string","description":"用户租户 ID","example":""}},"required":["userId","createdAt","updatedAt","status","workStatus","gender","emailVerified","phoneVerified","userSourceType"]},"UserPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/UserDto"}}},"required":["totalCount","list"]},"UserPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserPagingDto"}]}},"required":["statusCode","message","data"]},"UserIdListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"type":"string"}}},"required":["statusCode","message","data"]},"AddDepartmentMembersReqDto":{"type":"object","properties":{"departmentId":{"type":"string","description":"部门系统 ID（为 Authing 系统自动生成，不可修改）","example":"60b49eb83fd80adb96f26e68"},"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"departmentIdType":{"type":"string","description":"此次调用中使用的部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"default":"department_id"},"userIds":{"description":"用户 ID 列表","example":["623c20b2a062aaaaf41b17da"],"type":"array","items":{"type":"string"}},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"}},"required":["departmentId","organizationCode","userIds"]},"RemoveDepartmentMembersReqDto":{"type":"object","properties":{"departmentId":{"type":"string","description":"部门系统 ID（为 Authing 系统自动生成，不可修改）","example":"60b49eb83fd80adb96f26e68"},"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"departmentIdType":{"type":"string","description":"此次调用中使用的部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"default":"department_id"},"userIds":{"description":"用户 ID 列表","example":["623c20b2a062aaaaf41b17da"],"type":"array","items":{"type":"string"}},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"}},"required":["departmentId","organizationCode","userIds"]},"IsUserInDepartmentDataDto":{"type":"object","properties":{"inDepartment":{"type":"boolean","description":"是否在此部门内","example":true}},"required":["inDepartment"]},"IsUserInDepartmentRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/IsUserInDepartmentDataDto"}]}},"required":["statusCode","message","data"]},"UserInfoDto":{"type":"object","properties":{"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"gender":{"type":"string","description":"性别","enum":["M","F","U"],"example":"M"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"}}},"CreateDepartmentTreeReqDto":{"type":"object","properties":{"name":{"type":"string","description":"部门名称","example":"研发"},"children":{"description":"子部门","type":"array","items":{"type":"string"}},"members":{"description":"部门成员","allOf":[{"$ref":"#/components/schemas/UserInfoDto"}]},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"}},"required":["name"]},"Result":{"type":"object","properties":{"addUser":{"type":"number","description":"新增用户数"},"updateUser":{"type":"number","description":"更新用户数"},"addDepartment":{"type":"number","description":"新增部门数"},"updateDepartment":{"type":"number","description":"更新部门数"}},"required":["addUser","updateUser","addDepartment","updateDepartment"]},"CreateDepartmentTreeRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/Result"}]}},"required":["statusCode","message","data"]},"User":{"type":"object","properties":{}},"UserSyncRelationDto":{"type":"object","properties":{"provider":{"type":"string","description":"外部身份源类型，如：\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `lark`: 飞书\n- `welink`: Welink\n- `ldap`: LDAP\n- `active-directory`: Windows AD\n- `italent`: 北森\n- `xiaoshouyi`: 销售易\n- `maycur`: 每刻报销\n- `scim`: SCIM\n- `moka`: Moka HR\n    "},"userIdInIdp":{"type":"string","description":"在外部身份源中的 ID","example":"oj7Nq05R-RRaqak0_YlMLnnIwsvg"},"userInfoInIdp":{"description":"用户在第三方中的身份信息","allOf":[{"$ref":"#/components/schemas/User"}]}},"required":["provider","userIdInIdp","userInfoInIdp"]},"SyncRelationListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/UserSyncRelationDto"}}},"required":["statusCode","message","data"]},"DeleteDepartmentSyncRelationReqDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"departmentId":{"type":"string","description":"部门 ID，根部门传 `root`","example":"root"},"departmentIdType":{"type":"string","description":"此次调用中使用的部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"default":"department_id"},"provider":{"type":"string","description":"外部身份源类型，如：\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `lark`: 飞书\n- `welink`: Welink\n- `ldap`: LDAP\n- `active-directory`: Windows AD\n- `italent`: 北森\n- `xiaoshouyi`: 销售易\n- `maycur`: 每刻报销\n- `scim`: SCIM\n- `moka`: Moka HR\n    "}},"required":["organizationCode","departmentId","provider"]},"UpdateDepartmentStatusReqDto":{"type":"object","properties":{"departmentId":{"type":"string","description":"需要获取的部门 ID","example":"60b49eb83fd80adb96f26e68"},"status":{"type":"boolean","description":"部门状态","example":"true"}},"required":["departmentId","status"]},"Node":{"type":"object","properties":{}},"ListUsersAdvancedFilterItemDto":{"type":"object","properties":{"field":{"type":"string","description":"高级搜索指定的用户字段：\n- `id`: 用户 ID\n- `phone`: 手机号   \n- `email`: 邮箱\n- `username`: 用户名\n- `externalId`: 用户在外部系统的 ID\n- `name`: 姓名\n- `status`: 用户状态，可选值为 `Activated` 和 `Suspended`\n- `gender`: 用户性别，可选值为 `M`（男性）、`F`（女性） 和 `U`（未知）\n- `birthdate`: 出生日期\n- `givenName`: 名\n- `familyName`: 姓\n- `preferredUsername`: Preferred Username\n- `profile`: 个人资料\n- `country`: 国家\n- `province`: 省份\n- `zoneinfo`: 时区\n- `website`: 个人网站\n- `address`: 地址\n- `streetAddress`: 街道地址\n- `company`: 公司\n- `postalCode`: 邮政编码\n- `formatted`: 格式化的地址\n- `signedUp`: 注册时间\n- `locale`: 语言信息\n- `lastLogin`: 上次登录时间，为时间戳类型\n- `loginsCount`: 登录次数，为数字类型\n- `lastLoginApp`: 上次登录的应用 ID\n- `userSource`: 用户来源，具体使用见示例\n- `department`: 用户部门，具体使用见示例\n- `loggedInApps`: 曾经登录过的应用，具体使用见示例\n- `identity`: 用户外部身份源信息，具体使用见示例\n- ... 其他自定义字段\n","example":"nickname"},"operator":{"type":"string","description":"运算符，可选值为：\n- `EQUAL`: 全等，适用于数字和字符串的全等匹配\n- `NOT_EQUAL`: 不等于，适用于数字和字符串的匹配\n- `CONTAINS`: 字符串包含\n- `NOT_CONTAINS`: 字符串不包含\n- `IS_NULL`: 为空\n- `NOT_NULL`: 不为空\n- `IN`: 为某个数组中的元素\n- `GREATER`: 大于或等于，适用于数字、日期类型数据的比较\n- `LESSER`: 小于或等于，适用于数字、日期类型数据的比较\n- `BETWEEN`: 介于什么什么之间，适用于数字、日期类型数据的比较\n    ","enum":["EQUAL","NOT_EQUAL","CONTAINS","NOT_CONTAINS","IS_NULL","NOT_NULL","IN","GREATER","LESSER","BETWEEN"],"example":"EQUAL"},"value":{"type":"object","description":"搜索值，不同的 `field` 对应的 `value` 类型可能不一样，详情见示例。","example":"test"}},"required":["field","operator"]},"ListUsersOptionsDto":{"type":"object","properties":{"pagination":{"description":"分页配置","example":{"page":1,"limit":10},"allOf":[{"$ref":"#/components/schemas/PaginationDto"}]},"sort":{"description":"排序设置，可以设置多项按照多个字段进行排序","example":[{"field":"createdAt","direction":"desc"},{"field":"loginsCount","direction":"desc"}],"type":"array","items":{"$ref":"#/components/schemas/SortingDto"}},"fuzzySearchOn":{"type":"array","description":"模糊搜索匹配的用户字段，可选值为：\n- `phone`: 用户手机号，不能包含手机号区号，默认包含\n- `email`: 用户邮箱，默认包含\n- `name`: 用户名称，默认包含\n- `username`: 用户名，默认包含\n- `nickname`: 用户昵称，默认包含\n- `id`: 用户 ID\n- `company`: 公司\n- `givenName`: 名\n- `familyName`: 姓\n- `middleName`: 中间名\n- `preferredUsername`: Preferred Username\n- `profile`: 个人资料\n- `website`: 个人网站\n- `address`: 地址\n- `formatted`: 格式化地址\n- `streetAddress`: 街道地址\n- `postalCode`: 邮编号码\n","default":["phone","email","name","username","nickname","identityNumber"],"items":{"type":"string","enum":["id","phone","email","name","username","externalId","nickname","company","givenName","familyName","middleName","profile","preferredUsername","website","address","formatted","streetAddress","postalCode","identityNumber"]}},"withCustomData":{"type":"boolean","description":"是否获取自定义数据","default":false,"example":true},"withPost":{"type":"boolean","description":"是否获取 部门信息","default":false,"example":true},"withIdentities":{"type":"boolean","description":"是否获取 identities","default":false,"example":true},"withDepartmentIds":{"type":"boolean","description":"是否获取部门 ID 列表","default":false,"example":true},"flatCustomData":{"type":"boolean","description":"是否拍平扩展字段","default":false}}},"ListUsersRequestDto":{"type":"object","properties":{"keywords":{"type":"string","description":"模糊搜索关键字","example":"张三"},"advancedFilter":{"description":"高级搜索","example":[{"field":"status","operator":"EQUAL","value":"Activated"}],"type":"array","items":{"$ref":"#/components/schemas/ListUsersAdvancedFilterItemDto"}},"searchQuery":{"type":"object","description":"使用 ES 查询语句执行搜索命令","example":{"query":{"bool":{"must":[{"term":{"phone":"18818888888"}}],"must_not":[]}},"sort":["_score",{"created_at":"ASC"}]}},"options":{"description":"可选项","example":{"pagination":{"page":1,"limit":10},"fuzzySearchOn":["phone","email","name","username","nickname","identityNumber"],"withCustomData":true,"withIdentities":true,"withDepartmentIds":true},"allOf":[{"$ref":"#/components/schemas/ListUsersOptionsDto"}]}}},"UserSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserDto"}]}},"required":["statusCode","message","data"]},"UserListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"用户列表","type":"array","items":{"$ref":"#/components/schemas/UserDto"}}},"required":["statusCode","message","data"]},"UserFieldDecryptReqItemDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9"},"fieldName":{"type":"string","description":"字段的key名称，例如 username/phone","example":"username"},"encryptedContent":{"type":"string","description":"字段加密后的内容","example":""}},"required":["encryptedContent"]},"UserFieldDecryptReqDto":{"type":"object","properties":{"privateKey":{"type":"string","description":"私钥，通过控制台安全设置-数据安全-数据加密获取","example":"private key"},"data":{"description":"用户需要解密的属性列表","type":"array","items":{"$ref":"#/components/schemas/UserFieldDecryptReqItemDto"}}},"required":["privateKey","data"]},"UserFieldDecryptRespItemDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9"},"fieldName":{"type":"string","description":"字段的key名称，例如 username/phone","example":"username"},"decryptedContent":{"type":"string","description":"字段解密后的内容","example":""}},"required":["decryptedContent"]},"UserFieldDecryptRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"用户解密后的属性列表","type":"array","items":{"$ref":"#/components/schemas/UserFieldDecryptRespItemDto"}}},"required":["statusCode","message","data"]},"CreateUserOtpDto":{"type":"object","properties":{"secret":{"type":"string","description":"OTP 密钥","example":"HZ2F6J3AGNAVSOTV"},"recoveryCode":{"type":"string","description":"OTP Recovery Code","example":"b471-8ec0-874a-087f-bccb-cd54"}},"required":["secret"]},"CreateIdentityDto":{"type":"object","properties":{"extIdpId":{"type":"string","description":"身份源连接 ID","example":"6076bacxxxxxxxxd80d993b5"},"provider":{"type":"string","description":"外部身份源类型：\n- `wechat`: 微信\n- `qq`: QQ\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `weibo`: 微博\n- `github`: GitHub\n- `alipay`: 支付宝\n- `baidu`: 百度\n- `lark`: 飞书\n- `welink`: Welink\n- `yidun`: 网易易盾\n- `qingcloud`: 青云\n- `google`: Google\n- `gitlab`: GitLab\n- `gitee`: Gitee\n- `twitter`: Twitter\n- `facebook`: Facebook\n- `slack`: Slack\n- `linkedin`: Linkedin\n- `instagram`: Instagram\n- `oidc`: OIDC 型企业身份源\n- `oauth2`: OAuth2 型企业身份源\n- `saml`: SAML 型企业身份源\n- `ldap`: LDAP 型企业身份源\n- `ad`: AD 型企业身份源\n- `cas`: CAS 型企业身份源\n- `azure-ad`: Azure AD 型企业身份源\n    ","enum":["oidc","oauth2","saml","ldap","ad","cas","azure-ad","wechat","google","qq","wechatwork","dingtalk","weibo","github","alipay","apple","baidu","lark","gitlab","twitter","facebook","slack","linkedin","yidun","qingcloud","gitee","instagram","welink","huawei","honor","xiaomi","oppo","aws","amazon","douyin","kuaishou","line","sdbz"],"example":"wechat"},"type":{"type":"string","description":"Identity 类型，如 unionid, openid, primary","example":"openid"},"userIdInIdp":{"type":"string","description":"在外部身份源中的 ID","example":"oj7Nq05R-RRaqak0_YlMLnnIwsvg"},"userInfoInIdp":{"type":"object","description":"用户在 idp 中的身份信息"},"accessToken":{"type":"string","description":"在外部身份源中的 Access Token（此参数只会在用户主动获取时返回，管理侧接口不会返回）。","example":"57_fK0xgSL_NwVlS-gmUwlMQ2N6AONNIOAYxxxx"},"refreshToken":{"type":"string","description":"在外部身份源中的 Refresh Token（此参数只会在用户主动获取时返回，管理侧接口不会返回）。","example":"57_IZFu91Ak1Wg6DRytZFFIOd3upNF5lH7vPxxxxx"},"originConnIds":{"description":"身份来自的身份源连接 ID 列表","example":["605492ac41xxxxe0362f0707"],"type":"array","items":{"type":"string"}}},"required":["extIdpId","provider","type","userIdInIdp","userInfoInIdp","originConnIds"]},"CreateUserOptionsDto":{"type":"object","properties":{"keepPassword":{"type":"boolean","description":"该参数一般在迁移旧有用户数据到 Authing 的时候会设置。开启这个开关，password 字段会直接写入 Authing 数据库，Authing 不会再次加密此字段。如果你的密码不是明文存储，你应该保持开启，并编写密码函数计算。","default":false},"autoGeneratePassword":{"type":"boolean","description":"是否自动生成密码","default":false},"resetPasswordOnFirstLogin":{"type":"boolean","description":"是否强制要求用户在第一次的时候重置密码","default":false},"departmentIdType":{"type":"string","description":"此次调用中使用的父部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"default":"department_id"},"sendNotification":{"description":"重置密码发送邮件和手机号选项","example":{"sendEmailNotification":true,"sendPhoneNotification":true},"allOf":[{"$ref":"#/components/schemas/SendCreateAccountNotificationDto"}]},"passwordEncryptType":{"type":"string","description":"密码加密类型，支持使用 RSA256 和国密 SM2 算法进行加密。默认为 `none` 不加密。\n- `none`: 不对密码进行加密，使用明文进行传输。\n- `rsa`: 使用 RSA256 算法对密码进行加密，需要使用 Authing 服务的 RSA 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 RSA256 公钥。\n- `sm2`: 使用 [国密 SM2 算法](https://baike.baidu.com/item/SM2/15081831) 对密码进行加密，需要使用 Authing 服务的 SM2 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 SM2 公钥。\n  ","enum":["sm2","rsa","none"],"example":"none","default":"none"}}},"CreateUserReqDto":{"type":"object","properties":{"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated","default":"Activated"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"gender":{"type":"string","description":"性别","enum":["M","F","U"],"example":"M","default":"U"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":"James"},"profile":{"type":"string","description":"Preferred Username","example":"alice"},"preferredUsername":{"type":"string","description":"Preferred Username","example":"alice"},"website":{"type":"string","description":"用户个人网页","example":"https://my-website.com"},"zoneinfo":{"type":"string","description":"用户时区信息","example":"GMT-08:00"},"locale":{"type":"string","description":"Locale","example":"af"},"formatted":{"type":"string","description":"标准的完整地址","example":"132, My Street, Kingston, New York 12401."},"region":{"type":"string","description":"用户所在区域","example":"Xinjiang Uyghur Autonomous Region"},"password":{"type":"string","description":"用户密码，默认为明文。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"passw0rd"},"salt":{"type":"string","description":"加密用户密码的盐","example":"dgisaeieruur"},"tenantIds":{"description":"租户 ID","example":["63f867961cxxxx41e7ccb582","63bea7828f4xxxxbfa80df93"],"type":"array","items":{"type":"string"}},"otp":{"description":"用户的 OTP 验证器","example":{"recoveryCode":"b471-8ec0-874a-087f-bccb-cd54","secret":"HZ2F6J3AGNAVSOTV"},"allOf":[{"$ref":"#/components/schemas/CreateUserOtpDto"}]},"departmentIds":{"description":"用户所属部门 ID 列表","example":["624d930c3xxxx5c08dd4986e","624d93102xxxx012f33cd2fe"],"type":"array","items":{"type":"string"}},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}},"metadataSource":{"type":"object","description":"数据对象数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}},"identities":{"description":"第三方身份源（建议调用绑定接口进行绑定）","example":[{"extIdpId":"6076bacxxxxxxxxd80d993b5","provider":"wechat","type":"openid","userIdInIdp":"oj7Nq05R-RRaqak0_YlMLnnIwsvg"}],"type":"array","items":{"$ref":"#/components/schemas/CreateIdentityDto"}},"identityNumber":{"type":"string","description":"用户身份证号码","example":"420421xxxxxxxx1234"},"options":{"description":"可选参数","example":{"autoGeneratePassword":true,"resetPasswordOnFirstLogin":true,"passwordEncryptType":"none"},"allOf":[{"$ref":"#/components/schemas/CreateUserOptionsDto"}]}}},"CreateUserInfoDto":{"type":"object","properties":{"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated","default":"Activated"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"gender":{"type":"string","description":"性别","enum":["M","F","U"],"example":"M","default":"U"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":"James"},"profile":{"type":"string","description":"Preferred Username","example":"alice"},"preferredUsername":{"type":"string","description":"Preferred Username","example":"alice"},"website":{"type":"string","description":"用户个人网页","example":"https://my-website.com"},"zoneinfo":{"type":"string","description":"用户时区信息","example":"GMT-08:00"},"locale":{"type":"string","description":"Locale","example":"af"},"formatted":{"type":"string","description":"标准的完整地址","example":"132, My Street, Kingston, New York 12401."},"region":{"type":"string","description":"用户所在区域","example":"Xinjiang Uyghur Autonomous Region"},"password":{"type":"string","description":"用户密码，默认为明文。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"passw0rd"},"salt":{"type":"string","description":"加密用户密码的盐","example":"dgisaeieruur"},"tenantIds":{"description":"租户 ID","example":["63f867961cxxxx41e7ccb582","63bea7828f4xxxxbfa80df93"],"type":"array","items":{"type":"string"}},"otp":{"description":"用户的 OTP 验证器","example":{"recoveryCode":"b471-8ec0-874a-087f-bccb-cd54","secret":"HZ2F6J3AGNAVSOTV"},"allOf":[{"$ref":"#/components/schemas/CreateUserOtpDto"}]},"departmentIds":{"description":"用户所属部门 ID 列表","example":["624d930c3xxxx5c08dd4986e","624d93102xxxx012f33cd2fe"],"type":"array","items":{"type":"string"}},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}},"metadataSource":{"type":"object","description":"数据对象数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}},"identities":{"description":"第三方身份源（建议调用绑定接口进行绑定）","example":[{"extIdpId":"6076bacxxxxxxxxd80d993b5","provider":"wechat","type":"openid","userIdInIdp":"oj7Nq05R-RRaqak0_YlMLnnIwsvg"}],"type":"array","items":{"$ref":"#/components/schemas/CreateIdentityDto"}},"identityNumber":{"type":"string","description":"用户身份证号码","example":"420421xxxxxxxx1234"}}},"CreateUserBatchReqDto":{"type":"object","properties":{"list":{"description":"用户列表","minItems":1,"maxItems":50,"example":[{"status":"Activated","email":"test@example.com","username":"bob","name":"张三","nickname":"张三","password":"passw0rd","photo":"https://files.authing.co/authing-console/default-user-avatar.png","gender":"M","birthdate":"2022-06-03","country":"CN","province":"BJ","city":"BJ","address":"北京朝阳","streetAddress":"北京朝阳区 xxx 街道","postalCode":"438100","company":"steamory","browser":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0","device":"iOS","givenName":"三","familyName":"张","middleName":"James","profile":"alice","preferredUsername":"alice","website":"https://my-website.com","zoneinfo":"GMT-08:00","locale":"af","formatted":"132, My Street, Kingston, New York 12401.","region":"Xinjiang Uyghur Autonomous Region"}],"type":"array","items":{"$ref":"#/components/schemas/CreateUserInfoDto"}},"options":{"description":"可选参数","example":{"autoGeneratePassword":true,"resetPasswordOnFirstLogin":true,"passwordEncryptType":"none"},"allOf":[{"$ref":"#/components/schemas/CreateUserOptionsDto"}]}},"required":["list"]},"UpdateUserOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"},"resetPasswordOnFirstLogin":{"type":"boolean","description":"设置用户首次登录要求重置密码","default":false},"resetPasswordOnNextLogin":{"type":"boolean","description":"下次登录要求重置密码","default":false},"passwordEncryptType":{"type":"string","description":"密码加密类型，支持使用 RSA256 和国密 SM2 算法进行加密。默认为 `none` 不加密。\n- `none`: 不对密码进行加密，使用明文进行传输。\n- `rsa`: 使用 RSA256 算法对密码进行加密，需要使用 Authing 服务的 RSA 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 RSA256 公钥。\n- `sm2`: 使用 [国密 SM2 算法](https://baike.baidu.com/item/SM2/15081831) 对密码进行加密，需要使用 Authing 服务的 SM2 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 SM2 公钥。\n  ","enum":["sm2","rsa","none"],"example":"none","default":"none"},"autoGeneratePassword":{"type":"boolean","description":"是否自动生成密码","default":false},"sendPasswordResetedNotification":{"description":"重置密码发送邮件和手机号选项","example":{"sendDefaultEmailNotification":false,"sendDefaultPhoneNotification":false,"inputSendEmailNotification":"test@example.com","inputSendPhoneNotification":"136xxxx1234","appId":"app1"},"allOf":[{"$ref":"#/components/schemas/SendResetPasswordNotificationDto"}]}}},"UpdateUserReqDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated","default":"Activated"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"gender":{"type":"string","description":"性别","enum":["M","F","U"],"example":"M","default":"U"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"password":{"type":"string","description":"用户密码，默认为明文。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"passw0rd"},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":"James"},"profile":{"type":"string","description":"Preferred Username","example":"alice"},"preferredUsername":{"type":"string","description":"Preferred Username","example":"alice"},"website":{"type":"string","description":"用户个人网页","example":"https://my-website.com"},"zoneinfo":{"type":"string","description":"用户时区信息","example":"GMT-08:00"},"locale":{"type":"string","description":"Locale","example":"af"},"formatted":{"type":"string","description":"标准的完整地址","example":"132, My Street, Kingston, New York 12401."},"region":{"type":"string","description":"用户所在区域","example":"Xinjiang Uyghur Autonomous Region"},"identityNumber":{"type":"string","description":"用户身份证号码","example":"420421xxxxxxxx1234"},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}},"metadata":{"type":"object","description":"数据对象数据，传入的对象中的 key 必须先在用户数据对象相关自定义字段","example":{"school":"北京大学","age":22}},"options":{"description":"可选参数","example":{"autoGeneratePassword":true,"resetPasswordOnFirstLogin":true,"passwordEncryptType":"none"},"allOf":[{"$ref":"#/components/schemas/UpdateUserOptionsDto"}]}},"required":["userId"]},"UpdateUserInfoDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"},"status":{"type":"string","description":"账户当前状态","enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"example":"Activated","default":"Activated"},"emailVerified":{"type":"boolean","description":"邮箱是否验证","example":true},"phoneVerified":{"type":"boolean","description":"手机号是否验证","example":true},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"gender":{"type":"string","description":"性别","enum":["M","F","U"],"example":"M","default":"U"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"password":{"type":"string","description":"用户密码，默认为明文。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"passw0rd"},"company":{"type":"string","description":"所在公司","example":"steamory"},"browser":{"type":"string","description":"最近一次登录时使用的浏览器 UA","example":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0"},"device":{"type":"string","description":"最近一次登录时使用的设备","example":"iOS"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":"James"},"profile":{"type":"string","description":"Preferred Username","example":"alice"},"preferredUsername":{"type":"string","description":"Preferred Username","example":"alice"},"website":{"type":"string","description":"用户个人网页","example":"https://my-website.com"},"zoneinfo":{"type":"string","description":"用户时区信息","example":"GMT-08:00"},"locale":{"type":"string","description":"Locale","example":"af"},"formatted":{"type":"string","description":"标准的完整地址","example":"132, My Street, Kingston, New York 12401."},"region":{"type":"string","description":"用户所在区域","example":"Xinjiang Uyghur Autonomous Region"},"identityNumber":{"type":"string","description":"用户身份证号码","example":"420421xxxxxxxx1234"},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"school":"北京大学","age":22}},"metadata":{"type":"object","description":"数据对象数据，传入的对象中的 key 必须先在用户数据对象相关自定义字段","example":{"school":"北京大学","age":22}}},"required":["userId"]},"UpdateUserBatchOptionsDto":{"type":"object","properties":{"resetPasswordOnNextLogin":{"type":"boolean","description":"下次登录要求重置密码","default":false},"passwordEncryptType":{"type":"string","description":"密码加密类型，支持使用 RSA256 和国密 SM2 算法进行加密。默认为 `none` 不加密。\n- `none`: 不对密码进行加密，使用明文进行传输。\n- `rsa`: 使用 RSA256 算法对密码进行加密，需要使用 Authing 服务的 RSA 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 RSA256 公钥。\n- `sm2`: 使用 [国密 SM2 算法](https://baike.baidu.com/item/SM2/15081831) 对密码进行加密，需要使用 Authing 服务的 SM2 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 SM2 公钥。\n  ","enum":["sm2","rsa","none"],"example":"none","default":"none"},"autoGeneratePassword":{"type":"boolean","description":"是否自动生成密码","default":false},"sendPasswordResetedNotification":{"description":"重置密码发送邮件和手机号选项","example":{"sendDefaultEmailNotification":false,"sendDefaultPhoneNotification":false,"inputSendEmailNotification":"test@example.com","inputSendPhoneNotification":"136xxxx1234","appId":"app1"},"allOf":[{"$ref":"#/components/schemas/SendResetPasswordNotificationDto"}]}}},"UpdateUserBatchReqDto":{"type":"object","properties":{"list":{"description":"用户列表","example":[{"userId":"63f867961cxxxx41e7ccb582","status":"Activated","email":"test@example.com","username":"bob","name":"张三","nickname":"张三","password":"passw0rd","photo":"https://files.authing.co/authing-console/default-user-avatar.png","gender":"M","birthdate":"2022-06-03","country":"CN","province":"BJ","city":"BJ","address":"北京朝阳","streetAddress":"北京朝阳区 xxx 街道","postalCode":"438100","company":"steamory","browser":"Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0","device":"iOS","givenName":"三","familyName":"张","middleName":"James","profile":"alice","preferredUsername":"alice","website":"https://my-website.com","zoneinfo":"GMT-08:00","locale":"af","formatted":"132, My Street, Kingston, New York 12401.","region":"Xinjiang Uyghur Autonomous Region"}],"type":"array","items":{"$ref":"#/components/schemas/UpdateUserInfoDto"}},"options":{"description":"可选参数","example":{"autoGeneratePassword":true,"resetPasswordOnFirstLogin":true,"passwordEncryptType":"none"},"allOf":[{"$ref":"#/components/schemas/UpdateUserBatchOptionsDto"}]}},"required":["list"]},"DeleteUsersBatchOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"}}},"DeleteUsersBatchDto":{"type":"object","properties":{"userIds":{"description":"用户 ID 列表","minItems":1,"maxItems":50,"example":["userId1","userId2"],"type":"array","items":{"type":"string"}},"options":{"description":"可选参数","example":{"userIdType":"user_id"},"allOf":[{"$ref":"#/components/schemas/DeleteUsersBatchOptionsDto"}]}},"required":["userIds"]},"IdentityListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/IdentityDto"}}},"required":["statusCode","message","data"]},"RoleDto":{"type":"object","properties":{"id":{"type":"string","description":"角色 ID","example":"60b49eb83fd80adb96f26e68"},"code":{"type":"string","description":"权限分组(权限空间)内角色的唯一标识符 Code","example":"role1"},"name":{"type":"string","description":"权限分组(权限空间)内角色名称","example":"role1"},"description":{"type":"string","description":"角色描述","example":"this is role description"},"namespace":{"type":"string","description":"所属权限分组(权限空间)的 Code","example":"default"},"namespaceName":{"type":"string","description":"所属权限分组(权限空间)的名称","example":"示例权限名称"},"status":{"type":"string","description":"角色状态，ENABLE-表示正常，DISABLE-表示禁止","example":"ENABLE"},"disableTime":{"type":"number","description":"角色自动禁止时间，单位毫秒, 如果传null表示永久有效","example":"1669881887852"}},"required":["id","code","name","description","namespace","namespaceName"]},"RolePagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/RoleDto"}}},"required":["totalCount","list"]},"RolePaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RolePagingDto"}]}},"required":["statusCode","message","data"]},"PrincipalAuthenticationInfoDto":{"type":"object","properties":{"authenticated":{"type":"boolean","description":"是否进行认证","example":true},"principalType":{"type":"string","description":"用户 ID","example":"认证主体类型，P 代表个人，E 代表企业"},"principalCode":{"type":"string","description":"认证主体证件号码","example":"6229c4deb3e4d8a20b6021ff"},"principalName":{"type":"string","description":"认证主体名称","example":"ss"},"authenticatedAt":{"type":"string","description":"认证时间，标准时间字符串","example":"2022-04-05T10:23:50.631Z"}},"required":["authenticated","principalType","principalCode","principalName","authenticatedAt"]},"PrincipalAuthenticationInfoPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/PrincipalAuthenticationInfoDto"}}},"required":["totalCount","list"]},"PrincipalAuthenticationInfoPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PrincipalAuthenticationInfoPagingDto"}]}},"required":["statusCode","message","data"]},"ResetUserPrincipalAuthenticationInfoOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"}}},"ResetUserPrincipalAuthenticationInfoDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"options":{"description":"可选参数","allOf":[{"$ref":"#/components/schemas/ResetUserPrincipalAuthenticationInfoOptionsDto"}]}},"required":["userId"]},"UserDepartmentRespDto":{"type":"object","properties":{"organizationCode":{"type":"string","description":"组织 Code（organizationCode）","example":"steamory"},"departmentId":{"type":"string","description":"部门 ID","example":"60b49eb83fd80adb96f26e68"},"isRoot":{"type":"boolean","description":"是否为根部门","example":false},"createdAt":{"format":"date-time","type":"string","description":"部门创建时间","example":"2022-07-03T02:20:30.000Z"},"name":{"type":"string","description":"部门名称","example":"dd8d7stf44"},"description":{"type":"string","description":"部门描述","example":"dd8d7stf44"},"openDepartmentId":{"type":"string","description":"自定义部门 ID，用于存储自定义的 ID","example":"ou_7dab8a3d3cdccxxxxxx777c7ad535d62"},"isLeader":{"type":"boolean","description":"是否是部门 Leader","example":true},"code":{"type":"string","description":"部门识别码","example":"6229c4deb3e4d8a20b6021ff"},"isMainDepartment":{"type":"boolean","description":"是否是主部门","example":true},"joinedAt":{"format":"date-time","type":"string","description":"加入部门时间","example":"2022-07-03T02:20:30.000Z"},"isVirtualNode":{"type":"boolean","description":"是否是虚拟部门","example":false},"i18n":{"description":"多语言设置","example":{"name":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"}}},"allOf":[{"$ref":"#/components/schemas/DepartmentI18nDto"}]},"customData":{"type":"object","description":"部门的扩展字段数据","example":{"icon":"https://example.com/logo"}},"departmentIdPath":{"description":"部门 ID 路径","example":["parentId1","parentId2"],"type":"array","items":{"type":"string"}},"departmentCodePath":{"description":"部门 Code 路径","example":["parentCode1","parentCode2"],"type":"array","items":{"type":"string"}},"departmentNamePath":{"description":"部门名路径","example":["parentName1","parentName2"],"type":"array","items":{"type":"string"}}},"required":["organizationCode","departmentId","isRoot","createdAt","name","description","isLeader","code","isMainDepartment","joinedAt","isVirtualNode"]},"UserDepartmentPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/UserDepartmentRespDto"}}},"required":["totalCount","list"]},"UserDepartmentPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserDepartmentPagingDto"}]}},"required":["statusCode","message","data"]},"SetUserDepartmentDto":{"type":"object","properties":{"departmentId":{"type":"string","description":"部门 id","example":"60b49eb83fd80adb96f26e68"},"isLeader":{"type":"boolean","description":"是否是部门 leader","example":true},"isMainDepartment":{"type":"boolean","description":"是否是主部门","example":true}},"required":["departmentId"]},"SetUserDepartmentsOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"}}},"SetUserDepartmentsDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"departments":{"description":"部门信息","minItems":1,"maxItems":50,"example":[{"departmentId":"60b49eb83fd80adb96f26e68","isLeader":true,"isMainDepartment":true}],"type":"array","items":{"$ref":"#/components/schemas/SetUserDepartmentDto"}},"options":{"description":"可选参数","allOf":[{"$ref":"#/components/schemas/SetUserDepartmentsOptionsDto"}]}},"required":["userId","departments"]},"ResGroupDto":{"type":"object","properties":{"id":{"type":"string","description":"分组 ID","example":"60b49eb83fd80adb96f26e68"},"code":{"type":"string","description":"分组 code","example":"developer"},"name":{"type":"string","description":"分组名称","example":"开发者"},"description":{"type":"string","description":"分组描述","example":"描述内容"},"type":{"type":"string","description":"分组类型","example":"static"},"metadataSource":{"description":"分组元数据信息","type":"array","items":{"type":"string"}},"members":{"description":"成员列表","type":"array","items":{"$ref":"#/components/schemas/UserDto"}}},"required":["id","code","name","description","type","metadataSource","members"]},"GroupPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/ResGroupDto"}}},"required":["totalCount","list"]},"GroupPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GroupPagingDto"}]}},"required":["statusCode","message","data"]},"UserMfaRespDto":{"type":"object","properties":{"totpStatus":{"type":"string","description":"是否绑定了 TOTP，可选值 enabled, disabled","example":true},"faceMfaStatus":{"type":"string","description":"是否绑定了人脸 MFA，可选值 enabled, disabled","example":true},"smsMfaStatus":{"type":"string","description":"是否绑定了 SMS MFA，可选值 enabled, disabled","example":true},"emailMfaStatus":{"type":"string","description":"是否绑定了 EMAIL MFA，可选值 enabled, disabled","example":true}},"required":["totpStatus","faceMfaStatus","smsMfaStatus","emailMfaStatus"]},"UserMfaSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserMfaRespDto"}]}},"required":["statusCode","message","data"]},"ListArchivedUsersRespDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID","example":"userId"},"archivedAt":{"format":"date-time","type":"string","description":"归档时间","example":"2022-07-03T02:20:30.000Z"}},"required":["userId","archivedAt"]},"ArchivedUsersListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/ListArchivedUsersRespDto"}}},"required":["totalCount","list"]},"ListArchivedUsersSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/ArchivedUsersListPagingDto"}]}},"required":["statusCode","message","data"]},"KickUsersOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"}}},"KickUsersDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID"},"appIds":{"description":"APP ID 列表","minItems":1,"maxItems":50,"example":["62188e71cxxxx3075289c580"],"type":"array","items":{"type":"string"}},"options":{"description":"可选参数","example":{"userIdType":"user_id"},"allOf":[{"$ref":"#/components/schemas/KickUsersOptionsDto"}]}},"required":["userId","appIds"]},"IsUserExistsReqDto":{"type":"object","properties":{"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"externalId":{"type":"string","description":"第三方外部 ID","example":"10010"}}},"IsUserExistsDto":{"type":"object","properties":{"exists":{"type":"boolean","description":"用户是否存在","example":true}},"required":["exists"]},"IsUserExistsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/IsUserExistsDto"}]}},"required":["statusCode","message","data"]},"AppDto":{"type":"object","properties":{"appId":{"type":"string","description":"App ID","example":"app1"},"appName":{"type":"string","description":"App 名称","example":"App Name"},"appLogo":{"type":"string","description":"App Logo","example":"https://example.com/logo.png"},"appLoginUrl":{"type":"string","description":"App 登录地址","example":"https://example.com/login"},"appDefaultLoginStrategy":{"type":"string","description":"App 默认的登录策略","example":"ALLOW_ALL","enum":["ALLOW_ALL","DENY_ALL"]}},"required":["appId","appName","appLogo","appLoginUrl","appDefaultLoginStrategy"]},"AppListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/AppDto"}}},"required":["statusCode","message","data"]},"HasRoleRolesDto":{"type":"object","properties":{"namespace":{"type":"string","description":"所属权限分组(权限空间)的 Code","example":"default"},"code":{"type":"string","description":"角色 code","example":"admin"}},"required":["code"]},"HasAnyRoleOptionsDto":{"type":"object","properties":{"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"}}},"HasAnyRoleReqDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"roles":{"description":"角色列表","type":"array","items":{"$ref":"#/components/schemas/HasRoleRolesDto"}},"options":{"description":"可选参数","allOf":[{"$ref":"#/components/schemas/HasAnyRoleOptionsDto"}]}},"required":["userId","roles"]},"HasAnyRoleDto":{"type":"object","properties":{"hasAnyRole":{"type":"boolean","description":"是否拥有其中某一个角色","example":true}},"required":["hasAnyRole"]},"HasAnyRoleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/HasAnyRoleDto"}]}},"required":["statusCode","message","data"]},"UserLoginHistoryDto":{"type":"object","properties":{"appId":{"type":"string","description":"App ID","example":"app1"},"appName":{"type":"string","description":"App 名称","example":"App Name"},"appLogo":{"type":"string","description":"App Logo","example":"https://example.com/logo.png"},"appLoginUrl":{"type":"string","description":"App 登录地址","example":"https://example.com/login"},"clientIp":{"type":"string","description":"客户端 IP","example":"127.0.0.1"},"userAgent":{"type":"string","description":"登录时使用的 user agent","example":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36"},"time":{"format":"date-time","type":"string","description":"登录时间","example":""}},"required":["appId","appName","appLogo","appLoginUrl","clientIp","time"]},"UserLoginHistoryPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/UserLoginHistoryDto"}}},"required":["totalCount","list"]},"UserLoginHistoryPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserLoginHistoryPagingDto"}]}},"required":["statusCode","message","data"]},"UserLoggedInAppsDto":{"type":"object","properties":{"appId":{"type":"string","description":"App ID","example":"app1"},"appName":{"type":"string","description":"App 名称","example":"App Name"},"appLogo":{"type":"string","description":"App Logo","example":"https://example.com/logo.png"},"appLoginUrl":{"type":"string","description":"App 登录地址","example":"https://example.com/login"}},"required":["appId","appName","appLogo","appLoginUrl"]},"UserLoggedInAppsListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/UserLoggedInAppsDto"}}},"required":["statusCode","message","data"]},"UserLoggedInIdentitiesDto":{"type":"object","properties":{"identityId":{"type":"string","description":"Identity ID","example":"62299d8b866d2dab79a89dc4"},"idpName":{"type":"string","description":"身份源名称","example":"微信"},"idpNameEn":{"type":"string","description":"Identity provider name","example":"wechat"},"idpLogo":{"type":"string","description":"身份源 logo","example":"https://example.com/logo.png"},"idpId":{"type":"string","description":"身份源 id","example":"62299d8b866d2dab79a89dc4"}},"required":["identityId","idpName","idpNameEn","idpLogo","idpId"]},"UserLoggedInIdentitiesRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/UserLoggedInIdentitiesDto"}}},"required":["statusCode","message","data"]},"ResignUserReqDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"}},"required":["userId"]},"ResignUserDataDto":{"type":"object","properties":{"success":{"type":"boolean","description":"操作是否成功","example":true}},"required":["success"]},"ResignUserRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ResignUserDataDto"}]}},"required":["statusCode","message","data"]},"ResignUserBatchReqDto":{"type":"object","properties":{"userIds":{"description":"用户 ID 数组","minItems":1,"maxItems":50,"example":["6229ffaxxxxxxxxcade3e3d9"],"type":"array","items":{"type":"string"}},"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"}},"required":["userIds"]},"PolicyCondition":{"type":"object","properties":{"param":{"type":"string","description":"Condition Param","example":"AppId","enum":["UserPoolId","AppId","RequestFrom","UserId","UserArn","CurrentTime","EpochTime","SourceIp","User","MultiFactorAuthPresent","MultiFactorAuthAge","UserAgent","Referer","Device","OS","Country","Province","City","DeviceChanged","DeviceUntrusted","ProxyUntrusted","LoggedInApps","Namespace"]},"operator":{"type":"string","description":"Condition Operator","example":"StringEquals","enum":["Bool","DateEquals","DateNotEquals","DateLessThan","DateLessThanEquals","DateGreaterThan","DateGreaterThanEquals","IpAddress","NotIpAddress","NumericEquals","NumericNotEquals","NumericLessThan","NumericLessThanEquals","NumericGreaterThan","NumericGreaterThanEquals","StringEquals","StringNotEquals","StringEqualsIgnoreCase","StringNotEqualsIgnoreCase","StringLike","StringNotLike","ListContains"]},"value":{"type":"string","description":"Condition Value","example":"1"}},"required":["param","operator","value"]},"AuthorizedResourceDto":{"type":"object","properties":{"resourceCode":{"type":"string","description":"资源描述符","example":"ecs:1"},"description":{"type":"string","description":"资源描述信息","example":"服务器"},"condition":{"description":"策略 Condition","type":"array","items":{"$ref":"#/components/schemas/PolicyCondition"}},"resourceType":{"type":"string","description":"资源类型","example":"API","default":null,"enum":["DATA","API","MENU","BUTTON","UI"]},"apiIdentifier":{"type":"string","description":"API URL","example":"/api/v1/example","default":null},"actions":{"description":"授权的操作列表","example":["ecs:Start","ecs:Stop"],"type":"array","items":{"type":"string"}},"effect":{"type":"string","description":"允许还是拒绝","example":"ALLOW","default":"ALLOW","enum":["ALLOW","DENY"]}},"required":["resourceCode","resourceType","apiIdentifier","actions","effect"]},"AuthorizedResourcePagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/AuthorizedResourceDto"}}},"required":["totalCount","list"]},"AuthorizedResourcePaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/AuthorizedResourcePagingDto"}]}},"required":["statusCode","message","data"]},"CheckSessionStatusDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"appId":{"type":"string","description":"App ID","example":"app1"}},"required":["userId","appId"]},"CheckSessionStatusDataDto":{"type":"object","properties":{"active":{"type":"boolean","description":"是否具有登录态","example":true}},"required":["active"]},"CheckSessionStatusRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CheckSessionStatusDataDto"}]}},"required":["statusCode","message","data"]},"ImportOtpItemDataDto":{"type":"object","properties":{"secret":{"type":"string","description":"OTP 密钥","example":"HZ2F6J3AGNAVSOTV"},"recoveryCode":{"type":"string","description":"OTP Recovery Code","example":"b471-8ec0-874a-087f-bccb-cd54"}},"required":["secret"]},"ImportOtpItemDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID","example":"xxxx"},"otp":{"description":"OTP 数据","allOf":[{"$ref":"#/components/schemas/ImportOtpItemDataDto"}]}},"required":["userId","otp"]},"ImportOtpReqDto":{"type":"object","properties":{"list":{"description":"参数列表","type":"array","items":{"$ref":"#/components/schemas/ImportOtpItemDto"}}},"required":["list"]},"OtpSecretRespDto":{"type":"object","properties":{"secret":{"type":"string","description":"MFA OTP 秘钥","example":"e2345asdfwagw13424"}},"required":["secret"]},"GetOtpSecretRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/OtpSecretRespDto"}]}},"required":["statusCode","message","data"]},"GetUserPasswordCiphertextDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID","example":"6229ffaxxxxxxxxcade3e3d9"},"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"}},"required":["userId"]},"GetUserPasswordCiphertextDataDto":{"type":"object","properties":{"ciphertext":{"type":"string","description":"用户密码加密的密文"}},"required":["ciphertext"]},"GetUserPasswordCiphertextRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetUserPasswordCiphertextDataDto"}]}},"required":["statusCode","message","data"]},"LinkIdentityDto":{"type":"object","properties":{"extIdpId":{"type":"string","description":"必传，身份源 ID，用于指定该身份属于哪个身份源。"},"userId":{"type":"string","description":"必传，进行绑定操作的 Authing 用户 ID。"},"type":{"type":"string","description":"非必传，表示该条身份的具体类型，可从用户身份信息的 type 字段中获取。如果不传，默认为 generic"},"userIdInIdp":{"type":"string","description":"必传，用户在该外部身份源的唯一标识，需要从外部身份源的认证返回值中获取。"},"isSocial":{"type":"boolean","description":"已废弃，可任意传入，未来将移除该字段。"}},"required":["extIdpId","userId","userIdInIdp"]},"LinkIdentityDataDto":{"type":"object","properties":{"success":{"type":"boolean","description":"是否操作成功","example":true}},"required":["success"]},"LinkIdentityResDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/LinkIdentityDataDto"}]}},"required":["statusCode","message","data"]},"UnlinkIdentity":{"type":"object","properties":{"extIdpId":{"type":"string","description":"必传，身份源 ID，用于指定该身份属于哪个身份源。"},"userId":{"type":"string","description":"必传，进行绑定操作的 Authing 用户 ID。"},"type":{"type":"string","description":"非必传，表示该条身份的具体类型，可从用户身份信息的 type 字段中获取。如果不传，默认为 generic"},"isSocial":{"type":"boolean","description":"已废弃，可任意传入，未来将移除该字段。"}},"required":["extIdpId","userId"]},"UnlinkIdentityDataDto":{"type":"object","properties":{"success":{"type":"boolean","description":"是否操作成功","example":true}},"required":["success"]},"UnlinkIdentityResDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/UnlinkIdentityDataDto"}]}},"required":["statusCode","message","data"]},"ApplicationMfaDto":{"type":"object","properties":{"mfaPolicy":{"type":"string","description":"MFA 类型","example":"EMAIL"},"status":{"type":"number","description":"MFA 状态","example":1},"sort":{"type":"number","description":"MFA 排序","example":0}},"required":["mfaPolicy","status","sort"]},"GetMfaInfoDataDto":{"type":"object","properties":{"mfaToken":{"type":"string","description":"MFA Token","example":"xxxxxxx"},"mfaPhone":{"type":"string","description":"MFA 绑定的手机号","example":"132xxxxx1234"},"mfaPhoneCountryCode":{"type":"string","description":"MFA 绑定的手机区号","example":"+86"},"mfaEmail":{"type":"string","description":"MFA 绑定的邮箱","example":"authing@authing.com"},"nickname":{"type":"string","description":"用户昵称","example":"test"},"username":{"type":"string","description":"用户名","example":"test"},"phone":{"type":"string","description":"用户手机号","example":"123xxxx1234"},"phoneCountryCode":{"type":"string","description":"用户手机区号","example":"+86"},"faceMfaEnabled":{"type":"boolean","description":"人脸校验是否开启","example":false},"totpMfaEnabled":{"type":"boolean","description":"OTP 校验是否开启","example":false},"applicationMfa":{"description":"MFA Factor 列表","type":"array","items":{"$ref":"#/components/schemas/ApplicationMfaDto"}}},"required":["mfaToken","applicationMfa"]},"SetMfaStatusDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"},"mfaTriggerData":{"description":"MFA Factor 列表","allOf":[{"$ref":"#/components/schemas/GetMfaInfoDataDto"}]}},"required":["userId","mfaTriggerData"]},"GetMapInfoRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"MFA Factor 详情","allOf":[{"$ref":"#/components/schemas/GetMfaInfoDataDto"}]}},"required":["statusCode","message","data"]},"DeleteUserSyncRelationReqDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID","example":"6229ffaxxxxxxxxcade3e3d9"},"userIdType":{"type":"string","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"example":"user_id","default":"user_id"},"provider":{"type":"string","description":"外部身份源类型，如：\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `lark`: 飞书\n- `welink`: Welink\n- `ldap`: LDAP\n- `active-directory`: Windows AD\n- `italent`: 北森\n- `xiaoshouyi`: 销售易\n- `maycur`: 每刻报销\n- `scim`: SCIM\n- `moka`: Moka HR\n    "}},"required":["userId","provider"]},"SetUserRolesDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"roleIds":{"description":"角色 IDs","minItems":1,"maxItems":10,"example":["60b49eb83fd80adb96f26e68","60b49eb83fd80adb96f26e68"],"type":"array","items":{"type":"string"}}},"required":["userId","roleIds"]},"SetUserGroupsDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"groupIds":{"description":"群组 ID 列表","minItems":1,"maxItems":10,"example":["60b49eb83fd80adb96f26e68","60b49eb83fd80adb96f26e68"],"type":"array","items":{"type":"string"}}},"required":["userId","groupIds"]},"SyncTaskProvisioningScope":{"type":"object","properties":{"all":{"type":"boolean","description":"是否同步所选组织机构下的所有用户和部门","example":true,"default":true},"includeNewUsers":{"type":"boolean","description":"是否包含新增的用户","example":false,"default":true}},"required":["all","includeNewUsers"]},"SyncTaskFieldMapping":{"type":"object","properties":{"expression":{"type":"string","description":"源字段","example":"mobile"},"targetKey":{"type":"string","description":"转换后的字段","example":"phone"}},"required":["expression","targetKey"]},"SyncTaskTimedScheduler":{"type":"object","properties":{"cycle":{"type":"string","description":"定时周期：\n- `month`: 每个月执行一次\n- `week`: 每周执行一次\n- `days`: 每天执行一次\n- `sixHours`: 每六小时执行一次\n- `twoHours`: 每两小时执行一次\n    ","enum":["month","week","days","sixHours","twoHours"],"example":"days"},"startTime":{"type":"number","description":"开始时间","example":1664249726701}},"required":["cycle","startTime"]},"SyncTaskDto":{"type":"object","properties":{"syncTaskId":{"type":"number","description":"同步任务 ID","example":1000},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"},"syncTaskName":{"type":"string","description":"同步任务名称","example":"我的飞书同步任务"},"syncTaskType":{"type":"string","description":"同步任务类型:\n- `lark`: 飞书\n- `lark-international`: 飞书国际版\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `active-directory`: Windows AD\n- `ldap`: LDAP\n- `italent`: 北森\n- `maycur`: 每刻报销\n- `moka`: Moka\n- `fxiaoke`: 纷享销客\n- `xiaoshouyi`: 销售易\n- `kayang`: 嘉扬 HR\n- `scim`: 自定义同步源\n    ","enum":["lark","lark-international","wechatwork","dingtalk","active-directory","italent","maycur","ldap","moka","fxiaoke","scim","xiaoshouyi","kayang","custom"],"example":"lark"},"syncFlow":{"type":"string","description":"同步任务数据流向：\n- `upstream`: 作为上游，将数据同步到 Authing\n- `downstream`: 作为下游，将 Authing 数据同步到此系统\n    ","enum":["upstream","downstream"],"example":"upstream"},"syncTrigger":{"type":"string","description":"同步任务触发类型：\n- `manually`: 手动触发执行\n- `timed`: 定时触发\n- `automatic`: 根据事件自动触发\n","enum":["manually","timed","automatic"],"example":"manually"},"lastSyncMessage":{"type":"string","description":"最近一次同步错误信息","example":""},"lastSyncRate":{"type":"number","description":"最近一次同步进度","example":80},"lastSyncStatus":{"type":"string","description":"最近一次同步状态:\n- `free`: 空闲状态，从未执行\n- `pending`: 等待系统执行\n- `onProgress`: 正在执行\n- `success`: 成功\n- `failed`: 失败\n    ","enum":["free","pending","onProgress","success","failed"],"example":"success"},"lastSyncTime":{"format":"date-time","type":"string","description":"最近一次同步时间","example":"2022-07-03T02:20:30.000Z"},"organizationCode":{"type":"string","description":"此同步任务绑定的组织机构。针对上游同步，需执行一次同步任务之后才会绑定组织机构；针对下游同步，创建同步任务的时候就需要设置。","example":"steamory"},"provisioningScope":{"description":"同步范围，**只针对下游同步任务有效**。为空表示同步整个组织机构。","allOf":[{"$ref":"#/components/schemas/SyncTaskProvisioningScope"}]},"fieldMapping":{"description":"字段映射配置","type":"array","items":{"$ref":"#/components/schemas/SyncTaskFieldMapping"}},"timedScheduler":{"description":"定时同步时间设置","allOf":[{"$ref":"#/components/schemas/SyncTaskTimedScheduler"}]}},"required":["syncTaskId","createdAt","updatedAt","syncTaskName","syncTaskType","syncFlow","syncTrigger","fieldMapping"]},"SyncTaskSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SyncTaskDto"}]}},"required":["statusCode","message","data"]},"SyncTaskPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/SyncTaskDto"}}},"required":["totalCount","list"]},"SyncTaskPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SyncTaskPagingDto"}]}},"required":["statusCode","message","data"]},"SyncTaskLarkClientConfig":{"type":"object","properties":{"app_id":{"type":"string","description":"飞书应用 App ID","example":""},"app_secret":{"type":"string","description":"飞书应用 App Secret","example":""},"encrypt_key":{"type":"string","description":"飞书事件订阅的 Encrypt Key，可以在飞书开放平台应用详情的「事件订阅」页面获取。如果你需要开启实时同步，此参数必填。","example":""},"verification_token":{"type":"string","description":"飞书事件订阅的 Verification Token，可以在飞书开放平台应用详情的「事件订阅」页面获取。如果你需要开启实时同步，此参数必填。","example":""}},"required":["app_id","app_secret"]},"SyncTaskWechatworkClientConfig":{"type":"object","properties":{"corpID":{"type":"string","description":"企业 ID（CorpId）","example":""},"secret":{"type":"string","description":"企业微信通讯录密钥 Secret","example":""},"token":{"type":"string","description":"通讯录事件同步 Token","example":""},"encodingAESKey":{"type":"string","description":"通讯录事件同步 EncodingAESKey","example":""},"agentUrl":{"type":"string","description":"代理地址","example":""}},"required":["corpID","secret"]},"SyncTaskDingtalkClientConfig":{"type":"object","properties":{"corpId":{"type":"string","description":"企业 ID（CorpId）","example":""},"appKey":{"type":"string","description":"钉钉应用的 AppKey","example":""},"appSecret":{"type":"string","description":"钉钉应用的 AppSecret","example":""},"aes_key":{"type":"string","description":"加密 aes_key","example":""},"token":{"type":"string","description":"签名 token","example":""}},"required":["corpId","appKey","appSecret"]},"SyncTaskMokaClientConfig":{"type":"object","properties":{"userName":{"type":"string","description":"User Name","example":""},"entCode":{"type":"string","description":"Ent Code","example":""},"apiCode_employee":{"type":"string","description":"Api Code Employee","example":""},"apiCode_department":{"type":"string","description":"Api Code Department","example":""},"privateKey":{"type":"string","description":"Private Key","example":""}},"required":["userName","entCode","apiCode_employee","apiCode_department","privateKey"]},"SyncTaskScimClientConfig":{"type":"object","properties":{"org_url":{"type":"string","description":"Group Url","example":""},"user_url":{"type":"string","description":"User Url","example":""},"token":{"type":"string","description":"Token","example":""},"root_department_id":{"type":"string","description":"Root Department Id","example":""},"parent_department":{"type":"string","description":"Parent Department","example":""},"department":{"type":"string","description":"Department","example":""}},"required":["user_url","token"]},"SyncTaskActiveDirectoryClientConfig":{"type":"object","properties":{"syncIdentityProviderCode":{"type":"string","description":"身份源唯一标志","example":""},"ticket_url":{"type":"string","description":"Provisioning Ticket Url","example":""}}},"SyncTaskLdapClientConfig":{"type":"object","properties":{"url":{"type":"string","description":"LDAP 链接","example":""},"bindDn":{"type":"string","description":"Bind DN","example":""},"bindCredentials":{"type":"string","description":"Bind DN 密码","example":""},"usersBaseDn":{"type":"string","description":"Users Base DN","example":""},"groupsBaseDn":{"type":"string","description":"Groups Base Dn","example":""},"userQueryCriteria":{"type":"string","description":"用户查询条件","example":"(|(objectclass=orgnizationPerson)(objectclass=person))"},"departmentQueryCriteria":{"type":"string","description":"部门查询条件","example":"(|(objectClass=organization)(objectClass=organizationalunit)(objectClass=domain))"}},"required":["url","bindDn","bindCredentials","usersBaseDn","groupsBaseDn","userQueryCriteria","departmentQueryCriteria"]},"SyncTaskItalentClientConfig":{"type":"object","properties":{"tenant_id":{"type":"string","description":"Tenant Id","example":""},"app_key":{"type":"string","description":"App Key","example":""},"app_secret":{"type":"string","description":"App Secret","example":""}},"required":["tenant_id","app_key","app_secret"]},"SyncTaskMaycurClientConfig":{"type":"object","properties":{"app_code":{"type":"string","description":"App Code","example":""},"app_secret":{"type":"string","description":"App Secret","example":""},"endpoint":{"type":"string","description":"登录域名","example":""}},"required":["app_code","app_secret","endpoint"]},"SyncTaskFxiaokeClientConfig":{"type":"object","properties":{"appId":{"type":"string","description":"App Id","example":""},"appSecret":{"type":"string","description":"App Secret","example":""},"permanentCode":{"type":"string","description":"Permanent Code","example":""},"currentOpenUserId":{"type":"string","description":"Current Open User Id","example":""}},"required":["appId","appSecret","permanentCode","currentOpenUserId"]},"SyncTaskXiaoshouyiClientConfig":{"type":"object","properties":{"client_id":{"type":"string","description":"销售易应用的 ClientId","example":""},"client_secret":{"type":"string","description":"销售易应用的 ClientSecret","example":""},"username":{"type":"string","description":"销售易应用的 UserName","example":""},"password":{"type":"string","description":"销售易应用的 Password","example":""}},"required":["client_id","client_secret","username","password"]},"SyncTaskKayangClientConfig":{"type":"object","properties":{"endpoint":{"type":"string","description":"Endpoint","example":""},"account":{"type":"string","description":"Account","example":""},"password":{"type":"string","description":"Password","example":""}},"required":["endpoint","account","password"]},"SyncTaskClientConfig":{"type":"object","properties":{"larkConfig":{"description":"飞书同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskLarkClientConfig"}]},"larkInternationalConfig":{"description":"飞书(国际版)同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskLarkClientConfig"}]},"wechatworkConfig":{"description":"企业微信同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskWechatworkClientConfig"}]},"dingtalkConfig":{"description":"钉钉同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskDingtalkClientConfig"}]},"mokaConfig":{"description":"Moka 同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskMokaClientConfig"}]},"scimConfig":{"description":"自定义同步源同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskScimClientConfig"}]},"activeDirectoryConfig":{"description":"Windows AD 同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskActiveDirectoryClientConfig"}]},"ldapConfig":{"description":"LDAP 同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskLdapClientConfig"}]},"italentConfig":{"description":"北森同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskItalentClientConfig"}]},"maycurConfig":{"description":"每刻报销同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskMaycurClientConfig"}]},"fxiaokeConfig":{"description":"纷享销客同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskFxiaokeClientConfig"}]},"xiaoshouyiConfig":{"description":"销售易同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskXiaoshouyiClientConfig"}]},"kayangConfig":{"description":"嘉扬同步任务配置","allOf":[{"$ref":"#/components/schemas/SyncTaskKayangClientConfig"}]}}},"CreateSyncTaskDto":{"type":"object","properties":{"syncTaskName":{"type":"string","description":"同步任务名称","example":"我的飞书同步任务"},"syncTaskType":{"type":"string","description":"同步任务类型:\n- `lark`: 飞书\n- `lark-international`: 飞书国际版\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `active-directory`: Windows AD\n- `ldap`: LDAP\n- `italent`: 北森\n- `maycur`: 每刻报销\n- `moka`: Moka\n- `fxiaoke`: 纷享销客\n- `xiaoshouyi`: 销售易\n- `kayang`: 嘉扬 HR\n- `scim`: 自定义同步源\n    ","enum":["lark","lark-international","wechatwork","dingtalk","active-directory","italent","maycur","ldap","moka","fxiaoke","scim","xiaoshouyi","kayang","custom"],"example":"lark"},"clientConfig":{"description":"同步任务配置信息","allOf":[{"$ref":"#/components/schemas/SyncTaskClientConfig"}]},"syncTaskFlow":{"type":"string","description":"同步任务数据流向：\n- `upstream`: 作为上游，将数据同步到 Authing\n- `downstream`: 作为下游，将 Authing 数据同步到此系统\n    ","enum":["upstream","downstream"],"example":"upstream"},"syncTaskTrigger":{"type":"string","description":"同步任务触发类型：\n- `manually`: 手动触发执行\n- `timed`: 定时触发\n- `automatic`: 根据事件自动触发\n","enum":["manually","timed","automatic"],"example":"manually"},"organizationCode":{"type":"string","description":"此同步任务绑定的组织机构。针对上游同步，需执行一次同步任务之后才会绑定组织机构；针对下游同步，创建同步任务的时候就需要设置。","example":"steamory"},"provisioningScope":{"description":"同步范围，**只针对下游同步任务有效**。为空表示同步整个组织机构。","allOf":[{"$ref":"#/components/schemas/SyncTaskProvisioningScope"}]},"fieldMapping":{"description":"字段映射配置","type":"array","items":{"$ref":"#/components/schemas/SyncTaskFieldMapping"}},"timedScheduler":{"description":"定时同步时间设置","allOf":[{"$ref":"#/components/schemas/SyncTaskTimedScheduler"}]}},"required":["syncTaskName","syncTaskType","clientConfig","syncTaskFlow","syncTaskTrigger","fieldMapping"]},"UpdateSyncTaskDto":{"type":"object","properties":{"syncTaskId":{"type":"number","description":"同步任务 ID","example":1000},"syncTaskName":{"type":"string","description":"同步任务名称","example":"我的飞书同步任务"},"syncTaskType":{"type":"string","description":"同步任务类型:\n- `lark`: 飞书\n- `lark-international`: 飞书国际版\n- `wechatwork`: 企业微信\n- `dingtalk`: 钉钉\n- `active-directory`: Windows AD\n- `ldap`: LDAP\n- `italent`: 北森\n- `maycur`: 每刻报销\n- `moka`: Moka\n- `fxiaoke`: 纷享销客\n- `xiaoshouyi`: 销售易\n- `kayang`: 嘉扬 HR\n- `scim`: 自定义同步源\n    ","enum":["lark","lark-international","wechatwork","dingtalk","active-directory","italent","maycur","ldap","moka","fxiaoke","scim","xiaoshouyi","kayang","custom"],"example":"lark"},"clientConfig":{"description":"同步任务配置信息","allOf":[{"$ref":"#/components/schemas/SyncTaskClientConfig"}]},"syncTaskFlow":{"type":"string","description":"同步任务数据流向：\n- `upstream`: 作为上游，将数据同步到 Authing\n- `downstream`: 作为下游，将 Authing 数据同步到此系统\n    ","enum":["upstream","downstream"],"example":"upstream"},"syncTaskTrigger":{"type":"string","description":"同步任务触发类型：\n- `manually`: 手动触发执行\n- `timed`: 定时触发\n- `automatic`: 根据事件自动触发\n","enum":["manually","timed","automatic"],"example":"manually"},"organizationCode":{"type":"string","description":"此同步任务绑定的组织机构。针对上游同步，需执行一次同步任务之后才会绑定组织机构；针对下游同步，创建同步任务的时候就需要设置。","example":"steamory"},"provisioningScope":{"description":"同步范围，**只针对下游同步任务有效**。为空表示同步整个组织机构。","allOf":[{"$ref":"#/components/schemas/SyncTaskProvisioningScope"}]},"fieldMapping":{"description":"字段映射配置","type":"array","items":{"$ref":"#/components/schemas/SyncTaskFieldMapping"}},"timedScheduler":{"description":"定时同步时间设置","allOf":[{"$ref":"#/components/schemas/SyncTaskTimedScheduler"}]}},"required":["syncTaskId"]},"TriggerSyncTaskDto":{"type":"object","properties":{"syncTaskId":{"type":"number","description":"同步任务 ID","example":1000}},"required":["syncTaskId"]},"TriggerSyncTaskDataDto":{"type":"object","properties":{"syncJobId":{"type":"number","description":"此次执行同步任务的同步作业 ID","example":1}},"required":["syncJobId"]},"TriggerSyncTaskRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TriggerSyncTaskDataDto"}]}},"required":["statusCode","message","data"]},"SyncJobDto":{"type":"object","properties":{"syncJobId":{"type":"number","description":"同步作业 ID","example":1},"syncTaskId":{"type":"number","description":"此同步作业对应的同步任务 ID","example":1000},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"},"syncStatus":{"type":"string","description":"当前同步状态:\n- `free`: 空闲状态，从未执行\n- `pending`: 等待系统执行\n- `onProgress`: 正在执行\n- `success`: 成功\n- `failed`: 失败\n    ","enum":["free","pending","onProgress","success","failed"],"example":"success"},"syncFlow":{"type":"string","description":"同步任务数据流向：\n- `upstream`: 作为上游，将数据同步到 Authing\n- `downstream`: 作为下游，将 Authing 数据同步到此系统\n    ","enum":["upstream","downstream"],"example":"upstream"},"syncTrigger":{"type":"string","description":"同步任务触发类型：\n- `manually`: 手动触发执行\n- `timed`: 定时触发\n- `automatic`: 根据事件自动触发\n","enum":["manually","timed","automatic"],"example":"manually"},"departmentCountAll":{"type":"number","description":"需要同步的部门个数","example":0},"departmentCountSucc":{"type":"number","description":"成功同步的部门个数","example":0},"departmentUpdateCountAll":{"type":"number","description":"需要更新的部门个数","example":0},"departmentUpdateCountSucc":{"type":"number","description":"成功更新的部门个数","example":0},"accountCountAll":{"type":"number","description":"需要同步的用户个数","example":0},"accountCountSucc":{"type":"number","description":"成功同步的用户个数","example":0},"accountUpdateCountAll":{"type":"number","description":"需要更新的用户个数","example":0},"accountUpdateCountSucc":{"type":"number","description":"成功更新的用户个数","example":0},"errMsg":{"type":"string","description":"错误信息","example":""}},"required":["syncJobId","syncTaskId","createdAt","updatedAt","syncStatus","syncFlow","syncTrigger","departmentCountAll","departmentCountSucc","departmentUpdateCountAll","departmentUpdateCountSucc","accountCountAll","accountCountSucc","accountUpdateCountAll","accountUpdateCountSucc"]},"SyncJobSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SyncJobDto"}]}},"required":["statusCode","message","data"]},"SyncJobPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/SyncJobDto"}}},"required":["totalCount","list"]},"SyncJobPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SyncJobPagingDto"}]}},"required":["statusCode","message","data"]},"SyncRiskOperationDto":{"type":"object","properties":{"syncRiskOperationId":{"type":"number","description":"同步任务风险操作 ID","example":1},"syncTaskId":{"type":"number","description":"同步任务 ID","example":1000},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"},"status":{"type":"string","description":"执行状态:\n- `PENDING`: 待执行\n- `SUCCESS`: 成功\n- `FAILED`: 失败\n- `CANCELED`: 已取消\n- `EXECUTING`: 执行中\n    ","enum":["PENDING","SUCCESS","FAILED","CANCELED","EXECUTING"],"example":"SUCCESS"},"level":{"type":"number","description":"优先级，数字越小表示优先级越高。","example":0},"objectType":{"type":"string","description":"操作对象类型:\n- `department`: 部门\n- `user`: 用户\n    ","enum":["DEPARTMENT","USER"],"example":"DEPARTMENT"},"objectName":{"type":"string","description":"操作对象（用户、分组、部门）名称","example":"张三"},"objectId":{"type":"string","description":"操作对象 ID","example":"624cf96f7axxx7918478ee7"},"errMsg":{"type":"string","description":"执行失败的错误信息","example":""}},"required":["syncRiskOperationId","syncTaskId","createdAt","updatedAt","status","level","objectType","objectName","objectId"]},"SyncRiskOperationPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/SyncRiskOperationDto"}}},"required":["totalCount","list"]},"SyncRiskOperationPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SyncRiskOperationPagingDto"}]}},"required":["statusCode","message","data"]},"TriggerSyncRiskOperationDto":{"type":"object","properties":{"syncRiskOperationIds":{"description":"同步任务风险操作 ID","example":[1,2],"type":"array","items":{"type":"number"}}},"required":["syncRiskOperationIds"]},"TriggerSyncRiskOperationsDataDto":{"type":"object","properties":{"successList":{"description":"成功执行的风险操作任务","example":[1,2],"type":"array","items":{"type":"number"}},"faildList":{"description":"执行失败的风险操作任务","example":[3,4],"type":"array","items":{"type":"number"}}},"required":["successList","faildList"]},"TriggerSyncRiskOperationsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TriggerSyncRiskOperationsDataDto"}]}},"required":["statusCode","message","data"]},"CancelSyncRiskOperationDto":{"type":"object","properties":{"syncRiskOperationIds":{"description":"同步任务风险操作 ID","example":[1,2],"type":"array","items":{"type":"number"}}},"required":["syncRiskOperationIds"]},"CancelSyncRiskOperationsDataDto":{"type":"object","properties":{"successList":{"description":"成功取消的风险操作任务","example":[1,2],"type":"array","items":{"type":"number"}},"faildList":{"description":"取消失败的风险操作任务","example":[3,4],"type":"array","items":{"type":"number"}}},"required":["successList","faildList"]},"CancelSyncRiskOperationsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CancelSyncRiskOperationsDataDto"}]}},"required":["statusCode","message","data"]},"GetManagementAccessTokenDto":{"type":"object","properties":{"accessKeyId":{"type":"string","description":"AccessKey ID: 如果是以用户池全局 AK/SK 初始化，为用户池 ID;如果是以协作管理员的 AK/SK 初始化，为协作管理员的 AccessKey ID。","example":"6250f12d5dxxxx9bcfcf784b"},"accessKeySecret":{"type":"string","description":"AccessKey Secret: 如果是以用户池全局 AK/SK 初始化，为用户池密钥；如果是以协作管理员的 AK/SK 初始化，为协作管理员的 SK。","example":"4ae78d3e579a6dxxxx1aeca7b1e29ec2"}},"required":["accessKeyId","accessKeySecret"]},"AccessTokenResDto":{"type":"object","properties":{"access_token":{"type":"string","description":"Access Token 内容","example":"eyJ...Ggg"},"expires_in":{"type":"number","description":"access_token 有效时间，默认为 7200 秒（两小时），过期之后应该重新获取新的 access_token。","example":7200}},"required":["access_token","expires_in"]},"GetManagementTokenRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/AccessTokenResDto"}]}},"required":["statusCode","message","data"]},"GroupDto":{"type":"object","properties":{"id":{"type":"string","description":"分组 ID","example":"60b49eb83fd80adb96f26e68"},"code":{"type":"string","description":"分组 code","example":"developer"},"name":{"type":"string","description":"分组名称","example":"开发者"},"description":{"type":"string","description":"分组描述","example":"描述内容"},"type":{"type":"string","description":"分组类型","example":"static"},"metadataSource":{"description":"分组元数据信息","type":"array","items":{"type":"string"}},"members":{"description":"成员列表","type":"array","items":{"$ref":"#/components/schemas/UserDto"}}},"required":["id","code","name","description","type","metadataSource","members"]},"GroupSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GroupDto"}]}},"required":["statusCode","message","data"]},"GroupListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/GroupDto"}}},"required":["statusCode","message","data"]},"CreateGroupReqDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"name":{"type":"string","description":"分组名称","example":"开发者"},"description":{"type":"string","description":"分组描述","example":"描述内容"},"type":{"type":"string","description":"分组类型","example":"static"},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"custom_id":"xxx"}}},"required":["code","name","description","type"]},"CreateOrUpdateGroupReqDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"name":{"type":"string","description":"分组名称","example":"开发者"},"description":{"type":"string","description":"分组描述","example":"描述内容"},"type":{"type":"string","description":"分组类型","example":"static"}},"required":["code","name","description","type"]},"CreateOrUpdateGroupDataDto":{"type":"object","properties":{"created":{"type":"boolean","description":"是否创建","example":true},"data":{"description":"群组信息","allOf":[{"$ref":"#/components/schemas/GroupDto"}]}},"required":["created","data"]},"CreateOrUpdateGroupRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CreateOrUpdateGroupDataDto"}]}},"required":["statusCode","message","data"]},"CreateGroupBatchReqDto":{"type":"object","properties":{"list":{"description":"批量分组","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/CreateGroupReqDto"}}},"required":["list"]},"UpdateGroupReqDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"description":{"type":"string","description":"分组描述","example":"描述内容"},"name":{"type":"string","description":"分组名称","example":"开发者"},"newCode":{"type":"string","description":"分组新的 code","example":"developer"},"customData":{"type":"object","description":"自定义数据，传入的对象中的 key 必须先在用户池定义相关自定义字段","example":{"custom_id":"xxx"}}},"required":["code","description"]},"DeleteGroupsReqDto":{"type":"object","properties":{"codeList":{"description":"分组 code 列表","minItems":1,"maxItems":50,"example":["code1"],"type":"array","items":{"type":"string"}}},"required":["codeList"]},"AddGroupMembersReqDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"userIds":{"description":"用户 ID 数组","minItems":1,"maxItems":50,"example":["6229ffaxxxxxxxxcade3e3d9"],"type":"array","items":{"type":"string"}}},"required":["code","userIds"]},"RemoveGroupMembersReqDto":{"type":"object","properties":{"code":{"type":"string","description":"分组 code","example":"developer"},"userIds":{"description":"用户 ID 数组","minItems":1,"maxItems":50,"example":["6229ffaxxxxxxxxcade3e3d9"],"type":"array","items":{"type":"string"}}},"required":["code","userIds"]},"AuthorizedResourceListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/AuthorizedResourceDto"}}},"required":["statusCode","message","data"]},"RoleSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RoleDto"}]}},"required":["statusCode","message","data"]},"TargetDto":{"type":"object","properties":{"targetType":{"type":"string","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"DEPARTMENT"},"targetIdentifier":{"type":"string","description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","example":"60b49eb83fd80adb96f26e68"}},"required":["targetType","targetIdentifier"]},"AssignRoleDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组内角色的唯一标识符","example":"code1"},"endTime":{"type":"number","description":"主体过期时间毫秒值, 为 null 时永久有效","example":"1669114748050"},"enableTime":{"type":"number","description":"主体加入时间毫秒值, 为 null 时立即加入","example":"1669114748050"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"60b49eb83fd80adb96f26e68"},"targets":{"description":"目标对象","minItems":1,"maxItems":50,"example":[{"targetIdentifier":"60b49eb83fd80adb96f26e68","targetType":"USER"}],"type":"array","items":{"$ref":"#/components/schemas/TargetDto"}}},"required":["code","targets"]},"RoleCodeDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组内角色的唯一标识符","example":"admin"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"60b49eb83fd80adb96f26e68"}},"required":["code"]},"AssignRoleBatchDto":{"type":"object","properties":{"roles":{"description":"角色信息列表","minItems":1,"maxItems":10,"example":[{"code":"60b49eb83fd80adb96f26e68","namespace":"USER"}],"type":"array","items":{"$ref":"#/components/schemas/RoleCodeDto"}},"targets":{"description":"分配角色的目标列表","minItems":1,"maxItems":10,"example":[{"targetIdentifier":"60b49eb83fd80adb96f26e68","targetType":"USER"}],"type":"array","items":{"$ref":"#/components/schemas/TargetDto"}}},"required":["roles","targets"]},"RevokeRoleDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组内角色的唯一标识符","example":"code1"},"namespace":{"type":"string","description":"所属权限分组的 code","example":"default"},"targets":{"description":"移除角色的目标","minItems":1,"maxItems":50,"example":[{"targetIdentifier":"60b49eb83fd80adb96f26e68","targetType":"USER"}],"type":"array","items":{"$ref":"#/components/schemas/TargetDto"}}},"required":["code","targets"]},"RevokeRoleBatchDto":{"type":"object","properties":{"roles":{"description":"角色信息列表","minItems":1,"maxItems":10,"example":[{"code":"60b49eb83fd80adb96f26e68","namespace":"namespaceCode"}],"type":"array","items":{"$ref":"#/components/schemas/RoleCodeDto"}},"targets":{"description":"移除角色的目标列表","minItems":1,"maxItems":50,"example":[{"targetIdentifier":"60b49eb83fd80adb96f26e68","targetType":"USER"}],"type":"array","items":{"$ref":"#/components/schemas/TargetDto"}}},"required":["roles","targets"]},"RoleAuthorizedResourcesRespDto":{"type":"object","properties":{"resourceCode":{"type":"string","description":"资源描述符","example":"ecs"},"resourceType":{"type":"string","description":"资源类型","enum":["DATA","API","MENU","BUTTON","UI"],"example":"DATA"},"actions":{"description":"被授权的操作列表","example":["ecs:Start","ecs:Stop"],"type":"array","items":{"type":"string"}},"apiIdentifier":{"type":"string","description":"资源对应的 API Identifier","example":"dd8d7stf44"}},"required":["resourceCode","resourceType","actions","apiIdentifier"]},"RoleAuthorizedResourcePagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据","type":"array","items":{"$ref":"#/components/schemas/RoleAuthorizedResourcesRespDto"}}},"required":["totalCount","list"]},"RoleAuthorizedResourcePaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/RoleAuthorizedResourcePagingDto"}]}},"required":["statusCode","message","data"]},"RoleDepartmentRespDto":{"type":"object","properties":{"id":{"type":"string","description":"部门 ID","example":"60b49eb83fd80adb96f26e68"},"code":{"type":"string","description":"部门 code","example":"code"},"name":{"type":"string","description":"部门名称","example":"departmentName"},"description":{"type":"string","description":"部门描述信息","example":"dd8d7stf44"}},"required":["id","code","name","description"]},"RoleDepartmentListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据","type":"array","items":{"$ref":"#/components/schemas/RoleDepartmentRespDto"}}},"required":["totalCount","list"]},"RoleDepartmentListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/RoleDepartmentListPagingDto"}]}},"required":["statusCode","message","data"]},"CreateRoleDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组（权限空间）内角色的唯一标识符","example":"manager"},"name":{"type":"string","description":"权限分组（权限空间）内角色名称","example":"manager"},"namespace":{"type":"string","description":"所属权限分组(权限空间)的 code","example":"default","default":"default"},"description":{"type":"string","description":"角色描述","example":"this is role manager description"},"disableTime":{"type":"string","description":"角色自动禁止时间，单位毫秒, 如果传null表示永久有效","example":"1669881887852"}},"required":["code"]},"DeleteRoleDto":{"type":"object","properties":{"codeList":{"description":"角色 code 列表","example":["code1","code2"],"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}},"namespace":{"type":"string","description":"所属权限分组(权限空间)的 code","example":"default","default":"default"}},"required":["codeList"]},"RoleListItem":{"type":"object","properties":{"code":{"type":"string","description":"权限分组内角色的唯一标识符","example":"my-role-code"},"name":{"type":"string","description":"权限分组内角色名称","example":"my-role-name"},"description":{"type":"string","description":"角色描述","example":"this is a description about the role"},"namespace":{"type":"string","description":"所属权限分组(权限空间)的 code","example":"default","default":"default"}},"required":["code"]},"CreateRolesBatch":{"type":"object","properties":{"list":{"description":"角色列表","example":[{"code":"my-role-code","namespace":"default","description":"this is  description"}],"minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/RoleListItem"}}},"required":["list"]},"UpdateRoleDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组(权限空间）内角色的唯一标识符","example":"code1"},"newCode":{"type":"string","description":"角色新的权限分组（权限空间）内唯一识别码","example":"code2"},"name":{"type":"string","description":"权限分组（权限空间）角色名称","example":"name"},"namespace":{"type":"string","description":"所属权限分组(权限空间)的 code","example":"default","default":"default"},"description":{"type":"string","description":"角色描述","example":"this is description"},"status":{"type":"string","description":"角色状态，ENABLE-表示正常，DISABLE-表示禁止","example":"enable"},"disableTime":{"type":"string","description":"角色自动禁止时间，单位毫秒, 如果传null表示永久有效","example":"1669881887852"}},"required":["code","newCode","name"]},"RoleCodeAndNamespaceDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组（权限空间）内角色的唯一标识符","example":"manager"},"namespace":{"type":"string","description":"所属权限分组(权限空间)的 code","example":"system","default":"system"}},"required":["code","namespace"]},"DeleteRoleBatchDto":{"type":"object","properties":{"roleList":{"description":"角色 Code 和 namespace 列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/RoleCodeAndNamespaceDto"}}},"required":["roleList"]},"CheckRoleParamsDto":{"type":"object","properties":{"namespace":{"type":"string","description":"所属权限分组(权限空间)的 Code","example":"default"},"code":{"type":"string","description":"权限分组（权限空间）内角色的唯一标识符","example":"exampleCode"},"name":{"type":"string","description":"权限分组（权限空间）内角色名称","example":"示例角色名称"}},"required":["namespace","code"]},"CheckRoleParamsRespDto":{"type":"object","properties":{"isValid":{"type":"boolean","description":"权限空间名称或者权限空间 Code 校验是否有效","example":" false"},"message":{"type":"boolean","description":"权限空间名称或权限空间 Code 校验失败提示信息,如果校验成功, Message 不返回","example":" namespace name already exist"}},"required":["isValid","message"]},"RoleCheckParamsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。","example":20001},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CheckRoleParamsRespDto"}]}},"required":["statusCode","message","data"]},"RolePermissionListDto":{"type":"object","properties":{"roleId":{"type":"string","description":"角色 ID","example":"60b49eb83fd80adb96f26e68"},"status":{"type":"string","description":"主体状态，DISABLE-未加入角色，ENABLE-已经加入了角色","example":"ENABLE"},"enableTime":{"type":"number","description":"主体加入时间毫秒值","example":"1670915666812"},"endTime":{"type":"number","description":"主体失效时间毫秒值，为 null 表示用不失效","example":"1670915666812"},"userPoolId":{"type":"string","description":"所属用户池 ID","example":"6076bacxxxxxxxxd80d993b5"},"roleName":{"type":"string","description":"角色名称，最多 50 字符","example":"测试用户"},"roleCode":{"type":"string","description":"角色 code,只能使用字母、数字和 -_，最多 50 字符","example":"code_1"},"description":{"type":"string","description":"角色描述信息,最多两百字符","example":"这个一个角色的描述信息"},"createdAt":{"type":"string","description":"创建时间","example":"2022-03-17T05:23:01.567Z"},"updatedAt":{"type":"string","description":"更新时间","example":"2022-03-17T05:23:01.567Z"}},"required":["roleId","status","userPoolId","roleName","roleCode","createdAt","updatedAt"]},"RoleListPageDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","default":10,"example":20},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/RolePermissionListDto"}}},"required":["data"]},"RoleListPageRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RoleListPageDto"}]}},"required":["statusCode","message","data"]},"CreateAdminRoleDto":{"type":"object","properties":{"code":{"type":"string","description":"管理员角色的唯一标识符","example":"manager"},"name":{"type":"string","description":"管理员角色名称","example":"manager"},"description":{"type":"string","description":"角色描述","example":"this is role manager description"}},"required":["code","name"]},"DeleteAdminRoleDto":{"type":"object","properties":{"codeList":{"description":"角色 code 列表","example":["code1","code2"],"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}}},"required":["codeList"]},"ExtIdpDto":{"type":"object","properties":{"id":{"type":"string","description":"身份源 id","example":"60b49eb83fd80adb96f26e68"},"name":{"type":"string","description":"身份源名称","example":"default"},"logo":{"type":"string","description":"身份源的 Logo","example":"https://files.authing.co/authing-console/social-connections/wechatIdentitySource.svg"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"},"type":{"type":"string","description":"身份源类型","example":"wechat"}},"required":["id","name","logo","type"]},"ExtIdpListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/ExtIdpDto"}}},"required":["totalCount","list"]},"ExtIdpListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/ExtIdpListPagingDto"}]}},"required":["statusCode","message","data"]},"ExtIdpDetail":{"type":"object","properties":{"id":{"type":"string","description":"身份源 id","example":"60b49eb83fd80adb96f26e68"},"name":{"type":"string","description":"身份源名称","example":"default"},"logo":{"type":"string","description":"身份源的 Logo","example":"https://files.authing.co/authing-console/social-connections/wechatIdentitySource.svg"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"},"type":{"type":"string","description":"身份源类型","example":"wechat"},"connections":{"type":"object","description":"身份源的连接列表"},"autoJoin":{"type":"boolean","description":"租户场景下自动加入","example":true}},"required":["id","name","logo","type","connections","autoJoin"]},"ExtIdpDetailSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ExtIdpDetail"}]}},"required":["statusCode","message","data"]},"CreateExtIdpDto":{"type":"object","properties":{"name":{"type":"string","description":"身份源名称","example":"exampleName"},"type":{"type":"string","description":"身份源连接类型","enum":["oidc","oauth2","saml","ldap","ad","cas","azure-ad","wechat","google","qq","wechatwork","dingtalk","weibo","github","alipay","apple","baidu","lark","gitlab","twitter","facebook","slack","linkedin","yidun","qingcloud","gitee","instagram","welink","huawei","honor","xiaomi","oppo","aws","amazon","douyin","kuaishou","line","sdbz"],"example":"ad"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["name","type"]},"ExtIdpSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ExtIdpDto"}]}},"required":["statusCode","message","data"]},"UpdateExtIdpDto":{"type":"object","properties":{"name":{"type":"string","description":"名称","example":"exampleName"},"id":{"type":"string","description":"身份源 ID","example":"60b49eb83fd80adb96f26e68"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["name","id"]},"DeleteExtIdpDto":{"type":"object","properties":{"id":{"type":"string","description":"身份源 ID","example":"60b49eb83fd80adb96f26e68"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["id"]},"CreateExtIdpConnDto":{"type":"object","properties":{"extIdpId":{"type":"string","description":"身份源连接 ID","example":"60b49eb83fd80adb96f26e68"},"type":{"type":"string","description":"身份源连接类型","enum":["oidc","oauth","saml","ldap","ad","cas","azure-ad","alipay","facebook","facebook:mobile","twitter","google:mobile","google","wechat:pc","wechat:mobile","wechat:webpage-authorization","wechatmp-qrcode","wechat:miniprogram:default","wechat:miniprogram:qrconnect","wechat:miniprogram:app-launch","github","github:mobile","qq","qq:mobile","wechatwork:corp:qrconnect","wechatwork:agency:qrconnect","wechatwork:service-provider:qrconnect","wechatwork:mobile","wechatwork:agency:mobile","dingtalk","dingtalk:mobile","dingtalk:provider","weibo","weibo:mobile","apple","apple:web","baidu","baidu:mobile","lark-internal","lark-public","lark-block","gitlab","gitlab:mobile","linkedin","linkedin:mobile","slack","slack:mobile","yidun","qingcloud","gitee","gitee:mobile","instagram","welink","ad-kerberos","huawei","huawei:mobile","honor","xiaomi","xiaomi:mobile","aws","amazon","amazon:mobile","douyin:mobile","kuaishou:mobile","line:mobile","oppo:mobile","wechatwork:qrconnect:of:authing:agency","sdbz"],"example":"ad"},"identifier":{"type":"string","description":"身份源连接标识","example":"60b49eb83fd80adb96f26e68"},"loginOnly":{"type":"boolean","description":"是否只支持登录","example":false},"logo":{"type":"string","description":"身份源图标","example":"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png"},"displayName":{"type":"string","description":"连接在登录页的显示名称","example":"登录页"},"fields":{"type":"object","description":"连接的自定义配置信息","example":{"clientId":"身份源上的 clientId","clientSecret":"身份源上的 clientSecret"}},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["extIdpId","type","identifier","displayName","fields"]},"ExtIdpConnDetail":{"type":"object","properties":{"id":{"type":"string","description":"身份源连接 id","example":"60b49eb83fd80adb96f26e68"},"type":{"type":"string","description":"身份源连接类型","enum":["oidc","oauth","saml","ldap","ad","cas","azure-ad","alipay","facebook","facebook:mobile","twitter","google:mobile","google","wechat:pc","wechat:mobile","wechat:webpage-authorization","wechatmp-qrcode","wechat:miniprogram:default","wechat:miniprogram:qrconnect","wechat:miniprogram:app-launch","github","github:mobile","qq","qq:mobile","wechatwork:corp:qrconnect","wechatwork:agency:qrconnect","wechatwork:service-provider:qrconnect","wechatwork:mobile","wechatwork:agency:mobile","dingtalk","dingtalk:mobile","dingtalk:provider","weibo","weibo:mobile","apple","apple:web","baidu","baidu:mobile","lark-internal","lark-public","lark-block","gitlab","gitlab:mobile","linkedin","linkedin:mobile","slack","slack:mobile","yidun","qingcloud","gitee","gitee:mobile","instagram","welink","ad-kerberos","huawei","huawei:mobile","honor","xiaomi","xiaomi:mobile","aws","amazon","amazon:mobile","douyin:mobile","kuaishou:mobile","line:mobile","oppo:mobile","wechatwork:qrconnect:of:authing:agency","sdbz"],"example":"default"},"extIdpId":{"type":"string","description":"身份源 ID","example":"6318061be13c0ce6a64093e5"},"logo":{"type":"string","description":"身份源连接图标","example":"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png"},"identifier":{"type":"string","description":"身份源连接标识","example":"60b49eb83fd80adb96f26e68"},"displayName":{"type":"string","description":"身份源连接在登录页的显示名称","example":"登录页"},"loginOnly":{"type":"boolean","description":"是否只支持登录","example":true},"associationMode":{"type":"string","description":"账号关联模式","enum":["none","field","challenge"],"example":"challenge"},"challengeBindingMethods":{"description":"账号绑定方式","example":["email-password"],"type":"array","items":{"type":"string"}}},"required":["id","type","extIdpId","logo","loginOnly","associationMode","challengeBindingMethods"]},"ExtIdpConnDetailSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ExtIdpConnDetail"}]}},"required":["statusCode","message","data"]},"UpdateExtIdpConnDto":{"type":"object","properties":{"id":{"type":"string","description":"身份源连接 ID","example":"60b49eb83fd80adb96f26e68"},"displayName":{"type":"string","description":"身份源连接显示名称","example":"exampleName"},"fields":{"type":"object","description":"身份源连接自定义参数（增量修改）","example":{"clientId":"clientId"}},"logo":{"type":"string","description":"身份源连接的图标","example":"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png"},"loginOnly":{"type":"boolean","description":"是否只支持登录","example":false},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["id","displayName","fields"]},"DeleteExtIdpConnDto":{"type":"object","properties":{"id":{"type":"string","description":"身份源连接 ID","example":"60b49eb83fd80adb96f26e68"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["id"]},"ChangeExtIdpConnStateDto":{"type":"object","properties":{"id":{"type":"string","description":"身份源连接 ID","example":"60b49eb83fd80adb96f26e68"},"enabled":{"type":"boolean","description":"是否开启身份源连接","example":false},"appId":{"type":"string","description":"应用 ID","example":"60b49eb83fd80adb96f26e68"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"},"appIds":{"description":"应用 ID 列表","type":"array","items":{"type":"string"}}},"required":["id","enabled","appId"]},"ChangeExtIdpAssociationStateDto":{"type":"object","properties":{"id":{"type":"string","description":"身份源连接 ID","example":"60b49eb83fd80adb96f26e68"},"association":{"type":"boolean","description":"是否关联身份源","example":false},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["id","association"]},"CustomFieldI18n":{"type":"object","properties":{"label":{"description":"支持多语言的字段","example":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"},"zh-TW":{"enabled":false,"value":"繁體中文"},"ja-JP":{"enabled":false,"value":"日本語"}},"allOf":[{"$ref":"#/components/schemas/LangObject"}]}},"required":["label"]},"CustomFieldSelectOption":{"type":"object","properties":{"value":{"type":"string","description":"枚举值 value","example":"hust"},"label":{"type":"string","description":"枚举值 label","example":"华中科技大学"}},"required":["value","label"]},"CustomFieldDto":{"type":"object","properties":{"targetType":{"type":"string","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"createdAt":{"format":"date-time","type":"string","description":"创建时间，只针对自定义字段有效，内置字段没有创建时间。","example":"2022-03-17T05:23:01.567Z"},"dataType":{"type":"string","description":"数据类型，**设置之后将不能进行修改**。\n- `STRING`: 字符串类型\n- `NUMBER`: 数字类型\n- `DATETIME`: 日期类型\n- `BOOLEAN`: 布尔类型\n- `ENUM`: 枚举值类型\n    ","example":"ENUM","enum":["STRING","NUMBER","DATETIME","BOOLEAN","ENUM"]},"key":{"type":"string","description":"字段 key，不能和内置字段的 key 冲突，**设置之后将不能进行修改**。","example":"school"},"label":{"type":"string","description":"显示名称","example":"学校"},"description":{"type":"string","description":"详细描述信息","example":"学校"},"encrypted":{"type":"boolean","description":"是否加密存储。开启后，该字段的**新增数据**将被加密，此参数一旦设置不可更改。","example":false,"default":false},"isUnique":{"type":"boolean","description":"是否为唯一字段，开启之后，当前字段上报的值将进行唯一校验。此参数只针对数据类型为字符串和数字的字段有效。","example":false,"default":false},"userEditable":{"type":"boolean","description":"用户是否可编辑，如果是手机号、邮箱等特殊字段，用户不能直接修改，需要先通过验证码等方式进行验证。","example":false,"default":false},"visibleInAdminConsole":{"type":"boolean","description":"是否需要在 Authing 控制台中进行显示：\n- 如果是用户自定义字段，控制是否在用户详情展示；\n- 如果是部门自定义字段，控制是否在部门详情中展示；\n- 如果是角色扩展字段，控制是否在角色详情中展示。\n    ","example":true,"default":true},"visibleInUserCenter":{"type":"boolean","description":"是否在用户个人中心展示（此参数不控制 API 接口是否返回）。","example":true,"default":true},"i18n":{"description":"多语言显示名称","example":{"label":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"},"zh-TW":{"enabled":false,"value":"繁體中文"}}},"allOf":[{"$ref":"#/components/schemas/CustomFieldI18n"}]},"options":{"description":"枚举值类型选择项","example":[{"value":"pku","label":"北京大学"}],"type":"array","items":{"$ref":"#/components/schemas/CustomFieldSelectOption"}}},"required":["targetType","dataType","key","label","isUnique","visibleInAdminConsole"]},"CustomFieldListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/CustomFieldDto"}}},"required":["statusCode","message","data"]},"CountCustomFieldsDto":{"type":"object","properties":{"all":{"type":"number","description":"记录总数","example":100},"userVisible":{"type":"number","description":"计数","example":0},"adminVisible":{"type":"number","description":"计数","example":0}},"required":["all","userVisible","adminVisible"]},"ListCustomFieldsDto":{"type":"object","properties":{"count":{"description":"分页计数","example":{"all":18,"userVisible":1,"adminVisible":1},"allOf":[{"$ref":"#/components/schemas/CountCustomFieldsDto"}]},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/CustomFieldDto"}}},"required":["count","list"]},"ListCistomFieldsResDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ListCustomFieldsDto"}]}},"required":["statusCode","message","data"]},"SetUserBaseFieldDto":{"type":"object","properties":{"key":{"type":"string","description":"字段 key，不能和内置字段的 key 冲突，**设置之后将不能进行修改**。","example":"school"},"label":{"type":"string","description":"显示名称","example":"学校"},"description":{"type":"string","description":"详细描述信息","example":"学校"},"userEditable":{"type":"boolean","description":"用户是否可编辑","example":false},"visibleInAdminConsole":{"type":"boolean","description":"是否需要在 Authing 控制台中进行显示：\n- 如果是用户自定义字段，控制是否在用户详情展示；\n- 如果是部门自定义字段，控制是否在部门详情中展示；\n- 如果是角色扩展字段，控制是否在角色详情中展示。\n    ","example":true},"visibleInUserCenter":{"type":"boolean","description":"是否在用户个人中心展示（此参数不控制 API 接口是否返回）。","example":true},"i18n":{"description":"多语言显示名称","example":{"label":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"},"zh-TW":{"enabled":false,"value":"繁體中文"}}},"allOf":[{"$ref":"#/components/schemas/CustomFieldI18n"}]}},"required":["key"]},"SetUserBaseFieldsReqDto":{"type":"object","properties":{"list":{"description":"自定义字段列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/SetUserBaseFieldDto"}}},"required":["list"]},"SetCustomFieldDto":{"type":"object","properties":{"targetType":{"type":"string","description":"主体类型，目前支持用户、角色、分组和部门","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"key":{"type":"string","description":"字段 key，不能和内置字段的 key 冲突，**设置之后将不能进行修改**。","example":"school"},"dataType":{"type":"string","description":"数据类型，**设置之后将不能进行修改**。\n- `STRING`: 字符串类型\n- `NUMBER`: 数字类型\n- `DATETIME`: 日期类型\n- `BOOLEAN`: 布尔类型\n- `ENUM`: 枚举值类型\n    ","example":"ENUM","enum":["STRING","NUMBER","DATETIME","BOOLEAN","ENUM"]},"label":{"type":"string","description":"显示名称","example":"学校"},"description":{"type":"string","description":"详细描述信息","example":"学校"},"encrypted":{"type":"boolean","description":"是否加密存储。开启后，该字段的**新增数据**将被加密，此参数一旦设置不可更改。","example":false},"isUnique":{"type":"boolean","description":"是否为唯一字段，开启之后，当前字段上报的值将进行唯一校验。此参数只针对","example":false},"userEditable":{"type":"boolean","description":"用户是否可编辑","example":false},"visibleInAdminConsole":{"type":"boolean","description":"是否需要在 Authing 控制台中进行显示：\n- 如果是用户自定义字段，控制是否在用户详情展示；\n- 如果是部门自定义字段，控制是否在部门详情中展示；\n- 如果是角色扩展字段，控制是否在角色详情中展示。\n    ","example":true},"visibleInUserCenter":{"type":"boolean","description":"是否在用户个人中心展示（此参数不控制 API 接口是否返回）。","example":true},"validateRules":{"type":"object","description":"校验规则","example":[{"type":"UNIQUE","content":"","error":"已存在当前"}]},"appIds":{"description":"App Id 列表","example":["appid1"],"type":"array","items":{"type":"string"}},"desensitization":{"type":"boolean","description":"脱敏","example":true},"options":{"description":"枚举值类型选择项","example":[{"value":"pku","label":"北京大学"}],"type":"array","items":{"$ref":"#/components/schemas/CustomFieldSelectOption"}},"i18n":{"description":"多语言显示名称","example":{"label":{"zh-CN":{"enabled":false,"value":"中文"},"en-US":{"enabled":false,"value":"English"},"zh-TW":{"enabled":false,"value":"繁體中文"}}},"allOf":[{"$ref":"#/components/schemas/CustomFieldI18n"}]}},"required":["targetType","key"]},"SetCustomFieldsReqDto":{"type":"object","properties":{"list":{"description":"自定义字段列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/SetCustomFieldDto"}},"tenantId":{"type":"string","description":"租户 ID","example":"642c1df417c2d8a80d744c1d"}},"required":["list"]},"DeleteCustomFieldDto":{"type":"object","properties":{"targetType":{"type":"string","description":"主体类型，目前支持用户、角色、分组和部门","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"key":{"type":"string","description":"字段 key，不能和内置字段的 key 冲突，**设置之后将不能进行修改**。","example":"school"}},"required":["targetType","key"]},"DeleteCustomFieldsReqDto":{"type":"object","properties":{"list":{"description":"自定义字段列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/DeleteCustomFieldDto"}},"tenantId":{"type":"string","description":"租户 ID","example":"xxxx"}},"required":["list","tenantId"]},"SetCustomDataDto":{"type":"object","properties":{"tenantId":{"type":"string","description":"租户 ID","example":"642c1df417c2d8a80d744c1d"},"key":{"type":"string","description":"字段 key，不能和内置字段的 key 冲突","example":"school"},"value":{"type":"string","description":"自定义数据，可以为任意类型，但是必须和创建时定义的自定义字段类型匹配，否则将设置失败","example":"pku"}},"required":["key","value"]},"SetCustomDataReqDto":{"type":"object","properties":{"tenantId":{"type":"string","description":"租户 ID","example":"642c1df417c2d8a80d744c1d"},"targetType":{"type":"string","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"targetIdentifier":{"type":"string","description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","example":"userId1"},"namespace":{"type":"string","description":"所属权限分组的 code，当 target_type 为角色的时候需要填写，否则可以忽略","example":"default"},"list":{"description":"自定义数据列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/SetCustomDataDto"}}},"required":["targetType","targetIdentifier","list"]},"GetCustomDataRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"type":"object","description":"具体的自定义数据值","example":{"age":18,"school":"pku"}}},"required":["statusCode","message","data"]},"ResourceAction":{"type":"object","properties":{"name":{"type":"string","description":"资源操作名称","example":"ecs:Start"},"description":{"type":"string","description":"资源操作描述","example":"ecs:Start"}},"required":["name","description"]},"CreateResourceDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"description":{"type":"string","description":"资源描述","example":"服务器"},"name":{"type":"string","description":"资源名称","example":"服务器"},"type":{"type":"string","description":"资源类型，如数据、API、按钮、菜单","enum":["DATA","API","MENU","BUTTON","UI"],"example":"API"},"actions":{"description":"资源定义的操作类型","minItems":0,"maxItems":100,"example":[{"name":"ecs:Start","description":"启动 ECS 服务器"},{"name":"ecs:Stop","description":"停止 ECS 服务器"}],"type":"array","items":{"$ref":"#/components/schemas/ResourceAction"}},"apiIdentifier":{"type":"string","description":"API 资源的 URL 标识","example":"https://my-awesome-api.com/api"},"namespace":{"type":"string","description":"所属权限分组(权限空间)的 Code","example":"default"}},"required":["code","type"]},"ResourceDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"description":{"type":"string","description":"资源描述","example":"服务器"},"name":{"type":"string","description":"资源名称","example":"服务器"},"type":{"type":"string","description":"资源类型，如数据、API、按钮、菜单","enum":["DATA","API","MENU","BUTTON","UI"],"example":"API"},"actions":{"description":"资源定义的操作类型","minItems":0,"maxItems":100,"example":[{"name":"ecs:Start","description":"启动 ECS 服务器"},{"name":"ecs:Stop","description":"停止 ECS 服务器"}],"type":"array","items":{"$ref":"#/components/schemas/ResourceAction"}},"apiIdentifier":{"type":"string","description":"API 资源的 URL 标识","example":"https://my-awesome-api.com/api"},"namespace":{"type":"string","description":"所属权限分组(权限空间)的 Code","example":"default"},"linkedToTenant":{"type":"boolean","description":"租户应用是否关联自建应用资源","example":false}},"required":["code","type"]},"ResourceRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"资源详情","allOf":[{"$ref":"#/components/schemas/ResourceDto"}]}},"required":["statusCode","message","data"]},"CreateResourceBatchItemDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"description":{"type":"string","description":"资源描述","example":"服务器"},"name":{"type":"string","description":"资源名称","example":"服务器"},"type":{"type":"string","description":"资源类型，如数据、API、按钮、菜单","enum":["DATA","API","MENU","BUTTON","UI"],"example":"API"},"actions":{"description":"资源定义的操作类型","minItems":0,"maxItems":100,"example":[{"name":"ecs:Start","description":"启动 ECS 服务器"},{"name":"ecs:Stop","description":"停止 ECS 服务器"}],"type":"array","items":{"$ref":"#/components/schemas/ResourceAction"}},"apiIdentifier":{"type":"string","description":"API 资源的 URL 标识","example":"https://my-awesome-api.com/api"}},"required":["code","type"]},"CreateResourcesBatchDto":{"type":"object","properties":{"namespace":{"type":"string","description":"所属权限分组(权限空间)的 Code","example":"default"},"list":{"description":"资源列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/CreateResourceBatchItemDto"}}},"required":["list"]},"ResourceListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"资源详情列表","type":"array","items":{"$ref":"#/components/schemas/ResourceDto"}}},"required":["statusCode","message","data"]},"CommonResourceDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"description":{"type":"string","description":"资源描述","example":"服务器"},"name":{"type":"string","description":"资源名称","example":"服务器"},"type":{"type":"string","description":"资源类型，如数据、API、按钮、菜单","enum":["DATA","API","MENU","BUTTON","UI"],"example":"API"},"actions":{"description":"资源定义的操作类型","minItems":0,"maxItems":100,"example":[{"name":"ecs:Start","description":"启动 ECS 服务器"},{"name":"ecs:Stop","description":"停止 ECS 服务器"}],"type":"array","items":{"$ref":"#/components/schemas/ResourceAction"}},"apiIdentifier":{"type":"string","description":"API 资源的 URL 标识","example":"https://my-awesome-api.com/api"},"namespace":{"type":"string","description":"所属权限分组(权限空间)的 Code","example":"default"},"linkedToTenant":{"type":"boolean","description":"租户应用是否关联自建应用资源","example":false},"id":{"type":"string","description":"资源id","example":"62b40xxxxxxxxxxxd16f57c7"},"namespaceId":{"type":"number","description":"权限应用id","example":"1"},"namespaceName":{"type":"string","description":"权限应用名称","example":"权限应用一"},"userPoolId":{"type":"string","description":"UserPool ID","example":"62b40xxxxxxxxxxxd16f57c7"},"createdAt":{"type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"}},"required":["code","type","id","namespaceId","namespaceName","userPoolId","createdAt","updatedAt"]},"CommonResourcePagingDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据","type":"array","items":{"$ref":"#/components/schemas/CommonResourceDto"}}},"required":["statusCode","message","totalCount","list"]},"CommonResourcePaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CommonResourcePagingDto"}]}},"required":["statusCode","message","data"]},"ResourcePagingDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据","type":"array","items":{"$ref":"#/components/schemas/ResourceDto"}}},"required":["statusCode","message","totalCount","list"]},"ResourcePaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ResourcePagingDto"}]}},"required":["statusCode","message","data"]},"UpdateResourceDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"description":{"type":"string","description":"资源描述","example":"服务器"},"name":{"type":"string","description":"资源名称","example":"服务器"},"actions":{"description":"资源定义的操作类型","minItems":0,"maxItems":100,"example":[{"name":"ecs:Start","description":"启动 ECS 服务器"},{"name":"ecs:Stop","description":"停止 ECS 服务器"}],"type":"array","items":{"$ref":"#/components/schemas/ResourceAction"}},"apiIdentifier":{"type":"string","description":"API 资源的 URL 标识","example":"https://my-awesome-api.com/api"},"namespace":{"type":"string","description":"所属权限分组(权限空间)的 Code","example":"default"},"type":{"type":"string","description":"资源类型，如数据、API、按钮、菜单","enum":["DATA","API","MENU","BUTTON","UI"],"example":"API"}},"required":["code"]},"DeleteResourceDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"namespace":{"type":"string","description":"所属权限分组(权限空间)的 Code","example":"default"}},"required":["code"]},"DeleteResourcesBatchDto":{"type":"object","properties":{"namespace":{"type":"string","description":"所属权限分组(权限空间)的 Code","example":"default"},"codeList":{"description":"资源 Code 列表","minItems":1,"maxItems":50,"example":["code1","code2"],"type":"array","items":{"type":"string"}},"ids":{"description":"资源 Id 列表","example":["6250f12d5dxxxx9bcfcf784b","6250f12d5dxxxx9bcfcf784b"],"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}}}},"DeleteCommonResourcesBatchDto":{"type":"object","properties":{"ids":{"description":"资源 id 列表","example":["6250f12d5dxxxx9bcfcf784b","6250f12d5dxxxx9bcfcf784b"],"type":"array","items":{"type":"string"}}},"required":["ids"]},"AssociateTenantResourceDto":{"type":"object","properties":{"code":{"type":"string","description":"资源 Code"},"association":{"type":"boolean","description":"是否关联应用资源","example":false},"appId":{"type":"string","description":"应用 ID","example":"60b49eb83fd80adb96f26e68"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["code","association","appId"]},"CreateNamespaceDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组唯一标志符","example":"my-namespace"},"name":{"type":"string","description":"权限分组名称","example":"我的权限分组"},"description":{"type":"string","description":"权限分组描述信息","example":"我的权限分组描述"}},"required":["code"]},"NamespaceDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组唯一标志符","example":"my-namespace"},"name":{"type":"string","description":"权限分组名称","example":"我的权限分组"},"description":{"type":"string","description":"权限分组描述信息","example":"我的权限分组描述"}},"required":["code"]},"NamespaceRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"权限分组详情","allOf":[{"$ref":"#/components/schemas/NamespaceDto"}]}},"required":["statusCode","message","data"]},"CreateNamespacesBatchItemDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组唯一标志符","example":"my-namespace"},"name":{"type":"string","description":"权限分组名称","example":"我的权限分组"},"description":{"type":"string","description":"权限分组描述信息","example":"我的权限分组描述"}},"required":["code"]},"CreateNamespacesBatchDto":{"type":"object","properties":{"list":{"description":"权限分组列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/CreateNamespacesBatchItemDto"}}},"required":["list"]},"NamespaceListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"权限分组列表","type":"array","items":{"$ref":"#/components/schemas/NamespaceDto"}}},"required":["statusCode","message","data"]},"UpdateNamespaceDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组唯一标志符","example":"my-namespace"},"description":{"type":"string","description":"权限分组描述信息","example":"我的权限分组描述"},"name":{"type":"string","description":"权限分组名称","example":"我的权限分组"},"newCode":{"type":"string","description":"权限分组新的唯一标志符","example":"my-new-namespace"}},"required":["code"]},"UpdateNamespaceRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UpdateNamespaceDto"}]}},"required":["statusCode","message","data"]},"DeleteNamespaceDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组唯一标志符","example":"my-namespace"}},"required":["code"]},"DeleteNamespacesBatchDto":{"type":"object","properties":{"codeList":{"description":"权限分组 code 列表","minItems":1,"maxItems":10,"example":["code1","code2"],"type":"array","items":{"type":"string"}}},"required":["codeList"]},"NamespacesListRespDto":{"type":"object","properties":{"name":{"type":"string","description":"权限分组 名称","example":"系统权限组"},"code":{"type":"string","description":"权限分组 Code","example":"system"},"description":{"type":"string","description":"权限分组描述信息","example":"示例权限分组描述"},"status":{"type":"number","description":"权限分组状态：0 -> 关闭、1 -> 开启","example":1}},"required":["name","code"]},"NamespaceListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/NamespacesListRespDto"}}},"required":["totalCount","list"]},"NamespaceListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/NamespaceListPagingDto"}]}},"required":["statusCode","message","data"]},"NamespaceRolesListRespDto":{"type":"object","properties":{"id":{"type":"string","description":"角色 ID","example":"60b49exxxxxxxxxx26e68"},"name":{"type":"string","description":"角色名称","example":"角色名称"},"code":{"type":"string","description":"角色 Code","example":"role1"},"description":{"type":"string","description":"角色 描述信息","example":"这是一个示例角色的描述"},"namespace":{"type":"string","description":"权限分组 Code","example":"system"},"updatedAt":{"type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"}},"required":["id","name","code","namespace","updatedAt"]},"NamespaceRolesListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/NamespaceRolesListRespDto"}]}},"required":["statusCode","message","data"]},"ResourceItemDto":{"type":"object","properties":{"code":{"type":"string","description":"资源唯一标志符","example":"ecs"},"actions":{"description":"资源定义的操作类型","minItems":0,"maxItems":50,"example":["ecs:Stop","ecs:Start"],"type":"array","items":{"type":"string"}},"resourceType":{"type":"string","description":"资源类型，如数据、API、按钮、菜单","enum":["DATA","API","MENU","BUTTON","UI"],"example":"DATA"}},"required":["code","actions","resourceType"]},"AuthorizeResourceItem":{"type":"object","properties":{"targetType":{"type":"string","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"targetIdentifiers":{"description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","minItems":0,"maxItems":100,"example":["userId1","userId2"],"type":"array","items":{"type":"string"}},"resources":{"description":"授权的资源列表","type":"array","items":{"$ref":"#/components/schemas/ResourceItemDto"}}},"required":["targetType","targetIdentifiers","resources"]},"AuthorizeResourcesDto":{"type":"object","properties":{"namespace":{"type":"string","description":"所属权限分组(权限空间)的 Code","example":"default"},"list":{"description":"授权资源列表","minItems":1,"maxItems":10,"type":"array","items":{"$ref":"#/components/schemas/AuthorizeResourceItem"}}},"required":["list"]},"IsActionAllowedDto":{"type":"object","properties":{"namespace":{"type":"string","description":"所属权限分组(权限空间)的 Code","example":"default"},"userId":{"type":"string","description":"用户 ID","example":"userId1"},"action":{"type":"string","description":"资源对应的操作","example":"ecs:Start"},"resource":{"type":"string","description":"资源标识符","example":"ecs:1"}},"required":["userId","action","resource"]},"IsActionAllowedDataDto":{"type":"object","properties":{"allowed":{"type":"boolean","description":"是否允许","example":true}},"required":["allowed"]},"IsActionAllowedRespDtp":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/IsActionAllowedDataDto"}]}},"required":["statusCode","message","data"]},"GetResourceAuthorizedTargetsDto":{"type":"object","properties":{"resource":{"type":"string","description":"资源","example":"ecs:1"},"namespace":{"type":"string","description":"权限分组","default":"default"},"targetType":{"type":"string","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","example":"USER","enum":["USER","ROLE","GROUP","DEPARTMENT"]},"page":{"type":"number","description":"当前页数，从 1 开始","default":1,"example":1},"limit":{"type":"number","description":"每页数目，最大不能超过 50，默认为 10","default":10,"example":10}},"required":["resource"]},"ResourceAuthorizedTargetDto":{"type":"object","properties":{"targetType":{"type":"string","description":"主体类型","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"targetIdentifier":{"type":"string","description":"主体唯一标志符","example":"code"},"actions":{"description":"操作列表","example":["ecs:Start","ecs:Stop"],"type":"array","items":{"type":"string"}}},"required":["targetType","targetIdentifier","actions"]},"GetResourceAuthorizedTargetDataDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"总数","example":10},"list":{"description":"元素列表","type":"array","items":{"$ref":"#/components/schemas/ResourceAuthorizedTargetDto"}}},"required":["totalCount","list"]},"GetResourceAuthorizedTargetRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetResourceAuthorizedTargetDataDto"}]}},"required":["statusCode","message","data"]},"CreatePipelineFunctionDto":{"type":"object","properties":{"funcName":{"type":"string","description":"函数名称","example":"每周日凌晨 3-6 点系统维护禁止注册/登录"},"funcDescription":{"type":"string","description":"函数描述","example":"每周日凌晨 3-6 点系统维护禁止注册/登录。"},"scene":{"type":"string","description":"函数的触发场景：\n- `PRE_REGISTER`: 注册前\n- `POST_REGISTER`: 注册后\n- `PRE_AUTHENTICATION`: 认证前\n- `POST_AUTHENTICATION`: 认证后\n- `PRE_OIDC_ID_TOKEN_ISSUED`: OIDC ID Token 签发前\n- `PRE_OIDC_ACCESS_TOKEN_ISSUED`: OIDC Access Token 签发前\n- `PRE_COMPLETE_USER_INFO`: 补全用户信息前\n    ","enum":["PRE_REGISTER","POST_REGISTER","PRE_AUTHENTICATION","POST_AUTHENTICATION","PRE_OIDC_ID_TOKEN_ISSUED","PRE_OIDC_ACCESS_TOKEN_ISSUED","PRE_COMPLETE_USER_INFO","PRE_MFA_VERIFY","POST_MFA_VERIFY"],"example":"PRE_REGISTER"},"sourceCode":{"type":"string","description":"函数源代码","example":"async function pipe(user, context, callback) {\n  const date = new Date();\n  const d = date.getDay();\n  const n = date.getHours();\n  // 每周日凌晨 3-6 点禁止注册\n  if (d === 0 && (3 <= n && n <= 6)) {\n    return callback(new Error('系统维护中，暂时停止注册！'));\n  }\n  callback(null, user, context)\n}"},"isAsynchronous":{"type":"boolean","description":"是否异步执行。设置为异步执行的函数不会阻塞整个流程的执行，适用于异步通知的场景，比如飞书群通知、钉钉群通知等。","example":false,"default":false},"timeout":{"type":"number","description":"函数运行超时时间，要求必须为整数，最短为 1 秒，最长为 60 秒，默认为 3 秒。","example":3,"default":3},"terminateOnTimeout":{"type":"boolean","description":"如果函数运行超时，是否终止整个流程，默认为否。","example":false},"enabled":{"type":"boolean","description":"是否启用此 Pipeline","example":false}},"required":["funcName","scene","sourceCode"]},"PipelineFunctionDto":{"type":"object","properties":{"funcId":{"type":"string","description":"函数 ID","example":"62ce9135dxxxxb83e373f5d6"},"funcName":{"type":"string","description":"函数名称","example":"每周日凌晨 3-6 点系统维护禁止注册/登录"},"funcDescription":{"type":"string","description":"函数描述","example":"每周日凌晨 3-6 点系统维护禁止注册/登录。"},"scene":{"type":"string","description":"函数的触发场景：\n- `PRE_REGISTER`: 注册前\n- `POST_REGISTER`: 注册后\n- `PRE_AUTHENTICATION`: 认证前\n- `POST_AUTHENTICATION`: 认证后\n- `PRE_OIDC_ID_TOKEN_ISSUED`: OIDC ID Token 签发前\n- `PRE_OIDC_ACCESS_TOKEN_ISSUED`: OIDC Access Token 签发前\n- `PRE_COMPLETE_USER_INFO`: 补全用户信息前\n    ","enum":["PRE_REGISTER","POST_REGISTER","PRE_AUTHENTICATION","POST_AUTHENTICATION","PRE_OIDC_ID_TOKEN_ISSUED","PRE_OIDC_ACCESS_TOKEN_ISSUED","PRE_COMPLETE_USER_INFO","PRE_MFA_VERIFY","POST_MFA_VERIFY"],"example":"PRE_REGISTER"},"createdAt":{"format":"date-time","type":"string","description":"函数创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"函数修改时间","example":"2022-07-03T02:20:30.000Z"},"isAsynchronous":{"type":"boolean","description":"是否异步执行。设置为异步执行的函数不会阻塞整个流程的执行，适用于异步通知的场景，比如飞书群通知、钉钉群通知等。","example":false},"timeout":{"type":"number","description":"函数运行超时时间，最短为 1 秒，最长为 60 秒，默认为 3 秒。","example":3,"default":3},"terminateOnTimeout":{"type":"boolean","description":"如果函数运行超时，是否终止整个流程，默认为否。","example":false},"sourceCode":{"type":"string","description":"函数源代码","example":"async function pipe(user, context, callback) {\n  const date = new Date();\n  const d = date.getDay();\n  const n = date.getHours();\n  // 每周日凌晨 3-6 点禁止注册\n  if (d === 0 && (3 <= n && n <= 6)) {\n    return callback(new Error('系统维护中，暂时停止注册！'));\n  }\n  callback(null, user, context)\n}"},"status":{"type":"string","description":"函数当前状态：\n- `uploading`: 上传中\n- `success`: 上传成功\n- `failed`: 上传失败    \n","enum":["uploading","success","failed"],"example":"success"},"uploadErrMsg":{"type":"string","description":"上传失败的错误提示"},"enabled":{"type":"boolean","description":"此 Pipeline 是否被启用","example":false}},"required":["funcId","funcName","scene","createdAt","updatedAt","isAsynchronous","timeout","terminateOnTimeout","sourceCode","status","enabled"]},"PipelineFunctionSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PipelineFunctionDto"}]}},"required":["statusCode","message","data"]},"ReUploadPipelineFunctionDto":{"type":"object","properties":{"funcId":{"type":"string","description":"Pipeline 函数 ID","example":"62ce9135dxxxxb83e373f5d6"}},"required":["funcId"]},"UpdatePipelineFunctionDto":{"type":"object","properties":{"funcId":{"type":"string","description":"Pipeline 函数 ID","example":"62ce9135dxxxxb83e373f5d6"},"funcName":{"type":"string","description":"函数名称","example":"每周日凌晨 3-6 点系统维护禁止注册/登录"},"funcDescription":{"type":"string","description":"函数描述","example":"每周日凌晨 3-6 点系统维护禁止注册/登录。"},"sourceCode":{"type":"string","description":"函数源代码。如果修改之后，函数会重新上传。","example":"async function pipe(user, context, callback) {\n  const date = new Date();\n  const d = date.getDay();\n  const n = date.getHours();\n  // 每周日凌晨 3-6 点禁止注册\n  if (d === 0 && (3 <= n && n <= 6)) {\n    return callback(new Error('系统维护中，暂时停止注册！'));\n  }\n  callback(null, user, context)\n}"},"isAsynchronous":{"type":"boolean","description":"是否异步执行。设置为异步执行的函数不会阻塞整个流程的执行，适用于异步通知的场景，比如飞书群通知、钉钉群通知等。","example":false,"default":false},"timeout":{"type":"number","description":"函数运行超时时间，最短为 1 秒，最长为 60 秒，默认为 3 秒。","example":3,"default":3},"terminateOnTimeout":{"type":"boolean","description":"如果函数运行超时，是否终止整个流程，默认为否。","example":false},"enabled":{"type":"boolean","description":"是否启用此 Pipeline","example":false}},"required":["funcId"]},"UpdatePipelineOrderDto":{"type":"object","properties":{"scene":{"type":"string","description":"函数的触发场景：\n- `PRE_REGISTER`: 注册前\n- `POST_REGISTER`: 注册后\n- `PRE_AUTHENTICATION`: 认证前\n- `POST_AUTHENTICATION`: 认证后\n- `PRE_OIDC_ID_TOKEN_ISSUED`: OIDC ID Token 签发前\n- `PRE_OIDC_ACCESS_TOKEN_ISSUED`: OIDC Access Token 签发前\n- `PRE_COMPLETE_USER_INFO`: 补全用户信息前\n    ","enum":["PRE_REGISTER","POST_REGISTER","PRE_AUTHENTICATION","POST_AUTHENTICATION","PRE_OIDC_ID_TOKEN_ISSUED","PRE_OIDC_ACCESS_TOKEN_ISSUED","PRE_COMPLETE_USER_INFO","PRE_MFA_VERIFY","POST_MFA_VERIFY"],"example":"PRE_REGISTER"},"order":{"description":"新的排序方式，按照函数 ID 的先后顺序进行排列。","example":[],"type":"array","items":{"type":"string"}}},"required":["scene","order"]},"DeletePipelineFunctionDto":{"type":"object","properties":{"funcId":{"type":"string","description":"Pipeline 函数 ID","example":"62ce9135dxxxxb83e373f5d6"}},"required":["funcId"]},"PipelineFunctionPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/PipelineFunctionDto"}}},"required":["totalCount","list"]},"PipelineFunctionPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PipelineFunctionPagingDto"}]}},"required":["statusCode","message","data"]},"CreateWebhookDto":{"type":"object","properties":{"name":{"type":"string","description":"Webhook 名称","example":"用户创建事件"},"url":{"type":"string","description":"Webhook 回调地址","example":"https://example.com/callback"},"events":{"type":"array","description":"用户真实名称，不具备唯一性。 示例值: 张三","example":["user:created"],"items":{"type":"string","enum":["test","register","login","mfa:verified","kick","user:created","user:password-changed","user:updated","user:email-verified","user:archived","user:unarchived","user:blocked","user:unblocked","user:deleted","user:register-whitelist-added","user:register-whitelist-deleted","user:udv-changed","user:link-account","user:password-update-remind","user:organization-node-update","permission:revoke","permission:add","resource:created","resource:delete","resource:updated","role:created","role:updated","role:deleted","role:disable","role:assigned","subject:remove","role:unassigned","role:udv-changed","application:mfa:enabled","application:mfa:disabled","group:created","group:updated","group:deleted","group:member-added","group:member-removed","organization:created","organization:imported","organization:deleted","organization:node-added","organization:node-updated","organization:tree-updated","organization:node-deleted","organization:node-moved","organization:member-added","organization:member-removed","organization:udv-changed","privilege-namespace:created","privilege-namespace:updated","privilege-namespace:deleted","user-pool:cooperator-added","user-pool:cooperator-removed","user-pool:secret-refreshed","user-pool:updated","user-pool:udf-added","user-pool:udf-deleted","user-pool:env-added","user-pool:env-deleted","user-pool:env-updated","user-pool:launchpad-app-installed","user-pool:launchpad-app-uninstalled","application:created","application:updated","application:deleted","application:secret-refreshed","data-resource:created","data-resource:updated","data-resource:deleted","data-strategy-permission:revoke","data-strategy-permission:add","unusual-location:login"]}},"contentType":{"type":"string","description":"请求数据格式","enum":["application/json","application/x-www-form-urlencoded"],"example":"application/json"},"enabled":{"type":"boolean","description":"是否启用","example":true},"secret":{"type":"string","description":"请求密钥","example":"xxxxxxxxxxxx"}},"required":["name","url","events","contentType"]},"WebhookDto":{"type":"object","properties":{"webhookId":{"type":"string","description":"Webhook ID","example":"6229ffaxxxxxxxxcade3e3d9"},"createdAt":{"type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"},"name":{"type":"string","description":"Webhook 名称","example":"用户创建事件"},"url":{"type":"string","description":"Webhook 回调地址","example":"https://example.com/callback"},"contentType":{"type":"string","description":"请求数据格式","enum":["application/json","application/x-www-form-urlencoded"],"example":"application/json"},"enabled":{"type":"boolean","description":"是否启用","example":true},"events":{"type":"array","description":"用户真实名称，不具备唯一性。 示例值: 张三","example":["user:created"],"items":{"type":"string","enum":["test","register","login","mfa:verified","kick","user:created","user:password-changed","user:updated","user:email-verified","user:archived","user:unarchived","user:blocked","user:unblocked","user:deleted","user:register-whitelist-added","user:register-whitelist-deleted","user:udv-changed","user:link-account","user:password-update-remind","user:organization-node-update","permission:revoke","permission:add","resource:created","resource:delete","resource:updated","role:created","role:updated","role:deleted","role:disable","role:assigned","subject:remove","role:unassigned","role:udv-changed","application:mfa:enabled","application:mfa:disabled","group:created","group:updated","group:deleted","group:member-added","group:member-removed","organization:created","organization:imported","organization:deleted","organization:node-added","organization:node-updated","organization:tree-updated","organization:node-deleted","organization:node-moved","organization:member-added","organization:member-removed","organization:udv-changed","privilege-namespace:created","privilege-namespace:updated","privilege-namespace:deleted","user-pool:cooperator-added","user-pool:cooperator-removed","user-pool:secret-refreshed","user-pool:updated","user-pool:udf-added","user-pool:udf-deleted","user-pool:env-added","user-pool:env-deleted","user-pool:env-updated","user-pool:launchpad-app-installed","user-pool:launchpad-app-uninstalled","application:created","application:updated","application:deleted","application:secret-refreshed","data-resource:created","data-resource:updated","data-resource:deleted","data-strategy-permission:revoke","data-strategy-permission:add","unusual-location:login"]}},"secret":{"type":"string","description":"请求密钥","example":"xxxxxxxxxxxx"}},"required":["webhookId","createdAt","updatedAt","name","url","contentType","enabled"]},"CreateWebhookRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/WebhookDto"}]}},"required":["statusCode","message","data"]},"GetWebhooksData":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","example":1},"list":{"description":"返回列表","type":"array","items":{"$ref":"#/components/schemas/WebhookDto"}}},"required":["totalCount","list"]},"GetWebhooksRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetWebhooksData"}]}},"required":["statusCode","message","data"]},"UpdateWebhookDto":{"type":"object","properties":{"webhookId":{"type":"string","description":"Webhook ID","example":"6229ffaxxxxxxxxcade3e3d9"},"name":{"type":"string","description":"Webhook 名称","example":"用户创建事件"},"url":{"type":"string","description":"Webhook 回调地址","example":"https://example.com/callback"},"events":{"type":"array","description":"用户真实名称，不具备唯一性。 示例值: 张三","example":["user:created"],"items":{"type":"string","enum":["test","register","login","mfa:verified","kick","user:created","user:password-changed","user:updated","user:email-verified","user:archived","user:unarchived","user:blocked","user:unblocked","user:deleted","user:register-whitelist-added","user:register-whitelist-deleted","user:udv-changed","user:link-account","user:password-update-remind","user:organization-node-update","permission:revoke","permission:add","resource:created","resource:delete","resource:updated","role:created","role:updated","role:deleted","role:disable","role:assigned","subject:remove","role:unassigned","role:udv-changed","application:mfa:enabled","application:mfa:disabled","group:created","group:updated","group:deleted","group:member-added","group:member-removed","organization:created","organization:imported","organization:deleted","organization:node-added","organization:node-updated","organization:tree-updated","organization:node-deleted","organization:node-moved","organization:member-added","organization:member-removed","organization:udv-changed","privilege-namespace:created","privilege-namespace:updated","privilege-namespace:deleted","user-pool:cooperator-added","user-pool:cooperator-removed","user-pool:secret-refreshed","user-pool:updated","user-pool:udf-added","user-pool:udf-deleted","user-pool:env-added","user-pool:env-deleted","user-pool:env-updated","user-pool:launchpad-app-installed","user-pool:launchpad-app-uninstalled","application:created","application:updated","application:deleted","application:secret-refreshed","data-resource:created","data-resource:updated","data-resource:deleted","data-strategy-permission:revoke","data-strategy-permission:add","unusual-location:login"]}},"contentType":{"type":"string","description":"请求数据格式","enum":["application/json","application/x-www-form-urlencoded"],"example":"application/json"},"enabled":{"type":"boolean","description":"是否启用","example":true},"secret":{"type":"string","description":"请求密钥","example":"xxxxxxxxxxxx"}},"required":["webhookId"]},"UpdateWebhooksRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/WebhookDto"}]}},"required":["statusCode","message","data"]},"DeleteWebhookDto":{"type":"object","properties":{"webhookIds":{"description":"webhookId 数组","example":["xxxx"],"type":"array","items":{"type":"string"}}},"required":["webhookIds"]},"DeleteWebhookRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"}},"required":["statusCode","message"]},"ListWebhookLogs":{"type":"object","properties":{"page":{"type":"number","description":"当前页数，从 1 开始","default":1,"example":1},"limit":{"type":"number","description":"每页数目，最大不能超过 50，默认为 10","default":10,"example":10},"webhookId":{"type":"string","description":"Webhook ID","example":"6229ffaxxxxxxxxcade3e3d9"}},"required":["webhookId"]},"WebhookLogDto":{"type":"object","properties":{"webhookId":{"type":"string","description":"Webhook ID","example":"6229ffaxxxxxxxxcade3e3d9"},"eventName":{"type":"string","description":"Webhook 事件名称","example":"user:created"},"requestBody":{"type":"object","description":"Webhook 请求体","example":{"eventName":"test","data":{"description":"A test from authing"}}},"requestHeaders":{"type":"object","description":"Webhook 请求头","example":{"eventName":"test","data":{"description":"A test from authing"}}},"responseStatusCode":{"type":"number","description":"Webhook 响应码","example":200},"responseHeaders":{"type":"object","description":"Webhook 响应头","example":{"Accept":"application/json, text/plain, */*","user-agent":"authing-webhook@2.0","x-authing-token":"a","x-authing-webhook-secret":"a"}},"responseBody":{"type":"object","description":"Webhook 响应体","example":{"success":true}},"timestamp":{"type":"string","description":"时间戳","example":"2022-09-20T08:55:00.188+0800"},"success":{"type":"boolean","description":"是否请求成功","example":true},"errorMessage":{"type":"string","description":"请求失败时返回的错误信息","example":"ERRTIMEOUT"}},"required":["webhookId","eventName","requestBody","requestHeaders","responseStatusCode","responseHeaders","responseBody","timestamp","success"]},"ListWebhookLogsData":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","example":1},"list":{"description":"返回列表","type":"array","items":{"$ref":"#/components/schemas/WebhookLogDto"}}},"required":["totalCount","list"]},"ListWebhookLogsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ListWebhookLogsData"}]}},"required":["statusCode","message","data"]},"TriggerWebhookDto":{"type":"object","properties":{"webhookId":{"type":"string","description":"Webhook ID","example":"6229ffaxxxxxxxxcade3e3d9"},"requestHeaders":{"type":"object","description":"请求头","example":{"eventName":"test","data":{"description":"A test from authing"}}},"requestBody":{"type":"object","description":"请求体","example":{"eventName":"test","data":{"description":"A test from authing"}}}},"required":["webhookId"]},"Any":{"type":"object","properties":{}},"TriggerWebhookData":{"type":"object","properties":{"response":{"description":"原来接口返回的 response 数据","allOf":[{"$ref":"#/components/schemas/Any"}]}},"required":["response"]},"TriggerWebhookRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TriggerWebhookData"}]}},"required":["statusCode","message","data"]},"GetWebhookRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/WebhookDto"}]}},"required":["statusCode","message","data"]},"WebhookCategoryDto":{"type":"object","properties":{"name":{"type":"string","description":"Webhook 类型名称","example":"用户"},"nameEn":{"type":"string","description":"Webhook 类型英文名称","example":"User"},"value":{"type":"string","description":"Webhook 类型","example":"user"}},"required":["name","nameEn","value"]},"WebhookEventDto":{"type":"object","properties":{"name":{"type":"string","description":"Webhook 名称","example":"创建用户"},"nameEn":{"type":"string","description":"Webhook 英文名称","example":"Create User"},"value":{"type":"string","description":"Webhook 事件","example":"user:created"},"category":{"type":"string","description":"Webhook 事件分类","example":"user"}},"required":["name","nameEn","value","category"]},"WebhookEventListData":{"type":"object","properties":{"categories":{"description":"分类列表","type":"array","items":{"$ref":"#/components/schemas/WebhookCategoryDto"}},"events":{"description":"事件列表","type":"array","items":{"$ref":"#/components/schemas/WebhookEventDto"}}},"required":["categories","events"]},"WebhookEventListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/WebhookEventListData"}]}},"required":["statusCode","message","data"]},"ListWebhooksDto":{"type":"object","properties":{"page":{"type":"number","description":"当前页数，从 1 开始","default":1,"example":1},"limit":{"type":"number","description":"每页数目，最大不能超过 50，默认为 10","default":10,"example":10}}},"GetUserActionLogsDto":{"type":"object","properties":{"requestId":{"type":"string","description":"请求 ID","example":"xxx"},"clientIp":{"type":"string","description":"客户端 IP","example":"xxx"},"eventType":{"type":"string","description":"事件类型，用户的一系列操作，比如 login、logout、register、verifyMfa 等","example":"login"},"userId":{"type":"string","description":"用户 ID","example":"xxx"},"appId":{"type":"string","description":"应用 ID","example":"xxx"},"start":{"type":"number","description":"开始时间戳","example":11},"end":{"type":"number","description":"结束时间戳","example":111},"success":{"type":"boolean","description":"请求是否成功","example":true},"pagination":{"description":"分页","allOf":[{"$ref":"#/components/schemas/ListWebhooksDto"}]}}},"ParsedUserAgent":{"type":"object","properties":{"device":{"type":"string","description":"使用的设备类型","example":"Desktop"},"browser":{"type":"string","description":"浏览器名称","example":"Chrome"},"os":{"type":"string","description":"操作系统","example":"Windows"}},"required":["device","browser","os"]},"GeoIpLocation":{"type":"object","properties":{"lon":{"type":"number","description":"经度","example":116.3889},"lat":{"type":"number","description":"纬度","example":39.9288}},"required":["lon","lat"]},"GeoIp":{"type":"object","properties":{"location":{"description":"地理位置","allOf":[{"$ref":"#/components/schemas/GeoIpLocation"}]},"country_name":{"type":"string","description":"Country Name","example":"China"},"country_code2":{"type":"string","description":"Country Code 2","example":"CN"},"country_code3":{"type":"string","description":"Country Code 3","example":"CN"},"region_name":{"type":"string","description":"Region Name","example":"Beijing"},"region_code":{"type":"string","description":"Region Code","example":"BJ"},"city_name":{"type":"string","description":"城市名称","example":"Beijing"},"continent_code":{"type":"string","description":"Continent Code","example":"AS"},"timezone":{"type":"string","description":"时区","example":"Asia/Shanghai"}},"required":["location","country_name","country_code2","country_code3","region_name","region_code","city_name","continent_code","timezone"]},"UserActionLogDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID","example":"xxx"},"userAvatar":{"type":"string","description":"用户头像","example":"https://files.authing.co/authing-console/default-app-logo.png"},"userDisplayName":{"type":"string","description":"用户显示名称，按照以下用户字段顺序进行展示：nickname > username > name > givenName > familyName -> email -> phone -> id","example":"张三"},"userLoginsCount":{"type":"number","description":"用户登录次数","example":3},"appId":{"type":"string","description":"应用 ID","example":"xxx"},"appName":{"type":"string","description":"应用名称","example":"示例应用"},"clientIp":{"type":"string","description":"客户端 IP，可根据登录时的客户端 IP 进行筛选。默认不传获取所有登录 IP 的登录历史。","example":"127.0.0.1"},"eventType":{"type":"string","description":"事件类型：\n- `login`: 登录\n- `logout`: 登出\n- `register`: 注册\n- `verifyMfa`: 验证 MFA\n- `updateUserProfile`: 修改用户信息\n- `updateUserPassword`: 修改密码\n- `updateUserEmail`: 修改邮箱\n- `updateUserPhone`: 修改手机号\n- `bindMfa`: 绑定 MFA\n- `bindEmail`: 绑定邮箱\n- `bindPhone`: 绑定手机号\n- `unbindPhone`: 解绑手机号\n- `unbindEmail`: 解绑邮箱\n- `unbindMFA`: 解绑 MFA\n- `deleteAccount`: 注销账号\n- `verifyFirstLogin`: 首次登录验证 \n    ","enum":["login","logout","register","verifyMfa","updateUserPrefile","updateUserPassword","updateUserEmail","updateUserPhone","bindMfa","bindEmail","bindPhone","unbindPhone","unbindEmail","unbindMFA","refreshUserTokenBySelf","deleteAccount","verifyFirstLogin","securityResourceAccess"],"example":"login"},"eventDetail":{"type":"string","description":"事件详情","example":"登录账户「 test@example.com 」"},"success":{"type":"boolean","description":"是否成功","example":true},"appLoginUrl":{"type":"string","description":"应用登录地址","example":"https://example.authing.cn/login"},"appLogo":{"type":"string","description":"应用 Logo","example":"https://files.authing.co/authing-console/default-app-logo.png"},"userAgent":{"type":"string","description":"User Agent","example":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"},"parsedUserAgent":{"description":"解析过后的 User Agent","allOf":[{"$ref":"#/components/schemas/ParsedUserAgent"}]},"geoip":{"description":"地理位置","allOf":[{"$ref":"#/components/schemas/GeoIp"}]},"timestamp":{"type":"string","description":"时间","example":"2022-09-20T08:55:00.188+0800"},"requestId":{"type":"string","description":"请求 ID","example":"b63b9772-384c-4f2d-981b-01d1feed964d"}},"required":["userId","userAvatar","userDisplayName","userLoginsCount","appId","appName","eventType","success","appLoginUrl","appLogo","userAgent","parsedUserAgent","geoip","timestamp","requestId"]},"UserActionLogRespData":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","example":1},"list":{"description":"返回列表","type":"array","items":{"$ref":"#/components/schemas/UserActionLogDto"}}},"required":["totalCount","list"]},"UserActionLogRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserActionLogRespData"}]}},"required":["statusCode","message","data"]},"GetAdminAuditLogsDto":{"type":"object","properties":{"requestId":{"type":"string","description":"请求 ID","example":"xxx"},"clientIp":{"type":"string","description":"客户端 IP","example":"xxx"},"operationType":{"type":"string","description":"操作类型，例如 create、update、delete、login 等","example":"create"},"resourceType":{"type":"string","description":"资源类型，例如 DATA、API、BUTTON 等","example":"user"},"userId":{"type":"string","description":"管理员用户 ID","example":"xxx"},"success":{"type":"boolean","description":"请求是否成功","example":true},"start":{"type":"number","description":"开始时间戳","example":11},"end":{"type":"number","description":"结束时间戳","example":111},"pagination":{"description":"分页","allOf":[{"$ref":"#/components/schemas/ListWebhooksDto"}]}}},"AdminAuditLogDto":{"type":"object","properties":{"adminUserId":{"type":"string","description":"管理员的用户 ID","example":"xxx"},"adminUserAvatar":{"type":"string","description":"管理员用户头像","example":"https://files.authing.co/authing-console/default-app-logo.png"},"adminUserDisplayName":{"type":"string","description":"管理员用户显示名称，按照以下用户字段顺序进行展示：nickname > username > name > givenName > familyName -> email -> phone -> id","example":"张三"},"clientIp":{"type":"string","description":"客户端 IP，可根据登录时的客户端 IP 进行筛选。默认不传获取所有登录 IP 的登录历史。","example":"127.0.0.1"},"operationType":{"type":"string","description":"操作类型：\n- `create`: 创建\n- `delete`: 删除\n- `import`: 导入\n- `export`: 导出\n- `update`: 修改\n- `refresh`: 刷新\n- `sync`: 同步\n- `invite`: 邀请\n- `resign`: 离职\n- `recover`: 恢复\n- `disable`: 禁用\n- `userEnable`: 启用\n    ","enum":["all","create","delete","import","export","update","refresh","sync","invite","resign","recover","disable","enable","activate","deactivate","add","remove","query"],"example":"create"},"resourceType":{"type":"string","description":"事件类型：\n- `user`: 用户\n- `userpool`: 用户池\n- `tenant`: 租户\n- `userLoginState`: 用户登录态\n- `userAccountState`: 用户账号状态\n- `userGroup`: 用户分组\n- `fieldEncryptState`: 字段加密状态\n- `syncTask`: 同步任务\n- `socialConnection`: 社会化身份源\n- `enterpriseConnection`: 社会化身份源\n- `customDatabase`: 自定义数据库\n- `org`: 组织机构\n- `cooperator`: 协作管理员\n- `application`: 应用\n- `resourceNamespace`: 权限分组\n- `resource`: 资源\n- `role`: 角色\n- `roleAssign`: 角色授权\n- `policy`: 策略\n    ","enum":["all","user","userpool","tenant","userLoginState","userAccountState","userGroup","fieldEncryptState","syncTask","socialConnection","enterpriseConnection","customDatabase","org","cooperator","application","resourceNamespace","resource","role","roleAssign","policy","customDomain","permitSpace","generalResource","generalResourceAuthorization","roleSubject","subjectOfRole","dataResource","dataPolicy","authorization","userAuthorization"],"example":"user"},"eventDetail":{"type":"string","description":"事件详情","example":"修改了集成应用「Discourse」"},"operationParam":{"type":"string","description":"具体的操作参数","example":"{\"ext\":{\"_dontFinishNotYet\":true,\"_appName\":\"Discourse\"},\"protocol\":\"oidc\",\"isAsa\":false,\"name\":\"Discourse\",\"oidcConfig\":{\"grant_types\":[\"authorization_code\",\"password\",\"refresh_token\"],\"response_types\":[\"code\"],\"id_token_signed_response_alg\":\"RS256\",\"token_endpoint_auth_method\":\"client_secret_post\",\"introspection_endpoint_auth_method\":\"client_secret_post\",\"revocation_endpoint_auth_method\":\"client\"}"},"originValue":{"type":"string","description":"原始值","example":""},"targetValue":{"type":"string","description":"新值","example":""},"success":{"type":"boolean","description":"是否成功","example":true},"userAgent":{"type":"string","description":"User Agent","example":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"},"parsedUserAgent":{"description":"解析过后的 User Agent","allOf":[{"$ref":"#/components/schemas/ParsedUserAgent"}]},"geoip":{"description":"地理位置","allOf":[{"$ref":"#/components/schemas/GeoIp"}]},"timestamp":{"type":"string","description":"时间","example":"2022-09-20T08:55:00.188+0800"},"requestId":{"type":"string","description":"请求 ID","example":"b63b9772-384c-4f2d-981b-01d1feed964d"}},"required":["adminUserId","adminUserAvatar","adminUserDisplayName","operationType","resourceType","success","userAgent","parsedUserAgent","geoip","timestamp","requestId"]},"AdminAuditLogRespData":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","example":1},"list":{"description":"返回列表","type":"array","items":{"$ref":"#/components/schemas/AdminAuditLogDto"}}},"required":["totalCount","list"]},"AdminAuditLogRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/AdminAuditLogRespData"}]}},"required":["statusCode","message","data"]},"EmailTemplateDto":{"type":"object","properties":{"customizeEnabled":{"type":"boolean","description":"是否启用自定义模版","example":true},"type":{"type":"string","description":"模版类型:\n- `WELCOME_EMAIL`: 欢迎邮件\n- `FIRST_CREATED_USER`: 首次创建用户通知\n- `REGISTER_VERIFY_CODE`: 注册验证码\n- `LOGIN_VERIFY_CODE`: 登录验证码\n- `MFA_VERIFY_CODE`: MFA 验证码\n- `INFORMATION_COMPLETION_VERIFY_CODE`: 注册信息补全验证码\n- `FIRST_EMAIL_LOGIN_VERIFY`: 首次邮箱登录验证\n- `CONSOLE_CONDUCTED_VERIFY`: 在控制台发起邮件验证\n- `USER_PASSWORD_UPDATE_REMIND`: 用户到期提醒\n- `ADMIN_RESET_USER_PASSWORD_NOTIFICATION`: 管理员重置用户密码成功通知\n- `USER_PASSWORD_RESET_NOTIFICATION`: 用户密码重置成功通知\n- `RESET_PASSWORD_VERIFY_CODE`: 重置密码验证码\n- `SELF_UNLOCKING_VERIFY_CODE`: 自助解锁验证码\n- `EMAIL_BIND_VERIFY_CODE`: 绑定邮箱验证码\n- `EMAIL_UNBIND_VERIFY_CODE`: 解绑邮箱验证码\n    ","enum":["WELCOME_EMAIL","FIRST_CREATED_USER","REGISTER_VERIFY_CODE","LOGIN_VERIFY_CODE","MFA_VERIFY_CODE","INFORMATION_COMPLETION_VERIFY_CODE","FIRST_EMAIL_LOGIN_VERIFY","CONSOLE_CONDUCTED_VERIFY","USER_PASSWORD_UPDATE_REMIND","ADMIN_RESET_USER_PASSWORD_NOTIFICATION","USER_PASSWORD_RESET_NOTIFICATION","RESET_PASSWORD_VERIFY_CODE","SELF_UNLOCKING_VERIFY_CODE","EMAIL_BIND_VERIFY_CODE","EMAIL_UNBIND_VERIFY_CODE"],"example":"WELCOME_EMAIL"},"name":{"type":"string","description":"邮件模版名称","example":"欢迎邮件"},"subject":{"type":"string","description":"邮件主题","example":"欢迎加入 {{app_name}}"},"sender":{"type":"string","description":"邮件发件人名称","example":"{{client_name}}"},"content":{"type":"string","description":"邮件内容模版","example":"xxx"},"expiresIn":{"type":"number","description":"验证码/邮件有效时间，只有验证类邮件才有有效时间。","example":300},"redirectTo":{"type":"string","description":"完成邮件验证之后跳转到的地址，只针对 `FIRST_EMAIL_LOGIN_VERIFY` 和 `CONSOLE_CONDUCTED_VERIFY` 类型的模版有效。","example":"https://example.com"},"tplEngine":{"type":"string","description":"模版渲染引擎。Authing 邮件模版目前支持两种渲染引擎：\n- `handlebar`: 详细使用方法请见：[handlebars 官方文档](https://handlebarsjs.com/)\n- `ejs`: 详细使用方法请见：[ejs 官方文档](https://ejs.co/)\n\n默认将使用 `handlerbar` 作为模版渲染引擎。\n","enum":["handlebar","ejs"],"example":"handlebar","default":"handlebar"}},"required":["customizeEnabled","type","name","subject","sender","content"]},"EmailTemplateCategoryDto":{"type":"object","properties":{"title":{"type":"string","description":"类别名称","example":"通知模版"},"titleEn":{"type":"string","description":"类别英文名称","example":"Notification Template"},"desc":{"type":"string","description":"描述","example":"支持欢迎邮件和首次创建用户通知的邮件内容"},"descEn":{"type":"string","description":"英文描述","example":"We support the content of the Welcome Email and First-Created Account Notification"}},"required":["title","titleEn","desc","descEn"]},"GetEmailTemplatesDataDto":{"type":"object","properties":{"templates":{"description":"模版列表","type":"array","items":{"$ref":"#/components/schemas/EmailTemplateDto"}},"categories":{"description":"模版类型列表","type":"array","items":{"$ref":"#/components/schemas/EmailTemplateCategoryDto"}}},"required":["templates","categories"]},"GetEmailTemplatesRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetEmailTemplatesDataDto"}]}},"required":["statusCode","message","data"]},"UpdateEmailTemplateDto":{"type":"object","properties":{"type":{"type":"string","description":"模版类型:\n- `WELCOME_EMAIL`: 欢迎邮件\n- `FIRST_CREATED_USER`: 首次创建用户通知\n- `REGISTER_VERIFY_CODE`: 注册验证码\n- `LOGIN_VERIFY_CODE`: 登录验证码\n- `MFA_VERIFY_CODE`: MFA 验证码\n- `INFORMATION_COMPLETION_VERIFY_CODE`: 注册信息补全验证码\n- `FIRST_EMAIL_LOGIN_VERIFY`: 首次邮箱登录验证\n- `CONSOLE_CONDUCTED_VERIFY`: 在控制台发起邮件验证\n- `USER_PASSWORD_UPDATE_REMIND`: 用户到期提醒\n- `ADMIN_RESET_USER_PASSWORD_NOTIFICATION`: 管理员重置用户密码成功通知\n- `USER_PASSWORD_RESET_NOTIFICATION`: 用户密码重置成功通知\n- `RESET_PASSWORD_VERIFY_CODE`: 重置密码验证码\n- `SELF_UNLOCKING_VERIFY_CODE`: 自助解锁验证码\n- `EMAIL_BIND_VERIFY_CODE`: 绑定邮箱验证码\n- `EMAIL_UNBIND_VERIFY_CODE`: 解绑邮箱验证码\n    ","enum":["WELCOME_EMAIL","FIRST_CREATED_USER","REGISTER_VERIFY_CODE","LOGIN_VERIFY_CODE","MFA_VERIFY_CODE","INFORMATION_COMPLETION_VERIFY_CODE","FIRST_EMAIL_LOGIN_VERIFY","CONSOLE_CONDUCTED_VERIFY","USER_PASSWORD_UPDATE_REMIND","ADMIN_RESET_USER_PASSWORD_NOTIFICATION","USER_PASSWORD_RESET_NOTIFICATION","RESET_PASSWORD_VERIFY_CODE","SELF_UNLOCKING_VERIFY_CODE","EMAIL_BIND_VERIFY_CODE","EMAIL_UNBIND_VERIFY_CODE"],"example":"WELCOME_EMAIL"},"customizeEnabled":{"type":"boolean","description":"是否启用自定义模版","example":true},"name":{"type":"string","description":"邮件模版名称","example":"欢迎邮件"},"subject":{"type":"string","description":"邮件主题","example":"欢迎加入 {{app_name}}"},"sender":{"type":"string","description":"邮件发件人名称","example":"{{client_name}}"},"content":{"type":"string","description":"邮件内容模版","example":"xxx"},"expiresIn":{"type":"number","description":"验证码/邮件有效时间，只有验证类邮件才有有效时间。","example":300,"minimum":1},"redirectTo":{"type":"string","description":"完成邮件验证之后跳转到的地址，只针对 `FIRST_EMAIL_LOGIN_VERIFY` 和 `CONSOLE_CONDUCTED_VERIFY` 类型的模版有效。","example":"https://example.com"},"tplEngine":{"type":"string","description":"模版渲染引擎。Authing 邮件模版目前支持两种渲染引擎：\n- `handlebar`: 详细使用方法请见：[handlebars 官方文档](https://handlebarsjs.com/)\n- `ejs`: 详细使用方法请见：[ejs 官方文档](https://ejs.co/)\n\n默认将使用 `handlerbar` 作为模版渲染引擎。\n    ","enum":["handlebar","ejs"],"example":"handlebar","default":"handlebar"}},"required":["type","customizeEnabled","name","subject","sender","content"]},"EmailTemplateSingleItemRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/EmailTemplateDto"}]}},"required":["statusCode","message","data"]},"PreviewEmailTemplateDto":{"type":"object","properties":{"type":{"type":"string","description":"模版类型:\n- `WELCOME_EMAIL`: 欢迎邮件\n- `FIRST_CREATED_USER`: 首次创建用户通知\n- `REGISTER_VERIFY_CODE`: 注册验证码\n- `LOGIN_VERIFY_CODE`: 登录验证码\n- `MFA_VERIFY_CODE`: MFA 验证码\n- `INFORMATION_COMPLETION_VERIFY_CODE`: 注册信息补全验证码\n- `FIRST_EMAIL_LOGIN_VERIFY`: 首次邮箱登录验证\n- `CONSOLE_CONDUCTED_VERIFY`: 在控制台发起邮件验证\n- `USER_PASSWORD_UPDATE_REMIND`: 用户到期提醒\n- `ADMIN_RESET_USER_PASSWORD_NOTIFICATION`: 管理员重置用户密码成功通知\n- `USER_PASSWORD_RESET_NOTIFICATION`: 用户密码重置成功通知\n- `RESET_PASSWORD_VERIFY_CODE`: 重置密码验证码\n- `SELF_UNLOCKING_VERIFY_CODE`: 自助解锁验证码\n- `EMAIL_BIND_VERIFY_CODE`: 绑定邮箱验证码\n- `EMAIL_UNBIND_VERIFY_CODE`: 解绑邮箱验证码\n    ","enum":["WELCOME_EMAIL","FIRST_CREATED_USER","REGISTER_VERIFY_CODE","LOGIN_VERIFY_CODE","MFA_VERIFY_CODE","INFORMATION_COMPLETION_VERIFY_CODE","FIRST_EMAIL_LOGIN_VERIFY","CONSOLE_CONDUCTED_VERIFY","USER_PASSWORD_UPDATE_REMIND","ADMIN_RESET_USER_PASSWORD_NOTIFICATION","USER_PASSWORD_RESET_NOTIFICATION","RESET_PASSWORD_VERIFY_CODE","SELF_UNLOCKING_VERIFY_CODE","EMAIL_BIND_VERIFY_CODE","EMAIL_UNBIND_VERIFY_CODE"],"example":"WELCOME_EMAIL"},"content":{"type":"string","description":"邮件内容模版，可选，如果不传默认使用用户池配置的邮件模版进行渲染。","example":"xxx"},"subject":{"type":"string","description":"邮件主题，可选，如果不传默认使用用户池配置的邮件模版进行渲染。","example":"欢迎加入 {{app_name}}"},"sender":{"type":"string","description":"邮件发件人名称，可选，如果不传默认使用用户池配置的邮件模版进行渲染。","example":"{{client_name}}"},"expiresIn":{"type":"number","description":"验证码/邮件有效时间，只有验证类邮件才有有效时间。可选，如果不传默认使用用户池配置的邮件模版进行渲染。","example":300,"minimum":1},"tplEngine":{"type":"string","description":"模版渲染引擎。Authing 邮件模版目前支持两种渲染引擎：\n- `handlebar`: 详细使用方法请见：[handlebars 官方文档](https://handlebarsjs.com/)\n- `ejs`: 详细使用方法请见：[ejs 官方文档](https://ejs.co/)\n\n默认将使用 `handlerbar` 作为模版渲染引擎。\n    ","enum":["handlebar","ejs"],"example":"handlebar","default":"handlebar"}},"required":["type"]},"PreviewEmailTemplateDataDto":{"type":"object","properties":{"content":{"type":"string","description":"预览的邮件主体内容，为 html 格式文本","example":"xxx"},"subject":{"type":"string","description":"预览的邮件主题内容","example":"欢迎加入 Authing"},"sender":{"type":"string","description":"预览的邮件发件人内容","example":"test@example.com"}},"required":["content","subject","sender"]},"PreviewEmailTemplateRespDto":{"type":"object","properties":{"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PreviewEmailTemplateDataDto"}]}},"required":["data"]},"SMTPEmailProviderConfig":{"type":"object","properties":{"smtp_host":{"type":"string","description":"SMTP 地址","example":"smtp.example.com"},"smtp_port":{"type":"number","description":"SMTP 端口","example":465},"sender":{"type":"string","description":"用户名","example":"test"},"senderPass":{"type":"string","description":"密码","example":"passw0rd"},"secure":{"type":"boolean","description":"是否启用 SSL","example":true}},"required":["smtp_host","smtp_port","sender","senderPass","secure"]},"SendGridEmailProviderConfig":{"type":"object","properties":{"sender":{"type":"string","description":"用户名","example":"test"},"apikey":{"type":"string","description":"SendGrid API Key，详情请见 [SendGrid 文档](https://docs.sendgrid.com/ui/account-and-settings/api-keys)。","example":"xxxxxxxxxx"}},"required":["sender","apikey"]},"AliExmailEmailProviderConfig":{"type":"object","properties":{"sender":{"type":"string","description":"用户名","example":"test"},"senderPass":{"type":"string","description":"密码","example":"passw0rd"}},"required":["sender","senderPass"]},"TencentExmailEmailProviderConfig":{"type":"object","properties":{"sender":{"type":"string","description":"用户名","example":"test"},"senderPass":{"type":"string","description":"密码","example":"passw0rd"}},"required":["sender","senderPass"]},"EmailProviderDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否启用，如果不启用，将默认使用 Authing 内置的邮件服务","example":true},"type":{"type":"string","description":"第三方邮件服务商类型:\n- `custom`: 自定义 SMTP 邮件服务\n- `ali`: [阿里企业邮箱](https://www.ali-exmail.cn/Land/)\n- `qq`: [腾讯企业邮箱](https://work.weixin.qq.com/mail/)\n- `sendgrid`: [SendGrid 邮件服务](https://sendgrid.com/)\n    ","enum":["ali","qq","sendgrid","custom"],"example":"custom"},"smtpConfig":{"description":"SMTP 邮件服务配置","allOf":[{"$ref":"#/components/schemas/SMTPEmailProviderConfig"}]},"sendGridConfig":{"description":"SendGrid 邮件服务配置","allOf":[{"$ref":"#/components/schemas/SendGridEmailProviderConfig"}]},"aliExmailConfig":{"description":"阿里企业邮件服务配置","allOf":[{"$ref":"#/components/schemas/AliExmailEmailProviderConfig"}]},"tencentExmailConfig":{"description":"腾讯企业邮件服务配置","allOf":[{"$ref":"#/components/schemas/TencentExmailEmailProviderConfig"}]}},"required":["enabled"]},"EmailProviderRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/EmailProviderDto"}]}},"required":["statusCode","message","data"]},"SMTPEmailProviderConfigInput":{"type":"object","properties":{"smtp_host":{"type":"string","description":"SMTP 地址","example":"smtp.example.com"},"smtp_port":{"type":"number","description":"SMTP 端口","example":465},"sender":{"type":"string","description":"用户名","example":"test"},"senderPass":{"type":"string","description":"密码","example":"passw0rd"},"secure":{"type":"boolean","description":"是否启用 SSL","example":true,"default":false}},"required":["smtp_host","smtp_port","senderPass"]},"SendGridEmailProviderConfigInput":{"type":"object","properties":{"sender":{"type":"string","description":"用户名","example":"test"},"apikey":{"type":"string","description":"SendGrid API Key，详情请见 [SendGrid 文档](https://docs.sendgrid.com/ui/account-and-settings/api-keys)。","example":"xxxxxxxxxx"}},"required":["sender","apikey"]},"AliExmailEmailProviderConfigInput":{"type":"object","properties":{"sender":{"type":"string","description":"用户名","example":"test"},"senderPass":{"type":"string","description":"密码","example":"passw0rd"}},"required":["sender","senderPass"]},"TencentExmailEmailProviderConfigInput":{"type":"object","properties":{"sender":{"type":"string","description":"用户名","example":"test"},"senderPass":{"type":"string","description":"密码","example":"passw0rd"}},"required":["sender","senderPass"]},"ConfigEmailProviderDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否启用，如果不启用，将默认使用 Authing 内置的邮件服务","example":true},"type":{"type":"string","description":"第三方邮件服务商类型:\n- `custom`: 自定义 SMTP 邮件服务\n- `ali`: [阿里企业邮箱](https://www.ali-exmail.cn/Land/)\n- `qq`: [腾讯企业邮箱](https://work.weixin.qq.com/mail/)\n- `sendgrid`: [SendGrid 邮件服务](https://sendgrid.com/)\n    ","enum":["ali","qq","sendgrid","custom"],"example":"custom"},"smtpConfig":{"description":"SMTP 邮件服务配置","allOf":[{"$ref":"#/components/schemas/SMTPEmailProviderConfigInput"}]},"sendGridConfig":{"description":"SendGrid 邮件服务配置","allOf":[{"$ref":"#/components/schemas/SendGridEmailProviderConfigInput"}]},"aliExmailConfig":{"description":"阿里企业邮件服务配置","allOf":[{"$ref":"#/components/schemas/AliExmailEmailProviderConfigInput"}]},"tencentExmailConfig":{"description":"腾讯企业邮件服务配置","allOf":[{"$ref":"#/components/schemas/TencentExmailEmailProviderConfigInput"}]}},"required":["enabled","type"]},"ApplicationDefaultLoginMethod":{"type":"object","properties":{"connectionType":{"type":"string","description":"默认的登录类型\n  - `PASSWORD`: 密码类型，取决于你开启的基础登录方式，支持手机号/邮箱/用户名 + 密码进行登录\n  - `PASSCODE`: 验证码类型，取决于你开启的基础登录方式，支持手机号/邮箱 + 验证码进行登录\n  - `QRCODE`: 扫码登录类型，目前包含自建 APP 扫码登录、关注微信公众号扫码登录、微信小程序扫码登录三种类型\n      ","enum":["PASSCODE","PASSWORD","QRCODE","LDAP","AD"],"example":"PASSCODE"},"qrcodeType":{"type":"string","description":"当 `connectionType` 为 `QRCODE` 时，此参数表示二维码类型。\n- `SELF_BUILT_APP`: 自建 APP 扫码\n- `WECHAT_OFFICIAL_ACCOUNT`: 扫码关注微信公众号登录\n- `WECHAT_MINI_PROGRAM`: 微信小程序扫码登录\n    ","enum":["SELF_BUILT_APP","WECHAT_OFFICIAL_ACCOUNT","WECHAT_MINI_PROGRAM"],"example":"WECHAT_OFFICIAL_ACCOUNT"},"qrcodeExtIdpConnId":{"type":"string","description":"当 `connectionType` 为 `QRCODE` 时，你需要通过此参数指定具体的扫码登录身份源连接的 ID。","example":"6303a2bf2xxxxx7f665f01bf1"},"adExtIdpConnId":{"type":"string","description":"当 `connectionType` 为 `AD` 时，你需要通过此参数指定具体的 AD 身份源连接的 ID。","example":"6303a2bf2xxxxx7f665f01bf1"},"ldapExtIdpConnId":{"type":"string","description":"当 `connectionType` 为 `LDAP` 时，你需要通过此参数指定具体的 LDAP 身份源连接的 ID。","example":"6303a2bf2xxxxx7f665f01bf1"}},"required":["connectionType","qrcodeType","qrcodeExtIdpConnId","adExtIdpConnId","ldapExtIdpConnId"]},"ApplicationEnabledExtIdpConnDto":{"type":"object","properties":{"isSocial":{"type":"boolean","description":"是否为社会化登录身份源连接","example":true},"extIdpId":{"type":"string","description":"身份源 ID","example":"6303a2bf2xxxxx7f665f01bf1"},"extIdpType":{"type":"string","description":"身份源类型","enum":["oidc","oauth2","saml","ldap","ad","cas","azure-ad","wechat","google","qq","wechatwork","dingtalk","weibo","github","alipay","apple","baidu","lark","gitlab","twitter","facebook","slack","linkedin","yidun","qingcloud","gitee","instagram","welink","huawei","honor","xiaomi","oppo","aws","amazon","douyin","kuaishou","line","sdbz"],"example":"ad"},"extIdpConnId":{"type":"string","description":"身份源连接 ID","example":"6303a2bf2xxxxx7f665f01bf1"},"extIdpConnType":{"type":"string","description":"身份源连接类型","enum":["oidc","oauth","saml","ldap","ad","cas","azure-ad","alipay","facebook","facebook:mobile","twitter","google:mobile","google","wechat:pc","wechat:mobile","wechat:webpage-authorization","wechatmp-qrcode","wechat:miniprogram:default","wechat:miniprogram:qrconnect","wechat:miniprogram:app-launch","github","github:mobile","qq","qq:mobile","wechatwork:corp:qrconnect","wechatwork:agency:qrconnect","wechatwork:service-provider:qrconnect","wechatwork:mobile","wechatwork:agency:mobile","dingtalk","dingtalk:mobile","dingtalk:provider","weibo","weibo:mobile","apple","apple:web","baidu","baidu:mobile","lark-internal","lark-public","lark-block","gitlab","gitlab:mobile","linkedin","linkedin:mobile","slack","slack:mobile","yidun","qingcloud","gitee","gitee:mobile","instagram","welink","ad-kerberos","huawei","huawei:mobile","honor","xiaomi","xiaomi:mobile","aws","amazon","amazon:mobile","douyin:mobile","kuaishou:mobile","line:mobile","oppo:mobile","wechatwork:qrconnect:of:authing:agency","sdbz"],"example":"wechatwork:mobile"},"extIdpConnIdentifier":{"type":"string","description":"身份源连接可读唯一标志","example":"6303a2bf2xxxxx7f665f01bf1"},"extIdpConnDisplayName":{"type":"string","description":"微信","example":"6303a2bf2xxxxx7f665f01bf1"},"extIdpConnLogo":{"type":"string","description":"身份源连接 Logo","example":"https://files.authing.co/authing-console/social-connections/wechatBrowser.svg"},"enabled":{"type":"boolean","description":"是否允许身份源连接"}},"required":["isSocial","extIdpId","extIdpType","extIdpConnId","extIdpConnType","extIdpConnIdentifier","extIdpConnDisplayName","extIdpConnLogo"]},"ApplicationLoginConfigDto":{"type":"object","properties":{"mergeLoginAndRegisterPage":{"type":"boolean","description":"是否开启登录注册合并","default":false,"example":false},"enabledBasicLoginMethods":{"type":"array","description":"开启的基础登录方式","example":["EMAIL_CODE","EMAIL_PASSWORD"],"items":{"type":"string","enum":["PHONE_CODE","EMAIL_CODE","PHONE_PASSWORD","EMAIL_PASSWORD","USERNAME_PASSWORD","SELF_BUILT_APP_QRCODE"]}},"defaultLoginMethod":{"description":"应用默认登录方式（不包含社会化登录和企业身份源登录）","example":{"connectionType":"QRCODE","qrcodeExtIdpConnId":"6303a2bf2xxxxx7f665f01bf1"},"allOf":[{"$ref":"#/components/schemas/ApplicationDefaultLoginMethod"}]},"enabledExtIdpConns":{"description":"开启的外部身份源连接","example":["6303a2bf2xxxx7f665f01bf1","6321397b6xxxx1b8481ccfc0"],"type":"array","items":{"$ref":"#/components/schemas/ApplicationEnabledExtIdpConnDto"}},"showAuthorizationPage":{"type":"boolean","description":"是否展示用户授权页面","example":false}},"required":["mergeLoginAndRegisterPage","enabledBasicLoginMethods","defaultLoginMethod","enabledExtIdpConns","showAuthorizationPage"]},"ApplicationRegisterConfig":{"type":"object","properties":{"enabledBasicRegisterMethods":{"type":"array","description":"开启的注册方式","example":["EMAIL_CODE","PHONE_CODE"],"items":{"type":"string","enum":["PHONE_CODE","EMAIL_CODE","EMAIL_PASSWORD"]}},"defaultRegisterMethod":{"type":"string","description":"默认的注册类型\n    - `PASSWORD`: 密码类型，支持邮箱 + 密码进行登录\n    - `PASSCODE`: 验证码类型，取决于你开启的注册方式，支持手机号/邮箱 + 验证码进行登录\n        ","enum":["PASSCODE","PASSWORD"],"example":{"connectionType":"PASSWORD"}}},"required":["enabledBasicRegisterMethods","defaultRegisterMethod"]},"ApplicationAgreementDto":{"type":"object","properties":{"displayAt":{"type":"array","description":"展示的页面（可多选）：\n- `LoginPage`: 登录页面\n- `RegisterPage`: 注册页面\n    ","example":["LoginPage","RegisterPage"],"items":{"type":"string","enum":["LoginPage","RegisterPage"]}},"isRequired":{"type":"boolean","description":"是否要求必须勾选","example":true,"default":true},"lang":{"type":"string","description":"此协议针对什么语言有效:\n- `zh-CN`: 简体中文\n- `zh-TW`: 繁体中文\n- `en-US`: 英文\n- `ja-JP`: 日语\n    ","enum":["zh-CN","en-US","zh-TW","ja-JP"],"example":"zh-CN"},"content":{"type":"string","description":"此协议针对什么语言有效","example":"我已阅读并同意隐私协议与服务条款"}},"required":["displayAt","isRequired","lang","content"]},"ApplicationBrandingConfig":{"type":"object","properties":{"customCSSEnabled":{"type":"boolean","description":"是否开启自定义 CSS","example":false,"default":false},"customCSS":{"type":"string","description":"自定义 CSS 内容","example":"/* \nEdit login page css\neg：\n.authing-guard-layout {\n  background: black !important;\n}\nChange the background color\n*/"},"guardVersion":{"type":"string","description":"Guard 版本：\n- `Advanced`: 高级版\n- `Classical`: 经典版\n    ","enum":["Advanced","Classical"],"default":"Advanced","example":"Advanced"},"customLoadingImage":{"type":"string","description":"自定义加载图标，当登录框加载时会展示","example":"https://files.authing.co/user-contents/photos/cbd51df7-efb1-4b50-b38c-d8e5a04b1830.png"},"customBackground":{"type":"string","description":"自定义登录页背景，示例：\n- 图片背景：`url(https://files.authing.co/user-contents/photos/6c6b3726-4a04-4ba7-b686-1a275f81a47a.png) center/cover`\n- 纯色背景：`rgba(37,49,122,1)`\n    ","example":"https://files.authing.co/user-contents/photos/cbd51df7-efb1-4b50-b38c-d8e5a04b1830.png"},"showChangeLanguageButton":{"type":"boolean","description":"是否显示切换语言按钮","example":false,"default":false},"defaultLanguage":{"type":"string","description":"默认语言:\n- `zh-CN`: 简体中文\n- `zh-TW`: 繁体中文\n- `en-US`: 英文\n- `ja-JP`: 日语\n    ","enum":["zh-CN","en-US","zh-TW","ja-JP"],"example":"zh-CN"},"showForgetPasswordButton":{"type":"boolean","description":"是否显示忘记密码按钮","example":true,"default":true},"showEnterpriseConnections":{"type":"boolean","description":"是否显示企业身份源登录方式","example":true,"default":true},"showSocialConnections":{"type":"boolean","description":"是否显示社会化登录方式","example":true,"default":true},"showAgreement":{"type":"boolean","description":"是否展示登录注册协议","example":false,"default":false},"agreements":{"description":"展示的登录注册协议列表","type":"array","items":{"$ref":"#/components/schemas/ApplicationAgreementDto"}}},"required":["customCSSEnabled","guardVersion","showChangeLanguageButton","defaultLanguage","showForgetPasswordButton","showEnterpriseConnections","showSocialConnections","showAgreement","agreements"]},"OIDCConfig":{"type":"object","properties":{}},"SamlIdpConfig":{"type":"object","properties":{}},"OauthIdpConfig":{"type":"object","properties":{}},"CasIdPConfig":{"type":"object","properties":{}},"ApplicationDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"62eaa95fe0xxxx9a5295bf7c"},"appIdentifier":{"type":"string","description":"应用唯一标志","example":"example"},"appName":{"type":"string","description":"应用名称","example":"示例应用"},"appLogo":{"type":"string","description":"应用 Logo 链接","example":"示例应用"},"appDescription":{"type":"string","description":"应用描述信息","example":"示例描述信息"},"appType":{"type":"string","description":"应用类型","enum":["web","spa","native","api","mfa","mini-program"],"example":"web"},"userPoolId":{"type":"string","description":"用户池 ID","example":""},"isIntegrateApp":{"type":"boolean","description":"是否为集成应用","example":false},"defaultProtocol":{"type":"string","description":"默认应用协议类型","enum":["oidc","oauth","saml","cas","asa"],"example":"oidc"},"redirectUris":{"description":"应用登录回调地址","example":["https://example.com/callback"],"type":"array","items":{"type":"string"}},"logoutRedirectUris":{"description":"应用退出登录回调地址","example":["https://example.com/logout-callback"],"type":"array","items":{"type":"string"}},"initLoginUri":{"type":"string","description":"发起登录地址：在 Authing 应用详情点击「体验登录」或在应用面板点击该应用图标时，会跳转到此 URL，默认为 Authing 登录页。","example":["https://example.com/login"]},"ssoEnabled":{"type":"boolean","description":"是否开启 SSO 单点登录","example":true},"ssoEnabledAt":{"format":"date-time","type":"string","description":"开启 SSO 单点登录的时间","example":"2022-07-03T02:20:30.000Z"},"loginConfig":{"description":"登录配置","allOf":[{"$ref":"#/components/schemas/ApplicationLoginConfigDto"}]},"registerConfig":{"description":"注册配置","allOf":[{"$ref":"#/components/schemas/ApplicationRegisterConfig"}]},"brandingConfig":{"description":"品牌化配置","allOf":[{"$ref":"#/components/schemas/ApplicationBrandingConfig"}]},"oidcConfig":{"description":"OIDC 协议配置","allOf":[{"$ref":"#/components/schemas/OIDCConfig"}]},"samlProviderEnabled":{"type":"boolean","description":"是否开启 SAML 身份提供商","example":false,"default":false},"samlConfig":{"description":"SAML 协议配置","allOf":[{"$ref":"#/components/schemas/SamlIdpConfig"}]},"oauthProviderEnabled":{"type":"boolean","description":"是否开启 OAuth 身份提供商","example":false,"default":false},"oauthConfig":{"description":"OAuth2.0 协议配置","allOf":[{"$ref":"#/components/schemas/OauthIdpConfig"}]},"casProviderEnabled":{"type":"boolean","description":"是否开启 CAS 身份提供商","example":false,"default":false},"casConfig":{"description":"CAS 协议配置","allOf":[{"$ref":"#/components/schemas/CasIdPConfig"}]},"customBrandingEnabled":{"type":"boolean","description":"是否自定义本应用的登录框，默认走全局的登录框配置。","example":false,"default":false},"customSecurityEnabled":{"type":"boolean","description":"是否自定义本应用的安全规则，默认走全局的安全配置。","example":false,"default":false},"template":{"type":"string","description":"集成应用的模版类型","example":"github"}},"required":["appId","appIdentifier","appName","appLogo","appType","userPoolId","isIntegrateApp","defaultProtocol","redirectUris","logoutRedirectUris","initLoginUri","ssoEnabled","loginConfig","registerConfig","brandingConfig","oidcConfig","samlProviderEnabled","oauthProviderEnabled","casProviderEnabled","customBrandingEnabled","customSecurityEnabled"]},"ApplicationSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ApplicationDto"}]}},"required":["statusCode","message","data"]},"GetSubjectAuthDataDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"5a597f35085a2000144a10ed"},"appName":{"type":"string","description":"应用名称","example":"应用一"},"reqTargetId":{"type":"string","description":"请求的主体id","example":"6229ffaxxxxxxxxcade3e3d9"},"reqTargetName":{"type":"string","description":"请求的主体名称","example":"dmy"},"reqTargetType":{"type":"string","description":"请求的主体类型","enum":["USER","ROLE","GROUP","ORG","AK_SK"],"example":"USER"},"targetType":{"type":"string","description":"目标主体类型","enum":["USER","ROLE","GROUP","ORG","AK_SK"],"example":"USER"},"targetName":{"type":"string","description":"目标主体名称","example":"dgy"},"authType":{"type":"string","description":"授权类型","enum":["DEFAULT","ALL","SELF","SUBJECT"],"example":"SUBJECT"}},"required":["appId","appName","reqTargetId","reqTargetName","reqTargetType","targetType","targetName","authType"]},"GetSubjectAuthRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetSubjectAuthDataDto"}]}},"required":["statusCode","message","data"]},"ListAuthSubjectDto":{"type":"object","properties":{"targetId":{"type":"string","description":"主体 id","example":"6229ffaxxxxxxxxcade3e3d9"},"targetType":{"type":"string","description":"主体类型","enum":["USER","ROLE","GROUP","ORG","AK_SK"],"example":"USER"},"appName":{"type":"string","description":"应用名称","example":"应用一"},"appTypeList":{"description":"应用类型列表","example":["SELFBUILT"],"type":"array","items":{"type":"string"}},"effect":{"description":"操作类型列表","example":["ALLOW","DENY"],"type":"array","items":{"type":"string"}},"enabled":{"type":"boolean","description":"开关","example":true}},"required":["targetId","targetType"]},"ListApplicationSubjectDataDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"5a597f35085a2000144a10ed"},"logo":{"type":"string","description":"应用 logo","example":""},"ext":{"type":"string","description":""},"template":{"type":"string","description":""},"appType":{"type":"string","description":"应用类型：集成应用/自建应用","enum":["INTEGRATED","SELFBUILT"],"example":"SELFBUILT"},"effect":{"type":"string","description":"允许/拒绝","enum":["ALLOW","DENY"],"example":"ALLOW"}},"required":["appId","logo","ext","template","appType","effect"]},"ListApplicationSubjectDataListDto":{"type":"object","properties":{"list":{"description":"列表数据","type":"array","items":{"$ref":"#/components/schemas/ListApplicationSubjectDataDto"}}},"required":["list"]},"ListApplicationSubjectRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ListApplicationSubjectDataListDto"}]}},"required":["statusCode","message","data"]},"ListApplicationAuthDto":{"type":"object","properties":{"page":{"type":"number","description":"当前页数，从 1 开始","default":1,"example":1},"limit":{"type":"number","description":"每页数目，最大不能超过 50，默认为 10","default":10,"example":10},"appId":{"type":"string","description":"应用 ID","example":"5a597f35085a2000144a10ed"},"targetName":{"type":"string","description":"主体名称","example":"张三"},"targetTypeList":{"description":"主体类型列表, USER/ORG/ROLE/GROUP","example":["USER","ORG"],"type":"array","items":{"type":"string"}},"effect":{"type":"string","description":"操作，ALLOW/DENY","enum":["ALLOW","DENY"],"example":["ALLOW","DENY"]},"enabled":{"type":"boolean","description":"授权是否生效开关,","example":true}},"required":["appId"]},"ListApplicationAuthDataDto":{"type":"object","properties":{"id":{"type":"string","description":"授权 id","example":"6229ffaxxxxxxxxcade3e3d9"},"targetId":{"type":"string","description":"主体 id","example":"6229ffaxxxxxxxxcade3e3d9"},"targetName":{"type":"string","description":"主体名称","example":"张三"},"targetType":{"type":"string","description":"主体类型，USER/ORG/GROUP/ROLE","enum":["USER","ROLE","GROUP","ORG","AK_SK"],"example":"USER"},"effect":{"type":"string","description":"主体类型，ALLOW/DENY","enum":["ALLOW","DENY"],"example":"ALLOW"},"enabled":{"type":"boolean","description":"授权开关","example":true},"permissionType":{"type":"string","description":"授权类型, ALL:所有人 SUBJECT:主体","enum":["ALL","SUBJECT"],"example":"SUBJECT"}},"required":["id","targetId","targetName","targetType","effect","enabled","permissionType"]},"ListApplicationAuthPaginatedDataDto":{"type":"object","properties":{"list":{"description":"列表数据","type":"array","items":{"$ref":"#/components/schemas/ListApplicationAuthDataDto"}},"totalCount":{"type":"number","description":"记录总数","example":10}},"required":["list","totalCount"]},"ListApplicationAuthPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ListApplicationAuthPaginatedDataDto"}]}},"required":["statusCode","message","data"]},"UpdateAuthEnabledDto":{"type":"object","properties":{"id":{"type":"string","description":"授权 ID","example":"6229ffaxxxxxxxxcade3e3d9"},"enabled":{"type":"boolean","description":"授权是否生效开关,","example":true}},"required":["id","enabled"]},"ApplicationPaginatedDataDto":{"type":"object","properties":{"list":{"description":"列表数据","type":"array","items":{"$ref":"#/components/schemas/ApplicationDto"}},"totalCount":{"type":"number","description":"记录总数","example":10}},"required":["list","totalCount"]},"ApplicationPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ApplicationPaginatedDataDto"}]}},"required":["statusCode","message","data"]},"ApplicationSimpleInfoDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"62eaa95fe0xxxx9a5295bf7c"},"appIdentifier":{"type":"string","description":"应用唯一标志","example":"example"},"appName":{"type":"string","description":"应用名称","example":"示例应用"},"appLogo":{"type":"string","description":"应用 Logo 链接","example":"示例应用"},"appDescription":{"type":"string","description":"应用描述信息","example":"示例描述信息"},"appType":{"type":"string","description":"应用类型","enum":["web","spa","native","api","mfa","mini-program"],"example":"web"},"isIntegrateApp":{"type":"boolean","description":"是否为集成应用","example":false}},"required":["appId","appIdentifier","appName","appLogo","appType","isIntegrateApp"]},"ApplicationSimpleInfoSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ApplicationSimpleInfoDto"}]}},"required":["statusCode","message","data"]},"ApplicationSimpleInfoPaginatedDataDto":{"type":"object","properties":{"list":{"description":"列表数据","type":"array","items":{"$ref":"#/components/schemas/ApplicationSimpleInfoDto"}},"totalCount":{"type":"number","description":"记录总数","example":10}},"required":["list","totalCount"]},"ApplicationSimpleInfoPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ApplicationSimpleInfoPaginatedDataDto"}]}},"required":["statusCode","message","data"]},"ApplicationDefaultLoginMethodInput":{"type":"object","properties":{"connectionType":{"type":"string","description":"默认的登录类型\n  - `PASSWORD`: 密码类型，取决于你开启的基础登录方式，支持手机号/邮箱/用户名 + 密码进行登录\n  - `PASSCODE`: 验证码类型，取决于你开启的基础登录方式，支持手机号/邮箱 + 验证码进行登录\n  - `QRCODE`: 扫码登录类型，目前包含自建 APP 扫码登录、关注微信公众号扫码登录、微信小程序扫码登录三种类型\n      ","enum":["PASSCODE","PASSWORD","QRCODE","LDAP","AD"],"example":"PASSCODE"},"qrcodeType":{"type":"string","description":"当 `connectionType` 为 `QRCODE` 时，此参数表示二维码类型。\n- `SELF_BUILT_APP`: 自建 APP 扫码\n- `WECHAT_OFFICIAL_ACCOUNT`: 扫码关注微信公众号登录\n- `WECHAT_MINI_PROGRAM`: 微信小程序扫码登录\n    ","enum":["SELF_BUILT_APP","WECHAT_OFFICIAL_ACCOUNT","WECHAT_MINI_PROGRAM"],"example":"WECHAT_OFFICIAL_ACCOUNT"},"qrcodeExtIdpConnId":{"type":"string","description":"当 `connectionType` 为 `QRCODE` 时，你需要通过此参数指定具体的扫码登录身份源连接的 ID。","example":"6303a2bf2xxxxx7f665f01bf1"},"adExtIdpConnId":{"type":"string","description":"当 `connectionType` 为 `AD` 时，你需要通过此参数指定具体的 AD 身份源连接的 ID。","example":"6303a2bf2xxxxx7f665f01bf1"},"ldapExtIdpConnId":{"type":"string","description":"当 `connectionType` 为 `LDAP` 时，你需要通过此参数指定具体的 LDAP 身份源连接的 ID。","example":"6303a2bf2xxxxx7f665f01bf1"}},"required":["connectionType"]},"ApplicationEnabledExtIdpConnInputDto":{"type":"object","properties":{"extIdpConnId":{"type":"string","description":"身份源连接 ID","example":"6303a2bf2xxxxx7f665f01bf1"}},"required":["extIdpConnId"]},"ApplicationLoginConfigInputDto":{"type":"object","properties":{"mergeLoginAndRegisterPage":{"type":"boolean","description":"是否开启登录注册合并","default":false,"example":false},"enabledBasicLoginMethods":{"type":"array","description":"开启的基础登录方式","default":["EMAIL_CODE","EMAIL_PASSWORD"],"items":{"type":"string","enum":["PHONE_CODE","EMAIL_CODE","PHONE_PASSWORD","EMAIL_PASSWORD","USERNAME_PASSWORD","SELF_BUILT_APP_QRCODE"]}},"defaultLoginMethod":{"description":"应用默认登录方式（不包含社会化登录和企业身份源登录）","example":{"connectionType":"QRCODE","qrcodeExtIdpConnId":"6303a2bf2xxxxx7f665f01bf1"},"allOf":[{"$ref":"#/components/schemas/ApplicationDefaultLoginMethodInput"}]},"enabledExtIdpConnIds":{"description":"开启的外部身份源连接","example":[{"extIdpConnId":"xxx"}],"type":"array","items":{"$ref":"#/components/schemas/ApplicationEnabledExtIdpConnInputDto"}},"enabledAllExtIdpConns":{"type":"boolean","description":"开启所有的外部身份源连接","default":false,"example":false},"showAuthorizationPage":{"type":"boolean","description":"是否展示用户授权页面","example":false}},"required":["showAuthorizationPage"]},"ApplicationRegisterConfigInputDto":{"type":"object","properties":{"enabledBasicRegisterMethods":{"type":"array","description":"开启的注册方式","example":["EMAIL_CODE","PHONE_CODE"],"items":{"type":"string","enum":["PHONE_CODE","EMAIL_CODE","EMAIL_PASSWORD"]}},"defaultRegisterMethod":{"type":"string","description":"默认的注册类型\n- `PASSWORD`: 密码类型，支持邮箱 + 密码进行登录\n- `PASSCODE`: 验证码类型，取决于你开启的注册方式，支持手机号/邮箱 + 验证码进行登录\n        ","enum":["PASSCODE","PASSWORD"],"example":"PASSWORD"}},"required":["enabledBasicRegisterMethods","defaultRegisterMethod"]},"ApplicationBrandingConfigInputDto":{"type":"object","properties":{"customCSSEnabled":{"type":"boolean","description":"是否开启自定义 CSS","example":false,"default":false},"customCSS":{"type":"string","description":"自定义 CSS 内容","example":"/* \nEdit login page css\neg：\n.authing-guard-layout {\n  background: black !important;\n}\nChange the background color\n*/"},"guardVersion":{"type":"string","description":"Guard 版本：\n- `Advanced`: 高级版\n- `Classical`: 经典版\n    ","enum":["Advanced","Classical"],"default":"Advanced","example":"Advanced"},"customLoadingImage":{"type":"string","description":"自定义加载图标，当登录框加载时会展示","example":"https://files.authing.co/user-contents/photos/cbd51df7-efb1-4b50-b38c-d8e5a04b1830.png"},"customBackground":{"type":"string","description":"自定义登录页背景，示例：\n- 图片背景：`url(https://files.authing.co/user-contents/photos/6c6b3726-4a04-4ba7-b686-1a275f81a47a.png) center/cover`\n- 纯色背景：`rgba(37,49,122,1)`\n    ","example":"https://files.authing.co/user-contents/photos/cbd51df7-efb1-4b50-b38c-d8e5a04b1830.png"},"showChangeLanguageButton":{"type":"boolean","description":"是否显示切换语言按钮","example":false,"default":false},"defaultLanguage":{"type":"string","description":"展示的默认语言：\n- `zh-CN`: 简体中文\n- `zh-TW`: 繁体中文\n- `en-US`: 英文\n- `ja-JP`: 日语\n\n默认情况下，Authing 登录页会根据用户浏览器语言自动渲染。\n    ","enum":["zh-CN","en-US","zh-TW","ja-JP"],"example":"zh-CN"},"showForgetPasswordButton":{"type":"boolean","description":"是否显示忘记密码按钮","example":true,"default":true},"showEnterpriseConnections":{"type":"boolean","description":"是否显示企业身份源登录方式","example":true,"default":true},"showSocialConnections":{"type":"boolean","description":"是否显示社会化登录方式","example":true,"default":true}}},"CreateApplicationDto":{"type":"object","properties":{"appName":{"type":"string","description":"应用名称","example":"示例应用"},"template":{"type":"string","description":"集成应用模版类型，**集成应用必填**。集成应用只需要填 `template` 和 `templateData` 两个字段，其他的字段将被忽略。","example":"github"},"templateData":{"type":"string","description":"集成应用配置信息，**集成应用必填**。","example":"github"},"appIdentifier":{"type":"string","description":"应用唯一标志，**自建应用必填**。","example":"example"},"appLogo":{"type":"string","description":"应用 Logo 链接","example":"示例应用"},"appDescription":{"type":"string","description":"应用描述信息","example":"示例描述信息"},"appType":{"type":"string","description":"应用类型","enum":["web","spa","native","api","mfa","mini-program"],"example":"web","default":"web"},"defaultProtocol":{"type":"string","description":"默认应用协议类型","enum":["oidc","oauth","saml","cas","asa"],"example":"oidc"},"redirectUris":{"description":"应用登录回调地址","example":["https://example.com/callback"],"type":"array","items":{"type":"string"}},"logoutRedirectUris":{"description":"应用退出登录回调地址","example":["https://example.com/logout-callback"],"type":"array","items":{"type":"string"}},"initLoginUri":{"type":"string","description":"发起登录地址：在 Authing 应用详情点击「体验登录」或在应用面板点击该应用图标时，会跳转到此 URL，默认为 Authing 登录页。","example":["https://example.com/login"]},"ssoEnabled":{"type":"boolean","description":"是否开启 SSO 单点登录","example":false},"oidcConfig":{"description":"OIDC 协议配置","default":{"grant_types":["authorization_code","password","refresh_token"],"response_types":["code"],"id_token_signed_response_alg":"HS256","jwks_uri":null,"token_endpoint_auth_method":"client_secret_post","introspection_endpoint_auth_method":"client_secret_post","revocation_endpoint_auth_method":"client_secret_post","request_object_encryption_enc":null,"request_object_encryption_alg":null,"request_object_signing_alg":null,"userinfo_encrypted_response_enc":null,"userinfo_encrypted_response_alg":null,"userinfo_signed_response_alg":null,"id_token_encrypted_response_enc":null,"id_token_encrypted_response_alg":null,"jwks":null,"authorization_code_expire":600,"id_token_expire":1209600,"access_token_expire":1209600,"refresh_token_expire":2592000,"cas_expire":1209600,"skip_consent":true},"allOf":[{"$ref":"#/components/schemas/OIDCConfig"}]},"samlProviderEnabled":{"type":"boolean","description":"是否开启 SAML 身份提供商","example":false,"default":false},"samlConfig":{"description":"SAML 协议配置","default":{"acs":"REPLACE ME","authnContextClassRef":"urn:oasis:names:tc:SAML:2.0:ac:classes:unspecified","digestAlgorithm":"http://www.w3.org/2000/09/xmldsig#sha1","lifetimeInSeconds":3600,"nameIdentifierFormat":"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified","signatureAlgorithm":"http://www.w3.org/2000/09/xmldsig#rsa-sha1"},"allOf":[{"$ref":"#/components/schemas/SamlIdpConfig"}]},"oauthProviderEnabled":{"type":"boolean","description":"是否开启 OAuth 身份提供商","example":false,"default":false},"oauthConfig":{"description":"OAuth2.0 协议配置。【重要提示】不再推荐使用 OAuth2.0，建议切换到 OIDC。","example":{"grants":["authorization_code"],"access_token_lifetime":1209600,"refresh_token_lifetime":2592000,"introspection_endpoint_auth_method":"client_secret_post","revocation_endpoint_auth_method":"client_secret_post","id":"654d947a7bb83ca5d136581e","client_secret":"f8bb151818bd51e7e80c7635ec6e05fa","redirect_uris":["http://localhost:8080"]},"allOf":[{"$ref":"#/components/schemas/OauthIdpConfig"}]},"casProviderEnabled":{"type":"boolean","description":"是否开启 CAS 身份提供商","example":false,"default":false},"casConfig":{"description":"CAS 协议配置","example":{"casUserIdentifier":"${user.username}","customAttributes":{"customAttr1":"123"},"stLifetime":300},"allOf":[{"$ref":"#/components/schemas/CasIdPConfig"}]},"loginConfig":{"description":"登录配置","allOf":[{"$ref":"#/components/schemas/ApplicationLoginConfigInputDto"}]},"registerConfig":{"description":"注册配置","allOf":[{"$ref":"#/components/schemas/ApplicationRegisterConfigInputDto"}]},"brandingConfig":{"description":"品牌化配置","allOf":[{"$ref":"#/components/schemas/ApplicationBrandingConfigInputDto"}]}},"required":["appName"]},"CreateApplicationRespDataDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"62eaa95fe0xxxx9a5295bf7c"},"appIdentifier":{"type":"string","description":"应用唯一标志","example":"example"},"appName":{"type":"string","description":"应用名称","example":"示例应用"},"appLogo":{"type":"string","description":"应用 Logo 链接","example":"示例应用"},"appDescription":{"type":"string","description":"应用描述信息","example":"示例描述信息"},"appType":{"type":"string","description":"应用类型","enum":["web","spa","native","api","mfa","mini-program"],"example":"web"},"userPoolId":{"type":"string","description":"用户池 ID","example":""},"isIntegrateApp":{"type":"boolean","description":"是否为集成应用","example":false},"defaultProtocol":{"type":"string","description":"默认应用协议类型","enum":["oidc","oauth","saml","cas","asa"],"example":"oidc"},"redirectUris":{"description":"应用登录回调地址","example":["https://example.com/callback"],"type":"array","items":{"type":"string"}},"logoutRedirectUris":{"description":"应用退出登录回调地址","example":["https://example.com/logout-callback"],"type":"array","items":{"type":"string"}},"initLoginUri":{"type":"string","description":"发起登录地址：在 Authing 应用详情点击「体验登录」或在应用面板点击该应用图标时，会跳转到此 URL，默认为 Authing 登录页。","example":["https://example.com/login"]},"ssoEnabled":{"type":"boolean","description":"是否开启 SSO 单点登录","example":true},"ssoEnabledAt":{"format":"date-time","type":"string","description":"开启 SSO 单点登录的时间","example":"2022-07-03T02:20:30.000Z"},"loginConfig":{"description":"登录配置","allOf":[{"$ref":"#/components/schemas/ApplicationLoginConfigDto"}]},"registerConfig":{"description":"注册配置","allOf":[{"$ref":"#/components/schemas/ApplicationRegisterConfig"}]},"brandingConfig":{"description":"品牌化配置","allOf":[{"$ref":"#/components/schemas/ApplicationBrandingConfig"}]},"oidcConfig":{"description":"OIDC 协议配置","allOf":[{"$ref":"#/components/schemas/OIDCConfig"}]},"samlProviderEnabled":{"type":"boolean","description":"是否开启 SAML 身份提供商","example":false,"default":false},"samlConfig":{"description":"SAML 协议配置","allOf":[{"$ref":"#/components/schemas/SamlIdpConfig"}]},"oauthProviderEnabled":{"type":"boolean","description":"是否开启 OAuth 身份提供商","example":false,"default":false},"oauthConfig":{"description":"OAuth2.0 协议配置","allOf":[{"$ref":"#/components/schemas/OauthIdpConfig"}]},"casProviderEnabled":{"type":"boolean","description":"是否开启 CAS 身份提供商","example":false,"default":false},"casConfig":{"description":"CAS 协议配置","allOf":[{"$ref":"#/components/schemas/CasIdPConfig"}]},"customBrandingEnabled":{"type":"boolean","description":"是否自定义本应用的登录框，默认走全局的登录框配置。","example":false,"default":false},"customSecurityEnabled":{"type":"boolean","description":"是否自定义本应用的安全规则，默认走全局的安全配置。","example":false,"default":false},"template":{"type":"string","description":"集成应用的模版类型","example":"github"}},"required":["appId","appIdentifier","appName","appLogo","appType","userPoolId","isIntegrateApp","defaultProtocol","redirectUris","logoutRedirectUris","initLoginUri","ssoEnabled","loginConfig","registerConfig","brandingConfig","oidcConfig","samlProviderEnabled","oauthProviderEnabled","casProviderEnabled","customBrandingEnabled","customSecurityEnabled"]},"CreateApplicationRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CreateApplicationRespDataDto"}]}},"required":["statusCode","message","data"]},"DeleteApplicationDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9"}},"required":["appId"]},"GetApplicationSecretDataDto":{"type":"object","properties":{"secret":{"type":"string","description":"应用密钥","example":"860830c5a647xxxxxx7bd4d0dd94bf23"}},"required":["secret"]},"GetApplicationSecretRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetApplicationSecretDataDto"}]}},"required":["statusCode","message","data"]},"RefreshApplicationSecretDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9"}},"required":["appId"]},"RefreshApplicationSecretDataDto":{"type":"object","properties":{"secret":{"type":"string","description":"新的应用密钥","example":"860830c5a647xxxxxx7bd4d0dd94bf23"}},"required":["secret"]},"RefreshApplicationSecretRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RefreshApplicationSecretDataDto"}]}},"required":["statusCode","message","data"]},"ListApplicationActiveUsersOptionsDto":{"type":"object","properties":{"pagination":{"description":"分页配置","example":{"page":1,"limit":10},"allOf":[{"$ref":"#/components/schemas/PaginationDto"}]},"withCustomData":{"type":"boolean","description":"是否获取自定义数据","default":false,"example":true},"withIdentities":{"type":"boolean","description":"是否获取 identities","default":false,"example":true},"withDepartmentIds":{"type":"boolean","description":"是否获取部门 ID 列表","default":false,"example":true}}},"ListApplicationActiveUsersDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9"},"options":{"description":"可选项","allOf":[{"$ref":"#/components/schemas/ListApplicationActiveUsersOptionsDto"}]}},"required":["appId"]},"GetApplicationPermissionStrategyDataDto":{"type":"object","properties":{"permissionStrategy":{"type":"string","description":"应用访问授权策略","enum":["ALLOW_ALL","DENY_ALL"],"example":"ALLOW_ALL"}},"required":["permissionStrategy"]},"GetApplicationPermissionStrategyRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetApplicationPermissionStrategyDataDto"}]}},"required":["statusCode","message","data"]},"UpdateApplicationPermissionStrategyDataDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9"},"permissionStrategy":{"type":"string","description":"应用访问授权策略","enum":["ALLOW_ALL","DENY_ALL"],"example":"ALLOW_ALL"}},"required":["appId","permissionStrategy"]},"ApplicationPermissionRecordItem":{"type":"object","properties":{"targetType":{"type":"string","description":"主体类型","enum":["USER","ROLE","GROUP","ORG"],"example":"USER"},"namespaceCode":{"type":"string","description":"权限分组 code，当主体类型为 \"ROLE\" 时必传","example":"code1"},"inheritByChildren":{"type":"boolean","description":"当主体类型为 \"ORG\" 时，授权是否被子节点继承","example":true,"default":true},"targetIdentifier":{"description":"主体标识列表，当主体类型为 \"USER\" 时，值应为用户 ID；当主体类型为 \"GROUP\" 时，值应为分组 code；当主体类型为 \"ROLE\" 时，值应为角色 code；当主体类型为 \"ORG\" 时，值应为组织节点 ID。最多 50 条。","example":["6229ffaxxxxxxxxcade3e3d9"],"type":"array","items":{"type":"string"}},"effect":{"type":"string","description":"授权作用，允许或拒绝","enum":["ALLOW","DENY"],"example":"ALLOW"}},"required":["targetType","targetIdentifier","effect"]},"AuthorizeApplicationAccessDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9"},"list":{"description":"授权主体列表，最多 10 条","type":"array","items":{"$ref":"#/components/schemas/ApplicationPermissionRecordItem"}}},"required":["appId","list"]},"DeleteApplicationPermissionRecordItem":{"type":"object","properties":{"targetType":{"type":"string","description":"主体类型","enum":["USER","ROLE","GROUP","ORG"],"example":"USER"},"namespaceCode":{"type":"string","description":"权限分组 code，当主体类型为 \"ROLE\" 时必传","example":"code1"},"targetIdentifier":{"description":"主体标识列表，当主体类型为 \"USER\" 时，值应为用户 ID；当主体类型为 \"GROUP\" 时，值应为分组 code；当主体类型为 \"ROLE\" 时，值应为角色 code；当主体类型为 \"ORG\" 时，值应为组织节点 ID。最多 50 条。","example":["6229ffaxxxxxxxxcade3e3d9"],"type":"array","items":{"type":"string"}}},"required":["targetType","targetIdentifier"]},"RevokeApplicationAccessDto":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9"},"list":{"description":"授权主体列表，最多 10 条","type":"array","items":{"$ref":"#/components/schemas/DeleteApplicationPermissionRecordItem"}}},"required":["appId","list"]},"CheckDomainAvailable":{"type":"object","properties":{"domain":{"type":"string","description":"域名","example":"domain-a"}},"required":["domain"]},"CheckDomainAvailableDataDto":{"type":"object","properties":{"available":{"type":"boolean","description":"是否可用","example":true}},"required":["available"]},"CheckDomainAvailableSecretRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CheckDomainAvailableDataDto"}]}},"required":["statusCode","message","data"]},"TenantApplicationDto":{"type":"object","properties":{"userPoolId":{"type":"string","description":"UserPool ID","example":"62b40xxxxxxxxxxxd16f57c7"},"tenantAppId":{"type":"string","description":"App ID","example":"62b40xxxxxxxxxxxd16f57c7"},"name":{"type":"string","description":"App 名称","example":"App Name"},"description":{"type":"string","description":"应用描述信息"},"logo":{"type":"string","description":"App Logo","example":"https://example.com/logo.png"},"applicationType":{"type":"string","description":"应用类型"},"ssoEnabled":{"type":"boolean","description":"是否开启 SSO 单点登录","example":true},"appId":{"type":"string","description":"App ID","example":"62b40xxxxxxxxxxxd16f57c7"}},"required":["userPoolId","tenantAppId","name","logo","applicationType","ssoEnabled","appId"]},"TenantApplicationListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/TenantApplicationDto"}}},"required":["totalCount","list"]},"TenantApplicationListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/TenantApplicationListPagingDto"}]}},"required":["statusCode","message","data"]},"ApplicationTabMethodsSortConfigDto":{"type":"object","properties":{}},"ISsoPageCustomizationSettingsDto":{"type":"object","properties":{}},"TabConfigDto":{"type":"object","properties":{}},"LanguageCoinfigGlobalDto":{"type":"object","properties":{}},"LanguageCoinfigDto":{"type":"object","properties":{"global":{"$ref":"#/components/schemas/LanguageCoinfigGlobalDto"}},"required":["global"]},"UpdateLoginConfig":{"type":"object","properties":{"tabMethodsSortConfig":{"$ref":"#/components/schemas/ApplicationTabMethodsSortConfigDto"},"qrCodeSortConfig":{"$ref":"#/components/schemas/ApplicationTabMethodsSortConfigDto"},"ssoPageCustomizationSettings":{"$ref":"#/components/schemas/ISsoPageCustomizationSettingsDto"},"passwordTabConfig":{"$ref":"#/components/schemas/TabConfigDto"},"verifyCodeTabConfig":{"$ref":"#/components/schemas/TabConfigDto"},"config":{"$ref":"#/components/schemas/LanguageCoinfigDto"},"enableCreateTenant":{"type":"boolean","description":"是否允许创建租户","example":false},"createTenantScenes":{"description":"允许创建租户的场景","type":"array","items":{"type":"string"}},"enableJoinTenant":{"type":"boolean","description":"是否允许加入租户","example":false},"joinTenantScenes":{"description":"允许创建加入的场景","type":"array","items":{"type":"string"}},"enableVerifyDomain":{"type":"boolean","description":"是否校验企业域名","example":false},"verifyDomainScenes":{"description":"校验企业域名的场景","type":"array","items":{"type":"string"}}},"required":["tabMethodsSortConfig","qrCodeSortConfig","ssoPageCustomizationSettings","passwordTabConfig","verifyCodeTabConfig","config","enableCreateTenant","createTenantScenes","enableJoinTenant","joinTenantScenes","enableVerifyDomain","verifyDomainScenes"]},"UpdateLoginConfigDto":{"type":"object","properties":{"update":{"description":"应用登录配置更新内容","allOf":[{"$ref":"#/components/schemas/UpdateLoginConfig"}]}},"required":["update"]},"UserPoolTenantConfigDto":{"type":"object","properties":{"userPoolId":{"type":"string","description":"UserPool ID","example":"62b40xxxxxxxxxxxd16f57c7"},"isUserPoolAsTenant":{"type":"boolean","description":"用户池是否作为租户","example":true},"enableSwitchType":{"type":"string","description":"允许切换的类型","enum":["tenant-console","tenant-app","tenant-launpad"],"example":["tenant-app","tenant-console","tenant-launpad"]},"css":{"type":"string","description":"自定义 CSS","example":""},"cssEnabled":{"type":"boolean","description":"是否启用自定义 CSS"},"customLoading":{"type":"string","description":"自定义 Loading","example":""},"enableGuardVersionSwitch":{"type":"boolean","description":"是否开启 Guard 切换"},"guardVersion":{"type":"string","description":"使用 Guard 的版本","example":"v2"},"loadingBackground":{"type":"string","description":"自定义 Loading 背景","example":""},"enableCreateTenant":{"type":"boolean","description":"是否允许创建租户","example":false},"createTenantScenes":{"description":"允许创建租户的场景","type":"array","items":{"type":"string"}},"enableJoinTenant":{"type":"boolean","description":"是否允许加入租户","example":false},"joinTenantScenes":{"description":"允许创建加入的场景","type":"array","items":{"type":"string"}},"enableVerifyDomain":{"type":"boolean","description":"是否校验企业域名","example":false},"verifyDomainScenes":{"description":"校验企业域名的场景","type":"array","items":{"type":"string"}},"ssoPageCustomizationSettings":{"description":"页面自定义配置","example":{"hideIdp":true,"hideForgetPassword":true,"autoRegisterThenLogin":true,"hideSocialLogin":true,"hideLoginByPhoneCode":true,"hideRegister":true,"hideUserPasswordLogin":true,"hideWxMpScanLogin":true,"hideRegisterByPhone":true,"hideRegisterByEmail":true},"allOf":[{"$ref":"#/components/schemas/ISsoPageCustomizationSettingsDto"}]},"enableMultipleTenantPortal":{"type":"boolean","description":"是否允许选择门户登录"},"loginConfig":{"description":"登录配置","allOf":[{"$ref":"#/components/schemas/ApplicationLoginConfigDto"}]}},"required":["userPoolId","isUserPoolAsTenant","enableSwitchType","css","cssEnabled","customLoading","enableGuardVersionSwitch","guardVersion","loadingBackground","enableCreateTenant","createTenantScenes","enableJoinTenant","joinTenantScenes","enableVerifyDomain","verifyDomainScenes","ssoPageCustomizationSettings","enableMultipleTenantPortal","loginConfig"]},"UserPoolTenantConfigDtoRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。","example":20001},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserPoolTenantConfigDto"}]}},"required":["statusCode","message","data"]},"UpdateUserPoolTenantLoginConfigDto":{"type":"object","properties":{"update":{"description":"应用登录配置更新内容","allOf":[{"$ref":"#/components/schemas/UpdateLoginConfig"}]}},"required":["update"]},"UpdateTenantAppqrcodeState":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否允许开启扫码登录","example":false}},"required":["enabled"]},"ChangeUserPoolTenantExtIdpConnDto":{"type":"object","properties":{"connIds":{"description":"身份源连接 ID","type":"array","items":{"type":"string"}},"enabled":{"type":"boolean","description":"是否开启身份源连接","example":false}},"required":["connIds","enabled"]},"UpdateApplicationMfaSettingsDto":{"type":"object","properties":{"appId":{"type":"string","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7"},"enabledFactors":{"type":"array","description":"开启的 MFA 认证因素列表","example":["SMS"],"default":[],"items":{"type":"string","enum":["OTP","SMS","EMAIL","FACE"]}},"disabledFactors":{"type":"array","description":"关闭的 MFA 认证因素列表","example":["EMAIL"],"default":[],"items":{"type":"string","enum":["OTP","SMS","EMAIL","FACE"]}}},"required":["appId"]},"MFASettingsDto":{"type":"object","properties":{"enabledFactors":{"type":"array","description":"开启的 MFA 认证因素列表","example":["SMS"],"default":[],"items":{"type":"string","enum":["OTP","SMS","EMAIL","FACE"]}}},"required":["enabledFactors"]},"MFASettingsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/MFASettingsDto"}]}},"required":["statusCode","message","data"]},"CreateAsaAccountDto":{"type":"object","properties":{"appId":{"type":"string","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7"},"accountInfo":{"type":"object","description":"账号信息，一般为包含 \"account\", \"password\" key 的键值对","example":{"account":"account@example.com","password":"123456"}}},"required":["appId","accountInfo"]},"AsaAccountDto":{"type":"object","properties":{"appId":{"type":"string","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7"},"accountId":{"type":"string","description":"账号 ID","example":"62b40xxxxxxxxxxxd16f57c7"},"accountInfo":{"type":"object","description":"账号信息，一般为包含 \"account\", \"password\" key 的键值对","example":{"account":"account@example.com","password":"123456"}}},"required":["appId","accountId","accountInfo"]},"AsaAccountSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/AsaAccountDto"}]}},"required":["statusCode","message","data"]},"CreateAsaAccountsBatchItemDto":{"type":"object","properties":{"accountInfo":{"type":"object","description":"账号信息，一般为包含 \"account\", \"password\" key 的键值对","example":{"account":"account@example.com","password":"123456"}}},"required":["accountInfo"]},"CreateAsaAccountsBatchDto":{"type":"object","properties":{"appId":{"type":"string","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7"},"list":{"description":"账号列表","minItems":1,"maxItems":100,"type":"array","items":{"$ref":"#/components/schemas/CreateAsaAccountsBatchItemDto"}}},"required":["appId","list"]},"UpdateAsaAccountDto":{"type":"object","properties":{"appId":{"type":"string","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7"},"accountId":{"type":"string","description":"ASA 账号 ID","example":"6228edaxxxxxxxxcade3a3d9"},"accountInfo":{"type":"object","description":"账号信息，一般为包含 \"account\", \"password\" key 的键值对","example":{"account":"account@example.com","password":"123456"}}},"required":["appId","accountId","accountInfo"]},"AsaAccountPaginatedDataDto":{"type":"object","properties":{"list":{"description":"列表数据","type":"array","items":{"$ref":"#/components/schemas/AsaAccountDto"}},"totalCount":{"type":"number","description":"记录总数","example":10}},"required":["list","totalCount"]},"AsaAccountPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/AsaAccountPaginatedDataDto"}]}},"required":["statusCode","message","data"]},"GetAsaAccountBatchDto":{"type":"object","properties":{"appId":{"type":"string","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7"},"accountIds":{"description":"ASA 账号 ID 列表","minItems":1,"maxItems":100,"example":["6228edaxxxxxxxxcade3a3d9"],"type":"array","items":{"type":"string"}}},"required":["appId","accountIds"]},"AsaAccountListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"ASA 账号详情列表","type":"array","items":{"$ref":"#/components/schemas/AsaAccountDto"}}},"required":["statusCode","message","data"]},"DeleteAsaAccountDto":{"type":"object","properties":{"appId":{"type":"string","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7"},"accountId":{"type":"string","description":"ASA 账号 ID","example":"6228edaxxxxxxxxcade3a3d9"}},"required":["appId","accountId"]},"DeleteAsaAccountBatchDto":{"type":"object","properties":{"appId":{"type":"string","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7"},"accountIds":{"description":"ASA 账号 ID 列表","minItems":1,"maxItems":100,"example":["6228edaxxxxxxxxcade3a3d9"],"type":"array","items":{"type":"string"}}},"required":["appId","accountIds"]},"AssignAsaAccountItem":{"type":"object","properties":{"targetType":{"type":"string","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"targetIdentifiers":{"description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","minItems":0,"maxItems":100,"example":["userId1","userId2"],"type":"array","items":{"type":"string"}}},"required":["targetType","targetIdentifiers"]},"AssignAsaAccountsDto":{"type":"object","properties":{"appId":{"type":"string","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7"},"accountId":{"type":"string","description":"要关联的账号 ID","example":"6228edaxxxxxxxxcade3a3d9"},"targets":{"description":"关联对象列表","minItems":1,"maxItems":10,"type":"array","items":{"$ref":"#/components/schemas/AssignAsaAccountItem"}}},"required":["appId","accountId","targets"]},"AsaAccountTargetDto":{"type":"object","properties":{"targetType":{"type":"string","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","enum":["USER","ROLE","GROUP","DEPARTMENT"],"example":"USER"},"targetIdentifier":{"type":"string","description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","example":"code"}},"required":["targetType","targetIdentifier"]},"GetAsaAccountAssignedTargetDataDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"总数","example":10},"list":{"description":"主体列表","type":"array","items":{"$ref":"#/components/schemas/AsaAccountTargetDto"}}},"required":["totalCount","list"]},"GetAsaAccountAssignedTargetRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetAsaAccountAssignedTargetDataDto"}]}},"required":["statusCode","message","data"]},"AsaAccountSingleNullableRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/AsaAccountDto"}]}},"required":["statusCode","message","data"]},"ChangeEmailStrategyDto":{"type":"object","properties":{"verifyOldEmail":{"type":"boolean","description":"修改邮箱时是否验证旧邮箱","example":true,"default":true}},"required":["verifyOldEmail"]},"ChangePhoneStrategyDto":{"type":"object","properties":{"verifyOldPhone":{"type":"boolean","description":"修改手机号时是否验证旧手机号","example":true,"default":true}},"required":["verifyOldPhone"]},"CookieSettingsDto":{"type":"object","properties":{"cookieExpiresIn":{"type":"number","description":"Cookie 有效时间：用户登录状态的有效时间（默认为 1209600 秒/ 14 天），过期后用户需要重新登录。对于应用面板及已加入应用面板的应用，将使用此 cookie  过期时间。","example":1209600,"default":1209600},"cookieExpiresOnBrowserSession":{"type":"boolean","description":"Cookie 过期时间基于浏览器会话：当前浏览器关闭后立即过期，下次打开需重新登录。","example":false,"default":false}},"required":["cookieExpiresIn","cookieExpiresOnBrowserSession"]},"RegisterAnomalyDetectionConfigDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否开启频繁注册限制","example":false,"default":false},"limit":{"type":"number","description":"在一定时间周期内，对于同一个 IP，最多只能注册多少次。","example":50,"default":50},"timeInterval":{"type":"number","description":"限定周期时间长度，单位为秒。","example":300,"default":300}},"required":["enabled","limit","timeInterval"]},"LoginFailCheckConfigDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否开启登录失败次数限制。","example":false,"default":false},"limit":{"type":"number","description":"在一定时间周期内，对于同一个 IP，最多登录失败多少次后会触发安全策略。","example":50,"default":50},"timeInterval":{"type":"number","description":"限定周期时间长度，单位为秒。","example":300,"default":300},"unit":{"type":"string","description":"时间长度单位。Second/Minute/Hour/Day，仅仅做显示，timeInterval的单位还是秒","example":"Second","default":"Second"}},"required":["enabled","limit","timeInterval"]},"LoginPassowrdFailCheckConfigDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否开启登录密码错误限制","example":false,"default":false},"limit":{"type":"number","description":"密码错误次数最大限制","example":50,"default":50},"timeInterval":{"type":"number","description":"限定周期时间长度，单位为秒。","example":300,"default":300},"unit":{"type":"string","description":"时间长度单位。Second/Minute/Hour/Day，仅仅做显示，timeInterval的单位还是秒","example":"Second","default":"Second"}},"required":["enabled","limit","timeInterval"]},"LoginIpWhitelistCheckConfigDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否开启登录 ip 白名单验证","example":false,"default":false},"ipWhitelist":{"type":"string","description":"人机验证 ip 白名单","example":"132.133.123.144,255.255.255.255"}},"required":["enabled","ipWhitelist"]},"LoginAnomalyDetectionConfigDto":{"type":"object","properties":{"loginFailStrategy":{"type":"string","description":"登录安全策略。当用户触发登录失败频率检测时，采用什么策略。目前支持验证码和锁定账号两种策略。当选择账号锁定策略的时候，只可以开启「登录密码错误限制」。此字段标志为过时，但是此字段还是必传的，如果使用新版本逻辑可以默认写一个。新版本账号锁定使用 accountLock，验证码使用 robotVerify","enum":["captcha","block-account"],"example":"captcha","default":"captcha","deprecated":true},"robotVerify":{"type":"string","description":"人机验证（验证码）策略。可选值，disable（不开启）/condition_set（条件开启）/always_enable （始终开启）","example":"condition_set"},"accountLock":{"type":"string","description":"账号锁定策略。可选值，disable（不开启）/condition_set（条件开启）","example":"condition_set"},"loginFailCheck":{"description":"登录失败次数限制：当用户登录输入信息错误的时候会被按照「登录安全策略」规则触发相对应的策略。","allOf":[{"$ref":"#/components/schemas/LoginFailCheckConfigDto"}]},"loginPasswordFailCheck":{"description":"登录密码错误限制：当用户登录输入密码信息错误的时候会被按照「登录安全策略」规则触发相对应的策略。此字段被标志为过时，见 accountLockLoginPasswordFailCheck/ robotVerifyLoginPasswordFailCheck","deprecated":true,"allOf":[{"$ref":"#/components/schemas/LoginPassowrdFailCheckConfigDto"}]},"accountLockLoginPasswordFailCheck":{"description":"账号锁定-登录密码错误限制：当用户登录输入密码信息错误的时候会被按照「登录安全策略」规则触发相对应的策略。","allOf":[{"$ref":"#/components/schemas/LoginPassowrdFailCheckConfigDto"}]},"robotVerifyLoginPasswordFailCheck":{"description":"人机验证（验证码）-登录密码错误限制：当用户登录输入密码信息错误的时候会被按照「登录安全策略」规则触发相对应的策略。","allOf":[{"$ref":"#/components/schemas/LoginPassowrdFailCheckConfigDto"}]},"robotVerifyLoginIpWhitelistCheck":{"description":"人机验证（验证码）- ip 白名单：当登录者 ip 不在白名单会触发人机验证。","allOf":[{"$ref":"#/components/schemas/LoginIpWhitelistCheckConfigDto"}]},"robotVerifyLoginTimeCheckEnable":{"type":"boolean","description":"是否开启登录时间限制"},"robotVerifyloginWeekStartEndTime":{"description":"登录时间限制周几+起始时间数组","type":"array","items":{"type":"string"}}},"required":["loginFailStrategy","robotVerify","accountLock","loginFailCheck","loginPasswordFailCheck","robotVerifyLoginPasswordFailCheck","robotVerifyLoginIpWhitelistCheck","robotVerifyLoginTimeCheckEnable","robotVerifyloginWeekStartEndTime"]},"SelfUnlockAccountConfigDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"是否允许用户自助解锁账号。","default":false,"example":false},"strategy":{"type":"string","description":"自助解锁方式，目前支持原密码 + 验证码和验证码两种方式。","enum":["captcha","password-captcha"],"default":"captcha","example":"captcha"}},"required":["enabled","strategy"]},"QrcodeLoginStrategyDto":{"type":"object","properties":{"qrcodeExpiresIn":{"type":"number","description":"二维码有效时间，单位秒","example":120,"default":120},"qrcodeExpiresInUnit":{"type":"string","description":"时间长度单位，Second/Minute/Hour/Day，仅做显示用","example":"Second","default":"Second"},"ticketExpiresIn":{"type":"number","description":"ticket 有效时间，单位秒","example":300,"default":300},"ticketExpiresInUnit":{"type":"string","description":"时间长度单位，Second/Minute/Hour/Day，仅作显示用","example":"Second","default":"Second"},"allowExchangeUserInfoFromBrowser":{"type":"boolean","description":"Web 轮询接口返回完整用户信息，详情见此文档：Web 轮询接口返回完整用户信息","example":true,"default":true},"returnFullUserInfo":{"type":"boolean","description":"允许在浏览器使用 ticket 换取用户信息，详情见此文档：Web 轮询接口返回完整用户信息","example":true,"default":false}},"required":["qrcodeExpiresIn","ticketExpiresIn","allowExchangeUserInfoFromBrowser","returnFullUserInfo"]},"SecuritySettingsDto":{"type":"object","properties":{"allowedOrigins":{"type":"string","description":"安全域（CORS）","example":"https://example.com \n https://example.com"},"authingTokenExpiresIn":{"type":"number","description":"Authing Token 有效时间（秒）","example":1296000,"default":129600},"verifyCodeLength":{"type":"number","description":"验证码长度。包含短信验证码、邮件验证码和图形验证码。","example":6,"default":6},"verifyCodeMaxAttempts":{"type":"number","description":"验证码尝试次数。在一个验证码有效周期内（默认为 60 s），用户输入验证码错误次数超过此阈值之后，将会导致当前验证码失效，需要重新发送。","example":1,"default":1},"changeEmailStrategy":{"description":"用户修改邮箱的安全策略","example":{"verifyOldEmail":true},"allOf":[{"$ref":"#/components/schemas/ChangeEmailStrategyDto"}]},"changePhoneStrategy":{"description":"用户修改手机号的安全策略","example":{"verifyOldPhone":true},"allOf":[{"$ref":"#/components/schemas/ChangePhoneStrategyDto"}]},"cookieSettings":{"description":"Cookie 过期时间设置","allOf":[{"$ref":"#/components/schemas/CookieSettingsDto"}]},"registerDisabled":{"type":"boolean","description":"是否禁止用户注册，开启之后，用户将无法自主注册，只能管理员为其创建账号。针对 B2B 和 B2E 类型用户池，默认开启。","example":false,"default":false},"registerAnomalyDetection":{"description":"频繁注册检测配置","allOf":[{"$ref":"#/components/schemas/RegisterAnomalyDetectionConfigDto"}]},"completePasswordAfterPassCodeLogin":{"type":"boolean","description":"验证码注册后是否要求用户设置密码（仅针对 Authing 登录页和 Guard 有效，不针对 API 调用）。","example":false,"default":false},"loginAnomalyDetection":{"description":"登录防暴破配置","allOf":[{"$ref":"#/components/schemas/LoginAnomalyDetectionConfigDto"}]},"loginRequireEmailVerified":{"type":"boolean","description":"当使用邮箱登录时，未验证的邮箱登录时是否禁止登录并发送认证邮件。当用户收到邮件并完成验证之后，才能进行登录。"},"selfUnlockAccount":{"description":"用户自助解锁配置。注：只有绑定了手机号/邮箱的用户才可以自助解锁","allOf":[{"$ref":"#/components/schemas/SelfUnlockAccountConfigDto"}]},"enableLoginAccountSwitch":{"type":"boolean","description":"Authing 登录页面是否开启登录账号选择","example":false,"default":false},"qrcodeLoginStrategy":{"description":"APP 扫码登录安全配置","example":false,"default":false,"allOf":[{"$ref":"#/components/schemas/QrcodeLoginStrategyDto"}]}},"required":["authingTokenExpiresIn","verifyCodeLength","verifyCodeMaxAttempts","changeEmailStrategy","changePhoneStrategy","registerDisabled","registerAnomalyDetection","completePasswordAfterPassCodeLogin","loginAnomalyDetection","loginRequireEmailVerified","selfUnlockAccount","enableLoginAccountSwitch","qrcodeLoginStrategy"]},"SecuritySettingsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SecuritySettingsDto"}]}},"required":["statusCode","message","data"]},"UpdateSecuritySettingsDto":{"type":"object","properties":{"allowedOrigins":{"description":"安全域（CORS）","example":["https://example.com"],"type":"array","items":{"type":"string"}},"authingTokenExpiresIn":{"type":"number","description":"Authing Token 有效时间（秒）","example":1296000,"default":129600},"verifyCodeLength":{"type":"number","description":"验证码长度。包含短信验证码、邮件验证码和图形验证码。","example":6,"default":6},"verifyCodeMaxAttempts":{"type":"number","description":"验证码尝试次数。在一个验证码有效周期内（默认为 60 s），用户输入验证码错误次数超过此阈值之后，将会导致当前验证码失效，需要重新发送。","example":1,"default":1},"changeEmailStrategy":{"description":"用户修改邮箱的安全策略","example":{"verifyOldEmail":true},"allOf":[{"$ref":"#/components/schemas/ChangeEmailStrategyDto"}]},"changePhoneStrategy":{"description":"用户修改手机号的安全策略","example":{"verifyOldPhone":true},"allOf":[{"$ref":"#/components/schemas/ChangePhoneStrategyDto"}]},"cookieSettings":{"description":"Cookie 过期时间设置","allOf":[{"$ref":"#/components/schemas/CookieSettingsDto"}]},"registerDisabled":{"type":"boolean","description":"是否禁止用户注册，开启之后，用户将无法自主注册，只能管理员为其创建账号。针对 B2B 和 B2E 类型用户池，默认开启。","example":false,"default":false},"registerAnomalyDetection":{"description":"频繁注册检测配置","allOf":[{"$ref":"#/components/schemas/RegisterAnomalyDetectionConfigDto"}]},"completePasswordAfterPassCodeLogin":{"type":"boolean","description":"验证码注册后是否要求用户设置密码（仅针对 Authing 登录页和 Guard 有效，不针对 API 调用）。","example":false,"default":false},"loginAnomalyDetection":{"description":"登录防暴破配置","allOf":[{"$ref":"#/components/schemas/LoginAnomalyDetectionConfigDto"}]},"loginRequireEmailVerified":{"type":"boolean","description":"当使用邮箱登录时，未验证的邮箱登录时是否禁止登录并发送认证邮件。当用户收到邮件并完成验证之后，才能进行登录。"},"selfUnlockAccount":{"description":"用户自助解锁配置。注：只有绑定了手机号/邮箱的用户才可以自助解锁","allOf":[{"$ref":"#/components/schemas/SelfUnlockAccountConfigDto"}]},"enableLoginAccountSwitch":{"type":"boolean","description":"Authing 登录页面是否开启登录账号选择","example":false,"default":false},"qrcodeLoginStrategy":{"description":"APP 扫码登录安全配置","default":false,"allOf":[{"$ref":"#/components/schemas/QrcodeLoginStrategyDto"}]}}},"CreateTenantDto":{"type":"object","properties":{"name":{"type":"string","description":"租户名","example":"租户一"},"appIds":{"description":"租户关联的应用 ID","example":["60b49eb83fa80adb96f26e68","60b49eb83fd80adb96f26e69"],"type":"array","items":{"type":"string"}},"logo":{"description":"租户 logo","example":"https://image.example.com/logo.png","type":"array","items":{"type":"string"}},"description":{"type":"string","description":"租户描述","example":"我是租户一"},"rejectHint":{"type":"string","description":"用户被租户拒绝登录时显示的提示文案","example":"尚未加入当前租户，无法登录"},"sourceAppId":{"type":"string","description":"租户来源的应用 ID，该值不存在时代表租户来源为 Authing 控制台","example":"60b49eb83fd80adb96f26e68"},"enterpriseDomains":{"description":"企业邮箱域名","type":"array","items":{"type":"string"}},"expireTime":{"type":"string","description":"租户过期时间"},"mauAmount":{"type":"number","description":"租户 MAU 上限"},"memberAmount":{"type":"number","description":"租户成员上限"},"adminAmount":{"type":"number","description":"租户管理员上限"}},"required":["name","appIds"]},"TenantDto":{"type":"object","properties":{"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"},"userPoolId":{"type":"string","description":"用户池 ID","example":"60b49eb83fe80adb66f25a37"},"name":{"type":"string","description":"租户名","maxLength":64,"example":"租户一"},"description":{"type":"string","description":"租户描述","example":"我是租户一"},"logo":{"description":"租户 logo","example":"https://image.example.com/logo.png","type":"array","items":{"type":"string"}},"rejectHint":{"type":"string","description":"用户被租户拒绝登录时显示的提示文案","example":"尚未加入当前租户，无法登录"},"appIds":{"description":"租户关联的应用 ID","example":["60b49eb83fa80adb96f26e68","60b49eb83fd80adb96f26e69"],"type":"array","items":{"type":"string"}},"creator":{"type":"string","description":"创建者用户的 ID","example":"60b49eb83fd80adb96f26e68"},"sourceAppId":{"type":"string","description":"租户来源的应用 ID，该值不存在时代表租户来源为 Authing 控制台","example":"60b49eb83fd80adb96f26e68"},"source":{"type":"string","description":"租户来源"},"code":{"type":"string","description":"租户 Code"},"enterpriseDomains":{"type":"string","description":"租户配置的企业域名"}},"required":["tenantId","userPoolId","name","logo","appIds","creator","sourceAppId","source","code","enterpriseDomains"]},"CreateTenantRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TenantDto"}]}},"required":["statusCode","message","data"]},"UpdateTenantDto":{"type":"object","properties":{"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"},"name":{"type":"string","description":"租户名","example":"租户一"},"appIds":{"description":"租户关联的应用 ID","example":["60b49eb83fa80adb96f26e68","60b49eb83fd80adb96f26e69"],"type":"array","items":{"type":"string"}},"logo":{"description":"租户 logo","example":"https://image.example.com/logo.png","type":"array","items":{"type":"string"}},"description":{"type":"string","description":"租户描述","example":"我是租户一"},"rejectHint":{"type":"string","description":"用户被租户拒绝登录时显示的提示文案","example":"尚未加入当前租户，无法登录"},"sourceAppId":{"type":"string","description":"租户来源的应用 ID，该值不存在时代表租户来源为 Authing 控制台","example":"60b49eb83fd80adb96f26e68"}},"required":["tenantId"]},"DeleteTenantDto":{"type":"object","properties":{"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"}},"required":["tenantId"]},"TenantRespDto":{"type":"object","properties":{"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"},"userPoolId":{"type":"string","description":"用户池 ID","example":"60b49eb83fe80adb66f25a37"},"name":{"type":"string","description":"租户名","maxLength":64,"example":"租户一"},"description":{"type":"string","description":"租户描述","example":"我是租户一"},"logo":{"description":"租户 logo","example":"https://image.example.com/logo.png","type":"array","items":{"type":"string"}},"rejectHint":{"type":"string","description":"用户被租户拒绝登录时显示的提示文案","example":"尚未加入当前租户，无法登录"},"appIds":{"description":"租户关联的应用 ID","example":["60b49eb83fa80adb96f26e68","60b49eb83fd80adb96f26e69"],"type":"array","items":{"type":"string"}},"creator":{"type":"string","description":"创建者用户的 ID","example":"60b49eb83fd80adb96f26e68"},"sourceAppId":{"type":"string","description":"租户来源的应用 ID，该值不存在时代表租户来源为 Authing 控制台","example":"60b49eb83fd80adb96f26e68"},"source":{"type":"string","description":"租户来源"},"code":{"type":"string","description":"租户 Code"},"enterpriseDomains":{"type":"string","description":"租户配置的企业域名"},"creatorDetail":{"type":"object","description":"创建者基本信息","example":{"name":"用户一","photo":"https://image.example.com/logo.jpg","username":"","nickname":""}},"sourceAppDetail":{"type":"object","description":"来源 app 基本信息","example":{"name":"应用一","logo":"https://image.example.com/logo.jpg"}}},"required":["tenantId","userPoolId","name","logo","appIds","creator","sourceAppId","source","code","enterpriseDomains"]},"TenantListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/TenantRespDto"}}},"required":["totalCount","list"]},"TenantListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/TenantListPagingDto"}]}},"required":["statusCode","message","data"]},"TenantSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TenantRespDto"}]}},"required":["statusCode","message","data"]},"ImportTenantDto":{"type":"object","properties":{"excelUrl":{"type":"string","description":"excel path 地址","example":"/xx/xx.xls"}},"required":["excelUrl"]},"ImportTenantDataDto":{"type":"object","properties":{"success":{"type":"boolean","description":"是否操作成功","example":true}},"required":["success"]},"ImportTenantRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ImportTenantDataDto"}]}},"required":["statusCode","message","data"]},"ImportTenantHistoryDataDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"总数","example":true},"list":{"description":"记录条数","example":true,"type":"array","items":{"type":"object"}}},"required":["totalCount","list"]},"ImportTenantHistoryRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ImportTenantHistoryDataDto"}]}},"required":["statusCode","message","data"]},"ImportTenantNotifyUseDataDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"总数","example":true},"list":{"description":"记录条数","example":true,"type":"array","items":{"type":"object"}}},"required":["totalCount","list"]},"ImportTenantNotifyUserRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ImportTenantNotifyUseDataDto"}]}},"required":["statusCode","message","data"]},"SendTenantEmailDto":{"type":"object","properties":{"adminName":{"type":"string","description":"管理员名字"},"userName":{"type":"string","description":"用户名"},"email":{"type":"string","description":"管理员邮箱"},"identifier":{"type":"string","description":"租户域名"},"tenantId":{"type":"string","description":"租户 id"},"tenantName":{"type":"string","description":"租户名"}},"required":["adminName","userName","email","identifier","tenantId","tenantName"]},"SendManyTenantEmailDto":{"type":"object","properties":{"users":{"description":"需要邮件通知的管理员","type":"array","items":{"$ref":"#/components/schemas/SendTenantEmailDto"}},"importId":{"type":"number","description":"导入 id"},"adminName":{"type":"string","description":"管理员名"}},"required":["users","importId","adminName"]},"SendEmailBatchDataDto":{"type":"object","properties":{"success":{"type":"boolean","description":"是否操作成功","example":true}},"required":["success"]},"SendTenantSmsDto":{"type":"object","properties":{"adminName":{"type":"string","description":"管理员名字"},"userName":{"type":"string","description":"用户名"},"identifier":{"type":"string","description":"用户唯一标识"},"phone":{"type":"string","description":"管理员手机"},"phoneCountryCode":{"type":"string","description":"管理员手机地区号"},"tenantId":{"type":"string","description":"租户 id"},"tenantName":{"type":"string","description":"租户名"}},"required":["adminName","userName","identifier","phone","phoneCountryCode","tenantId","tenantName"]},"SendManyTenantSmsDto":{"type":"object","properties":{"users":{"description":"需要短信通知的管理员","type":"array","items":{"$ref":"#/components/schemas/SendTenantSmsDto"}},"importId":{"type":"number","description":"导入 id"},"adminName":{"type":"string","description":"管理员名"}},"required":["users","importId","adminName"]},"SendSmsBatchDataDto":{"type":"object","properties":{"success":{"type":"boolean","description":"是否操作成功","example":true}},"required":["success"]},"SendSmsBatchRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SendSmsBatchDataDto"}]}},"required":["statusCode","message","data"]},"ListTenantAdminDto":{"type":"object","properties":{"tenantId":{"type":"string","description":"租户 ID"},"keywords":{"type":"string","description":"搜索关键字"},"page":{"type":"string","description":"页码"},"limit":{"type":"string","description":"每页获取的数据量"}},"required":["tenantId"]},"TenantUserDto":{"type":"object","properties":{"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"loginsCount":{"type":"number","description":"历史总登录次数","example":3},"lastIp":{"type":"string","description":"上次登录 IP","example":"127.0.0.1"},"gender":{"type":"string","description":"性别:\n- `M`: 男性，`male`\n- `F`: 女性，`female`\n- `U`: 未知，`unknown`\n  ","enum":["M","F","U"],"example":"M"},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":"James"},"preferredUsername":{"type":"string","description":"Preferred Username","example":"alice"},"lastLoginApp":{"type":"string","description":"用户上次登录的应用 ID","example":""},"userPoolId":{"type":"string","description":"用户池 ID","example":"60b49eb83fd80adb96f26e68"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"},"memberId":{"type":"string","description":"租户成员 ID"},"linkUserId":{"type":"string","description":"关联的用户池级别的用户 ID"},"isTenantAdmin":{"type":"boolean","description":"是否为租户管理员"},"password":{"type":"string","description":"用户密码，默认为明文。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"passw0rd"},"salt":{"type":"string","description":"加密用户密码的盐","example":"dgisaeieruur"}},"required":["gender","userPoolId","tenantId","memberId","linkUserId","isTenantAdmin"]},"TenantUserListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/TenantUserDto"}}},"required":["totalCount","list"]},"TenantUserListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TenantUserListPagingDto"}]}},"required":["statusCode","message","data"]},"RemoveTenantUsersDto":{"type":"object","properties":{"tenantId":{"type":"string","description":"租户 ID"},"linkUserIds":{"description":"关联的用户池级别的用户 ID","type":"array","items":{"type":"string"}},"memberIds":{"description":"租户成员 ID","type":"array","items":{"type":"string"}}},"required":["tenantId"]},"GetTenantUserDto":{"type":"object","properties":{"tenantId":{"type":"string","description":"租户 ID"},"linkUserId":{"type":"string","description":"关联的用户池级别的用户 ID"},"memberId":{"type":"string","description":"租户成员 ID"}},"required":["tenantId"]},"GenerateInviteTenantUserLink":{"type":"object","properties":{"appId":{"type":"string","description":"应用 ID"},"tenantId":{"type":"string","description":"租户 ID"},"emails":{"description":"要邀请的用户邮箱","type":"array","items":{"type":"string"}},"validityTerm":{"type":"string","description":"链接有效期"}},"required":["appId","emails","validityTerm"]},"errorEmailMsg":{"type":"object","properties":{"email":{"type":"string","description":"邮箱地址"},"message":{"type":"string","description":"错误信息描述"}},"required":["email","message"]},"InviteTenantUserRecord":{"type":"object","properties":{"recordId":{"type":"number","description":"邀请记录编号"},"inviteAccount":{"type":"string","description":"邀请账号","example":"test@test.cn"},"verifiedStatus":{"type":"string","description":"账号激活状态","example":"pending"},"inviteLink":{"type":"string","description":"邀请链接"},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-07-03T02:20:30.000Z"},"activatedAt":{"format":"date-time","type":"string","description":"账号激活时间"}},"required":["recordId","inviteAccount","verifiedStatus","inviteLink","createdAt","activatedAt"]},"InviteTenantUsersDto":{"type":"object","properties":{"errMsgs":{"description":"错误的邮箱提示","type":"array","items":{"$ref":"#/components/schemas/errorEmailMsg"}},"list":{"description":"邀请用户信息返回值","type":"array","items":{"$ref":"#/components/schemas/InviteTenantUserRecord"}}},"required":["errMsgs","list"]},"InviteTenantUsersRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/InviteTenantUsersDto"}]}},"required":["statusCode","message","data"]},"InviteTenantUserRecordListDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"邀请用户历史记录","type":"array","items":{"$ref":"#/components/schemas/InviteTenantUserRecord"}}},"required":["totalCount","list"]},"InviteTenantUserRecordListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/InviteTenantUserRecordListDto"}]}},"required":["statusCode","message","data"]},"MultipleTenantAdminDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户唯一 ID","example":"60b49eb83fd80adb96f26e68"},"name":{"type":"string","description":"用户名称","example":"用户A"},"phone":{"type":"string","description":"用户手机号"},"email":{"type":"string","description":"用户邮箱"},"apiAuthorized":{"type":"boolean","description":"授权 API"},"lastLogin":{"type":"string","description":"最后登录时间"}},"required":["userId","name","phone","email","lastLogin"]},"MultipleTenantAdminListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/MultipleTenantAdminDto"}}},"required":["totalCount","list"]},"MultipleTenantAdminPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/MultipleTenantAdminListPagingDto"}]}},"required":["statusCode","message","data"]},"CreateMultipleTenantAdminDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID"},"tenantIds":{"description":"租户 ID","type":"array","items":{"type":"string"}},"apiAuthorized":{"type":"boolean","description":"是否授权"},"sendPhoneNotification":{"type":"boolean","description":"SMS 通知"},"sendEmailNotification":{"type":"boolean","description":"Email 通知"}},"required":["userId","tenantIds"]},"UpdateMultipleTenantAdminDto":{"type":"object","properties":{"tenantIds":{"description":"租户 ID","type":"array","items":{"type":"string"}},"apiAuthorized":{"type":"boolean","description":"是否授权"}},"required":["tenantIds"]},"DeleteMultipleTenantAdminBodyDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID"}},"required":["userId"]},"TenantCooperatorDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户唯一 ID","example":"60b49eb83fd80adb96f26e68"},"type":{"type":"string","description":"类型","example":"<知道了有哪些类型再改这里>"},"external":{"type":"boolean","description":"是否external","example":false},"user":{"description":"用户","allOf":[{"$ref":"#/components/schemas/UserDto"}]},"tenantUser":{"description":"租户用户","allOf":[{"$ref":"#/components/schemas/TenantUserDto"}]}},"required":["userId","type","external","user"]},"TenantCooperatorListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/TenantCooperatorDto"}}},"required":["totalCount","list"]},"TenantCooperatorPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TenantCooperatorListPagingDto"}]}},"required":["statusCode","message","data"]},"TenantCooperatorSingleDto":{"type":"object","properties":{"list":{"description":"菜单","type":"array","items":{"type":"string"}},"authorizedPoliciesCode":{"description":"策略","type":"array","items":{"type":"string"}}},"required":["list","authorizedPoliciesCode"]},"TenantCooperatorSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TenantCooperatorSingleDto"}]}},"required":["statusCode","message","data"]},"CreateTenantCooperatorDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID"},"apiAuthorized":{"type":"boolean","description":"是否授权 API","default":false},"policies":{"description":"策略","type":"array","items":{"type":"string"}},"sendPhoneNotification":{"type":"boolean","description":"SMS 通知"},"sendEmailNotification":{"type":"boolean","description":"Email 通知"}},"required":["userId","policies"]},"UpdateTenantCooperatorDto":{"type":"object","properties":{"apiAuthorized":{"type":"boolean","description":"是否授权 API"},"policies":{"description":"策略","type":"array","items":{"type":"string"}}},"required":["apiAuthorized","policies"]},"DeleteTenantCooperatorBodyDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户 ID"}},"required":["userId"]},"SendInviteTenantUserEmailDto":{"type":"object","properties":{}},"AddTenantUsersDto":{"type":"object","properties":{"tenantId":{"type":"string","description":"租户 ID"},"linkUserIds":{"description":"关联的用户池级别的用户 ID","type":"array","items":{"type":"string"}}},"required":["tenantId","linkUserIds"]},"UpdateTenantUserDto":{"type":"object","properties":{"tenantId":{"type":"string","description":"租户 ID"},"linkUserId":{"type":"string","description":"关联的用户池级别的用户 ID"},"memberId":{"type":"string","description":"租户成员 ID"},"updates":{"type":"object","description":"要更新的租户成员信息","example":{"name":"张三","phone":"13800138000","email":"zhangsan@example.com"}}},"required":["tenantId","updates"]},"CreateTenantUserOptionsDto":{"type":"object","properties":{"keepPassword":{"type":"boolean","description":"该参数一般在迁移旧有用户数据到 Authing 的时候会设置。开启这个开关，password 字段会直接写入 Authing 数据库，Authing 不会再次加密此字段。如果你的密码不是明文存储，你应该保持开启，并编写密码函数计算。","default":false},"autoGeneratePassword":{"type":"boolean","description":"是否自动生成密码","default":false},"resetPasswordOnFirstLogin":{"type":"boolean","description":"是否强制要求用户在第一次的时候重置密码","default":false},"passwordEncryptType":{"type":"string","description":"密码加密类型，支持使用 RSA256 和国密 SM2 算法进行加密。默认为 `none` 不加密。\n- `none`: 不对密码进行加密，使用明文进行传输。\n- `rsa`: 使用 RSA256 算法对密码进行加密，需要使用 Authing 服务的 RSA 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 RSA256 公钥。\n- `sm2`: 使用 [国密 SM2 算法](https://baike.baidu.com/item/SM2/15081831) 对密码进行加密，需要使用 Authing 服务的 SM2 公钥进行加密，请阅读**介绍**部分了解如何获取 Authing 服务的 SM2 公钥。\n  ","enum":["sm2","rsa","none"],"example":"none","default":"none"}}},"CreateTenantUserReqDto":{"type":"object","properties":{"email":{"type":"string","description":"邮箱，不区分大小写","example":"test@example.com"},"phone":{"type":"string","description":"手机号，不带区号。如果是国外手机号，请在 phoneCountryCode 参数中指定区号。","example":"188xxxx8888"},"phoneCountryCode":{"type":"string","description":"手机区号，中国大陆手机号可不填。Authing 短信服务暂不内置支持国际手机号，你需要在 Authing 控制台配置对应的国际短信服务。完整的手机区号列表可参阅 https://en.wikipedia.org/wiki/List_of_country_calling_codes。","example":"+86"},"username":{"type":"string","description":"用户名，用户池内唯一","example":"bob"},"name":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"nickname":{"type":"string","description":"昵称","example":"张三"},"photo":{"type":"string","description":"头像链接","example":"https://files.authing.co/authing-console/default-user-avatar.png"},"gender":{"type":"string","description":"性别:\n- `M`: 男性，`male`\n- `F`: 女性，`female`\n- `U`: 未知，`unknown`\n  ","enum":["M","F","U"],"example":"M"},"birthdate":{"format":"date-time","type":"string","description":"出生日期","example":"2022-06-03"},"country":{"type":"string","description":"所在国家","example":"CN"},"province":{"type":"string","description":"所在省份","example":"BJ"},"city":{"type":"string","description":"所在城市","example":"BJ"},"address":{"type":"string","description":"所处地址","example":"北京朝阳"},"streetAddress":{"type":"string","description":"所处街道地址","example":"北京朝阳区 xxx 街道"},"postalCode":{"type":"string","description":"邮政编码号","example":"438100"},"givenName":{"type":"string","description":"名","example":"三"},"familyName":{"type":"string","description":"姓","example":"张"},"middleName":{"type":"string","description":"中间名","example":"James"},"preferredUsername":{"type":"string","description":"Preferred Username","example":"alice"},"tenantId":{"type":"string","description":"租户 ID","example":"60b49eb83fd80adb96f26e68"},"password":{"type":"string","description":"用户密码，默认为明文。我们使用 HTTPS 协议对密码进行安全传输，可以在一定程度上保证安全性。如果你还需要更高级别的安全性，我们还支持 RSA256 和国密 SM2 两种方式对密码进行加密。详情见 `passwordEncryptType` 参数。","example":"passw0rd"},"salt":{"type":"string","description":"加密用户密码的盐","example":"dgisaeieruur"},"options":{"description":"可选参数","allOf":[{"$ref":"#/components/schemas/CreateTenantUserOptionsDto"}]}},"required":["gender","tenantId"]},"ListTenantUsersOptionsDto":{"type":"object","properties":{"pagination":{"description":"分页配置","example":{"page":1,"limit":10},"allOf":[{"$ref":"#/components/schemas/PaginationDto"}]}}},"ListTenantUserDto":{"type":"object","properties":{"tenantId":{"type":"string","description":"租户 ID"},"keywords":{"type":"string","description":"搜索关键字"},"options":{"description":"可选项","allOf":[{"$ref":"#/components/schemas/ListTenantUsersOptionsDto"}]}},"required":["tenantId"]},"TenantUserSingleRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/TenantUserDto"}]}},"required":["statusCode","message","data"]},"AddTenantDepartmentMembersReqDto":{"type":"object","properties":{"departmentId":{"type":"string","description":"部门系统 ID（为 Authing 系统自动生成，不可修改）","example":"60b49eb83fd80adb96f26e68"},"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"departmentIdType":{"type":"string","description":"此次调用中使用的部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"default":"department_id"},"linkUserIds":{"description":"关联的用户池级别的用户 ID","type":"array","items":{"type":"string"}},"memberIds":{"description":"租户成员 ID","type":"array","items":{"type":"string"}},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"}},"required":["departmentId","organizationCode"]},"RemoveTenantDepartmentMembersReqDto":{"type":"object","properties":{"departmentId":{"type":"string","description":"部门系统 ID（为 Authing 系统自动生成，不可修改）","example":"60b49eb83fd80adb96f26e68"},"organizationCode":{"type":"string","description":"组织 code","example":"steamory"},"departmentIdType":{"type":"string","description":"此次调用中使用的部门 ID 的类型","example":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"default":"department_id"},"linkUserIds":{"description":"关联的用户池级别的用户 ID","type":"array","items":{"type":"string"}},"memberIds":{"description":"租户成员 ID","type":"array","items":{"type":"string"}},"tenantId":{"type":"string","description":"租户 ID","example":"623c20b2a062aaaaf41b17da"}},"required":["departmentId","organizationCode"]},"CreatePermissionNamespaceDto":{"type":"object","properties":{"code":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace","minLength":1,"maxLength":50},"name":{"type":"string","description":"权限空间名称","example":"示例权限空间","minLength":1,"maxLength":255},"description":{"type":"string","description":"权限空间描述","example":"示例权限空间描述","maxLength":200}},"required":["code","name"]},"CreatePermissionNamespaceRespDto":{"type":"object","properties":{"code":{"type":"string","description":"权限空间唯一标志符","example":"examplePermissionNamespace"},"name":{"type":"string","description":"权限空间名称","example":"示例权限空间"},"description":{"type":"string","description":"权限空间描述信息","example":"示例权限空间描述"}},"required":["code","name"]},"CreatePermissionNamespaceResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CreatePermissionNamespaceRespDto"}]}},"required":["statusCode","message","data"]},"CreatePermissionNamespacesBatchItemDto":{"type":"object","properties":{"code":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace","minLength":1,"maxLength":50},"name":{"type":"string","description":"权限空间名称","example":"示例权限空间","maxLength":255},"description":{"type":"string","description":"权限空间描述","example":"示例权限空间描述","maxLength":200}},"required":["code","name"]},"CreatePermissionNamespacesBatchDto":{"type":"object","properties":{"list":{"description":"权限空间列表","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/CreatePermissionNamespacesBatchItemDto"}}},"required":["list"]},"GetPermissionNamespaceRespDto":{"type":"object","properties":{"code":{"type":"string","description":"权限空间唯一标志符","example":"examplePermissionNamespace"},"name":{"type":"string","description":"权限空间名称","example":"示例权限空间"},"description":{"type":"string","description":"权限空间描述信息","example":"示例权限空间描述"}},"required":["code","name"]},"GetPermissionNamespaceResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetPermissionNamespaceRespDto"}]}},"required":["statusCode","message","data"]},"GetPermissionNamespaceListResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/GetPermissionNamespaceRespDto"}}},"required":["statusCode","message","data"]},"PermissionNamespacesListRespDto":{"type":"object","properties":{"name":{"type":"string","description":"权限空间 名称","example":"示例权限空间名称"},"code":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace"},"description":{"type":"string","description":"权限空间描述信息","example":"dd8d7stf44"},"status":{"type":"number","description":"权限空间状态：0 -> 关闭、1 -> 开启","example":1}},"required":["name","code"]},"PermissionNamespaceListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/PermissionNamespacesListRespDto"}}},"required":["totalCount","list"]},"PermissionNamespaceListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"数据","allOf":[{"$ref":"#/components/schemas/PermissionNamespaceListPagingDto"}]}},"required":["statusCode","message","data"]},"UpdatePermissionNamespaceDto":{"type":"object","properties":{"code":{"type":"string","description":"权限分组老的唯一标志符 Code","example":"examplePermissionNamespace","maxLength":50},"name":{"type":"string","description":"权限空间名称","example":"示例权限空间","maxLength":255},"newCode":{"type":"string","description":"权限分组新的唯一标志符 Code","example":"exampleNewPermissionNamespace","maxLength":50},"description":{"type":"string","description":"权限空间描述","example":"示例权限空间描述","maxLength":200}},"required":["code"]},"UpdatePermissionNamespaceRespDto":{"type":"object","properties":{"code":{"type":"string","description":"权限空间唯一标志符","example":"examplePermissionNamespace"},"name":{"type":"string","description":"权限空间名称","example":"示例权限空间"},"description":{"type":"string","description":"权限空间描述信息","example":"示例权限空间描述"}},"required":["code","name"]},"UpdatePermissionNamespaceResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UpdatePermissionNamespaceRespDto"}]}},"required":["statusCode","message","data"]},"DeletePermissionNamespaceDto":{"type":"object","properties":{"code":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace","maxLength":50}},"required":["code"]},"DeletePermissionNamespacesBatchDto":{"type":"object","properties":{"codes":{"description":"权限分组 code 列表","minItems":1,"maxItems":10,"example":["example1","example2"],"type":"array","items":{"type":"string"}}},"required":["codes"]},"CheckPermissionNamespaceExistsDto":{"type":"object","properties":{"code":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace","maxLength":50},"name":{"type":"string","description":"权限空间名称","example":"示例权限空间","maxLength":255}}},"CheckPermissionNamespaceExistsRespDto":{"type":"object","properties":{"isValid":{"type":"boolean","description":"校验权限空间名称或者权限空间名称 Code 是否有效","example":" false"},"message":{"type":"string","description":"权限空间名称或权限空间 Code 校验失败提示信息,如果校验成功, Message 不返回","example":" permission namespace code already exist"}},"required":["isValid"]},"PermissionNamespaceCheckExistsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CheckPermissionNamespaceExistsRespDto"}]}},"required":["statusCode","message","data"]},"PermissionNamespaceRolesListRespDto":{"type":"object","properties":{"name":{"type":"string","description":"角色名称","example":"角色名称"},"code":{"type":"string","description":"角色 Code","example":"role1"},"description":{"type":"string","description":"角色 描述信息","example":"这是一个示例角色的描述"},"namespace":{"type":"string","description":"权限空间 Code","example":"system"},"updatedAt":{"type":"string","description":"更新时间","example":"2022-07-03T02:20:30.000Z"}},"required":["name","code","namespace","updatedAt"]},"PermissionNamespaceRolesListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/PermissionNamespaceRolesListRespDto"}}},"required":["totalCount","list"]},"PermissionNamespaceRolesListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PermissionNamespaceRolesListPagingDto"}]}},"required":["statusCode","message","data"]},"CreateDataResourceDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"数据资源所属的权限空间 Code","example":"examplePermissionNamespace","maxLength":50},"resourceName":{"type":"string","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50},"type":{"type":"string","description":"数据资源类型，目前支持树结构（TREE）、字符串（STRING）、数组（ARRAY）","enum":["TREE","STRING","ARRAY"],"example":"TREE"},"struct":{"description":"数据资源结构，支持字符串（STRING）、树结构（TREE）和数组结构（ARRAY）。","oneOf":[{"$ref":"#/components/schemas/DataResourceTreeStructs","type":"object","title":"数据资源树结构节点","description":"数据资源树结构类型"},{"title":"DataResourceStringStructs","type":"string","description":"数据资源字符串节点","maxLength":500,"minLength":1},{"title":"DataResourceArrayStructs","description":"数据资源数组节点","type":"array","items":{"type":"string"},"minItems":0,"maxItems":100,"uniqueItems":true}]},"actions":{"description":"数据资源权限操作列表","minItems":0,"maxItems":50,"example":["read","get"],"type":"array","items":{"type":"string"}},"description":{"type":"string","description":"数据资源描述","example":"示例数据资源描述","maxLength":200}},"required":["namespaceCode","resourceName","resourceCode","type","struct","actions"]},"CreateDataResourceRespDto":{"type":"object","properties":{"resourceName":{"type":"string","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50},"type":{"type":"string","description":"数据资源类型，目前支持树结构（TREE）、字符串（STRING）、数组（ARRAY）","enum":["TREE","STRING","ARRAY"],"example":"TREE"},"description":{"type":"string","description":"数据资源描述","example":"示例数据资源描述","maxLength":200},"struct":{"description":"数据资源结构，支持字符串（STRING）、树结构（TREE）和数组结构（ARRAY）。","oneOf":[{"title":"数据资源树结构节点","type":"object","$ref":"#/components/schemas/DataResourceTreeStructs","description":"数据资源树结构类型"},{"title":"DataResourceStringStructs","type":"string","description":"数据资源字符串节点","maxLength":500,"minLength":1},{"title":"DataResourceArrayStructs","description":"数据资源数组节点","type":"array","items":{"type":"string"},"minItems":0,"maxItems":50,"uniqueItems":true}]},"actions":{"description":"数据资源权限操作列表","minItems":0,"maxItems":50,"example":["read","get"],"type":"array","items":{"type":"string"}}},"required":["resourceName","resourceCode","type","struct","actions"]},"CreateDataResourceResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CreateDataResourceRespDto"}]}},"required":["statusCode","message","data"]},"CreateStringDataResourceDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"数据策略所在的权限空间 Code","example":"code1"},"resourceName":{"type":"string","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50},"struct":{"type":"string","description":"字符串数据资源节点","example":"exampleStringStruct","maxLength":200},"actions":{"description":"数据资源权限操作列表","minItems":0,"maxItems":50,"example":["read","get"],"type":"array","items":{"type":"string"}},"description":{"type":"string","description":"数据资源描述","example":"示例数据资源描述","maxLength":200}},"required":["namespaceCode","resourceName","resourceCode","struct","actions"]},"CreateStringDataResourceRespDto":{"type":"object","properties":{"resourceName":{"type":"string","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50},"type":{"type":"string","description":"数据资源类型，目前支持树结构（TREE）、字符串（STRING）、数组（ARRAY）","enum":["TREE","STRING","ARRAY"],"example":"TREE"},"description":{"type":"string","description":"数据资源描述","example":"示例数据资源描述","maxLength":200},"struct":{"type":"string","description":"字符串数据资源节点","example":"exampleStringStruct","maxLength":200},"actions":{"description":"数据资源权限操作列表","minItems":0,"maxItems":50,"example":["read","get"],"type":"array","items":{"type":"string"}}},"required":["resourceName","resourceCode","type","struct","actions"]},"CreateStringDataResourceResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CreateStringDataResourceRespDto"}]}},"required":["statusCode","message","data"]},"CreateArrayDataResourceDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"数据策略所在的权限空间 Code","example":"code1"},"resourceName":{"type":"string","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50},"struct":{"description":"数组数据资源节点","example":["exampleArrayStruct1","exampleArrayStruct2"],"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}},"actions":{"description":"数据资源权限操作列表","minItems":0,"maxItems":50,"example":["read","get"],"type":"array","items":{"type":"string"}},"description":{"type":"string","description":"数据资源描述","example":"示例数据资源描述","maxLength":200}},"required":["namespaceCode","resourceName","resourceCode","struct","actions"]},"CreateArrayDataResourceRespDto":{"type":"object","properties":{"resourceName":{"type":"string","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50},"type":{"type":"string","description":"数据资源类型，目前支持树结构（TREE）、字符串（STRING）、数组（ARRAY）","enum":["TREE","STRING","ARRAY"],"example":"TREE"},"description":{"type":"string","description":"数据资源描述","example":"示例数据资源描述","maxLength":200},"struct":{"description":"数组数据资源节点","example":["exampleArrayStruct1","exampleArrayStruct2"],"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}},"actions":{"description":"数据资源权限操作列表","minItems":0,"maxItems":50,"example":["read","get"],"type":"array","items":{"type":"string"}}},"required":["resourceName","resourceCode","type","struct","actions"]},"CreateArrayDataResourceResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CreateArrayDataResourceRespDto"}]}},"required":["statusCode","message","data"]},"DataResourceTreeStructs":{"type":"object","properties":{"code":{"type":"string","description":"数据资源节点 Code, 同层级唯一","example":"123","maxLength":50},"name":{"type":"string","description":"数据资源节点名称 ，同层级唯一","example":"数据资源","maxLength":50},"value":{"type":"string","description":"数据资源节点 Value","example":"示例数据资源节点","maxLength":1000},"children":{"description":"数据资源节点的子节点,子节点层级最多支持五个层级","example":[{"code":"code1","name":"子节点1","value":"子节点值","children":[{"code":"code2","name":"子节点2","value":"子节点2值"}]}],"type":"array","items":{"type":"object"}}},"required":["code","name"]},"CreateTreeDataResourceDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"数据策略所在的权限空间 Code","example":"code1"},"resourceName":{"type":"string","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50},"struct":{"description":"树数据资源节点","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/DataResourceTreeStructs"}},"actions":{"description":"数据资源权限操作列表","minItems":0,"maxItems":50,"example":["read","get"],"type":"array","items":{"type":"string"}},"description":{"type":"string","description":"数据资源描述","example":"示例数据资源描述","maxLength":200}},"required":["namespaceCode","resourceName","resourceCode","struct","actions"]},"CreateTreeDataResourceRespDto":{"type":"object","properties":{"resourceName":{"type":"string","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50},"type":{"type":"string","description":"数据资源类型，目前支持树结构（TREE）、字符串（STRING）、数组（ARRAY）","enum":["TREE","STRING","ARRAY"],"example":"TREE"},"description":{"type":"string","description":"数据资源描述","example":"示例数据资源描述","maxLength":200},"struct":{"description":"树数据资源节点","minItems":1,"maxItems":50,"type":"array","items":{"$ref":"#/components/schemas/DataResourceTreeStructs"}},"actions":{"description":"数据资源权限操作列表","minItems":0,"maxItems":50,"example":["read","get"],"type":"array","items":{"type":"string"}}},"required":["resourceName","resourceCode","type","struct","actions"]},"CreateTreeDataResourceResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CreateTreeDataResourceRespDto"}]}},"required":["statusCode","message","data"]},"ListDataResourcesRespDto":{"type":"object","properties":{"resourceName":{"type":"string","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50},"type":{"type":"string","description":"数据资源类型，目前支持树结构（TREE）、字符串（STRING）、数组（ARRAY）","enum":["TREE","STRING","ARRAY"],"example":"TREE"},"description":{"type":"string","description":"数据资源描述","example":"示例数据资源描述","maxLength":200},"namespaceCode":{"type":"string","description":"数据资源所属的权限空间 Code","example":"examplePermissionNamespace","maxLength":50},"namespaceName":{"type":"string","description":"数据资源所属的权限空间名称","example":"示例权限空间","maxLength":200},"authorizationNum":{"type":"number","description":"数据资源关联授权的数量","example":1},"updatedAt":{"format":"date-time","type":"string","description":"数据资源更新时间","example":"2022-07-03T02:20:30.000Z"}},"required":["resourceName","resourceCode","type","namespaceCode","namespaceName","authorizationNum","updatedAt"]},"DataResourcesPaginatedRespDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/ListDataResourcesRespDto"}}},"required":["totalCount","list"]},"ListDataResourcesPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/DataResourcesPaginatedRespDto"}]}},"required":["statusCode","message","data"]},"GetDataResourceRespDto":{"type":"object","properties":{"resourceName":{"type":"string","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50},"type":{"type":"string","description":"数据资源类型，目前支持树结构（TREE）、字符串（STRING）、数组（ARRAY）","enum":["TREE","STRING","ARRAY"],"example":"TREE"},"description":{"type":"string","description":"数据资源描述","example":"示例数据资源描述","maxLength":200},"struct":{"description":"数据资源结构，支持字符串（STRING）、树结构（TREE）和数组结构（ARRAY）。","oneOf":[{"title":"数据资源树结构节点","type":"object","$ref":"#/components/schemas/DataResourceTreeStructs","description":"数据资源树结构类型"},{"title":"DataResourceStringStructs","type":"string","description":"数据资源字符串节点","maxLength":500,"minLength":1},{"title":"DataResourceArrayStructs","description":"数据资源数组节点","type":"array","items":{"type":"string"},"minItems":0,"maxItems":50,"uniqueItems":true}]},"namespaceCode":{"type":"string","description":"数据策略所在的权限空间 Code","example":"code1"},"actions":{"description":"数据资源权限操作列表","minItems":0,"maxItems":50,"example":["read","get"],"type":"array","items":{"type":"string"}}},"required":["resourceName","resourceCode","type","struct","namespaceCode","actions"]},"GetDataResourceResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetDataResourceRespDto"}]}},"required":["statusCode","message","data"]},"UpdateDataResourceDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"数据资源所属的权限空间 Code","example":"examplePermissionNamespace","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50},"resourceName":{"type":"string","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50},"description":{"type":"string","description":"数据资源描述","example":"示例数据资源描述","maxLength":200},"struct":{"description":"数据资源结构，支持字符串（STRING）、树结构（TREE）和数组结构（ARRAY）。","oneOf":[{"title":"数据资源树结构节点","type":"object","$ref":"#/components/schemas/DataResourceTreeStructs","description":"数据资源树结构类型"},{"title":"DataResourceStringStructs","type":"string","description":"数据资源字符串节点","maxLength":500,"minLength":1},{"title":"DataResourceArrayStructs","description":"数据资源数组节点","type":"array","items":{"type":"string"},"minItems":0,"maxItems":50,"uniqueItems":true}]},"actions":{"description":"数据资源权限操作列表","minItems":0,"maxItems":50,"example":["read","get"],"type":"array","items":{"type":"string"}}},"required":["namespaceCode","resourceCode"]},"UpdateDataResourceRespDto":{"type":"object","properties":{"resourceName":{"type":"string","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50},"type":{"type":"string","description":"数据资源类型，目前支持树结构（TREE）、字符串（STRING）、数组（ARRAY）","enum":["TREE","STRING","ARRAY"],"example":"TREE"},"description":{"type":"string","description":"数据资源描述","example":"示例数据资源描述","maxLength":200},"struct":{"description":"数据资源结构，支持字符串（STRING）、树结构（TREE）和数组结构（ARRAY）。","oneOf":[{"title":"数据资源树结构节点","type":"object","$ref":"#/components/schemas/DataResourceTreeStructs","description":"数据资源树结构类型"},{"title":"DataResourceStringStructs","type":"string","description":"数据资源字符串节点","maxLength":500,"minLength":1},{"title":"DataResourceArrayStructs","description":"数据资源数组节点","type":"array","items":{"type":"string"},"minItems":0,"maxItems":50,"uniqueItems":true}]},"actions":{"description":"数据资源权限操作列表","minItems":0,"maxItems":50,"example":["read","get"],"type":"array","items":{"type":"string"}}},"required":["resourceName","resourceCode","type","struct","actions"]},"UpdateDataResourceResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UpdateDataResourceRespDto"}]}},"required":["statusCode","message","data"]},"DeleteDataResourceDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"数据资源所属的权限空间 Code","example":"examplePermissionNamespace","maxLength":50},"resourceCode":{"type":"string","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50}},"required":["namespaceCode","resourceCode"]},"CheckParamsDataResourceRespDto":{"type":"object","properties":{"isValid":{"type":"boolean","description":"数据资源名称或者 Code 校验是否有效","example":"false"},"message":{"type":"string","description":"数据资源名称或者 Code 校验失败提示信息,如果校验成功, message 不返回","example":"data resource name already exist"}},"required":["isValid"]},"CheckParamsDataResourceResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CheckParamsDataResourceRespDto"}]}},"required":["statusCode","message","data"]},"DataStatementPermissionDto":{"type":"object","properties":{"effect":{"type":"string","description":"数据资源权限操作：ALLOW（允许）/DENY（拒绝）","enum":["DENY","ALLOW"],"example":"ALLOW"},"permissions":{"description":"资源权限列表，字符串数据资源和数组数据资源，没有 path 路径","example":["namespaceCode/stringResourceCode/action","namespaceCode/arrayResourceCode/action","namespaceCode/treeResourceCode/path/action"],"type":"array","items":{"type":"string"}}},"required":["effect","permissions"]},"CreateDataPolicyDto":{"type":"object","properties":{"policyName":{"type":"string","description":"数据策略名称，用户池唯一","example":"示例数据策略名称","maxLength":50},"statementList":{"description":"数据权限列表，策略下数据资源权限列表","minItems":1,"maxItems":5,"type":"array","items":{"$ref":"#/components/schemas/DataStatementPermissionDto"}},"description":{"type":"string","description":"数据策略描述","example":"示例数据策略描述","maxLength":200}},"required":["policyName","statementList"]},"CreateDataPolicyRespDto":{"type":"object","properties":{"policyId":{"type":"string","description":"数据策略 ID","example":"60b49xxxxxxxxxxxxxxx6e68"},"policyName":{"type":"string","description":"数据策略名称，用户池唯一","example":"示例数据策略名称","maxLength":50},"description":{"type":"string","description":"数据策略描述","example":"示例数据策略描述","maxLength":200},"createdAt":{"format":"date-time","type":"string","description":"数据策略创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"数据策略更新时间","example":"2022-07-03T02:20:30.000Z"}},"required":["policyId","policyName","createdAt","updatedAt"]},"CreateDataPolicyResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CreateDataPolicyRespDto"}]}},"required":["statusCode","message","data"]},"DataResourceSimpleRespDto":{"type":"object","properties":{"resourceId":{"type":"string","description":"数据权限所属的数据资源 ID","example":"6301cexxxxxxxxx27478"},"resourceName":{"type":"string","description":"数据权限所属的数据资源名称","example":"资源1"}},"required":["resourceId","resourceName"]},"SubjectRespDto":{"type":"object","properties":{"id":{"type":"string","description":"主体 ID ，包含用户 ID、用户组 ID、角色 ID、组织机构 ID","example":"6301cexxxxxxxxxxxxxxxxx78"},"type":{"type":"string","description":"主体类型,包括 USER、GROUP、ROLE、ORG 四种类型","enum":["USER","ORG","GROUP","ROLE"],"example":"USER"},"name":{"type":"string","description":"主体名称，包含用户名称、用户组名称、角色名称、组织机构名称","example":"test"}},"required":["id","type","name"]},"ListDataPoliciesRespDto":{"type":"object","properties":{"policyName":{"type":"string","description":"数据策略名称，用户池唯一","example":"示例数据策略名称","maxLength":50},"description":{"type":"string","description":"数据策略描述","example":"示例数据策略描述","maxLength":200},"resourceList":{"description":"数据权限列表，每个策略下所有的数据资源 ID 和名称","type":"array","items":{"$ref":"#/components/schemas/DataResourceSimpleRespDto"}},"policyId":{"type":"string","description":"数据策略 ID","example":"60b49xxxxxxxxxxxxxxx6e68"},"targetList":{"description":"主体对象列表,包含数据策略下所有的主体对象,包括 USER、GROUP、ROLE、ORG","type":"array","items":{"$ref":"#/components/schemas/SubjectRespDto"}},"updatedAt":{"format":"date-time","type":"string","description":"数据策略更新时间","example":"2022-07-03T02:20:30.000Z"}},"required":["policyName","resourceList","policyId","targetList","updatedAt"]},"DataPoliciesPaginatedRespDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","default":10,"example":20},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/ListDataPoliciesRespDto"}}},"required":["totalCount","list"]},"ListDataPoliciesPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/DataPoliciesPaginatedRespDto"}]}},"required":["statusCode","message","data"]},"ListSimpleDataPoliciesRespDto":{"type":"object","properties":{"policyId":{"type":"string","description":"数据策略 ID","example":"60b49xxxxxxxxxxxxxxx6e68"},"policyName":{"type":"string","description":"数据策略名称，用户池唯一","example":"示例数据策略名称","maxLength":50},"description":{"type":"string","description":"数据策略描述","example":"示例数据策略描述","maxLength":200}},"required":["policyId","policyName"]},"DataPoliciesSimplePaginatedRespDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","default":10,"example":20},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/ListSimpleDataPoliciesRespDto"}}},"required":["list"]},"ListSimpleDataPoliciesPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/DataPoliciesSimplePaginatedRespDto"}]}},"required":["statusCode","message","data"]},"GetDataPolicyRespDto":{"type":"object","properties":{"policyId":{"type":"string","description":"数据策略 ID","example":"60b49xxxxxxxxxxxxxxx6e68"},"policyName":{"type":"string","description":"数据策略名称，用户池唯一","example":"示例数据策略名称","maxLength":50},"description":{"type":"string","description":"数据策略描述","example":"示例数据策略描述","maxLength":200},"createdAt":{"format":"date-time","type":"string","description":"数据策略创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"数据策略更新时间","example":"2022-07-03T02:20:30.000Z"}},"required":["policyId","policyName","createdAt","updatedAt"]},"GetDataPolicyResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetDataPolicyRespDto"}]}},"required":["statusCode","message","data"]},"UpdateDataPolicyDto":{"type":"object","properties":{"policyId":{"type":"string","description":"数据策略 ID","example":"60b49xxxxxxxxxxxxxxx6e68"},"policyName":{"type":"string","description":"数据策略名称，用户池唯一","example":"示例数据策略名称","maxLength":50},"description":{"type":"string","description":"数据策略描述","example":"示例数据策略描述","maxLength":200},"statementList":{"description":"数据权限列表，每个策略下所有的数据权限","minItems":1,"maxItems":5,"type":"array","items":{"$ref":"#/components/schemas/DataStatementPermissionDto"}}},"required":["policyId"]},"UpdateDataPolicyRespDto":{"type":"object","properties":{"policyId":{"type":"string","description":"数据策略 ID","example":"60b49xxxxxxxxxxxxxxx6e68"},"policyName":{"type":"string","description":"数据策略名称，用户池唯一","example":"示例数据策略名称","maxLength":50},"description":{"type":"string","description":"数据策略描述","example":"示例数据策略描述","maxLength":200},"createdAt":{"format":"date-time","type":"string","description":"数据策略创建时间","example":"2022-07-03T02:20:30.000Z"},"updatedAt":{"format":"date-time","type":"string","description":"数据策略更新时间","example":"2022-07-03T02:20:30.000Z"}},"required":["policyId","policyName","createdAt","updatedAt"]},"UpdateDataPolicyResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UpdateDataPolicyRespDto"}]}},"required":["statusCode","message","data"]},"DeleteDataPolicyDto":{"type":"object","properties":{"policyId":{"type":"string","description":"数据策略 ID","example":"60b49xxxxxxxxxxxxxxx6e68"}},"required":["policyId"]},"CheckParamsDataPolicyRespDto":{"type":"object","properties":{"isValid":{"type":"boolean","description":"数据策略名称校验是否有效","example":" false"},"message":{"type":"string","description":"数据策略名称校验失败提示信息,如果校验成功, message 不返回","example":" data Policy name already exist"}},"required":["isValid"]},"CheckParamsDataPolicyResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CheckParamsDataPolicyRespDto"}]}},"required":["statusCode","message","data"]},"DataSubjectRespDto":{"type":"object","properties":{"targetIdentifier":{"type":"string","description":"主体 ID ，包含用户 ID、用户组 ID、角色 ID、组织机构 ID","example":"6301cexxxxxxxxxxxxxxxxx78"},"targetType":{"type":"string","description":"主体类型,包括 USER、GROUP、ROLE、ORG 四种类型","enum":["USER","ORG","GROUP","ROLE"],"example":0},"targetName":{"type":"string","description":"主体名称，包含用户名称、用户组名称、角色名称、组织机构名称","example":"test"},"authorizationTime":{"format":"date-time","type":"string","description":"主体对象被授权时间","example":"2022-07-03T02:20:30.000Z"}},"required":["targetIdentifier","targetType","targetName","authorizationTime"]},"ListDataPolicySubjectPageDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","default":10,"example":20},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/DataSubjectRespDto"}}},"required":["list"]},"ListDataPolicySubjectPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ListDataPolicySubjectPageDto"}]}},"required":["statusCode","message","data"]},"SubjectDto":{"type":"object","properties":{"id":{"type":"string","description":"主体 ID ，包含用户 ID、用户组 ID、角色 ID、组织机构 ID","example":"6301cexxxxxxxxxxxxxxxxx78"},"type":{"type":"string","description":"主体类型,包括 USER、GROUP、ROLE、ORG 四种类型","enum":["USER","ORG","GROUP","ROLE"],"example":"USER"},"name":{"type":"string","description":"主体名称，包含用户名称、用户组名称、角色名称、组织机构名称","example":"用户名称"}},"required":["id","type"]},"CreateAuthorizeDataPolicyDto":{"type":"object","properties":{"policyIds":{"description":"数据策略 id 列表","minItems":1,"maxItems":50,"example":["6301cexxxxxxxxxx27478","63123cexxxxxxxxxx2123101"],"type":"array","items":{"type":"string"}},"targetList":{"description":"数据权限列表，每个策略下所有的数据权限","type":"array","items":{"$ref":"#/components/schemas/SubjectDto"}}},"required":["policyIds","targetList"]},"DeleteAuthorizeDataPolicyDto":{"type":"object","properties":{"policyId":{"type":"string","description":"数据策略 ID","example":"60b49xxxxxxxxxxxxxxx6e68"},"targetIdentifier":{"type":"string","description":"主体 ID ，包含用户 ID、用户组 ID、角色 ID、组织机构 ID","example":"6301cexxxxxxxxxxxxxxxxx78"},"targetType":{"type":"string","description":"主体类型,包括 USER、GROUP、ROLE、ORG 四种类型","enum":["USER","ORG","GROUP","ROLE"],"example":"USER"}},"required":["policyId","targetIdentifier","targetType"]},"GetUserPermissionListDto":{"type":"object","properties":{"userIds":{"description":"用户 ID 列表","example":["6301ceaxxxxxxxxxxx27478"],"type":"array","items":{"type":"string"}},"namespaceCodes":{"description":"权限空间 Code 列表","example":["examplePermissionNamespace1"],"type":"array","items":{"type":"string"}}},"required":["userIds"]},"StrAuthorize":{"type":"object","properties":{"value":{"type":"string","description":"字符串资源 Value","example":"示例字符串资源 Value"},"actions":{"description":"字符串资源操作列表","example":["read","get"],"type":"array","items":{"type":"string"}}},"required":["value","actions"]},"ArrayAuthorize":{"type":"object","properties":{"values":{"description":"数组资源 Value 列表","example":["value0","value1"],"type":"array","items":{"type":"string"}},"actions":{"description":"数组资源操作列表","example":["read","get"],"type":"array","items":{"type":"string"}}},"required":["values","actions"]},"TreeAuthBo":{"type":"object","properties":{"nodePath":{"type":"string","description":"树资源节点路径","example":"/treeCode1/treeCode11"},"nodeName":{"type":"string","description":"树资源节点名称","example":"示例树资源节点名称"},"nodeActions":{"description":"树资源节点操作权限列表","example":["read","get"],"type":"array","items":{"type":"string"}},"nodeValue":{"type":"string","description":"树资源节点 Value","example":"示例树资源节点 Value"}},"required":["nodePath","nodeName","nodeActions"]},"TreeAuthorize":{"type":"object","properties":{"authList":{"description":"树资源授权列表","type":"array","items":{"$ref":"#/components/schemas/TreeAuthBo"}}},"required":["authList"]},"OpenResource":{"type":"object","properties":{"resourceCode":{"type":"string","description":"数据策略下所授权的数据资源 Code","example":"resourceCode"},"resourceType":{"type":"string","description":"数据策略下所授权的数据资源类型，目前支持树结构（TREE）、字符串（STRING）、数组（ARRAY）三种类型，根据不同的类型返回不同的结构。\n- `STRING`: 字符串类型结果 StrAuthorize\n- `ARRAY`: 数组类型 ArrayAuthorize\n- `TREE`: 树类型 TreeAuthorize ","enum":["TREE","STRING","ARRAY"],"example":"STRING"},"strAuthorize":{"description":"数据策略的字符串资源","allOf":[{"$ref":"#/components/schemas/StrAuthorize"}]},"arrAuthorize":{"description":"数据策略的数组资源","allOf":[{"$ref":"#/components/schemas/ArrayAuthorize"}]},"treeAuthorize":{"description":"数据策略的树资源","allOf":[{"$ref":"#/components/schemas/TreeAuthorize"}]}},"required":["resourceCode","resourceType"]},"UserPermissionListDto":{"type":"object","properties":{"userId":{"type":"string","description":"数据策略授权的用户 ID","example":"6301cexxxxxxxxxxxxxxxxx78"},"namespaceCode":{"type":"string","description":"数据策略授权的权限空间 Code","example":"examplePermissionNamespace"},"resourceList":{"description":"用户在权限空间下所有的数据策略资源列表","type":"array","items":{"$ref":"#/components/schemas/OpenResource"}}},"required":["userId","namespaceCode"]},"GetUserPermissionListDataDto":{"type":"object","properties":{"userPermissionList":{"description":"用户权限列表","type":"array","items":{"$ref":"#/components/schemas/UserPermissionListDto"}}},"required":["userPermissionList"]},"GetUserPermissionListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。","example":20001},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetUserPermissionListDataDto"}]}},"required":["statusCode","message","data"]},"AuthEnvParams":{"type":"object","properties":{"ip":{"type":"string","description":"ip","example":"127.0.0.1"},"city":{"type":"string","description":"城市","example":"北京"},"province":{"type":"string","description":"省份","example":"湖北"},"country":{"type":"string","description":"国家","example":"中国"},"deviceType":{"type":"string","description":"设备类型：PC/Mobile","enum":["PC","Mobile"],"example":"PC"},"systemType":{"type":"string","description":"操作类型：Windows、Android、iOS、MacOS","enum":["Windows","MacOS","Android","iOS"],"example":"iOS"},"browserType":{"type":"string","description":"浏览器类型：IE/Chrome/Firefox","enum":["IE","Chrome","Firefox","Safari","Edge","Opera","Safe360","QQBrowser"],"example":"IE"},"requestDate":{"format":"date-time","type":"string","description":"请求时间","example":"2022-07-03T02:20:30.000Z"}}},"CheckPermissionDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace"},"userId":{"type":"string","description":"用户 ID","example":"63721xxxxxxxxxxxxdde14a3"},"action":{"type":"string","description":"数据资源权限操作, read、get、write 等动作","example":"get"},"resources":{"description":"资源路径列表,**树资源需到具体树节点**","example":["strResourceCode","arrResourceCode","treeResourceCode/StructCode1/resourceStructChildrenCode1"],"type":"array","items":{"type":"string","maxLength":50,"minLength":1}},"judgeConditionEnabled":{"type":"boolean","description":"是否开启条件判断，默认 false 不开启","example":false},"authEnvParams":{"description":"条件环境属性，若开启条件判断则使用","example":{"ip":"127.0.0.1"},"allOf":[{"$ref":"#/components/schemas/AuthEnvParams"}]}},"required":["namespaceCode","userId","action","resources"]},"CheckPermissionsRespDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace"},"action":{"type":"string","description":"数据资源权限操作","example":"get"},"resource":{"type":"string","description":"资源路径","example":"treeResource1"},"enabled":{"type":"boolean","description":"用户在某个权限空间下是否具有该数据资源的某个操作","example":true}},"required":["namespaceCode","action","resource","enabled"]},"CheckPermissionDataDto":{"type":"object","properties":{"checkResultList":{"description":"检查结果列表","type":"array","items":{"$ref":"#/components/schemas/CheckPermissionsRespDto"}}},"required":["checkResultList"]},"CheckPermissionRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。","example":20001},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CheckPermissionDataDto"}]}},"required":["statusCode","message","data"]},"CheckExternalUserPermissionDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace"},"externalId":{"type":"string","description":"外部用户 ID","example":"63721xxxxxxxxxxxxdde14a3"},"action":{"type":"string","description":"数据资源权限操作, read、get、write 等动作","example":"get"},"resources":{"description":"资源路径列表,**树资源需到具体树节点**","example":["strResourceCode","arrResourceCode","treeResourceCode/StructCode1/resourceStructChildrenCode1"],"type":"array","items":{"type":"string","maxLength":50,"minLength":1}},"judgeConditionEnabled":{"type":"boolean","description":"是否开启条件判断，默认 true 开启","example":true},"authEnvParams":{"description":"条件环境属性，若开启条件判断则使用","example":{"ip":"127.0.0.1"},"allOf":[{"$ref":"#/components/schemas/AuthEnvParams"}]}},"required":["namespaceCode","externalId","action","resources"]},"CheckExternalUserPermissionsRespDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace"},"action":{"type":"string","description":"数据资源权限操作","example":"get"},"resource":{"type":"string","description":"资源路径","example":"treeResource1"},"enabled":{"type":"boolean","description":"用户在某个权限空间下是否具有该数据资源的某个操作","example":true}},"required":["namespaceCode","action","resource","enabled"]},"CheckExternalUserPermissionDataDto":{"type":"object","properties":{"checkResultList":{"description":"检查结果列表","type":"array","items":{"$ref":"#/components/schemas/CheckExternalUserPermissionsRespDto"}}},"required":["checkResultList"]},"CheckExternalUserPermissionRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。","example":20001},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CheckExternalUserPermissionDataDto"}]}},"required":["statusCode","message","data"]},"GetUserResourcePermissionListDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace"},"userId":{"type":"string","description":"用户 ID","example":"6301ceaxxxxxxxxx27478"},"resources":{"description":"资源路径列表,**树资源需到具体树节点**","example":["strResourceCode","arrResourceCode","treeResourceCode/StructCode1/resourceStructChildrenCode1"],"type":"array","items":{"type":"string","maxLength":50,"minLength":1}}},"required":["namespaceCode","userId","resources"]},"GetUserResourcePermissionList":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"权限空间 code","example":"examplePermissionNamespace"},"actions":{"description":"数据资源权限操作列表","example":["get","read","write","delete"],"type":"array","items":{"type":"string"}},"resource":{"type":"string","description":"资源路径","example":"treeResourceCode1"}},"required":["namespaceCode","actions","resource"]},"GetUserResourcePermissionListDataDto":{"type":"object","properties":{"permissionList":{"description":"权限列表","type":"array","items":{"$ref":"#/components/schemas/GetUserResourcePermissionList"}}},"required":["permissionList"]},"GetUserResourcePermissionListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetUserResourcePermissionListDataDto"}]}},"required":["statusCode","message","data"]},"ListResourceTargetsDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace"},"actions":{"description":"数据资源权限操作列表","example":["get"],"maxItems":50,"type":"array","items":{"type":"string"}},"resources":{"description":"数据策略所属的数据资源路径列表","example":["treeResourceCode1"],"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}}},"required":["namespaceCode","actions","resources"]},"ActionAuth":{"type":"object","properties":{"userIds":{"description":"数据策略授权用户 ID 列表","example":["63721xxxxxxxxxxxxdde14a3"],"type":"array","items":{"type":"string"}},"action":{"type":"string","description":"数据资源权限操作","example":"get"}},"required":["userIds","action"]},"ListResourceTargetsDtoResp":{"type":"object","properties":{"resource":{"type":"string","description":"资源路径","example":"treeResourceCode1"},"actionAuthList":{"description":"数据资源权限操作列表","type":"array","items":{"$ref":"#/components/schemas/ActionAuth"}}},"required":["resource","actionAuthList"]},"ListResourceTargetsDataDto":{"type":"object","properties":{"authUserList":{"description":"用户授权列表","type":"array","items":{"$ref":"#/components/schemas/ListResourceTargetsDtoResp"}}},"required":["authUserList"]},"ListResourceTargetsRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ListResourceTargetsDataDto"}]}},"required":["statusCode","message","data"]},"GetUserResourceStructDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace"},"userId":{"type":"string","description":"用户 ID ","example":"6301ceaxxxxxxxxxxx27478"},"resourceCode":{"type":"string","description":"数据资源 Code","example":"exampleDataResourceCode"}},"required":["namespaceCode","userId","resourceCode"]},"StrResourceAuthAction":{"type":"object","properties":{"value":{"type":"string","description":"字符串数据资源的 Value","example":"resourceCode"},"actions":{"description":"字符串数据资源的 actions","example":["resourceCode"],"type":"array","items":{"type":"string"}}}},"ArrResourceAuthAction":{"type":"object","properties":{"values":{"description":"数组数据资源的 values","example":["resourceCode"],"type":"array","items":{"type":"string"}},"actions":{"description":"数组数据资源的 actions","example":["resourceCode"],"type":"array","items":{"type":"string"}}}},"TreeStructs":{"type":"object","properties":{"code":{"type":"string","description":"树资源节点 Code, 同层级唯一","example":"123","maxLength":50},"name":{"type":"string","description":"树资源节点名称 ，同层级唯一","example":"树数据资源","maxLength":50},"value":{"type":"string","description":"树资源节点 Value","example":"示例树资源策略节点","maxLength":1000},"actions":{"description":"树数据资源策略节点 actions ","example":"read","type":"array","items":{"type":"string"}},"children":{"description":"子节点数据,子节点数据最多五个层级","example":[{"code":"code1","name":"子节点1","value":"子节点值","actions":["Create"],"children":[{"code":"code2","name":"子节点2","value":"子节点2值","actions":["get"]}]}],"type":"array","items":{"$ref":"#/components/schemas/TreeStructs"}}},"required":["code","name"]},"TreeResourceAuthAction":{"type":"object","properties":{"nodeAuthActionList":{"description":"树结构节点列表","type":"array","items":{"$ref":"#/components/schemas/TreeStructs"}}}},"GetUserResourceStructDataDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"权限空间 Code","example":"namespaceCode"},"resourceCode":{"type":"string","description":"数据资源 Code","example":"resourceCode"},"resourceType":{"type":"string","description":"数据资源类型，目前支持树结构（TREE）、字符串（STRING）、数组（ARRAY）三种类型，根据不同的类型返回不同的结构。\n- `STRING`: 字符串类型结果 StrResourceAuthAction\n- `ARRAY`: 数组类型 ArrResourceAuthAction\n- `TREE`: 树类型 TreeResourceAuthAction ","enum":["TREE","STRING","ARRAY"],"example":"STRING"},"strResourceAuthAction":{"description":"字符串资源授权","allOf":[{"$ref":"#/components/schemas/StrResourceAuthAction"}]},"arrResourceAuthAction":{"description":"数组资源授权","allOf":[{"$ref":"#/components/schemas/ArrResourceAuthAction"}]},"treeResourceAuthAction":{"description":"树资源授权","allOf":[{"$ref":"#/components/schemas/TreeResourceAuthAction"}]}},"required":["namespaceCode","resourceCode","resourceType"]},"GetUserResourceStructRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetUserResourceStructDataDto"}]}},"required":["statusCode","message","data"]},"GetExternalUserResourceStructDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace"},"externalId":{"type":"string","description":"外部用户 ID","example":"63721xxxxxxxxxxxxdde14a3"},"resourceCode":{"type":"string","description":"资源 Code","example":"exampleResourceCode"}},"required":["namespaceCode","externalId","resourceCode"]},"GetExternalUserResourceStructDataDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"权限空间 Code","example":"namespaceCode"},"resourceCode":{"type":"string","description":"数据资源 Code","example":"resourceCode"},"resourceType":{"type":"string","description":"数据资源类型，目前支持树结构（TREE）、字符串（STRING）、数组（ARRAY）三种类型，根据不同的类型返回不同的结构。\n- `STRING`: 字符串类型结果 StrResourceAuthAction\n- `ARRAY`: 数组类型 ArrResourceAuthAction\n- `TREE`: 树类型 TreeResourceAuthAction ","enum":["TREE","STRING","ARRAY"],"example":"STRING"},"strResourceAuthAction":{"description":"字符串资源授权","allOf":[{"$ref":"#/components/schemas/StrResourceAuthAction"}]},"arrResourceAuthAction":{"description":"数组资源授权","allOf":[{"$ref":"#/components/schemas/ArrResourceAuthAction"}]},"treeResourceAuthAction":{"description":"树资源授权","allOf":[{"$ref":"#/components/schemas/TreeResourceAuthAction"}]}},"required":["namespaceCode","resourceCode","resourceType"]},"GetExternalUserResourceStructRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetExternalUserResourceStructDataDto"}]}},"required":["statusCode","message","data"]},"CheckUserSameLevelPermissionDto":{"type":"object","properties":{"namespaceCode":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace"},"userId":{"type":"string","description":"用户 ID","example":"63721xxxxxxxxxxxxdde14a3"},"action":{"type":"string","description":"数据资源权限操作","example":"read"},"resource":{"type":"string","description":"树资源路径,允许多层级路径，示例如下所示\n- treeResourceCode\n- treeResourceCode/structCode\n- treeResourceCode/structCode/struct1Code\n- treeResourceCode/.../structCode","example":"treeResourceCode"},"resourceNodeCodes":{"description":"当前树资源路径子节点 Code","example":["resourceStructChildrenCode1"],"type":"array","items":{"type":"string","maxLength":50,"minLength":1}},"judgeConditionEnabled":{"type":"boolean","description":"是否开启条件判断，默认 false 不开启","example":false},"authEnvParams":{"description":"条件环境属性，若开启条件判断则使用","example":{"ip":"127.0.0.1"},"allOf":[{"$ref":"#/components/schemas/AuthEnvParams"}]}},"required":["namespaceCode","userId","action","resource","resourceNodeCodes"]},"CheckUserSameLevelPermissionRespDto":{"type":"object","properties":{"action":{"type":"string","description":"数据资源权限操作","example":"get"},"resourceNodeCode":{"type":"string","description":"树资源节点code","example":"treeResourceStructChildrenCode1"},"enabled":{"type":"boolean","description":"是否拥有 action 权限","example":true}},"required":["action","resourceNodeCode","enabled"]},"CheckUserSameLevelPermissionDataDto":{"type":"object","properties":{"checkLevelResultList":{"description":"响应结果列表","type":"array","items":{"$ref":"#/components/schemas/CheckUserSameLevelPermissionRespDto"}}},"required":["checkLevelResultList"]},"CheckUserSameLevelPermissionResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CheckUserSameLevelPermissionDataDto"}]}},"required":["statusCode","message","data"]},"ListPermissionViewDto":{"type":"object","properties":{"page":{"type":"number","description":"当前页数，从 1 开始","default":1,"example":1},"limit":{"type":"number","description":"每页数目，最大不能超过 50，默认为 10","default":10,"example":10},"keyword":{"type":"string","description":"关键字搜索,可以支持 userName 搜索","example":"123"}}},"PolicyBo":{"type":"object","properties":{"dataPolicyId":{"type":"string","description":"数据策略 id","example":"6229ffaxxxxxxxxcade3e3d9"},"dataPolicyName":{"type":"string","description":"数据策略名称名称","example":"示例数据策略"}},"required":["dataPolicyId","dataPolicyName"]},"RoleBo":{"type":"object","properties":{"roleId":{"type":"string","description":"角色 id","example":"6229ffaxxxxxxxxcade3e3d9"},"roleName":{"type":"string","description":"角色名称","example":"示例角色"},"roleCode":{"type":"string","description":"角色 Code","example":"exampleCode"}},"required":["roleId","roleName","roleCode"]},"GroupBo":{"type":"object","properties":{"groupId":{"type":"string","description":"用户组 id","example":"6229ffaxxxxxxxxcade3e3d9"},"groupName":{"type":"string","description":"用户组名称","example":"示例用户组"},"groupCode":{"type":"string","description":"用户组 Code","example":"exampleCode"}},"required":["groupId","groupName","groupCode"]},"NodeBo":{"type":"object","properties":{"nodeId":{"type":"string","description":"组织机构 id","example":"6229ffaxxxxxxxxcade3e3d9"},"nodeName":{"type":"string","description":"组织机构名称","example":"示例组织机构"},"nodeCode":{"type":"string","description":"组织机构 Code","example":"exampleCode"}},"required":["nodeId","nodeName","nodeCode"]},"ListPermissionViewRespDto":{"type":"object","properties":{"userId":{"type":"string","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9"},"username":{"type":"string","description":"用户真实名称，不具备唯一性","example":"张三"},"namespaceId":{"type":"string","description":"权限空间 id","example":"6229ffaxxxxxxxxcade3e3d9"},"namespaceCode":{"type":"string","description":"权限空间 Code","example":"examplePermissionNamespace"},"namespaceName":{"type":"string","description":"权限空间名称","example":"示例权限空间"},"dataResourceId":{"type":"string","description":"数据资源 id","example":"6229ffaxxxxxxxxcade3e3d9"},"dataResourceCode":{"type":"string","description":"数据资源 Code","example":"exampleDataResource"},"dataResourceName":{"type":"string","description":"数据资源 名称","example":"示例数据资源名称"},"dataPolicyList":{"description":"数据策略列表","type":"array","items":{"$ref":"#/components/schemas/PolicyBo"}},"roleList":{"description":"角色列表","type":"array","items":{"$ref":"#/components/schemas/RoleBo"}},"groupList":{"description":"用户组列表","type":"array","items":{"$ref":"#/components/schemas/GroupBo"}},"nodeList":{"description":"组织机构列表","type":"array","items":{"$ref":"#/components/schemas/NodeBo"}}},"required":["userId","namespaceId","namespaceCode","namespaceName","dataResourceId","dataResourceCode","dataResourceName","dataPolicyList","roleList","groupList","nodeList"]},"ListPermissionViewPaginatedRespDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数","default":10,"example":20},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/ListPermissionViewRespDto"}}},"required":["totalCount","list"]},"ListPermissionViewResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/ListPermissionViewPaginatedRespDto"}]}},"required":["statusCode","message","data"]},"GoodsPackageDto":{"type":"object","properties":{"name":{"type":"string","description":"套餐包名称 name","example":"测试套餐包"},"nameEn":{"type":"string","description":"套餐包名称 nameEn","example":"test package"},"unitPrice":{"type":"string","description":"套餐包单价","example":"99.00"},"code":{"type":"string","description":"套餐包编码 code","example":"V4_B2C_Enterprise:1000"},"group":{"type":"string","description":"套餐包版本","example":"Enterprise"},"sceneCode":{"type":"string","description":"套餐包场景编码","example":"B2C"},"amount":{"type":"string","description":"套餐包 MAU 数量","example":"1000"}},"required":["name","nameEn","unitPrice","code","group","sceneCode","amount"]},"CostCurrentPackageInfo":{"type":"object","properties":{"code":{"type":"string","description":"套餐包编码","example":"V4_B2C_Enterprise:1000"},"endTime":{"type":"string","description":"套餐结束时间","example":"2022-09-09 00:00:00"},"overdueDays":{"type":"string","description":"套餐逾期天数","example":"0"},"goodsPackage":{"description":"套餐包信息","example":"套餐包信息","allOf":[{"$ref":"#/components/schemas/GoodsPackageDto"}]}},"required":["code","endTime","overdueDays","goodsPackage"]},"CostGetCurrentPackageRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CostCurrentPackageInfo"}]}},"required":["statusCode","message","data"]},"CurrentUsageDto":{"type":"object","properties":{"amount":{"type":"string","description":"权益总量","example":"0"},"current":{"type":"string","description":"权益当前使用量","example":"0"},"experience":{"type":"boolean","description":"是否是体验期权益","example":true},"modelCode":{"type":"string","description":"权益编码","example":"SocialConnections"},"modelName":{"type":"string","description":"权益名称","example":"SocialConnections：社交账号链接"}},"required":["amount","current","experience","modelCode","modelName"]},"CurrentUsageRespDto":{"type":"object","properties":{"usages":{"description":"当前用量实体","type":"array","items":{"$ref":"#/components/schemas/CurrentUsageDto"}}},"required":["usages"]},"CostGetCurrentUsageRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CurrentUsageRespDto"}]}},"required":["statusCode","message","data"]},"MauPeriodUsageHistoryDto":{"type":"object","properties":{"periodStartTime":{"type":"string","description":"周期开始时间(年月日)","example":"20210901"},"periodEndTime":{"type":"string","description":"周期结束时间(年月日)","example":"20220901"},"amount":{"type":"string","description":"当前周期使用的 mau 总数量","example":"0"},"current":{"type":"string","description":"当前周期使用的 mau 数量","example":"0"}},"required":["periodStartTime","periodEndTime","amount","current"]},"MauPeriodUsageHistory":{"type":"object","properties":{"records":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/MauPeriodUsageHistoryDto"}}},"required":["records"]},"CostGetMauPeriodUsageHistoryRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/MauPeriodUsageHistory"}]}},"required":["statusCode","message","data"]},"RightItemDto":{"type":"object","properties":{"rightsModelCode":{"type":"string","description":"权益编码","example":"SocialConnections"},"rightsModelName":{"type":"string","description":"权益名称","example":"SocialConnections"},"dataType":{"type":"string","description":"权益数据类型","example":"1：数量类型，2：数字只读，不做计量，3：断言类型，4：字符串只读"},"dataValue":{"type":"string","description":"权益值","example":"0"}},"required":["rightsModelCode","rightsModelName","dataType","dataValue"]},"RightItemRes":{"type":"object","properties":{"rightsItems":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/RightItemDto"}}},"required":["rightsItems"]},"CostGetAllRightItemRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RightItemRes"}]}},"required":["statusCode","message","data"]},"OrderItem":{"type":"object","properties":{"orderNo":{"type":"string","description":"订单号","example":"202209251234224"},"goodsName":{"type":"string","description":"套餐包名中文"},"goodsNameEn":{"type":"string","description":"套餐包名英文"},"goodsUnitPrice":{"type":"string","description":"单价"},"quantity":{"type":"string","description":"数量"},"actualAmount":{"type":"string","description":"实际金额"},"status":{"type":"string","description":"订单状态","example":"1：未支付，2：已支付，3：已完成，4：已取消，5：已过期"},"orderType":{"type":"string","description":"订单类型","example":"New：新购，Upgrade：升级，Renew：续费，Overdue_Correct：逾期纠正，Overflowed_Correct：逾量纠正"},"createTime":{"type":"string","description":"创建时间"},"source":{"type":"string","description":"Licence：license 订单，Offline：线下交易，Eadmin：后台开通，SelfHelp：自助下单，Cdkey：Cdkey 活动兑换"}},"required":["orderNo","goodsName","goodsNameEn","goodsUnitPrice","quantity","actualAmount","status","orderType","createTime","source"]},"GetOrdersRes":{"type":"object","properties":{"totalCount":{"type":"string","description":"总数","example":0},"list":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/OrderItem"}}},"required":["totalCount","list"]},"CostGetOrdersRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/GetOrdersRes"}]}},"required":["statusCode","message","data"]},"CostGetOrderDetailRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/OrderItem"}]}},"required":["statusCode","message","data"]},"CostGetOrderPayDetail":{"type":"object","properties":{"orderNo":{"type":"string","description":"订单号","example":"2022080911591337da0aae9660"},"channelOrderNo":{"type":"string","description":"渠道订单号","example":"Mock22e7ecfd-745d-46ad-b563-ef4db5719bfb"},"paidAmount":{"type":"string","description":"渠道订单号","example":"7.9"},"paidTime":{"type":"string","description":"支付时间","example":"2022-08-09 11:59:46"},"paidAccountNo":{"type":"string","description":"支付账号","example":"62bec1591aeb41ad3f1a6503"},"payStatus":{"type":"string","description":"支付状态","example":"3"},"createTime":{"type":"string","description":"创建时间","example":"2022-08-09 11:59:20"},"payType":{"type":"string","description":"支付方式","example":"Alipay"}},"required":["orderNo","channelOrderNo","paidAmount","paidTime","paidAccountNo","payStatus","createTime","payType"]},"CostGetOrderPayDetailRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/CostGetOrderPayDetail"}]}},"required":["statusCode","message","data"]},"ClickCostContactDto":{"type":"object","properties":{}},"LdapGetBindPwdRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"type":"string","description":"响应数据","example":"adkf-sdfjkkj@df"}},"required":["statusCode","message","data"]},"LdapConfigInfoDto":{"type":"object","properties":{"id":{"type":"string","description":"ID","example":"1"},"enabled":{"type":"number","description":"LDAP 服务是否开启1 是、2 否","example":1},"userPoolId":{"type":"string","description":"用户池 ID","example":"613f1a50194825c3ea9b3a8e"},"linkUrl":{"type":"string","description":"LDAP host","example":"ldap://39.107.123.96:3389"},"ldapsLinkUrl":{"type":"string","description":"LDAPS host","example":"ldaps://39.107.123.96:638"},"enablePrivatization":{"type":"number","description":"是否是私有化的 LDAP Server 1 是、2 否","example":1},"bindDn":{"type":"string","description":"根据 domain 生成的 bindDN","example":"cn=system_user,ou=system_users,dc=ibm,dc=com,o=authing"},"ldapDomain":{"type":"string","description":"LDAP 域名，用于生成 baseDN","example":"ibm.com"},"enableSsl":{"type":"number","description":"私有化时是否开启 SSL 1 是、2 否","example":""},"baseDn":{"type":"string","description":"dc=ibm,dc=com,o=authing","example":"ibm.com"},"bindPwd":{"type":"string","description":"加密存储的 bindDn 密码(16位)","example":"%76q64e,^,qcaN2n"},"visibleOrgNodes":{"type":"object","description":"组织机构可见范围，值为组织节点 ID，用逗号分隔","example":{"all":false,"nodeIds":["636227d7827725df87c58e70"]}},"visibleFields":{"type":"object","description":"用户基础字段可见范围","example":["name","username"]},"udfMapping":{"type":"object","description":"用户拓展字段映射到的 LDAP 字段，存储为 JSON 字符串","example":{"all":false,"nodeIds":["636227d7827725df87c58e70"]}}},"required":["enabled","userPoolId","linkUrl","ldapsLinkUrl","enablePrivatization","bindDn","ldapDomain","baseDn","bindPwd","visibleOrgNodes","visibleFields","udfMapping"]},"LdapConfigInfoRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/LdapConfigInfoDto"}]}},"required":["statusCode","message","data"]},"LdapUpdateDto":{"type":"object","properties":{"bindPwd":{"type":"string","description":"bindDn 密码","example":"%76q64e,^,qcaN2n"}}},"LdapOperateRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"type":"boolean","description":"响应数据"}},"required":["statusCode","message","data"]},"LdapSaveDto":{"type":"object","properties":{"ldapDomain":{"type":"string","description":"LDAP 域名","example":"example.com"},"linkUrl":{"type":"string","description":"LDAP host","example":"ldaps://39.107.123.96:3389"}},"required":["ldapDomain"]},"LdapSetEnabledFlagDto":{"type":"object","properties":{"enabled":{"type":"boolean","description":"开关是否开启","example":""}},"required":["enabled"]},"LdapLogDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"总数","example":100},"list":{"type":"object","description":"记录数据","example":{"id":"IyWleoQBji42S_179Txi","searchBase":null,"bindDn":"cn=Manager-Fxd,dc=fxd-ldap,dc=com","addDn":null,"modDn":null,"delDn":null,"connection":1239,"operationName":"BIND","operationNumber":0,"errorCode":null,"message":"Nov 15 17:36:47 ldap slapd[10616]: conn=1239 op=0 BIND dn=\"cn=Manager-Fxd,dc=fxd-ldap,dc=com\" method=128","createTime":1668505007000}}},"required":["totalCount","list"]},"LdapLogRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/LdapLogDto"}]}},"required":["statusCode","message","data"]},"CreateEventAppDto":{"type":"object","properties":{"identifier":{"type":"string","description":"应用唯一标志","example":"myapp"},"name":{"type":"string","description":"应用名称","example":"自定义应用"},"logo":{"type":"string","description":"应用 logo"}},"required":["identifier","name","logo"]},"EventAppDto":{"type":"object","properties":{"identifier":{"type":"string","description":"唯一标识","example":"myapp"},"name":{"type":"string","description":"应用名称","example":"自定义应用"},"logo":{"type":"string","description":"应用 logo"}},"required":["identifier","name","logo"]},"EventAppPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/EventAppDto"}}},"required":["totalCount","list"]},"EventAppPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/EventAppPagingDto"}]}},"required":["statusCode","message","data"]},"OpenEventDto":{"type":"object","properties":{"id":{"type":"string","description":"事件 ID","example":"12203530144321536"},"code":{"type":"string","description":"事件标志","example":"authing.user.login"},"topic":{"type":"string","description":"事件 Topic","example":"authing.user.login"},"name":{"type":"string","description":"事件名称","example":"用户登录事件"},"desc":{"type":"string","description":"事件描述","example":"用户登录事件"}},"required":["id","code","topic","name","desc"]},"OpenEventPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/OpenEventDto"}}},"required":["totalCount","list"]},"OpenEventPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/OpenEventPagingDto"}]}},"required":["statusCode","message","data"]},"DefineEventDto":{"type":"object","properties":{"eventType":{"type":"string","description":"事件类型","example":"myapp.user.created"},"eventDescription":{"type":"string","description":"事件描述","example":"我的应用的用户创建事件"}},"required":["eventType","eventDescription"]},"PubEventDto":{"type":"object","properties":{"eventType":{"type":"string","description":"事件类型","example":"myapp.user.created"},"eventData":{"type":"object","description":"事件体","example":{"name":"张三","id":"xxxxx","email":"test@example.com"}}},"required":["eventType","eventData"]},"PubEventRespDataDto":{"type":"object","properties":{"success":{"type":"boolean","description":"发送是否成功","example":true},"errMsg":{"type":"boolean","description":"发送失败的错误提示","example":"事件未定义"}},"required":["success"]},"PubEventRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/PubEventRespDataDto"}]}},"required":["statusCode","message","data"]},"ListAccessKeyRespDto":{"type":"object","properties":{"accessKeyId":{"type":"string","description":"用户所拥有的 accessKeyId","example":"71829347129857981567891"},"accessKeySecret":{"type":"string","description":"用户所拥有的 accessKeySecret","example":"71829347129857981567891"},"userId":{"type":"string","description":"用户 ID","example":"71829347129857981567891"},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-03-17T05:23:01.567Z"},"status":{"type":"string","description":"accessKeyId 状态","example":"stop"},"lastDate":{"format":"date-time","type":"string","description":"最后使用时间","example":"2022-03-17T05:23:01.567Z"},"userPoolId":{"type":"string","description":"accessKeyId 所在用户池","example":"stop"},"enable":{"type":"boolean","description":"密钥是否启用","example":true}},"required":["accessKeyId","accessKeySecret","userId","createdAt","status","lastDate","userPoolId","enable"]},"ListAccessKeyResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/ListAccessKeyRespDto"}}},"required":["statusCode","message","data"]},"GetAccessKeyRespDto":{"type":"object","properties":{"accessKeyId":{"type":"string","description":"用户所拥有的 accessKeyId","example":"71829347129857981567891"},"accessKeySecret":{"type":"string","description":"用户所拥有的 accessKeySecret","example":"71829347129857981567891"},"userId":{"type":"string","description":"用户 ID","example":"71829347129857981567891"},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-03-17T05:23:01.567Z"},"status":{"type":"string","description":"accessKeyId 状态","example":"stop"},"lastDate":{"format":"date-time","type":"string","description":"最后使用时间","example":"2022-03-17T05:23:01.567Z"},"userPoolId":{"type":"string","description":"accessKeyId 所在用户池","example":"stop"},"enable":{"type":"boolean","description":"密钥是否启用","example":true}},"required":["accessKeyId","accessKeySecret","userId","createdAt","status","lastDate","userPoolId","enable"]},"GetAccessKeyResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/GetAccessKeyRespDto"}}},"required":["statusCode","message","data"]},"CreateAccessKeyDto":{"type":"object","properties":{"type":{"type":"string","description":"密钥类型","example":"userpool"},"userId":{"type":"string","description":"密钥所属用户 ID"},"tenantId":{"type":"string","description":"密钥所属租户 ID"}},"required":["type"]},"CreateAccessKeyRespDto":{"type":"object","properties":{"accessKeyId":{"type":"string","description":"用户所拥有的 accessKeyId","example":"71829347129857981567891"},"accessKeySecret":{"type":"string","description":"用户所拥有的 accessKeySecret","example":"71829347129857981567891"},"userId":{"type":"string","description":"用户 ID","example":"71829347129857981567891"},"createdAt":{"format":"date-time","type":"string","description":"创建时间","example":"2022-03-17T05:23:01.567Z"},"status":{"type":"string","description":"accessKeyId 状态","example":"stop"},"lastDate":{"format":"date-time","type":"string","description":"最后使用时间","example":"2022-03-17T05:23:01.567Z"},"userPoolId":{"type":"string","description":"accessKeyId 所在用户池","example":"stop"},"enable":{"type":"boolean","description":"密钥是否启用","example":true}},"required":["accessKeyId","accessKeySecret","userId","createdAt","status","lastDate","userPoolId","enable"]},"CreateAccessKeyResponseDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","type":"array","items":{"$ref":"#/components/schemas/CreateAccessKeyRespDto"}}},"required":["statusCode","message","data"]},"DeleteAccessKeyDto":{"type":"object","properties":{"accessKeyId":{"type":"string","description":"accessKeyId","example":"23435"}},"required":["accessKeyId"]},"UpdateAccessKeyDto":{"type":"object","properties":{"accessKeyId":{"type":"string","description":"AccessKey ID"},"enable":{"type":"boolean","description":"密钥是否生效"}},"required":["accessKeyId","enable"]},"VerifyConfigDataDto":{"type":"object","properties":{"id":{"type":"string","description":"主键 ID","example":"config id"},"appId":{"type":"string","description":"应用 ID","example":"应用 id"},"isWinLogin":{"type":"boolean","description":"是否开启接管 Windows 登录","example":false,"default":false},"isWinChangePwd":{"type":"boolean","description":"是否开启接管 Windows 更改密码","example":false,"default":false},"appSecret":{"type":"string","description":"密钥","example":"860830c5a647xxxxxx7bd4d0dd94bf23"},"publicKey":{"type":"string","description":"固定值，public-key","example":"public-key"},"authAddress":{"type":"string","description":"公钥地址","example":"https://example.com/callback"},"logo":{"type":"string","description":"应用图片","example":"https://example.com/callback"},"name":{"type":"string","description":"应用图片","example":"https://example.com/callback"}},"required":["id","appId","appSecret","publicKey","authAddress","logo","name"]},"VerifyConfigInfoRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/VerifyConfigDataDto"}]}},"required":["statusCode","message","data"]},"AddWhitelistDto":{"type":"object","properties":{"type":{"type":"string","description":"白名单类型","enum":["USERNAME","EMAIL","PHONE"],"example":"EMAIL"},"list":{"description":"类型参数","example":["12580@163.com"],"type":"array","items":{"type":"string"}}},"required":["type"]},"WhitelistRespDto":{"type":"object","properties":{"value":{"type":"string","description":"数据","example":"User"},"createdAt":{"type":"string","description":"创建时间","example":"65589653369"}},"required":["value","createdAt"]},"WhitelistListRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/WhitelistRespDto"}]}},"required":["statusCode","message","data"]},"DeleteWhitelistDto":{"type":"object","properties":{"type":{"type":"string","description":"白名单类型","enum":["USERNAME","EMAIL","PHONE"],"example":"EMAIL"},"list":{"description":"类型参数","example":["12580@163.com"],"type":"array","items":{"type":"string"}}},"required":["type"]},"IpListRespDto":{"type":"object","properties":{"id":{"type":"string","description":"ID","example":"60b49eb83fd80adb96f26e68"},"ip":{"type":"string","description":"ip","example":"10.123.32.25"},"ipType":{"type":"string","description":"ip类型，WHITE-白名单，BLACK-黑名单","example":"WHITE"},"addType":{"type":"string","description":"添加类型，MANUAL-手动，SCHEDULE-策略添加","example":"MANUAL"},"removeType":{"type":"string","description":"删除类型，MANUAL-手动，SCHEDULE-策略删除","example":"MANUAL"},"limitList":{"description":"限制类型，FORBID_LOGIN-禁止登录，FORBID_REGISTER-禁止注册，SKIP_MFA-跳过 MFA","example":"[FORBID_LOGIN]","type":"array","items":{"type":"string"}}},"required":["id","ip","ipType","addType","removeType","limitList"]},"IpListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/IpListRespDto"}}},"required":["totalCount","list"]},"IpListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/IpListPagingDto"}]}},"required":["statusCode","message","data"]},"IpListCreateDto":{"type":"object","properties":{"ips":{"type":"string","description":"ip, 多个IP以逗号分割","example":"10.123.32.25"},"ipType":{"type":"string","description":"ip类型，WHITE-白名单，BLACK-黑名单","example":"WHITE"},"addType":{"type":"string","description":"添加类型，MANUAL-手动，SCHEDULE-策略添加","example":"MANUAL"},"removeType":{"type":"string","description":"删除类型，MANUAL-手动，SCHEDULE-策略删除","example":"MANUAL"},"limitList":{"description":"限制类型，FORBID_LOGIN-禁止登录，FORBID_REGISTER-禁止注册，SKIP_MFA-跳过 MFA","example":"[FORBID_LOGIN]","type":"array","items":{"type":"string"}},"expireAt":{"type":"string","description":"添加时间","example":"2023-09-12T05:54:58.758Z"}},"required":["ips","ipType","addType","removeType","limitList","expireAt"]},"RiskListItemDto":{"type":"object","properties":{"id":{"type":"string","description":"ID","example":"60b49eb83fd80adb96f26e68"},"userId":{"type":"string","description":"userId","example":"60b49eb83fd80adb96f26e68"},"addType":{"type":"string","description":"添加类型，MANUAL-手动，SCHEDULE-策略添加","example":"MANUAL"},"userListType":{"type":"string","description":"ip类型，WHITE-白名单，BLACK-黑名单","example":"WHITE"},"removeType":{"type":"string","description":"删除类型，MANUAL-手动，SCHEDULE-策略删除","example":"MANUAL"},"limitList":{"description":"限制类型，FORBID_LOGIN-禁止登录，FORBID_REGISTER-禁止注册，SKIP_MFA-跳过 MFA","example":"[FORBID_LOGIN]","type":"array","items":{"type":"string"}},"addAt":{"type":"string","description":"添加时间","example":"2023-09-12T05:54:58.758Z"}},"required":["id","userId","addType","userListType","removeType","limitList","addAt"]},"UserListPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/RiskListItemDto"}}},"required":["totalCount","list"]},"UserListPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/UserListPagingDto"}]}},"required":["statusCode","message","data"]},"UserListCreateDto":{"type":"object","properties":{"userIds":{"description":"userId, 多个 userId 以逗号分割","example":"60b49eb83fd80adb96f26e68","type":"array","items":{"type":"string"}},"userListType":{"type":"string","description":"用户名单类型，WHITE-白名单，BLACK-黑名单","example":"WHITE"},"addType":{"type":"string","description":"添加类型，MANUAL-手动，SCHEDULE-策略添加","example":"MANUAL"},"removeType":{"type":"string","description":"删除类型，MANUAL-手动，SCHEDULE-策略删除","example":"MANUAL"},"limitList":{"description":"限制类型，FORBID_LOGIN-禁止登录，FORBID_REGISTER-禁止注册，SKIP_MFA-跳过 MFA","example":"[FORBID_LOGIN]","type":"array","items":{"type":"string"}},"expireAt":{"type":"number","description":"过期时间","example":"2023-09-12T05:54:58.758Z"}},"required":["userIds","userListType","addType","removeType","limitList","expireAt"]},"RiskListPolicyRespDto":{"type":"object","properties":{"id":{"type":"string","description":"ID","example":"60b49eb83fd80adb96f26e68"},"optObject":{"type":"string","description":"策略操作对象，目前只有 ip","enum":["IP","USER"],"example":"IP"},"ipRange":{"type":"string","description":"操作IP的范围, ALL-所有，NOT_IN_WHITE_LIST-不在白名单中，与 userRange 二者取一个","enum":["ALL","NOT_IN_WHITE_LIST"],"example":"ALL"},"userRange":{"type":"string","description":"操作USER的范围, ALL-所有，NOT_IN_WHITE_LIST-不在白名单中，与 ipRange 二者取一个","enum":["ALL","NOT_IN_WHITE_LIST"],"example":"ALL"},"ipCond":{"type":"string","description":"IP条件, NO_LIMIT-不限制，ONE-单个IP，与 userCond 二者取一个","enum":["NO_LIMIT","ONE"],"example":"ONE"},"userCond":{"type":"string","description":"IP条件, NO_LIMIT-不限制，ONE-单个用户，与 ipCond 二者取一个","enum":["NO_LIMIT","ONE"],"example":"ONE"},"timeRange":{"type":"number","description":"时间范围，最近多少分钟","example":"1"},"countThr":{"type":"number","description":"次数阈值","example":"3"},"eventStateType":{"type":"string","description":"事件状态类型，password_wrong-密码错误，account_wrong-账号错误","enum":["password_wrong","account_wrong"],"example":"password_wrong"},"removeType":{"type":"string","description":"移除类型，MANUAL-手动，SCHEDULE-策略, 目前只有手动","enum":["MANUAL","SCHEDULE"],"example":"MANUAL"},"action":{"type":"string","description":"策略动作, ADD_IP_BLACK_LIST-添加IP黑名单，ADD_USER_BLACK_LIST-添加用户黑名单","enum":["ADD_IP_BLACK_LIST","ADD_USER_BLACK_LIST"],"example":"ADD_IP_BLACK_LIST"},"limitList":{"type":"string","description":"限制类型列表,FORBID_LOGIN-禁止登录，FORBID_REGISTER-禁止注册","enum":["FORBID_LOGIN","FORBID_REGISTER"],"example":"FORBID_LOGIN"},"createdAt":{"type":"string","description":"创建时间，","example":"2023-09-18T06:49:45.191Z"}},"required":["id","optObject","ipRange","userRange","ipCond","userCond","timeRange","countThr","eventStateType","removeType","action","limitList","createdAt"]},"RiskListPolicyPagingDto":{"type":"object","properties":{"totalCount":{"type":"number","description":"记录总数"},"list":{"description":"数据列表","type":"array","items":{"$ref":"#/components/schemas/RiskListPolicyRespDto"}}},"required":["totalCount","list"]},"UserListPolicyPaginatedRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/RiskListPolicyPagingDto"}]}},"required":["statusCode","message","data"]},"RiskListPolicyCreateDto":{"type":"object","properties":{"optObject":{"type":"string","description":"策略操作对象，目前只有 ip","enum":["IP","USER"],"example":"IP"},"ipRange":{"type":"string","description":"操作IP的范围, ALL-所有，NOT_IN_WHITE_LIST-不在白名单中，与 userRange 二者取一个","enum":["ALL","NOT_IN_WHITE_LIST"],"example":"ALL"},"userRange":{"type":"string","description":"操作USER的范围, ALL-所有，NOT_IN_WHITE_LIST-不在白名单中，与 ipRange 二者取一个","enum":["ALL","NOT_IN_WHITE_LIST"],"example":"ALL"},"ipCond":{"type":"string","description":"IP条件, NO_LIMIT-不限制，ONE-单个IP，与 userCond 二者取一个","enum":["NO_LIMIT","ONE"],"example":"ONE"},"userCond":{"type":"string","description":"IP条件, NO_LIMIT-不限制，ONE-单个用户，与 ipCond 二者取一个","enum":["NO_LIMIT","ONE"],"example":"ONE"},"timeRange":{"type":"number","description":"时间范围，最近多少分钟","example":"1"},"countThr":{"type":"number","description":"次数阈值","example":"3"},"eventStateType":{"type":"string","description":"事件状态类型，password_wrong-密码错误，account_wrong-账号错误","enum":["password_wrong","account_wrong"],"example":"password_wrong"},"removeType":{"type":"string","description":"移除类型，MANUAL-手动，SCHEDULE-策略, 目前只有手动","enum":["MANUAL","SCHEDULE"],"example":"MANUAL"},"action":{"type":"string","description":"策略动作, ADD_IP_BLACK_LIST-添加IP黑名单，ADD_USER_BLACK_LIST-添加用户黑名单","enum":["ADD_IP_BLACK_LIST","ADD_USER_BLACK_LIST"],"example":"ADD_IP_BLACK_LIST"},"limitList":{"type":"string","description":"限制类型列表,FORBID_LOGIN-禁止登录，FORBID_REGISTER-禁止注册","enum":["FORBID_LOGIN","FORBID_REGISTER"],"example":"FORBID_LOGIN"}},"required":["optObject","ipRange","userRange","ipCond","userCond","timeRange","countThr","eventStateType","removeType","action","limitList"]},"SetUserCustomDataDto":{"type":"object","properties":{"success":{"type":"boolean","description":"操作是否成功","example":true}},"required":["success"]},"SetUserCustomDataRespDto":{"type":"object","properties":{"statusCode":{"type":"number","description":"业务状态码，可以通过此状态码判断操作是否成功，200 表示成功。","example":200},"message":{"type":"string","description":"描述信息","example":"操作成功"},"apiCode":{"type":"number","description":"细分错误码，可通过此错误码得到具体的错误类型。详情可以查看开发准备中的 apiCode 细分说明"},"requestId":{"type":"string","description":"请求 ID。当请求失败时会返回。","example":"934108e5-9fbf-4d24-8da1-c330328abd6c"},"data":{"description":"响应数据","allOf":[{"$ref":"#/components/schemas/SetUserCustomDataDto"}]}},"required":["statusCode","message","data"]},"RolesDto":{"type":"object","properties":{"description":{"type":"string","description":"用户描述","example":"6229c4deb3e4d8a20b6021ff"},"code":{"type":"string","description":"用户识别码，权限组下唯一","example":"6229c4deb3e4d8a20b6021ff"},"namespace":{"type":"string","description":"权限分组","example":"6229c4deb3e4d8a20b6021ff"}},"required":["description","code","namespace"]},"ResetPrincipalAuthenticationInfoRespDto":{"type":"object","properties":{"success":{"type":"boolean","description":"操作是否成功","example":true}},"required":["success"]},"Role":{"type":"object","properties":{}},"AccessTokenDto":{"type":"object","properties":{}},"DataResourcePolicyTreeStructs":{"type":"object","properties":{"code":{"type":"string","description":"数据资源策略节点 Code, 同层级唯一","example":"123","maxLength":50},"value":{"type":"string","description":"数据资源策略节点 Value","example":"示例资源策略节点","maxLength":1000},"name":{"type":"string","description":"数据资源节点名称 ，同层级唯一","example":"数据资源","maxLength":50},"action":{"type":"string","description":"数据资源策略节点 action 动作","example":"read"},"enabled":{"type":"boolean","description":"数据资源策略节点是否开启动作","example":false},"children":{"description":"子节点数据,子节点数据最多五个层级","example":[{"code":"code1","name":"子节点1","value":"子节点值","enabled":false,"action":"Create","children":[{"code":"code2","name":"子节点2","value":"子节点2值","enabled":true,"action":"Get"}]}],"type":"array","items":{"type":"string"}}},"required":["code","name","action","enabled"]},"ArrayOrStringActionDto":{"type":"object","properties":{"action":{"type":"string","description":"数据资源策略节点 action 动作","example":"read"},"enabled":{"type":"boolean","description":"数据资源策略节点是否开启动作","example":false}},"required":["action","enabled"]},"DataResourcePolicyStringStructs":{"type":"object","properties":{"operationType":{"type":"string","description":"数据策略所拥有对某一个数据资源的操作权限，所有操作（ALL）,特定操作（SPECIAL）","example":"ALL"},"actionList":{"description":"数据权限列表，每个策略下所有的数据权限节点","type":"array","items":{"$ref":"#/components/schemas/ArrayOrStringActionDto"}}},"required":["operationType","actionList"]},"DataResourcePolicyArrayStructs":{"type":"object","properties":{"operationType":{"type":"string","description":"数据策略所拥有对某一个数据资源的操作权限，所有操作（ALL）,特定操作（SPECIAL）","example":"ALL"},"actionList":{"description":"数据权限列表，每个策略下所有的数据权限节点","type":"array","items":{"$ref":"#/components/schemas/ArrayOrStringActionDto"}}},"required":["operationType","actionList"]}}},"paths":{"/api/v3/metadata/filter":{"post":{"operationId":"MetaDataController_listRow","summary":"数据对象高级搜索","description":"数据对象高级搜索","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/FilterDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelValueListResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/get-row":{"get":{"operationId":"MetaDataController_getRow","summary":"获取数据对象行信息","description":"获取数据对象行信息","parameters":[{"name":"modelId","required":true,"in":"query","description":"功能 id","schema":{"type":"string"}},{"name":"rowId","required":true,"in":"query","description":"行 id","schema":{"type":"string"}},{"name":"showFieldId","required":true,"in":"query","description":"返回结果中是否使用字段 id 作为 key","schema":{"default":false,"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelValueResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/get-row-by-value":{"get":{"operationId":"MetaDataController_getRowByValue","summary":"根据属性值获取数据对象行信息","description":"根据属性值获取数据对象行信息，只允许通过唯一性字段进行精确查询。","parameters":[{"name":"modelId","required":true,"in":"query","description":"功能 id","schema":{"type":"string"}},{"name":"key","required":true,"in":"query","description":"字段 key","schema":{"type":"string"}},{"name":"value","required":true,"in":"query","description":"字段值","schema":{"type":"string"}},{"name":"showFieldId","required":true,"in":"query","description":"返回结果中是否使用字段 id 作为 key","schema":{"default":false,"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelValueResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/get-row-batch":{"post":{"operationId":"MetaDataController_getRowBatch","summary":"批量获取行信息","description":"批量获取行信息","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetRowBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MetadataListResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/create-row":{"post":{"operationId":"MetaDataController_createRow","summary":"添加行","description":"添加行","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateRowDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelValueResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/update-row":{"post":{"operationId":"MetaDataController_updateRow","summary":"更新行","description":"更新行","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateRowDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelValueResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/remove-row":{"post":{"operationId":"MetaDataController_removeRow","summary":"删除行","description":"删除行","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveRowDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/create-model":{"post":{"operationId":"MetaDataController_createModel","summary":"创建数据对象","description":"利用此接口可以创建一个自定义的数据对象，定义数据对象的基本信息","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateFunctionModelDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/get-model":{"get":{"operationId":"MetaDataController_getModel","summary":"获取数据对象详情","description":"利用功能 id ，获取数据对象的详细信息","parameters":[{"name":"id","required":true,"in":"query","description":"功能 id 可以从控制台页面获取","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/list-model":{"get":{"operationId":"MetaDataController_listModel","summary":"获取数据对象列表","description":"获取数据对象列表","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelListDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/remove-model":{"post":{"operationId":"MetaDataController_removeModel","summary":"删除数据对象","description":"根据请求的功能 id ，删除对应的数据对象","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelIdDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/update-model":{"post":{"operationId":"MetaDataController_updateModel","summary":"更新数据对象","description":"更新对应功能 id 的数据对象信息","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateFunctionModelDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/create-field":{"post":{"operationId":"MetaDataController_createField","summary":"创建数据对象的字段","description":"创建相关数据对象的字段，配置字段信息及基本校验规则","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateFunctionModelFieldDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelFieldResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/update-field":{"post":{"operationId":"MetaDataController_updateField","summary":"更新数据对象的字段","description":"更新相关数据对象的字段信息及基本校验规则","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateFunctionModelFieldDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelFieldResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/remove-field":{"post":{"operationId":"MetaDataController_remoteField","summary":"删除数据对象的字段","description":"根据功能字段 id 、功能 id 、字段属性名删除对应的字段","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelFieldIdDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/list-field":{"get":{"operationId":"MetaDataController_listField","summary":"获取数据对象字段列表","description":"获取数据对象字段列表","parameters":[{"name":"modelId","required":true,"in":"query","description":"功能 id","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionFieldListResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/export":{"post":{"operationId":"MetaDataController_exportMeatdata","summary":"导出全部数据","description":"导出全部数据","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExportModelDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/import":{"post":{"operationId":"MetaDataController_importMetadata","summary":"导入数据","description":"导入数据","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImportModelDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/get-import-template":{"get":{"operationId":"MetaDataController_getImportTemplate","summary":"获取导入模板","description":"获取导入模板","parameters":[{"name":"modelId","required":true,"in":"query","description":"功能 id","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetImportTemplateResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/create-operate":{"post":{"operationId":"MetaDataController_createOperate","summary":"创建自定义操作","description":"创建自定义操作","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateOperateModelDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/remove-operate":{"post":{"operationId":"MetaDataController_removeOperate","summary":"移除自定义操作","description":"移除自定义操作","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelOperateIdDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/execute-operate":{"post":{"operationId":"MetaDataController_executeOperate","summary":"执行自定义操作","description":"执行自定义操作","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelOperateIdDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/copy-operate":{"post":{"operationId":"MetaDataController_copyOperate","summary":"复制自定义操作","description":"复制自定义操作","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/FunctionModelOperateIdDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/list-operate":{"get":{"operationId":"MetaDataController_listOperate","summary":"操作管理列表(分页)","description":"操作管理列表(分页)","parameters":[{"name":"keywords","required":false,"in":"query","description":"搜索功能名称","schema":{"type":"string"}},{"name":"modelId","required":true,"in":"query","description":"model Id","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OperateModelDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/all-operate":{"get":{"operationId":"MetaDataController_listOperateAll","summary":"全部操作管理列表","description":"全部操作管理列表","parameters":[{"name":"modelId","required":true,"in":"query","description":"model Id","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OperateModelDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/update-operate":{"post":{"operationId":"MetaDataController_updateOperate","summary":"更新操作管理","description":"更新操作管理","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateOperateModelDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/get-relation-info":{"post":{"operationId":"MetaDataController_getRelationInfo","summary":"获取关联数据详情","description":"获取关联数据详情","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetRelationInfoDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/create-row-relation":{"post":{"operationId":"MetaDataController_createRowRelation","summary":"创建行关联数据","description":"创建行关联数据","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateRelationValueDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/get-row-relation":{"get":{"operationId":"MetaDataController_getRelationValue","summary":"获取行关联数据","description":"获取行关联数据","parameters":[{"name":"modelId","required":true,"in":"query","description":"功能 id","schema":{"type":"string"}},{"name":"fieldId","required":true,"in":"query","description":"字段 id","schema":{"type":"string"}},{"name":"rowId","required":true,"in":"query","description":"行 id","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RelationValueListResDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/remove-row-relation":{"post":{"operationId":"MetaDataController_removeRelationValue","summary":"删除行关联数据","description":"删除行关联数据","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveRelationValueDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/export/model":{"post":{"operationId":"MetaDataController_exportModel","summary":"导出数据对象","description":"导出数据对象","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExportMetadataDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/metadata/import/model":{"post":{"operationId":"MetaDataController_importModel","summary":"导入数据对象","description":"导入数据对象","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImportMetadataDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据对象/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/internal/v1/metadata/list-fields":{"post":{"operationId":"MetadataInternalController_listFields","x-authing-hidden-from-sdk":true,"parameters":[],"responses":{"201":{"description":""}}}},"/api/internal/v1/metadata/update-row":{"post":{"operationId":"MetadataInternalController_updateRow","x-authing-hidden-from-sdk":true,"parameters":[],"responses":{"201":{"description":""}}}},"/api/internal/v1/metadata/get-row-batch":{"post":{"operationId":"MetadataInternalController_getRowBatch","x-authing-hidden-from-sdk":true,"parameters":[],"responses":{"201":{"description":""}}}},"/api/v3/metadata/ueba/capture":{"post":{"operationId":"UEBAController_capture","summary":"UEBA 上传","description":"UEBA 上传","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUEBADto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUEBARespDto"}}}}},"tags":["管理元数据/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-post":{"get":{"operationId":"PostManageManagementController_postList","summary":"岗位列表","description":"岗位列表","parameters":[{"name":"keywords","required":false,"in":"query","description":"搜索岗位 code 或名称","example":"xxx","schema":{"type":"string"}},{"name":"skipCount","required":false,"in":"query","description":"是否统计岗位关联的部门数和用户数","example":false,"schema":{"type":"boolean"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"withMetadata","required":false,"in":"query","description":"是否展示元数据内容","example":false,"schema":{"type":"boolean"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":false,"schema":{"type":"boolean"}},{"name":"flatCustomData","required":false,"in":"query","description":"是否拍平扩展字段","schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostPaginatedRespDto"}}}}},"tags":["管理岗位/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-post":{"get":{"operationId":"PostManageManagementController_getPost","summary":"获取岗位","description":"获取岗位","parameters":[{"name":"code","required":true,"in":"query","description":"岗位 code","example":"developer","schema":{"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":false,"schema":{"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePostDto"}}}}},"tags":["管理岗位/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-user-posts":{"get":{"operationId":"PostManageManagementController_getUserPosts","summary":"获取用户关联岗位","description":"获取用户关联的所有岗位","deprecated":true,"parameters":[{"name":"userId","required":true,"in":"query","description":"用户 id","example":"xxxxx","schema":{"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":false,"schema":{"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostListRespDto"}}}}},"tags":["管理岗位/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-user-post":{"get":{"operationId":"PostManageManagementController_getUserPost","summary":"获取用户关联岗位","description":"此接口只会返回一个岗位，已废弃，请使用 /api/v3/get-user-posts 接口","deprecated":true,"parameters":[{"name":"userId","required":true,"in":"query","description":"用户 id","example":"xxxxx","schema":{"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":false,"schema":{"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePostDto"}}}}},"tags":["管理岗位/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-post-by-id":{"post":{"operationId":"PostManageManagementController_getPostById","summary":"获取岗位信息","description":"根据岗位 id 获取岗位详情","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPostByIdListDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PostRespDto"}}}}},"tags":["管理岗位/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-post":{"post":{"operationId":"PostManageManagementController_createPost","summary":"创建岗位","description":"创建岗位","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePostDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePostRespDto"}}}}},"tags":["管理岗位/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-post":{"post":{"operationId":"PostManageManagementController_updatePost","summary":"更新岗位信息","description":"更新岗位信息","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePostDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePostRespDto"}}}}},"tags":["管理岗位/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/remove-post":{"post":{"operationId":"PostManageManagementController_removePost","summary":"删除岗位","description":"删除岗位","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemovePostDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理岗位/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/set-user-posts":{"post":{"operationId":"PostManageManagementController_setUserPosts","summary":"用户设置岗位","description":"一次性给用户设置岗位：如果之前的岗位不在传入的列表中，会进行移除；如果有新增的岗位，会加入到新的岗位；如果不变，则不进行任何操作。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetUserPostsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理岗位/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/user-connection-post":{"post":{"operationId":"PostManageManagementController_userConnectionPost","summary":"用户关联岗位","description":"用户关联岗位","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserConnectionPostDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理岗位/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-device":{"post":{"operationId":"TerminalController_createDevice","summary":"新增设备","description":"创建新设备。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTerminalDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TerminalInfoRespDto"}}}}}}},"/api/v3/get-last-login-apps-by-deviceIds":{"post":{"operationId":"TerminalController_findLastLoginAppsByDeviceIds","summary":"最近登录应用","description":"根据设备唯一标识获取最近登录的应用列表。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QueryTerminalAppsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}}}},"/api/v3/delete-device-by-user":{"post":{"operationId":"TerminalUserController_deleteDevice","summary":"移除绑定(用户详情页)","description":"移除绑定(用户详情页)。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteTerminalUserDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理终端设备/API 列表"],"security":[{"x-authing-userpool-id":[]}]}},"/api/v3/suspend-device-by-user":{"post":{"operationId":"TerminalUserController_suspendDevice","summary":"挂起设备(用户详情页)","description":"挂起设备(用户详情页)。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SuspendTerminalUserDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理终端设备/API 列表"],"security":[{"x-authing-userpool-id":[]}]}},"/api/v3/disable-device-by-user":{"post":{"operationId":"TerminalUserController_disableDevice","summary":"停用设备(用户详情页)","description":"停用设备(用户详情页)。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateTerminalUserDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理终端设备/API 列表"],"security":[{"x-authing-userpool-id":[]}]}},"/api/v3/enable-device-by-user":{"post":{"operationId":"TerminalUserController_enableDevice","summary":"启用设备(用户详情页)","description":"启用设备(用户详情页)。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateTerminalUserDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理终端设备/API 列表"],"security":[{"x-authing-userpool-id":[]}]}},"/api/v3/authing-verify/create-device":{"post":{"operationId":"TerminalVerifyController_createVerifyDevice","summary":"新增 verify 设备","description":"创建 verify 新设备。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTerminalDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TerminalInfoRespDto"}}}}},"security":[{"x-authing-userpool-id":[]}]}},"/api/v3/device-status":{"post":{"operationId":"TerminalManagementController_getDeviceStatus","summary":"获取设备状态","description":"获取设备状态。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TerminalBaseDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeviceStatusRespDto"}}}}},"tags":["管理终端设备/API 列表"],"security":[{"x-authing-userpool-id":[]}]}},"/api/v3/delete-device":{"post":{"operationId":"TerminalManagementController_deleteDevice","summary":"移除设备","description":"移除设备。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteTerminalDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理终端设备/API 列表"],"security":[{"x-authing-userpool-id":[]}]}},"/api/v3/suspend-device":{"post":{"operationId":"TerminalManagementController_suspendDevice","summary":"挂起设备","description":"挂起设备。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SuspendTerminalDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理终端设备/API 列表"],"security":[{"x-authing-userpool-id":[]}]}},"/api/v3/disable-device":{"post":{"operationId":"TerminalManagementController_disableDevice","summary":"停用设备","description":"停用设备。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateTerminalDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理终端设备/API 列表"],"security":[{"x-authing-userpool-id":[]}]}},"/api/v3/enable-device":{"post":{"operationId":"TerminalManagementController_enableDevice","summary":"启用设备","description":"启用设备。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateTerminalDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理终端设备/API 列表"],"security":[{"x-authing-userpool-id":[]}]}},"/api/v3/list-public-accounts":{"post":{"operationId":"PublicAccountsManagementController_listPublicAccounts","summary":"获取/搜索公共账号列表","description":"\n此接口用于获取用户列表，支持模糊搜索，以及通过用户基础字段、用户自定义字段、用户所在部门、用户历史登录应用等维度筛选用户。\n\n### 模糊搜素示例\n\n模糊搜索默认会从 `phone`, `email`, `name`, `username`, `nickname` 五个字段对用户进行模糊搜索，你也可以通过设置 `options.fuzzySearchOn`\n决定模糊匹配的字段范围：\n\n```json\n{\n  \"keywords\": \"北京\",\n  \"options\": {\n    \"fuzzySearchOn\": [\n      \"address\"\n    ]\n  }\n}\n```\n\n### 高级搜索示例\n\n你可以通过 `advancedFilter` 进行高级搜索，高级搜索支持通过用户的基础信息、自定义数据、所在部门、用户来源、登录应用、外部身份源信息等维度对用户进行筛选。\n**且这些筛选条件可以任意组合。**\n\n#### 筛选状态为禁用的用户\n\n用户状态（`status`）为字符串类型，可选值为 `Activated` 和 `Suspended`： \n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"status\",\n      \"operator\": \"EQUAL\",\n      \"value\": \"Suspended\"\n    }\n  ]\n}\n```\n\n#### 筛选邮箱中包含 `@example.com` 的用户\n\n用户邮箱（`email`）为字符串类型，可以进行模糊搜索：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"email\",\n      \"operator\": \"CONTAINS\",\n      \"value\": \"@example.com\"\n    }\n  ]\n}\n```\n\n#### 根据用户的任意扩展字段进行搜索\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"some-custom-key\",\n      \"operator\": \"EQUAL\",\n      \"value\": \"some-value\"\n    }\n  ]\n}\n```\n\n#### 根据用户登录次数筛选\n\n筛选登录次数大于 10 的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"loginsCount\",\n      \"operator\": \"GREATER\",\n      \"value\": 10\n    }\n  ]\n}\n```\n\n筛选登录次数在 10 - 100 次的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"loginsCount\",\n      \"operator\": \"BETWEEN\",\n      \"value\": [10, 100]\n    }\n  ]\n}\n```\n\n#### 根据用户上次登录时间进行筛选\n\n筛选最近 7 天内登录过的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"lastLoginTime\",\n      \"operator\": \"GREATER\",\n      \"value\": new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n    }\n  ]\n}\n```\n\n筛选在某一段时间内登录过的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"lastLogin\",\n      \"operator\": \"BETWEEN\",\n      \"value\": [\n        Date.now() - 14 * 24 * 60 * 60 * 1000,\n        Date.now() - 7 * 24 * 60 * 60 * 1000\n      ]\n    }\n  ]\n}\n```\n\n#### 根据用户曾经登录过的应用筛选\n\n筛选出曾经登录过应用 `appId1` 或者 `appId2` 的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"loggedInApps\",\n      \"operator\": \"IN\",\n      \"value\": [\n        \"appId1\",\n        \"appId2\"\n      ]\n    }\n  ]\n}\n```\n\n#### 根据用户所在部门进行筛选\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"department\",\n      \"operator\": \"IN\",\n      \"value\": [\n        {\n          \"organizationCode\": \"steamory\",\n          \"departmentId\": \"root\",\n          \"departmentIdType\": \"department_id\",\n          \"includeChildrenDepartments\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListPublicAccountsRequestDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountPaginatedRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-public-account":{"get":{"operationId":"PublicAccountsManagementController_getPublicAccount","summary":"获取公共账号信息","description":"通过公共账号用户 ID，获取公共账号详情，可以选择获取自定义数据、选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"公共账号用户 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountSingleRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-public-account-batch":{"get":{"operationId":"PublicAccountsManagementController_getPublicAccountBatch","summary":"批量获取公共账号信息","description":"通过公共账号用户 ID 列表，批量获取公共账号信息，可以选择获取自定义数据、选择指定用户 ID 类型等。","parameters":[{"name":"userIds","required":true,"in":"query","description":"公共账号用户 ID 数组","example":["6229ffaxxxxxxxxcade3e3d9","6229ffaxxxxxxxxcade3e3d0"],"schema":{"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountListRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-public-account":{"post":{"operationId":"PublicAccountsManagementController_createPublicAccount","summary":"创建公共账号","description":"创建公共账号，邮箱、手机号、用户名必须包含其中一个，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份创建公共账号用户因此不需要进行手机号验证码检验等安全检测。  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePublicAccountReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountSingleRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-public-accounts-batch":{"post":{"operationId":"PublicAccountsManagementController_createPublicAccountsBatch","summary":"批量创建公共账号","description":"批量创建公共账号，邮箱、手机号、用户名必须包含其中一个，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份创建公共账号用户因此不需要进行手机号验证码检验等安全检测。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePublicAccountBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountListRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-public-account":{"post":{"operationId":"PublicAccountsManagementController_updatePublicAccount","summary":"修改公共账号资料","description":"通过公共账号用户 ID，修改公共账号资料，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份修改公共账号资料因此不需要进行手机号验证码检验等安全检测。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdatePublicAccountReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountSingleRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-public-account-batch":{"post":{"operationId":"PublicAccountsManagementController_updatePublicAccountBatch","summary":"批量修改公共账号资料","description":"批量修改公共账号资料，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份修改公共账号资料因此不需要进行手机号验证码检验等安全检测。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdatePublicAccountBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountListRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-public-accounts-batch":{"post":{"operationId":"PublicAccountsManagementController_deletePublicAccountsBatch","summary":"批量删除公共账号","description":"通过公共账号 ID 列表，删除公共账号，支持批量删除，可以选择指定用户 ID 类型等。","deprecated":false,"parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeletePublicAccountsBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/kick-public-accounts":{"post":{"operationId":"PublicAccountsManagementController_kickPublicAccounts","summary":"强制下线公共账号","description":"通过公共账号 ID、App ID 列表，强制让公共账号下线，可以选择指定公共账号 ID 类型等。","deprecated":false,"parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/KickPublicAccountsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/transfer-into-public-account":{"post":{"operationId":"PublicAccountsManagementController_changeIntoPublicAccount","summary":"个人账号转换为公共账号","description":"通过用户 ID，把个人账号转换为公共账号。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePublicAccountFromUserDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-public-accounts-of-user":{"get":{"operationId":"PublicAccountsManagementController_getPublicAccountsOfUser","summary":"获取用户的公共账号列表","description":"通过用户 ID，获取用户的公共账号列表。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountPaginatedRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-users-of-public-account":{"get":{"operationId":"PublicAccountsManagementController_getUsersOfPublicAccount","summary":"公共账号的用户列表","description":"通过公共账号 ID，获取用户列表。","parameters":[{"name":"publicAccountId","required":true,"in":"query","description":"公共账号 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountPaginatedRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/set-public-account-of-users":{"post":{"operationId":"PublicAccountsManagementController_bindUsersPublicAccount","summary":"公共账号绑定批量用户","description":"使用公共账号绑定批量用户","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetPublicAccountBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/set-user-of-public-accounts":{"post":{"operationId":"PublicAccountsManagementController_setuserOfPublicAccount","summary":"用户绑定批量公共账号","description":"用户绑定批量公共账号","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetUserOfPublicAccountBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/unbind-public-account-of-user":{"post":{"operationId":"PublicAccountsManagementController_unbindUsersPublicAccount","summary":"公共账号解绑用户","description":"公共账号解绑用户","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UnbindPublicAccountBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-organization":{"get":{"operationId":"OrganizationsManagementController_getOrganization","summary":"获取组织机构详情","description":"获取组织机构详情","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 Code（organizationCode）","example":"steamory","schema":{"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withPost","required":false,"in":"query","description":"是否获取 部门信息","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationSingleRespDto"}}}}},"tags":["管理组织机构/API 列表","管理租户组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]},{"x-authing-app-tenant-id":[]}],"x-authing-code-samples":{"go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetOrganizationDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCode: \"steamory\",\n\t}\n\trespDto := client.GetOrganization(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetOrganizationDto;\nimport cn.authing.sdk.java.dto.OrganizationSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetOrganizationTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetOrganizationDto reqDto = new GetOrganizationDto();\n        reqDto.setOrganizationCode(\"steamory\");\n        OrganizationSingleRespDto response = client.getOrganization(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getOrganization({\n    // 替换组织 Code\n    organizationCode: 'steamory',\n    withCustomData: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getOrganization(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n));\nprint_r($data);"}}},"/api/v3/get-organization-batch":{"get":{"operationId":"OrganizationsManagementController_getOrganizationsBatch","summary":"批量获取组织机构详情","description":"批量获取组织机构详情","parameters":[{"name":"organizationCodeList","required":true,"in":"query","description":"组织 Code（organizationCode）列表","example":["code1","code2"],"schema":{"type":"array","items":{"type":"string"}}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withPost","required":false,"in":"query","description":"是否获取 部门信息","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationListRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetOrganizationBatchDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCodeList: \"code1,code2\",\n\t}\n\trespDto := client.GetOrganizationsBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetOrganizationBatchDto;\nimport cn.authing.sdk.java.dto.OrganizationListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetOrganizationsBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetOrganizationBatchDto reqDto = new GetOrganizationBatchDto();\n        reqDto.setOrganizationCodeList(\"code1,code2\");\n        OrganizationListRespDto response = client.getOrganizationsBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getOrganizationsBatch({\n    // 替换组织 Code 数组\n    organizationCodeList: ['code1', 'code2'],\n    withCustomData: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getOrganizationsBatch(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCodeList\" => \"code1,code2\",\n));\nprint_r($data);\n"}}},"/api/v3/list-organizations":{"get":{"operationId":"OrganizationsManagementController_listOrganizations","summary":"获取组织机构列表","description":"获取组织机构列表，支持分页。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"fetchAll","required":false,"in":"query","description":"拉取所有","example":false,"schema":{"default":false,"type":"boolean"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withPost","required":false,"in":"query","description":"是否获取 部门信息","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}},{"name":"status","required":false,"in":"query","description":"组织的状态","example":"fasle","schema":{"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationPaginatedRespDto"}}}}},"tags":["管理组织机构/API 列表","管理租户组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]},{"x-authing-app-tenant-id":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            OrganizationPaginatedRespDto dto = await managementClient.ListOrganizations(new ListOrganizationsDto\r\n            {\r\n                Limit = 50,\r\n                Page = 1,\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t    reqDto := &dto.ListOrganizationsDto{\n        Page:  1,\n        Limit: 10,\n    }\n    respDto := client.ListOrganizations(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListOrganizationsDto;\nimport cn.authing.sdk.java.dto.OrganizationPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListOrganizationsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        OrganizationPaginatedRespDto response = client.listOrganizations(new ListOrganizationsDto());\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listOrganizations({\n    page: 1,\n    limit: 10,\n    withCustomData: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listOrganizations(array(\n    \"page\" => 1,\n    \"limit\" => 10,\n));\nprint_r($data);\n"}}},"/api/v3/create-organization":{"post":{"operationId":"OrganizationsManagementController_createOrganization","summary":"创建组织机构","description":"创建组织机构，会创建一个只有一个节点的组织机构，可以选择组织描述信息、根节点自定义 ID、多语言等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateOrganizationReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationSingleRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateOrganizationReqDto reqDto = new CreateOrganizationReqDto()\r\n            {\r\n                OrganizationCode = \"AUTHING_ORG_CODE\",\r\n                OrganizationName = \"AUTHING_ORG_NAME\",\r\n                Description = \"AUTHING_ORG_DESCRIPTION\",\r\n                OpenDepartmentId = \"AUTHING_OPENDEPARTMENTID\"\r\n            };\r\n\r\n            OrganizationSingleRespDto dto = await managementClient.CreateOrganization(reqDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateOrganizationReqDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationName: \"蒸汽记忆\",\n\t\tOrganizationCode: \"steamory\",\n\t\tDescription:      \"组织描述信息\",\n\t}\n\trespDto := client.CreateOrganization(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateOrganizationReqDto;\nimport cn.authing.sdk.java.dto.OrganizationSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CreateOrganizationTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateOrganizationReqDto reqDto = new CreateOrganizationReqDto();\n        reqDto.setOrganizationName(\"蒸汽记忆\");\n        reqDto.setOrganizationCode(\"steamory\");\n        OrganizationSingleRespDto response = client.createOrganization(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createOrganization({\n    // 替换组织 Code\n    organizationCode: 'steamory',\n    organizationName: '蒸汽记忆',\n    description: '组织描述信息',\n    i18n: {\n      organizationName: {\n        'zh-CN': {\n          enabled: false,\n          value: '中文名称'\n        },\n        'en-US': {\n          enabled: false,\n          value: 'English'\n        },\n        'zh-TW': {\n          enabled: false,\n          value: 'zh-TW'\n        },\n        'ja-JP': {\n          enabled: false,\n          value: 'ja-JP'\n        }\n      }\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createOrganization(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"organizationName\" => \"蒸汽记忆\",\n    \"description\" => \"组织描述信息\",\n));\nprint_r($data);\n"}}},"/api/v3/update-organization":{"post":{"operationId":"OrganizationsManagementController_updateOrganization","summary":"修改组织机构","description":"通过组织 code，修改组织机构，可以选择部门描述、新组织 code、组织名称等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateOrganizationReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationSingleRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UpdateOrganizationReqDto reqDto = new UpdateOrganizationReqDto()\r\n            {\r\n                OrganizationCode = \"AUTHING_ORG_CODE\",\r\n                OrganizationName = \"AUTHING_ORG_NAME\",\r\n                OrganizationNewCode = \"AUTHING_ORG_NEWCODE\"\r\n            };\r\n\r\n            OrganizationSingleRespDto dto = await managementClient.UpdateOrganization(reqDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateOrganizationReqDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCode: \"steamory\",\n\t\tDescription:      \"新的描述信息\",\n\t}\n\trespDto := client.UpdateOrganization(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.OrganizationSingleRespDto;\nimport cn.authing.sdk.java.dto.UpdateOrganizationReqDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateOrganizationTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateOrganizationReqDto reqDto = new UpdateOrganizationReqDto();\n        reqDto.setOrganizationCode(\"steamory\");\n        OrganizationSingleRespDto response = client.updateOrganization(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateOrganization({\n    // 替换组织 Code\n    organizationCode: 'steamory',\n    organizationName: '蒸汽记忆',\n    description: '组织描述信息',\n    i18n: {\n      organizationName: {\n        'zh-CN': {\n          enabled: false,\n          value: '中文名称'\n        },\n        'en-US': {\n          enabled: false,\n          value: 'English'\n        },\n        'zh-TW': {\n          enabled: false,\n          value: 'zh-TW'\n        },\n        'ja-JP': {\n          enabled: false,\n          value: 'ja-JP'\n        }\n      }\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateOrganization(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"description\" => \"新的描述信息\",\n));\nprint_r($data);\n"}}},"/api/v3/delete-organization":{"post":{"operationId":"OrganizationsManagementController_deleteOrganization","summary":"删除组织机构","description":"通过组织 code，删除组织机构树。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteOrganizationReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DeleteOrganizationReqDto reqDto = new DeleteOrganizationReqDto()\r\n            {\r\n                OrganizationCode = \"AUTHING_ORG_CODE\r\n            };\r\n\r\n            IsSuccessRespDto result = managementClient.DeleteOrganization(reqDto).Result;\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteOrganizationReqDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCode: \"steamory\",\n\t}\n\trespDto := client.DeleteOrganization(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteOrganizationReqDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class DeleteOrganizationTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteOrganizationReqDto reqDto = new DeleteOrganizationReqDto();\n        reqDto.setOrganizationCode(\"steamory\");\n        IsSuccessRespDto response = client.deleteOrganization(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteOrganization({\n    // 替换组织 Code\n    organizationCode: 'steamory'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteOrganization(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n));\nprint_r($data);\n"}}},"/api/v3/search-organizations":{"get":{"operationId":"OrganizationsManagementController_searchOrganizations","summary":"搜索组织机构列表","description":"通过搜索关键词，搜索组织机构列表，支持分页。","parameters":[{"name":"keywords","required":true,"in":"query","description":"搜索关键词，如组织机构名称","example":"Authing","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OrganizationPaginatedRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            OrganizationPaginatedRespDto respDto = await managementClient.SearchOrganizations(new SearchOrganizationsDto\r\n            {\r\n                Keywords = \"AUTHING_KEYWORDS\" \r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.SearchOrganizationsDto{\n\t\tKeywords:       \"test\",\n\t\tPage:           1,\n\t\tLimit:          10,\n\t}\n\trespDto := client.SearchOrganizations(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.OrganizationPaginatedRespDto;\nimport cn.authing.sdk.java.dto.SearchOrganizationsDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class SearchOrganizationsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        SearchOrganizationsDto reqDto = new SearchOrganizationsDto();\n        reqDto.setKeywords(\"Authing\");\n        OrganizationPaginatedRespDto response = client.searchOrganizations(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.searchOrganizations({\n    keywords: 'Authing',\n    page: 1,\n    limit: 10,\n    withCustomData: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->searchOrganizations(array(\n    \"keywords\" => \"test\",\n    \"page\" => 1,\n    \"limit\" => 10,\n));\nprint_r($data);\n"}}},"/api/v3/update-organization-status":{"post":{"operationId":"OrganizationsManagementController_updateOrganizationStatus","summary":"更新组织机构状态","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateOrganizationStatusReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-department":{"get":{"operationId":"DepartmentsManagementController_getDepartment","summary":"获取部门信息","description":"通过组织 code 以及 部门 ID 或 部门 code，获取部门信息，可以获取自定义数据。","parameters":[{"name":"organizationCode","required":false,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":false,"in":"query","description":"部门 ID，根部门传 `root`。departmentId 和 departmentCode 必传其一。","example":"root","schema":{"type":"string"}},{"name":"departmentCode","required":false,"in":"query","description":"部门 code。departmentId 和 departmentCode 必传其一。","example":"example","schema":{"type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"flatCustomData","required":false,"in":"query","description":"是否拍平扩展字段","schema":{"default":false,"type":"boolean"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentSingleRespDto"}}}}},"tags":["管理组织机构/API 列表","管理租户组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n            \r\n            DepartmentSingleRespDto dto = await managementClient.GetDepartment(new GetDepartmentDto { DepartmentCode = \"AUTHING_DEP_CODE\", OrganizationCode = \"AUTHING_ORG_CODE\" });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetDepartmentDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCode: \"steamory\",\n\t\tDepartmentId:     \"root\",\n\t}\n\trespDto := client.GetDepartment(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DepartmentSingleRespDto;\nimport cn.authing.sdk.java.dto.GetDepartmentDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetDepartmentTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetDepartmentDto reqDto = new GetDepartmentDto();\n        reqDto.setOrganizationCode(\"steamory\");\n        reqDto.setDepartmentId(\"root\");\n        DepartmentSingleRespDto response = client.getDepartment(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getDepartment({\n    // 替换组织 Code\n    organizationCode: 'steamory',\n    // 替换部门 ID\n    departmentId: 'root',\n    departmentIdType: 'department_id',\n    withCustomData: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getDepartment(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n));\nprint_r($data);\n"}}},"/api/v3/create-department":{"post":{"operationId":"DepartmentsManagementController_createDepartment","summary":"创建部门","description":"通过组织 code、部门名称、父部门 ID，创建部门，可以设置多种参数。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateDepartmentReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentSingleRespDto"}}}}},"tags":["管理组织机构/API 列表","管理租户组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateDepartmentReqDto reqDto = new CreateDepartmentReqDto()\r\n            {\r\n                ParentDepartmentId = \"AUTHING_DEP_ID\",\r\n                OrganizationCode = \"AUTHING_ORG_CODE\",\r\n                Code = \"AUTHING_DEP_CPDE\",\r\n                Name = \"AUTHING_DEP_NAME\",\r\n                Description = \"AUTHING_DEP_DESCRIPTION\",\r\n                OpenDepartmentId = \"AUTHING_DEP_OPENDEPARTMENTID\",\r\n                DepartmentIdType = CreateDepartmentReqDto.departmentIdType.DEPARTMENT_ID\r\n\r\n            };\r\n\r\n            DepartmentSingleRespDto dto = await managementClient.CreateDepartment(reqDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateDepartmentReqDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCode:   \"steamory\",\n\t\tOpenDepartmentId:   \"ou_7dab8a3d3cdccxxxxxx777c7ad535d62\",\n\t\tName:               \"开发部\",\n\t\tDescription:        \"技术研发部门\",\n\t\tParentDepartmentId: \"root\",\n\t}\n\trespDto := client.CreateDepartment(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateDepartmentReqDto;\nimport cn.authing.sdk.java.dto.DepartmentSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CreateDepartmentTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateDepartmentReqDto reqDto = new CreateDepartmentReqDto();\n        reqDto.setParentDepartmentId(\"6229c4deb3e4d8a20b6021ff\");\n        reqDto.setName(\"开发部\");\n        reqDto.setOrganizationCode(\"steamory\");\n        DepartmentSingleRespDto response = client.createDepartment(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createDepartment({\n    organizationCode: 'steamory',\n    name: '开发部',\n    description: '技术研发部门',\n    parentDepartmentId: '6229c4dxxxx4d8a20b6021ff',\n    code: 'develop',\n    isVirtualNode: false,\n    i18n: {\n      name: {\n        'zh-CN': {\n          enabled: false,\n          value: '中文名称'\n        },\n        'en-US': {\n          enabled: false,\n          value: 'English'\n        },\n        'zh-TW': {\n          enabled: false,\n          value: 'zh-TW'\n        },\n        'ja-JP': {\n          enabled: false,\n          value: 'ja-JP'\n        }\n      }\n    },\n    customData: {\n      icon: 'https://example.com/logo'\n    },\n    departmentIdType:\n      Models.CreateDepartmentReqDto.departmentIdType.DEPARTMENT_ID\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createDepartment(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"openDepartmentId\" => \"ou_7dab8a3d3cdccxxxxxx777c7ad535d62\",\n    \"name\" => \"开发部\",\n    \"description\" => \"技术研发部门\",\n    \"parentDepartmentId\" => \"root\",\n));\nprint_r($data);\n"}}},"/api/v3/update-department":{"post":{"operationId":"DepartmentsManagementController_updateDepartment","summary":"修改部门","description":"通过组织 code、部门 ID，修改部门，可以设置多种参数。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateDepartmentReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentSingleRespDto"}}}}},"tags":["管理组织机构/API 列表","管理租户组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UpdateDepartmentReqDto reqDto = new UpdateDepartmentReqDto()\r\n            {\r\n                ParentDepartmentId = \"AUTHING_DEP_ID\",\r\n                OrganizationCode = \"AUTHING_ORG_CODE\",\r\n                Code = \"AUTHING_DEP_CPDE\",\r\n                Name = \"AUTHING_DEP_NAME\",\r\n                Description = \"AUTHING_DEP_DESCRIPTION\",\r\n                DepartmentIdType = UpdateDepartmentReqDto.departmentIdType.DEPARTMENT_ID\r\n\r\n            };\r\n\r\n            DepartmentSingleRespDto dto = await managementClient.UpdateDepartment(reqDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateDepartmentReqDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tDepartmentId:     \"root\",\n\t\tOrganizationCode: \"steamory\",\n\t\tDescription:      \"新的描述信息\",\n\t}\n\trespDto := client.UpdateDepartment(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DepartmentSingleRespDto;\nimport cn.authing.sdk.java.dto.UpdateDepartmentReqDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateDepartmentTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateDepartmentReqDto reqDto = new UpdateDepartmentReqDto();\n        reqDto.setDepartmentId(\"60b49exxxxb96f26e68\");\n        reqDto.setOrganizationCode(\"steamory\");\n        DepartmentSingleRespDto response = client.updateDepartment(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateDepartment({\n    // 替换部门 ID 和组织 Code\n    departmentId: '6229c4xxxx4d8a20b6021ff',\n    organizationCode: 'steamory',\n    name: '开发部222',\n    description: '技术研发部门',\n    code: 'develop',\n    i18n: {\n      name: {\n        'zh-CN': {\n          enabled: false,\n          value: 'zh-CN'\n        },\n        'en-US': {\n          enabled: false,\n          value: 'en-US'\n        },\n        'zh-TW': {\n          enabled: false,\n          value: 'zh-TW'\n        },\n        'ja-JP': {\n          enabled: false,\n          value: 'ja-JP'\n        }\n      }\n    },\n    customData: {\n      icon: 'https://example.com/logo'\n    },\n    departmentIdType:\n      Models.UpdateDepartmentReqDto.departmentIdType.DEPARTMENT_ID\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateDepartment(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n    \"description\" => \"新的描述信息\",\n));\nprint_r($data);\n"}}},"/api/v3/delete-department":{"post":{"operationId":"DepartmentsManagementController_deleteDepartment","summary":"删除部门","description":"通过组织 code、部门 ID，删除部门。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteDepartmentReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理组织机构/API 列表","管理租户组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DeleteDepartmentReqDto reqDto = new DeleteDepartmentReqDto()\r\n            {\r\n\r\n                OrganizationCode = \"AUTHING_ORG_CODE\",\r\n                DepartmentId = \"AUTHING_DEP_ID\",\r\n                DepartmentIdType = DeleteDepartmentReqDto.departmentIdType.DEPARTMENT_ID\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess = await managementClient.DeleteDepartment(reqDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteDepartmentReqDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\t// 需要替换成真实的部门 ID\n\t\tDepartmentId:     \"60b49eb83xxxxadb96f26e68\",\n\t\tOrganizationCode: \"steamory\",\n\t}\n\trespDto := client.DeleteDepartment(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteDepartmentReqDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class DeleteDepartmentTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteDepartmentReqDto reqDto = new DeleteDepartmentReqDto();\n        reqDto.setDepartmentId(\"60b49eb83fdxxxdb96f26e68\");\n        reqDto.setOrganizationCode(\"steamory\");\n        IsSuccessRespDto response = client.deleteDepartment(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteDepartment({\n    // 替换组织 Code 和部门 ID\n    organizationCode: 'steamory',\n    departmentId: '60b49ebxxxxxxadb96f26e68',\n    departmentIdType:\n      Models.DeleteDepartmentReqDto.departmentIdType.DEPARTMENT_ID\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteDepartment(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    // 需要替换成真实的部门 ID\n    \"departmentId\" => \"60b49eb83xxxxadb96f26e68\",\n));\nprint_r($data);\n"}}},"/api/v3/search-departments":{"post":{"operationId":"DepartmentsManagementController_searchDepartments","summary":"搜索部门","description":"通过组织 code、搜索关键词，搜索部门，可以搜索组织名称等。","deprecated":true,"parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SearchDepartmentsReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentListRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            SearchDepartmentsReqDto reqDto = new SearchDepartmentsReqDto()\r\n            {\r\n\r\n                Keywords = \"AUTHING_KEY_WORDS\",\r\n                OrganizationCode = \"AUTHING_ORG_CODE\"\r\n            };\r\n\r\n            DepartmentListRespDto respDto = await managementClient.SearchDepartments(reqDto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.SearchDepartmentsReqDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tKeywords:         \"test\",\n\t\tOrganizationCode: \"steamory\",\n\t}\n\trespDto := client.SearchDepartments(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DepartmentListRespDto;\nimport cn.authing.sdk.java.dto.SearchDepartmentsReqDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class SearchDepartmentsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        SearchDepartmentsReqDto reqDto = new SearchDepartmentsReqDto();\n        reqDto.setKeywords(\"Authing\");\n        reqDto.setOrganizationCode(\"steamory\");\n        DepartmentListRespDto response = client.searchDepartments(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.searchDepartments({\n    organizationCode: 'steamory',\n    keywords: 'Authing',\n    withCustomData: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->searchDepartments(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"keywords\" => \"test\",\n));\nprint_r($data);\n"}}},"/api/v3/search-departments-list":{"post":{"operationId":"DepartmentsManagementController_searchDepartmentsList","summary":"搜索部门","description":"通过组织 code、搜索关键词，搜索部门，可以搜索组织名称等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SearchDepartmentsListReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentListRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-children-departments":{"get":{"operationId":"DepartmentsManagementController_listChildrenDepartments","summary":"获取子部门列表","description":"通过组织 code、部门 ID，获取子部门列表，可以选择获取自定义数据、虚拟组织等。","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":true,"in":"query","description":"需要获取的部门 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"status","required":false,"in":"query","description":"部门的状态","example":"false","schema":{"type":"boolean"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"type":"string"}},{"name":"excludeVirtualNode","required":false,"in":"query","description":"是否要排除虚拟组织","example":false,"schema":{"default":false,"type":"boolean"}},{"name":"onlyVirtualNode","required":false,"in":"query","description":"是否只包含虚拟组织","example":false,"schema":{"default":false,"type":"boolean"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentPaginatedRespDto"}}}}},"tags":["管理组织机构/API 列表","管理租户组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DepartmentPaginatedRespDto respDto = await managementClient.ListChildrenDepartments(new ListChildrenDepartmentsDto { OrganizationCode = \"AUTHING_ORG_CODE\", DepartmentId = \"AUTHING_DEP_ID\" });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListChildrenDepartmentsDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCode: \"steamory\",\n\t\tDepartmentId:     \"root\",\n\t}\n\trespDto := client.ListChildrenDepartments(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DepartmentPaginatedRespDto;\nimport cn.authing.sdk.java.dto.ListChildrenDepartmentsDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListChildrenDepartmentsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListChildrenDepartmentsDto reqDto = new ListChildrenDepartmentsDto();\n        reqDto.setDepartmentId(\"60b49eb8xxx80adb96f26e68\");\n        reqDto.setOrganizationCode(\"steamory\");\n        DepartmentPaginatedRespDto response = client.listChildrenDepartments(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listChildrenDepartments({\n    // 替换组织 Code 和部门 ID\n    organizationCode: 'steamory',\n    departmentId: '60b49eb83fd80adb96f26e68',\n    departmentIdType: 'department_id',\n    withCustomData: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listChildrenDepartments(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n));\nprint_r($data);\n"}}},"/api/v3/get-all-departments":{"get":{"operationId":"DepartmentsManagementController_getAllDepartments","summary":"获取所有部门列表","description":"获取所有部门列表，可以用于获取某个组织下的所有部门列表。","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":false,"in":"query","description":"部门 ID，不填写默认为 `root` 根部门 ID","example":"root","schema":{"default":"root","type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id"],"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentPaginatedRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-department-members":{"get":{"operationId":"DepartmentsManagementController_listDepartmentMembers","summary":"获取部门成员列表","description":"通过组织 code、部门 ID、排序，获取部门成员列表，支持分页，可以选择获取自定义数据、identities 等。","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":true,"in":"query","description":"部门 ID，根部门传 `root`","example":"root","schema":{"type":"string"}},{"name":"sortBy","required":false,"in":"query","description":"排序依据","example":"JoinDepartmentAt","schema":{"default":"JoinDepartmentAt","enum":["Default","JoinDepartmentAt"],"type":"string"}},{"name":"orderBy","required":false,"in":"query","description":"增序还是倒序","example":"Desc","schema":{"default":"Desc","enum":["Asc","Desc"],"type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"type":"string"}},{"name":"includeChildrenDepartments","required":false,"in":"query","description":"是否包含子部门的成员","example":false,"schema":{"default":false,"type":"boolean"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"minimum":1,"maximum":50,"default":10,"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理组织机构/API 列表","管理租户组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserPaginatedRespDto respDto = await managementClient.ListDepartmentMembers(new ListDepartmentMembersDto { DepartmentId = \"AUTHING_DEP_ID\", DepartmentIdType = \"department_id\", OrganizationCode = \"AUTHING_ORG_CODE\" });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListDepartmentMembersDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCode: \"steamory\",\n\t\tDepartmentId:     \"root\",\n\t}\n\trespDto := client.ListDepartmentMembers(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListDepartmentMembersDto;\nimport cn.authing.sdk.java.dto.UserPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListDepartmentMembersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListDepartmentMembersDto reqDto = new ListDepartmentMembersDto();\n        reqDto.setOrderBy(\"Desc\");\n        reqDto.setSortBy(\"JoinDepartmentAt\");\n        reqDto.setDepartmentId(\"root\");\n        reqDto.setOrganizationCode(\"steamory\");\n        UserPaginatedRespDto response = client.listDepartmentMembers(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listDepartmentMembers(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n));\nprint_r($data);\n"}}},"/api/v3/list-department-member-ids":{"get":{"operationId":"DepartmentsManagementController_listDepartmentMemberIds","summary":"获取部门直属成员 ID 列表","description":"通过组织 code、部门 ID，获取部门直属成员 ID 列表。","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":true,"in":"query","description":"部门 ID，根部门传 `root`","example":"root","schema":{"type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"type":"string"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserIdListRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var respDto = await managementClient.ListDepartmentMemberIds(new ListDepartmentMemberIdsDto { DepartmentId = \"634e6a074033a8c4fe39f873\", OrganizationCode = \"AUTHING_ORG_CODE\" });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListDepartmentMemberIdsDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCode: \"steamory\",\n\t\tDepartmentId:     \"root\",\n\t}\n\trespDto := client.ListDepartmentMemberIds(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListDepartmentMemberIdsDto;\nimport cn.authing.sdk.java.dto.UserIdListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListDepartmentMemberIdsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListDepartmentMemberIdsDto reqDto = new ListDepartmentMemberIdsDto();\n        reqDto.setDepartmentId(\"root\");\n        reqDto.setOrganizationCode(\"steamory\");\n        UserIdListRespDto response = client.listDepartmentMemberIds(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listDepartmentMembers({\n    // 替换组织 Code 和部门 ID\n    organizationCode: 'steamory',\n    departmentId: 'root',\n    departmentIdType: 'department_id'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listDepartmentMemberIds(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n));\nprint_r($data);\n"}}},"/api/v3/search-department-members":{"get":{"operationId":"DepartmentsManagementController_searchDepartmentMembers","summary":"搜索部门下的成员","description":"通过组织 code、部门 ID、搜索关键词，搜索部门下的成员，支持分页，可以选择获取自定义数据、identities 等。","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":true,"in":"query","description":"部门 ID，根部门传 `root`","example":"root","schema":{"type":"string"}},{"name":"keywords","required":true,"in":"query","description":"搜索关键词，如成员名称","example":"张三","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"type":"string"}},{"name":"includeChildrenDepartments","required":false,"in":"query","description":"是否包含子部门的成员","example":false,"schema":{"default":false,"type":"boolean"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserPaginatedRespDto respDto = await managementClient.SearchDepartmentMembers(new SearchDepartmentMembersDto \r\n            { \r\n                DepartmentId = \"AUTHING_DEP_ID\", \r\n                DepartmentIdType = \"department_id\", \r\n                Keywords = \"AUTHING_KEYWORDS\", \r\n                OrganizationCode = \"AUTHING_ORG_CODE\" \r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.SearchDepartmentMembersDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCode: \"steamory\",\n\t\tDepartmentId:     \"root\",\n\t\tKeywords:         \"张三\",\n\t}\n\trespDto := client.SearchDepartmentMembers(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.SearchDepartmentMembersDto;\nimport cn.authing.sdk.java.dto.UserPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class SearchDepartmentMembersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        SearchDepartmentMembersDto reqDto = new SearchDepartmentMembersDto();\n        reqDto.setKeywords(\"张三\");\n        reqDto.setDepartmentId(\"root\");\n        reqDto.setOrganizationCode(\"steamory\");\n        UserPaginatedRespDto response = client.searchDepartmentMembers(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listDepartmentMembers({\n    // 替换组织 Code 和部门 ID\n    organizationCode: 'steamory',\n    departmentId: 'root',\n    sortBy: 'JoinDepartmentAt',\n    orderBy: 'Desc',\n    departmentIdType: 'department_id',\n    includeChildrenDepartments: false,\n    page: 1,\n    limit: 10,\n    withCustomData: true,\n    withIdentities: true,\n    withDepartmentIds: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->searchDepartmentMembers(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n    \"keywords\" => \"张三\",\n));\nprint_r($data);\n"}}},"/api/v3/add-department-members":{"post":{"operationId":"DepartmentsManagementController_addDepartmentMembers","summary":"部门下添加成员","description":"通过部门 ID、组织 code，添加部门下成员。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AddDepartmentMembersReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AddDepartmentMembersReqDto addDepartmentMembersReqDto = new AddDepartmentMembersReqDto()\r\n            {\r\n                DepartmentId = \"AUTHING_DEP_ID\",\r\n                OrganizationCode = \"AUTHING_ORG_CODE\",\r\n                UserIds = new List<string> { \"AUTHING_USERID\", \"AUTHNG_USERID2\" }\r\n            };\r\n\r\n            IsSuccessRespDto respDto = await managementClient.AddDepartmentMembers(addDepartmentMembersReqDto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t    reqDto := &dto.AddDepartmentMembersReqDto{\n        // 需要替换成真实的 organizationCode\n        UserIds:          []string{\"623c20b2a0xxxxaaf41b17da\"},\n        OrganizationCode: \"steamory\",\n        DepartmentId:     \"root\",\n    }\n    respDto := client.AddDepartmentMembers(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.AddDepartmentMembersReqDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class AddDepartmentMembersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        AddDepartmentMembersReqDto reqDto = new AddDepartmentMembersReqDto();\n        reqDto.setUserIds(Collections.singletonList(\"623c20b2axxxaaaaf41b17da\"));\n        reqDto.setDepartmentId(\"60b49eb83fdxxxdb96f26e68\");\n        reqDto.setOrganizationCode(\"steamory\");\n        IsSuccessRespDto response = client.addDepartmentMembers(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.addDepartmentMembers({\n    // 替换组织 Code 和部门 ID\n    departmentId: '60b49eb8xxxxxxdb96f26e68',\n    organizationCode: 'steamory',\n    departmentIdType:\n      Models.AddDepartmentMembersReqDto.departmentIdType.DEPARTMENT_ID,\n    // 替换用户 ID 数组\n    userIds: ['623c20b2xxxxxxaaf41b17da']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->addDepartmentMembers(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n    \"userIds\" => array(\"623c20b2a0xxxxaaf41b17da\"),\n));\nprint_r($data);\n"}}},"/api/v3/remove-department-members":{"post":{"operationId":"DepartmentsManagementController_removeDepartmentMembers","summary":"部门下删除成员","description":"通过部门 ID、组织 code，删除部门下成员。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveDepartmentMembersReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RemoveDepartmentMembersReqDto remove = new RemoveDepartmentMembersReqDto()\r\n            {\r\n                DepartmentId = \"AUTHING_DEP_ID\",\r\n                OrganizationCode = \"AUTHING_ORG_ID\",\r\n                UserIds = new List<string> { \"AUTHING_USERID\", \"AUTHING_USERID2\" }\r\n            };\r\n\r\n            IsSuccessRespDto respDto = await managementClient.RemoveDepartmentMembers(remove);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.RemoveDepartmentMembersReqDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCode: \"steamory\",\n\t\tDepartmentId:     \"root\",\n\t\tUserIds:          []string{\"623c20b2a0xxxxaaf41b17da\"},\n\t}\n\trespDto := client.RemoveDepartmentMembers(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.RemoveDepartmentMembersReqDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class RemoveDepartmentMembersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        RemoveDepartmentMembersReqDto reqDto = new RemoveDepartmentMembersReqDto();\n        reqDto.setUserIds(Collections.singletonList(\"623c20b2a0xxxaf41b17da\"));\n        reqDto.setDepartmentId(\"60b49eb83fd8xxxb96f26e68\");\n        reqDto.setOrganizationCode(\"steamory\");\n        IsSuccessRespDto response = client.removeDepartmentMembers(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.removeDepartmentMembers({\n    // 替换组织 Code 和部门 ID\n    departmentId: '60b49eb8xxxxxxdb96f26e68',\n    organizationCode: 'steamory',\n    departmentIdType:\n      Models.AddDepartmentMembersReqDto.departmentIdType.DEPARTMENT_ID,\n    // 替换用户 ID 数组\n    userIds: ['623c20b2xxxxxxaaf41b17da']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->removeDepartmentMembers(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    \"departmentId\" => \"root\",\n    \"userIds\" => array(\"623c20b2a0xxxxaaf41b17da\"),\n));\nprint_r($data);\n"}}},"/api/v3/get-parent-department":{"get":{"operationId":"DepartmentsManagementController_getParentDepartment","summary":"获取父部门信息","description":"通过组织 code、部门 ID，获取父部门信息，可以选择获取自定义数据等。","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":true,"in":"query","description":"部门 ID","example":"root","schema":{"type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentSingleRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DepartmentSingleRespDto respDto = await managementClient.GetParentDepartment(new GetParentDepartmentDto \r\n            {\r\n                DepartmentId = \"AUTHING_DEP_ID\",\r\n                OrganizationCode = \"AUTHING_ORG_CODE\" \r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetParentDepartmentDto{\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCode: \"steamory\",\n\t\t// 需要替换成真实的部门 ID\n\t\tDepartmentId: \"623c20b2a0xxxxaaf41b17da\",\n\t}\n\trespDto := client.GetParentDepartment(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DepartmentSingleRespDto;\nimport cn.authing.sdk.java.dto.GetParentDepartmentDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetParentDepartmentTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetParentDepartmentDto reqDto = new GetParentDepartmentDto();\n        reqDto.setDepartmentId(\"root\");\n        reqDto.setOrganizationCode(\"steamory\");\n        DepartmentSingleRespDto response = client.getParentDepartment(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getParentDepartment({\n    // 替换组织 Code 和部门 ID\n    organizationCode: 'steamory',\n    departmentId: 'root',\n    departmentIdType: 'department_id',\n    withCustomData: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getParentDepartment(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    // 需要替换成真实的部门 ID\n    \"departmentId\" => \"623c20b2a0xxxxaaf41b17da\",\n));\nprint_r($data);\n"}}},"/api/v3/is-user-in-department":{"get":{"operationId":"DepartmentsManagementController_isUserInDepartment","summary":"判断用户是否在某个部门下","description":"通过组织 code、部门 ID，判断用户是否在某个部门下，可以选择包含子部门。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":true,"in":"query","description":"部门 ID，根部门传 `root`。departmentId 和 departmentCode 必传其一。","example":"root","schema":{"type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"type":"string"}},{"name":"includeChildrenDepartments","required":false,"in":"query","description":"是否包含子部门","example":false,"schema":{"default":false,"type":"boolean"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsUserInDepartmentRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            IsUserInDepartmentRespDto respDto = await managementClient.IsUserInDepartment(new IsUserInDepartmentDto\r\n            {\r\n                UserId = \"AUTHING_USERID\",\r\n                DepartmentId = \"AUTHING_DEP_ID\",\r\n                OrganizationCode = \"AUTHING_ORG_CODE\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.IsUserInDepartmentDto{\n\t\t// 需要替换成真实的用户 ID\n\t\tUserId: \"6229ffaxxxxxxxxcade3e3d9\",\n\t\t// 需要替换成真实的 organizationCode\n\t\tOrganizationCode: \"steamory\",\n\t\t// 需要替换成真实的部门 ID\n\t\tDepartmentId: \"623c20b2a0xxxxaaf41b17da\",\n\t}\n\trespDto := client.IsUserInDepartment(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.IsUserInDepartmentDto;\nimport cn.authing.sdk.java.dto.IsUserInDepartmentRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class IsUserInDepartmentTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        IsUserInDepartmentDto reqDto = new IsUserInDepartmentDto();\n        reqDto.setDepartmentId(\"root\");\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        reqDto.setOrganizationCode(\"steamory\");\n        IsUserInDepartmentRespDto response = client.isUserInDepartment(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.isUserInDepartment({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    // 替换组织 Code 和部门 ID\n    organizationCode: 'steamory',\n    departmentId: 'root',\n    departmentIdType: 'department_id',\n    includeChildrenDepartments: false\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->isUserInDepartment(array(\n    // 需要替换成真实的 organizationCode\n    \"organizationCode\" => \"steamory\",\n    // 需要替换成真实的部门 ID\n    \"departmentId\" => \"623c20b2a0xxxxaaf41b17da\",\n    // 需要替换成真实的用户 ID\n    \"userId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n));\nprint_r($data);\n"}}},"/api/v3/get-department-by-id":{"get":{"operationId":"DepartmentsManagementController_getDepartmentById","summary":"根据部门id查询部门","description":"根据部门id查询部门","parameters":[{"name":"departmentId","required":true,"in":"query","description":"部门 ID","example":"root","schema":{"type":"string"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DepartmentSingleRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-department-tree":{"post":{"operationId":"DepartmentsManagementController_createDepartmentTree","summary":"根据组织树批量创建部门","description":"根据组织树批量创建部门，部门名称不存在时会自动创建","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateDepartmentTreeReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateDepartmentTreeRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-department-sync-relations":{"get":{"operationId":"DepartmentsManagementController_getDepartmentSyncRelations","summary":"获取部门绑定的第三方同步关系","description":"如果在 Authing 中的部门进行了上下游同步，此接口可以用于查询出在第三方的关联用户信息","parameters":[{"name":"organizationCode","required":true,"in":"query","description":"组织 code","example":"steamory","schema":{"type":"string"}},{"name":"departmentId","required":false,"in":"query","description":"部门 ID，根部门传 `root`。departmentId 和 departmentCode 必传其一。","example":"root","schema":{"type":"string"}},{"name":"departmentIdType","required":false,"in":"query","description":"此次调用中使用的部门 ID 的类型","example":"department_id","schema":{"default":"department_id","enum":["department_id","open_department_id","sync_relation","custom_field","code"],"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"623c20b2a062aaaaf41b17da","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncRelationListRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-department-sync-relations":{"post":{"operationId":"DepartmentsManagementController_deleteDepartmentSyncRelations","summary":"删除部门同步关联关系","description":"如果在 Authing 中的部门进行了上下游同步，此接口可以用于删除某个部门在指定身份源下的关联关系。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteDepartmentSyncRelationReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-department-status":{"post":{"operationId":"DepartmentsManagementController_updateNodeStatus","summary":"更新部门状态","description":"启用和禁用部门","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateDepartmentStatusReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Node"}}}}},"tags":["管理组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-users":{"post":{"operationId":"UsersManagementController_listUsers","summary":"获取/搜索用户列表","description":"\n此接口用于获取用户列表，支持模糊搜索，以及通过用户基础字段、用户自定义字段、用户所在部门、用户历史登录应用等维度筛选用户。\n\n### 模糊搜素示例\n\n模糊搜索默认会从 `phone`, `email`, `name`, `username`, `nickname` 五个字段对用户进行模糊搜索，你也可以通过设置 `options.fuzzySearchOn`\n决定模糊匹配的字段范围：\n\n```json\n{\n  \"keywords\": \"北京\",\n  \"options\": {\n    \"fuzzySearchOn\": [\n      \"address\"\n    ]\n  }\n}\n```\n\n### 高级搜索示例\n\n你可以通过 `advancedFilter` 进行高级搜索，高级搜索支持通过用户的基础信息、自定义数据、所在部门、用户来源、登录应用、外部身份源信息等维度对用户进行筛选。\n**且这些筛选条件可以任意组合。**\n\n#### 筛选状态为禁用的用户\n\n用户状态（`status`）为字符串类型，可选值为 `Activated` 和 `Suspended`： \n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"status\",\n      \"operator\": \"EQUAL\",\n      \"value\": \"Suspended\"\n    }\n  ]\n}\n```\n\n#### 筛选邮箱中包含 `@example.com` 的用户\n\n用户邮箱（`email`）为字符串类型，可以进行模糊搜索：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"email\",\n      \"operator\": \"CONTAINS\",\n      \"value\": \"@example.com\"\n    }\n  ]\n}\n```\n\n#### 根据用户的任意扩展字段进行搜索\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"some-custom-key\",\n      \"operator\": \"EQUAL\",\n      \"value\": \"some-value\"\n    }\n  ]\n}\n```\n\n#### 根据用户登录次数筛选\n\n筛选登录次数大于 10 的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"loginsCount\",\n      \"operator\": \"GREATER\",\n      \"value\": 10\n    }\n  ]\n}\n```\n\n筛选登录次数在 10 - 100 次的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"loginsCount\",\n      \"operator\": \"BETWEEN\",\n      \"value\": [10, 100]\n    }\n  ]\n}\n```\n\n#### 根据用户上次登录时间进行筛选\n\n筛选最近 7 天内登录过的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"lastLoginTime\",\n      \"operator\": \"GREATER\",\n      \"value\": new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n    }\n  ]\n}\n```\n\n筛选在某一段时间内登录过的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"lastLogin\",\n      \"operator\": \"BETWEEN\",\n      \"value\": [\n        Date.now() - 14 * 24 * 60 * 60 * 1000,\n        Date.now() - 7 * 24 * 60 * 60 * 1000\n      ]\n    }\n  ]\n}\n```\n\n#### 根据用户曾经登录过的应用筛选\n\n筛选出曾经登录过应用 `appId1` 或者 `appId2` 的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"loggedInApps\",\n      \"operator\": \"IN\",\n      \"value\": [\n        \"appId1\",\n        \"appId2\"\n      ]\n    }\n  ]\n}\n```\n\n#### 根据用户所在部门进行筛选\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"department\",\n      \"operator\": \"IN\",\n      \"value\": [\n        {\n          \"organizationCode\": \"steamory\",\n          \"departmentId\": \"root\",\n          \"departmentIdType\": \"department_id\",\n          \"includeChildrenDepartments\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListUsersRequestDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserPaginatedRespDto userPaginatedRespDto = await managementClient.ListUsers(new ListUsersRequestDto\r\n            {\r\n                Options = new ListUsersOptionsDto\r\n                {\r\n                    Pagination = new PaginationDto\r\n                    {\r\n                        Limit = 50,\r\n                        Page = 1\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\treqDto := &dto.ListUsersRequestDto{\n    Options: dto.ListUsersOptionsDto{Pagination: dto.PaginationDto{\n        Page:  1,\n        Limit: 20,\n    }},\n}\nrespDto := client.ListUsers(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListUsersRequestDto;\nimport cn.authing.sdk.java.dto.UserPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListUsersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UserPaginatedRespDto response = client.listUsers(new ListUsersRequestDto());\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listUsers({\n    page: 1,\n    limit: 10,\n    withCustomData: true,\n    withIdentities: true,\n    withDepartmentIds: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listUsers(array(\n    \"options\" => array(\n        \"pagination\" => array(\n            \"page\" => 1,\n            \"limit\" => 10,\n        ),\n    ),\n));\nprint_r($data);"}},"get":{"operationId":"UsersManagementController_listUsersLegacy","summary":"获取用户列表","description":"获取用户列表接口，支持分页，可以选择获取自定义数据、identities 等。","deprecated":true,"parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"minimum":1,"maximum":50,"default":10,"type":"number"}},{"name":"status","required":false,"in":"query","description":"账户当前状态，如 已停用、已离职、正常状态、已归档","example":"Activated","schema":{"enum":["Suspended","Resigned","Activated","Archived","Deactivated"],"type":"string"}},{"name":"updatedAtStart","required":false,"in":"query","description":"用户创建、修改开始时间，为精确到秒的 UNIX 时间戳；支持获取从某一段时间之后的增量数据","example":1655714763890,"schema":{"type":"number"}},{"name":"updatedAtEnd","required":false,"in":"query","description":"用户创建、修改终止时间，为精确到秒的 UNIX 时间戳；支持获取某一段时间内的增量数据。默认为当前时间","example":1655714763890,"schema":{"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withPost","required":false,"in":"query","description":"是否获取 部门信息","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-user":{"get":{"operationId":"UsersManagementController_getUser","summary":"获取用户信息","description":"通过用户 ID，获取用户详情，可以选择获取自定义数据、identities、选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}},{"name":"flatCustomData","required":false,"in":"query","description":"是否拍平扩展字段","schema":{"default":false,"type":"boolean"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withPost","required":false,"in":"query","description":"是否获取 部门信息","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserSingleRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserDto{\n\t    // 通过用户 ID 获取用户信息\n\t\t// 替换成真实的用户 ID\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUser(reqDto)\n\n\treqDto := &dto.GetUserDto{\n\t\t// 通过邮箱获取用户信息\n\t\t// 替换成真实的邮箱\n\t\tUserId:     \"test@example.com\",\n\t\tUserIdType: \"email\",\n\t}\n\trespDto := client.GetUser(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserDto;\nimport cn.authing.sdk.java.dto.UserSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserDto reqDto = new GetUserDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        UserSingleRespDto response = client.getUser(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUser({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: 'user_id',\n    withCustomData: true,\n    withIdentities: true,\n    withDepartmentIds: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n// 通过用户 ID 获取用户信息\n$data = $managementClient->getUser(array(\n    // 替换成真实的用户 ID\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n\n// 通过邮箱获取用户信息\n$data = $managementClient->getUser(array(\n    // 替换成真实的邮箱\n    \"userId\" => \"test@example.com\",\n    \"userIdType\" => \"email\",\n));\nprint_r($data);"}}},"/api/v3/get-user-batch":{"get":{"operationId":"UsersManagementController_getUserBatch","summary":"批量获取用户信息","description":"通过用户 ID 列表，批量获取用户信息，可以选择获取自定义数据、identities、选择指定用户 ID 类型等。","parameters":[{"name":"userIds","required":true,"in":"query","description":"用户 ID 数组","example":["6229ffaxxxxxxxxcade3e3d9","6229ffaxxxxxxxxcade3e3d0"],"schema":{"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"flatCustomData","required":false,"in":"query","description":"是否拍平扩展字段","schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            string userIds = \"AUTHING_USERID,AUTHING_USERID1\";\r\n\r\n            UserListRespDto userListRespDto = await managementClient.GetUserBatch(new GetUserBatchDto { UserIds = userIds });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserBatchDto{\n\t\t// 通过用户 ID 批量获取用户信息\n\t\t// 替换成真实的用户 ID\n\t\tUserIds:           \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUserBatch(reqDto)\n\n\treqDto := &dto.GetUserBatchDto{\n\t\t// 通过邮箱批量获取用户信息\n\t\t// 替换成真实的邮箱\n\t\tUserIds:    \"test@example.com\",\n\t\tUserIdType: \"email\",\n\t}\n\trespDto := client.GetUserBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserBatchDto;\nimport cn.authing.sdk.java.dto.UserListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserBatchDto batchDto = new GetUserBatchDto();\n        batchDto.setUserIds(\"6229ffaxxxxxxxxcade3e3d9,6229ffaxxxxxxxxcade3e3d0\");\n        UserListRespDto response = client.getUserBatch(batchDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserBatch({\n    // 替换用户 ID 数组\n    userIds: ['6229ffaxxxxxxxxcade3e3d9'],\n    userIdType: 'user_id',\n    withCustomData: true,\n    withIdentities: true,\n    withDepartmentIds: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n// 通过用户 ID 批量获取用户信息\n$data = $managementClient->getUserBatch(array(\n    // 替换成真实的用户 ID\n    \"userIds\" => [\n        \"635215b413xxxxf5f63c511a\"\n    ],\n));\nprint_r($data);\n\n// 通过邮箱批量获取用户信息\n$data = $managementClient->getUserBatch(array(\n    // 替换成真实的邮箱\n    \"userIds\" => [\n        \"test@example.com\"\n    ],\n    \"userIdType\" => \"email\",\n));\nprint_r($data);"}}},"/api/v3/users/field/decrypt":{"post":{"operationId":"UsersManagementController_userFieldDecrypt","summary":"用户属性解密","description":"接口接收加密信息，返回解密信息","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserFieldDecryptReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserFieldDecryptRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-user":{"post":{"operationId":"UsersManagementController_createUser","summary":"创建用户","description":"创建用户，邮箱、手机号、用户名必须包含其中一个，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份创建用户因此不需要进行手机号验证码检验等安全检测。  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUserReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserSingleRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateUserReqDto dto = new CreateUserReqDto()\r\n            {\r\n                Username = \"AUTHING_USERNAME\",\r\n                Status = CreateUserReqDto.status.ACTIVATED,\r\n                Password = \"AUTHING_PASSWORD\",\r\n                Options = new CreateUserOptionsDto { DepartmentIdType = CreateUserOptionsDto.departmentIdType.DEPARTMENT_ID }\r\n            };\r\n\r\n            UserSingleRespDto userSingleRespDto = await managementClient.CreateUser(dto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateUserReqDto{\n\t\tUsername: \"test\",\n\t\tPassword: \"passw0rd\",\n\t}\n\trespDto := client.CreateUser(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateUserReqDto;\nimport cn.authing.sdk.java.dto.UserSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CreateUserTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateUserReqDto reqDto = new CreateUserReqDto();\n        reqDto.setUsername(\"test\");\n        UserSingleRespDto response = client.createUser(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createUser({\n    status: Models.CreateUserInfoDto.status.ACTIVATED,\n    // 替换手机号邮箱等信息\n    email: 'test@example.com',\n    phone: '18812348888',\n    phoneCountryCode: '+86',\n    username: 'bob',\n    externalId: '10010',\n    name: '张三',\n    nickname: '张三',\n    photo: 'https://files.authing.co/authing-console/default-user-avatar.png',\n    gender: Models.CreateUserInfoDto.gender.M,\n    birthdate: '2022-06-03',\n    country: 'CN',\n    province: 'BJ',\n    city: 'BJ',\n    address: '北京朝阳',\n    streetAddress: '北京朝阳区 xxx 街道',\n    postalCode: '438100',\n    company: 'steamory',\n    browser:\n      'Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0',\n    device: 'iOS',\n    givenName: '三',\n    familyName: '张',\n    otp: {\n      secret: 'HZ2F6J3AGNAVSOTV',\n      recoveryCode: 'b471-8ec0-874a-087f-bccb-cd54'\n    },\n    customData: {\n      school: '北京大学',\n      age: 22\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createUser(array(\n    \"username\" => \"test\",\n    \"password\" => \"passw0rd\"\n));\nprint_r($data);\n"}}},"/api/v3/create-users-batch":{"post":{"operationId":"UsersManagementController_createUsersBatch","summary":"批量创建用户","description":"批量创建用户，邮箱、手机号、用户名必须包含其中一个，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份创建用户因此不需要进行手机号验证码检验等安全检测。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUserBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateUserBatchReqDto reqDto = new CreateUserBatchReqDto()\r\n            {\r\n                List = new List<CreateUserInfoDto> { new CreateUserInfoDto()\r\n                    {\r\n                        Username = \"AUTHING_USERNAME\",\r\n                        Status = CreateUserInfoDto.status.ACTIVATED,\r\n                        Password = \"AUTHING_PASSWORD\"\r\n                    },\r\n                    new CreateUserInfoDto()\r\n                    {\r\n                        Username = \"AUTHING_USERNAME\" ,\r\n                        Status = CreateUserInfoDto.status.ACTIVATED,\r\n                        Password = \"AUTHINGPASSWORD\"\r\n                    }},\r\n                Options = new CreateUserOptionsDto { KeepPassword = true, ResetPasswordOnFirstLogin = false }\r\n            };\r\n\r\n\r\n\r\n            UserListRespDto userListRespDto = await managementClient.CreateUsersBatch(reqDto);\r\n        }\r\n    }\r\n}using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateUserBatchReqDto reqDto = new CreateUserBatchReqDto()\r\n            {\r\n                List = new List<CreateUserInfoDto> { new CreateUserInfoDto()\r\n                    {\r\n                        Username = \"AUTHING_USERNAME\",\r\n                        Status = CreateUserInfoDto.status.ACTIVATED,\r\n                        Password = \"AUTHING_PASSWORD\"\r\n                    },\r\n                    new CreateUserInfoDto()\r\n                    {\r\n                        Username = \"AUTHING_USERNAME\" ,\r\n                        Status = CreateUserInfoDto.status.ACTIVATED,\r\n                        Password = \"AUTHINGPASSWORD\"\r\n                    }},\r\n                Options = new CreateUserOptionsDto { KeepPassword = true, ResetPasswordOnFirstLogin = false }\r\n            };\r\n\r\n\r\n\r\n            UserListRespDto userListRespDto = await managementClient.CreateUsersBatch(reqDto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateUserBatchReqDto{\n\t\tList:    []dto.CreateUserInfoDto{\n\t\t\t{\n\t\t\t\tUsername: \"test\",\n\t\t\t\tPassword: \"passw0rd\"\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.CreateUsersBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateUserBatchReqDto;\nimport cn.authing.sdk.java.dto.CreateUserInfoDto;\nimport cn.authing.sdk.java.dto.UserListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class CreateUsersBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateUserBatchReqDto reqDto = new CreateUserBatchReqDto();\n        CreateUserInfoDto userInfoDto = new CreateUserInfoDto();\n        userInfoDto.setUsername(\"test\");\n        reqDto.setList(Collections.singletonList(userInfoDto));\n        UserListRespDto response = client.createUsersBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createUsersBatch({\n    list: [\n      {\n        status: Models.CreateUserInfoDto.status.ACTIVATED,\n        // 替换手机号邮箱等信息\n        email: 'test-batch@example.com',\n        phone: '18812349999',\n        phoneCountryCode: '+86',\n        username: 'bob-batch',\n        name: '张三',\n        nickname: '张三',\n        photo:\n          'https://files.authing.co/authing-console/default-user-avatar.png',\n        gender: Models.CreateUserInfoDto.gender.M,\n        birthdate: '2022-06-03',\n        country: 'CN',\n        province: 'BJ',\n        city: 'BJ',\n        address: '北京朝阳',\n        streetAddress: '北京朝阳区 xxx 街道',\n        postalCode: '438100',\n        company: 'steamory',\n        browser:\n          'Mozilla/5.0 (Linux; Android 10; V2001A; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/87.0.4280.141 Mobile Safari/537.36 VivoBrowser/10.2.10.0',\n        device: 'iOS',\n        givenName: '三',\n        familyName: '张',\n\n        otp: {\n          secret: 'HZ2F6J3AGNAVSOTV',\n          recoveryCode: 'b471-8ec0-874a-087f-bccb-cd54'\n        },\n        customData: {\n          school: '北京大学',\n          age: 22\n        }\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createUsersBatch(array(\n    \"list\" => array(\n        array(\n            \"username\" => \"test\",\n            \"password\" => \"passw0rd\"\n        )\n    )\n));\nprint_r($data);\n"}}},"/api/v3/update-user":{"post":{"operationId":"UsersManagementController_updateUser","summary":"修改用户资料","description":"通过用户 ID，修改用户资料，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份修改用户资料因此不需要进行手机号验证码检验等安全检测。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateUserReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserSingleRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UpdateUserReqDto dto = new UpdateUserReqDto()\r\n            {\r\n                UserId = \"AUTHING_USERID\",\r\n                Name = \"AUTHING_USER_NAME\",\r\n                Status = UpdateUserReqDto.status.ACTIVATED\r\n            };\r\n\r\n            UserSingleRespDto user = await managementClient.UpdateUser(dto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateUserReqDto{\n\t\tUserId:   \"635215b413xxxxf5f63c511a\",\n\t\tNickname: \"张三\",\n\t}\n\trespDto := client.UpdateUser(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.UpdateUserReqDto;\nimport cn.authing.sdk.java.dto.UserSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateUserTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateUserReqDto reqDto = new UpdateUserReqDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        UserSingleRespDto response = client.updateUser(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateUser({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    name: '张三666',\n    nickname: '张三666'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateUser(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n    \"nickname\" => \"张三\"\n));\nprint_r($data);\n"}}},"/api/v3/update-user-batch":{"post":{"operationId":"UsersManagementController_updateUserBatch","summary":"批量修改用户资料","description":"批量修改用户资料，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份修改用户资料因此不需要进行手机号验证码检验等安全检测。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateUserBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateUserBatchReqDto{\n\t\tList: []dto.UpdateUserInfoDto{\n\t\t\t{\n\t\t\t\tUserId:   \"6229ffaxxxxxxxxcade3e3d9\",\n\t\t\t\tNickname: \"张三\",\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.UpdateUserBatch(reqDto)\n\tfmt.Println(respDto)\n}","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateUserBatch(array(\n    \"list\" => array(\n        array(\n            \"userId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n            \"nickname\" => \"张三\"\n        )\n    )\n));\nprint_r($data);"}}},"/api/v3/delete-users-batch":{"post":{"operationId":"UsersManagementController_deleteUsersBatch","summary":"批量删除用户","description":"通过用户 ID 列表，删除用户，支持批量删除，可以选择指定用户 ID 类型等。","deprecated":false,"parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteUsersBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DeleteUsersBatchDto dto = new DeleteUsersBatchDto()\r\n            {\r\n                UserIds = new List<string> { \"AUTHING_USERID\", \"AUTHING_USERID1\" }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccessDto = await managementClient.DeleteUsersBatch(dto);\r\n\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteUsersBatchDto{\n\t\tUserIds: []string{\"635215b413xxxxf5f63c511a\"},\n\t}\n\trespDto := client.DeleteUsersBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteUsersBatchDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class DeleteUsersBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteUsersBatchDto reqDto = new DeleteUsersBatchDto();\n        reqDto.setUserIds(Collections.singletonList(\"6229ffaxxxxxxxxcade3e3d9\"));\n        IsSuccessRespDto response = client.deleteUsersBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteUsersBatch({\n    // 替换用户 ID 数组\n    userIds: ['6229ffaxxxxxxxxcade3e3d9'],\n    options: {\n      userIdType: Models.DeleteUsersBatchOptionsDto.userIdType.USER_ID\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteUsersBatch(array(\n    \"userIds\" => array(\"635215b413xxxxf5f63c511a\"),\n));\nprint_r($data);\n"}}},"/api/v3/get-user-identities":{"get":{"operationId":"UsersManagementController_getUserIdentities","summary":"获取用户的外部身份源","description":"通过用户 ID，获取用户的外部身份源、选择指定用户 ID 类型。","deprecated":false,"parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IdentityListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            IdentityListRespDto identityListRespDto = await managementClient.GetUserIdentities(new GetUserIdentitiesDto\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserIdentitiesDto{\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUserIdentities(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserIdentitiesDto;\nimport cn.authing.sdk.java.dto.IdentityListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserIdentitiesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserIdentitiesDto reqDto = new GetUserIdentitiesDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        IdentityListRespDto response = client.getUserIdentities(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserIdentities({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: 'user_id'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserIdentities(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\"\n));\nprint_r($data);\n"}}},"/api/v3/get-user-roles":{"get":{"operationId":"UsersManagementController_getUserRoles","summary":"获取用户角色列表","description":"通过用户 ID，获取用户角色列表，可以选择所属权限分组 code、选择指定用户 ID 类型等。注意：如果不传 namespace，默认只会获取默认权限分组下面的角色！","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组(权限空间)的 Code","example":"default","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RolePaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RolePaginatedRespDto rolePaginatedRespDto = await managementClient.GetUserRoles(new GetUserRolesDto\r\n            {\r\n                UserId = \"AUTHING_USERID\",\r\n                Namespace = \"AUTHING_NAMESPACE\"\r\n            });\r\n\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserRolesDto{\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUserRoles(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserRolesDto;\nimport cn.authing.sdk.java.dto.RolePaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserRolesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserRolesDto reqDto = new GetUserRolesDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        RolePaginatedRespDto response = client.getUserRoles(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserRoles({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: 'user_id',\n    namespace: 'default'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserRoles(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\"\n));\nprint_r($data);\n"}}},"/api/v3/get-user-principal-authentication-info":{"get":{"operationId":"UsersManagementController_getUserPrincipalAuthenticationInfo","summary":"获取用户实名认证信息","description":"通过用户 ID，获取用户实名认证信息，可以选择指定用户 ID 类型。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PrincipalAuthenticationInfoPaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            PrincipalAuthenticationInfoPaginatedRespDto principalAuthenticationInfoPaginatedRespDto = await managementClient.GetUserPrincipalAuthenticationInfo(new GetUserPrincipalAuthenticationInfoDto\r\n            { \r\n                UserId = \"AUTHING_USERID,\r\n                UserIdType = \"user_id\" \r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserPrincipalAuthenticationInfoDto{\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUserPrincipalAuthenticationInfo(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserPrincipalAuthenticationInfoDto;\nimport cn.authing.sdk.java.dto.PrincipalAuthenticationInfoPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserPrincipalAuthenticationInfoTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserPrincipalAuthenticationInfoDto reqDto = new GetUserPrincipalAuthenticationInfoDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        PrincipalAuthenticationInfoPaginatedRespDto response = client.getUserPrincipalAuthenticationInfo(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserPrincipalAuthenticationInfo({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: 'user_id'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserPrincipalAuthenticationInfo(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\"\n));\nprint_r($data);\n"}}},"/api/v3/reset-user-principal-authentication-info":{"post":{"operationId":"UsersManagementController_resetUserPrincipalAuthenticationInfo","summary":"删除用户实名认证信息","description":"通过用户 ID，删除用户实名认证信息，可以选择指定用户 ID 类型等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResetUserPrincipalAuthenticationInfoDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ResetUserPrincipalAuthenticationInfoDto resetUserPrincipalAuthenticationInfoDto = new ResetUserPrincipalAuthenticationInfoDto()\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            };\r\n\r\n            IsSuccessRespDto isSuccessDto = await managementClient.ResetUserPrincipalAuthenticationInfo(resetUserPrincipalAuthenticationInfoDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ResetUserPrincipalAuthenticationInfoDto{\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.ResetUserPrincipalAuthenticationInfo(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.ResetUserPrincipalAuthenticationInfoDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ResetUserPrincipalAuthenticationInfoTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ResetUserPrincipalAuthenticationInfoDto infoDto = new ResetUserPrincipalAuthenticationInfoDto();\n        infoDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        IsSuccessRespDto response = client.resetUserPrincipalAuthenticationInfo(infoDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.resetUserPrincipalAuthenticationInfo({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    options: {\n      userIdType:\n        Models.ResetUserPrincipalAuthenticationInfoOptionsDto.userIdType.USER_ID\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->resetUserPrincipalAuthenticationInfo(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\"\n));\nprint_r($data);\n"}}},"/api/v3/get-user-departments":{"get":{"operationId":"UsersManagementController_getUserDepartments","summary":"获取用户部门列表","description":"通过用户 ID，获取用户部门列表，支持分页，可以选择获取自定义数据、选择指定用户 ID 类型、增序或降序等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"minimum":1,"maximum":50,"default":10,"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentPaths","required":false,"in":"query","description":"是否获取部门路径","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"sortBy","required":false,"in":"query","description":"排序依据，如 部门创建时间、加入部门时间、部门名称、部门标志符","example":"JoinDepartmentAt","schema":{"default":"JoinDepartmentAt","enum":["DepartmentCreatedAt","JoinDepartmentAt","DepartmentName","DepartmemtCode"],"type":"string"}},{"name":"orderBy","required":false,"in":"query","description":"增序或降序","example":"Desc","schema":{"default":"Desc","enum":["Asc","Desc"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserDepartmentPaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ResetUserPrincipalAuthenticationInfoDto resetUserPrincipalAuthenticationInfoDto = new ResetUserPrincipalAuthenticationInfoDto()\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            };\r\n\r\n            UserDepartmentPaginatedRespDto userDepartmentPaginatedRespDto = await managementClient.GetUserDepartments(new GetUserDepartmentsDto\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserDepartmentsDto{\n\t\tUserId:         \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUserDepartments(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserDepartmentsDto;\nimport cn.authing.sdk.java.dto.UserDepartmentPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserDepartmentsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserDepartmentsDto reqDto = new GetUserDepartmentsDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        UserDepartmentPaginatedRespDto response = client.getUserDepartments(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserDepartments({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: 'user_id',\n    page: 1,\n    limit: 10,\n    withCustomData: true,\n    sortBy: 'JoinDepartmentAt',\n    orderBy: 'Desc'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserDepartments(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\"\n));\nprint_r($data);\n"}}},"/api/v3/set-user-departments":{"post":{"operationId":"UsersManagementController_setUserDepartments","summary":"设置用户所在部门","description":"通过用户 ID，设置用户所在部门，可以选择指定用户 ID 类型等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetUserDepartmentsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            SetUserDepartmentsDto setUserDepartmentDto = new SetUserDepartmentsDto()\r\n            {\r\n                UserId = \"AUTHING_USERID\",\r\n                Departments = new List<SetUserDepartmentDto>()\r\n                {\r\n                        new SetUserDepartmentDto{ DepartmentId= \"AUTHING_DEP_ID\",\r\n                        IsLeader=true,\r\n                        IsMainDepartment=false}\r\n                }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccessRespDto = await managementClient.SetUserDepartments(setUserDepartmentDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.SetUserDepartmentsDto{\n\t\tDepartments: []dto.SetUserDepartmentDto{\n\t\t\t{\n\t\t\t\t// 需要替换成真实的部门 ID\n\t\t\t\tDepartmentId:     \"60b49eb83xxxxadb96f26e68\",\n\t\t\t\tIsLeader:         true,\n\t\t\t\tIsMainDepartment: true,\n\t\t\t},\n\t\t},\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.SetUserDepartments(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.SetUserDepartmentDto;\nimport cn.authing.sdk.java.dto.SetUserDepartmentsDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SetUserDepartmentsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        SetUserDepartmentsDto reqDto = new SetUserDepartmentsDto();\n        List<SetUserDepartmentDto> list = new ArrayList<>();\n        SetUserDepartmentDto departmentDto = new SetUserDepartmentDto();\n        departmentDto.setDepartmentId(\"SetUserDepartmentDto()\");\n        list.add(departmentDto);\n        reqDto.setDepartments(list);\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        IsSuccessRespDto response = client.setUserDepartments(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.setUserDepartments({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    departments: [\n      {\n        departmentId: '60b49eb83fd80adb96f26e68',\n        isLeader: true,\n        isMainDepartment: true\n      }\n    ],\n    options: {\n      userIdType: Models.SetUserDepartmentsOptionsDto.userIdType.USER_ID\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->setUserDepartments(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n    \"departments\" => array(\n        array(\n            // 需要替换成真实的部门 ID\n            \"departmentId\" => \"60b49eb83xxxxadb96f26e68\",\n            \"isLeader\" => true,\n            \"isMainDepartment\" => true,\n        )\n    ),\n));\nprint_r($data);"}}},"/api/v3/get-user-groups":{"get":{"operationId":"UsersManagementController_getUserGroups","summary":"获取用户分组列表","description":"通过用户 ID，获取用户分组列表，可以选择指定用户 ID 类型等。","deprecated":false,"parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupPaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            GroupPaginatedRespDto groupPaginatedRespDto = await managementClient.GetUserGroups(new GetUserGroupsDto\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserGroupsDto{\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUserGroups(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserGroupsDto;\nimport cn.authing.sdk.java.dto.GroupPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserGroupsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserGroupsDto reqDto = new GetUserGroupsDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        GroupPaginatedRespDto response = client.getUserGroups(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserGroups({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: 'user_id'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserGroups(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\"\n));\nprint_r($data);\n"}}},"/api/v3/get-user-mfa-info":{"get":{"operationId":"UsersManagementController_getUserMfaInfo","summary":"获取用户 MFA 绑定信息","description":"通过用户 ID，获取用户 MFA 绑定信息，可以选择指定用户 ID 类型等。","deprecated":false,"parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserMfaSingleRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserMfaSingleRespDto userMfaSingleRespDto = await managementClient.GetUserMfaInfo(new GetUserMfaInfoDto \r\n            { \r\n                UserId = \"AUTHING_USERID\", \r\n                UserIdType = \"user_id\" \r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserMfaInfoDto{\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUserMfaInfo(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserMfaInfoDto;\nimport cn.authing.sdk.java.dto.UserMfaSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserMfaInfoTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserMfaInfoDto reqDto = new GetUserMfaInfoDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        UserMfaSingleRespDto response = client.getUserMfaInfo(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserMfaInfo({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: 'user_id'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserMfaInfo(array(\n    \"userId\" => \"6351448ebe6d8742dedbc68a\"\n));\nprint_r($data);\n"}}},"/api/v3/list-archived-users":{"get":{"operationId":"UsersManagementController_listArchivedUsers","summary":"获取已归档的用户列表","description":"获取已归档的用户列表，支持分页，可以筛选开始时间等。","deprecated":false,"parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"minimum":1,"maximum":50,"default":10,"type":"number"}},{"name":"startAt","required":false,"in":"query","description":"开始时间，为精确到秒的 UNIX 时间戳，默认不指定","example":1655714763890,"schema":{"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListArchivedUsersSingleRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ListArchivedUsersSingleRespDto result = await managementClient.ListArchivedUsers(new ListArchivedUsersDto { });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListArchivedUsersDto{\n\t\tPage:    1,\n\t\tLimit:   10,\n\t}\n\trespDto := client.ListArchivedUsers(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListArchivedUsersDto;\nimport cn.authing.sdk.java.dto.ListArchivedUsersSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListArchivedUsersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListArchivedUsersSingleRespDto response = client.listArchivedUsers(new ListArchivedUsersDto());\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listArchivedUsers({\n    page: 1,\n    limit: 10,\n    startAt: 1655714763890\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listArchivedUsers(array(\n    \"page\" => 1,\n    \"limit\" => 10,\n));\nprint_r($data);\n"}}},"/api/v3/kick-users":{"post":{"operationId":"UsersManagementController_kickUsers","summary":"强制下线用户","description":"通过用户 ID、App ID 列表，强制让用户下线，可以选择指定用户 ID 类型等。","deprecated":false,"parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/KickUsersDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            KickUsersDto kickUsersDto = new KickUsersDto()\r\n            {\r\n                AppIds = new List<string> { \"AUTHING_APPID\" },\r\n                UserId = \"AUTHING_USERID\"\r\n            };\r\n\r\n            IsSuccessRespDto userSingleRespDto = await managementClient.KickUsers(kickUsersDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.KickUsersDto{\n\t\tUserId: \"6351448ebe6d8742dedbc68a\",\n\t}\n\trespDto := client.KickUsers(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.KickUsersDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class KickUsersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        KickUsersDto reqDto = new KickUsersDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        reqDto.setAppIds(Collections.singletonList(\"62188e71cxxxx3075289c580\"));\n        IsSuccessRespDto response = client.kickUsers(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.kickUsers({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    // 替换应用 ID\n    appIds: ['62188e71cxxxx3075289c580'],\n    options: {\n      userIdType: Models.KickUsersOptionsDto.userIdType.USER_ID\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->kickUsers(array(\n    \"userId\" => \"6351448ebe6d8742dedbc68a\",\n));\nprint_r($data);\n"}}},"/api/v3/is-user-exists":{"post":{"operationId":"UsersManagementController_isUserExists","summary":"判断用户是否存在","description":"根据条件判断用户是否存在，可以筛选用户名、邮箱、手机号、第三方外部 ID 等。","deprecated":false,"parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsUserExistsReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsUserExistsRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            IsUserExistsReqDto dto = new IsUserExistsReqDto()\r\n            {\r\n                Username = \"AUTHING_USERNAME\"\r\n            };\r\n\r\n            IsUserExistsRespDto userSingleRespDto = await managementClient.IsUserExists(dto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.IsUserExistsReqDto{\n\t\tEmail: \"test@example.com\",\n\t}\n\trespDto := client.IsUserExists(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.IsUserExistsReqDto;\nimport cn.authing.sdk.java.dto.IsUserExistsRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class IsUserExistsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        IsUserExistsReqDto reqDto = new IsUserExistsReqDto();\n        reqDto.setUsername(\"test\");\n        IsUserExistsRespDto response = client.isUserExists(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.isUserExists({\n    username: 'bob',\n    email: 'test@example.com'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->isUserExists(array(\n    \"email\" => \"test@example.com\",\n));\nprint_r($data);\n"}}},"/api/v3/get-user-accessible-apps":{"get":{"operationId":"UsersManagementController_getUserAccessibleApps","summary":"获取用户可访问的应用","description":"通过用户 ID，获取用户可访问的应用，可以选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AppListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AppListRespDto appListResp = await managementClient.GetUserAccessibleApps(new GetUserAccessibleAppsDto\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserAccessibleAppsDto{\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUserAccessibleApps(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.AppListRespDto;\nimport cn.authing.sdk.java.dto.GetUserAccessibleAppsDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserAccessibleAppsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserAccessibleAppsDto reqDto = new GetUserAccessibleAppsDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        AppListRespDto response = client.getUserAccessibleApps(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserAccessibleApps({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: 'user_id'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserAccessibleApps(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n"}}},"/api/v3/get-user-authorized-apps":{"get":{"operationId":"UsersManagementController_getUserAuthorizedApps","summary":"获取用户授权的应用","description":"通过用户 ID，获取用户授权的应用，可以选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AppListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AppListRespDto appListResp = await managementClient.GetUserAuthorizedApps(new GetUserAuthorizedAppsDto \r\n            { \r\n                UserId = \"AUTHING_USERID\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserAuthorizedAppsDto{\n\t\tUserId:     \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUserAuthorizedApps(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.AppListRespDto;\nimport cn.authing.sdk.java.dto.GetUserAuthorizedAppsDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserAuthorizedAppsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserAuthorizedAppsDto reqDto = new GetUserAuthorizedAppsDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        AppListRespDto response = client.getUserAuthorizedApps(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserAccessibleApps({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: 'user_id'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserAuthorizedApps(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n"}}},"/api/v3/has-any-role":{"post":{"operationId":"UsersManagementController_hasAnyRole","summary":"判断用户是否有某个角色","description":"通过用户 ID，判断用户是否有某个角色，支持传入多个角色，可以选择指定用户 ID 类型等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/HasAnyRoleReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HasAnyRoleRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            HasAnyRoleReqDto dto = new HasAnyRoleReqDto()\r\n            {\r\n                UserId = \"AUTHING_USERID\",\r\n                Roles = new List<HasRoleRolesDto>() { new HasRoleRolesDto { Code = \"AUTHING_ROLE_CODE\", Namespace = \"AUTHING_NAMESPACE\" } }\r\n            };\r\n\r\n            HasAnyRoleRespDto hasAnyRole = await managementClient.HasAnyRole(dto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.HasAnyRoleReqDto{\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t\tRoles: []dto.HasRoleRolesDto{\n\t\t\t{\n\t\t\t\tNamespace: \"default\",\n\t\t\t\tCode:      \"admin\",\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.HasAnyRole(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.HasAnyRoleReqDto;\nimport cn.authing.sdk.java.dto.HasAnyRoleRespDto;\nimport cn.authing.sdk.java.dto.HasRoleRolesDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class HasAnyRoleTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        HasAnyRoleReqDto reqDto = new HasAnyRoleReqDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        List<HasRoleRolesDto> list = new ArrayList<>();\n        HasRoleRolesDto rolesDto = new HasRoleRolesDto();\n        rolesDto.setCode(\"xxx\");\n        rolesDto.setNamespace(\"xxx\");\n        list.add(rolesDto);\n        reqDto.setRoles(list);\n        HasAnyRoleRespDto response = client.hasAnyRole(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.hasAnyRole({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    roles: [\n      {\n        namespace: 'default',\n        code: 'admin'\n      }\n    ],\n    options: {\n      userIdType: Models.HasAnyRoleOptionsDto.userIdType.USER_ID\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->hasAnyRole(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n    \"roles\" => array(\n        array(\n            \"namespace\" => \"default\",\n            \"code\" => \"admin\",\n        )\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/get-user-login-history":{"get":{"operationId":"UsersManagementController_getUserLoginHistory","summary":"获取用户的登录历史记录","description":"通过用户 ID，获取用户登录历史记录，支持分页，可以选择指定用户 ID 类型、应用 ID、开始与结束时间戳等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}},{"name":"appId","required":false,"in":"query","description":"应用 ID","schema":{"type":"string"}},{"name":"clientIp","required":false,"in":"query","description":"客户端 IP","example":"127.0.0.1","schema":{"type":"string"}},{"name":"start","required":false,"in":"query","description":"开始时间戳（毫秒）","example":1647360000000,"schema":{"type":"number"}},{"name":"end","required":false,"in":"query","description":"结束时间戳（毫秒）","example":1648051199000,"schema":{"type":"number"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"minimum":1,"maximum":50,"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserLoginHistoryPaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserLoginHistoryPaginatedRespDto dto = await managementClient.GetUserLoginHistory(new GetUserLoginHistoryDto \r\n            { \r\n                UserId = \"AUTHING_USERID\",\r\n                Start = 1666341169000, \r\n                End = 1666341169000\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserLoginHistoryDto{\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUserLoginHistory(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserLoginHistoryDto;\nimport cn.authing.sdk.java.dto.UserLoginHistoryPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserLoginHistoryTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserLoginHistoryDto reqDto = new GetUserLoginHistoryDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        UserLoginHistoryPaginatedRespDto response = client.getUserLoginHistory(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserLoginHistory({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: 'user_id',\n    clientIp: '127.0.0.1',\n    page: 1,\n    limit: 10\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserLoginHistory(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n"}}},"/api/v3/get-user-loggedin-apps":{"get":{"operationId":"UsersManagementController_getUserLoggedinApps","summary":"获取用户曾经登录过的应用","description":"通过用户 ID，获取用户曾经登录过的应用，可以选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserLoggedInAppsListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserLoggedInAppsListRespDto dto = await managementClient.GetUserLoggedinApps(new GetUserLoggedinAppsDto\r\n            { \r\n                UserId = \"AUTHING_USERID\" \r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserLoggedinAppsDto{\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUserLoggedinApps(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserLoggedinAppsDto;\nimport cn.authing.sdk.java.dto.UserLoggedInAppsListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserLoggedinAppsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserLoggedinAppsDto reqDto = new GetUserLoggedinAppsDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        UserLoggedInAppsListRespDto response = client.getUserLoggedinApps(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserLoggedinApps({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: 'user_id'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserLoggedinApps(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n"}}},"/api/v3/get-user-logged-in-identities":{"get":{"operationId":"UsersManagementController_getUserLoggedinIdentities","summary":"获取用户曾经登录过的身份源","description":"通过用户 ID，获取用户曾经登录过的身份源，可以选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserLoggedInIdentitiesRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserLoggedInIdentitiesRespDto dto = await managementClient.GetUserLoggedinIdentities(new GetUserLoggedInIdentitiesDto \r\n            { \r\n                UserId = \"AUTHING_USERID\" \r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserLoggedInIdentitiesDto{\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.GetUserLoggedinIdentities(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserLoggedInIdentitiesDto;\nimport cn.authing.sdk.java.dto.UserLoggedInIdentitiesRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserLoggedinIdentitiesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserLoggedInIdentitiesDto reqDto = new GetUserLoggedInIdentitiesDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        UserLoggedInIdentitiesRespDto response = client.getUserLoggedinIdentities(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserLoggedinIdentities({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: 'user_id'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserLoggedinIdentities(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n"}}},"/api/v3/resign-user":{"post":{"operationId":"UsersManagementController_resignUser","summary":"离职用户","description":"离职用户。离职操作会进行以下操作：\n\n- 离职后该成员授权、部门、角色、分组、岗位关系将被删除；\n- 离职后将保留用户基本信息，同时账号将被禁用，无法登录应用；如果需要彻底删除账号，请调用删除接口。\n\n该操作不可恢复，请谨慎操作！\n    ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResignUserReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResignUserRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ResignUserRespDto dto = await managementClient.ResignUser(new ResignUserReqDto\r\n            {\r\n                UserId = \"AUTHING_USERID\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ResignUserReqDto{\n\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t}\n\trespDto := client.ResignUser(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ResignUserReqDto;\nimport cn.authing.sdk.java.dto.ResignUserRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ResignUserTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ResignUserReqDto reqDto = new ResignUserReqDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        ResignUserRespDto response = client.resignUser(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.resignUser({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: Models.ResignUserReqDto.userIdType.USER_ID\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->resignUser(array(\n    \"userId\" => \"635215b413xxxxf5f63c511a\",\n));\nprint_r($data);\n"}}},"/api/v3/resign-user-batch":{"post":{"operationId":"UsersManagementController_resignUserBatch","summary":"批量离职用户","description":"批量离职用户。离职操作会进行以下操作：\n\n- 离职后该成员授权、部门、角色、分组、岗位关系将被删除；\n- 离职后将保留用户基本信息，同时账号将被禁用，无法登录应用；如果需要彻底删除账号，请调用删除接口。\n\n该操作不可恢复，请谨慎操作！\n    ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResignUserBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResignUserRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ResignUserRespDto dto = await managementClient.ResignUserBatch(new ResignUserBatchReqDto\r\n\r\n            {\r\n                UserIds = new List<string> { \"AUTHING_USERID\", \"AUTHING_USERID1\" }\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ResignUserBatchReqDto{\n\t\tUserIds: []string{\"6229ffaxxxxxxxxcade3e3d9\"},\n\t}\n\trespDto := client.ResignUserBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ResignUserBatchReqDto;\nimport cn.authing.sdk.java.dto.ResignUserRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class ResignUserBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ResignUserBatchReqDto reqDto = new ResignUserBatchReqDto();\n        reqDto.setUserIds(Collections.singletonList(\"6229ffaxxxxxxxxcade3e3d9\"));\n        ResignUserRespDto response = client.resignUserBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.resignUserBatch({\n    // 替换用户 ID 数组\n    userIds: ['6229ffaxxxxxxxxcade3e3d9'],\n    userIdType: Models.ResignUserBatchReqDto.userIdType.USER_ID\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->resignUserBatch(array(\n    \"userIds\" => array(\"6229ffaxxxxxxxxcade3e3d9\")\n));\nprint_r($data);\n"}}},"/api/v3/get-user-authorized-resources":{"get":{"operationId":"UsersManagementController_getUserAuthorizedResources","summary":"获取用户被授权的所有资源","description":"通过用户 ID，获取用户被授权的所有资源，可以选择指定用户 ID 类型等，用户被授权的资源是用户自身被授予、通过分组继承、通过角色继承、通过组织机构继承的集合。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组(权限空间)的 Code","example":"default","schema":{"type":"string"}},{"name":"resourceType","required":false,"in":"query","description":"资源类型，如 数据、API、菜单、按钮","schema":{"enum":["DATA","API","MENU","BUTTON","UI"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthorizedResourcePaginatedRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AuthorizedResourcePaginatedRespDto dto = await managementClient.GetUserAuthorizedResources(new GetUserAuthorizedResourcesDto \r\n            {\r\n                UserId = \"AUTHING_USERID\",\r\n                Namespace = \"AUTHING_NAMESPACE\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.AuthorizedResourcePaginatedRespDto;\nimport cn.authing.sdk.java.dto.GetUserAuthorizedResourcesDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserAuthorizedResourcesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserAuthorizedResourcesDto reqDto = new GetUserAuthorizedResourcesDto();\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        AuthorizedResourcePaginatedRespDto response = client.getUserAuthorizedResources(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserAuthorizedResources({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    userIdType: Models.ResignUserReqDto.userIdType.USER_ID\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/check-session-status":{"post":{"operationId":"UsersManagementController_checkSessionStatus","summary":"检查某个用户在应用下是否具备 Session 登录态","description":"检查某个用户在应用下是否具备 Session 登录态","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckSessionStatusDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckSessionStatusRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CommonResponseDto dto = await managementClient.ImportOtp(new ImportOtpReqDto\r\n            {\r\n                List = new List<ImportOtpItemDto>\r\n                {\r\n                    new ImportOtpItemDto\r\n                    {\r\n                        Otp=new ImportOtpItemDataDto\r\n                        {\r\n                            RecoveryCode=\"AUTHING_RECOVERY_CODE\",\r\n                            Secret=\"AUTHING_OTP_SECRET\"\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CheckSessionStatusDto{\n\t\tUserId: \"6229ffaxxxxxxxxcade3e3d9\",\n\t\tAppId: \"REPLACE_WITH_REAL_APP_ID\",\n\t}\n\trespDto := client.CheckSessionStatus(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CheckSessionStatusDto;\nimport cn.authing.sdk.java.dto.CheckSessionStatusRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CheckSessionStatusTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CheckSessionStatusDto reqDto = new CheckSessionStatusDto();\n        reqDto.setAppId(\"app1\");\n        reqDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        CheckSessionStatusRespDto response = client.checkSessionStatus(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.checkSessionStatus({\n    // 替换用户 ID\n    userId: '6229ffaxxxxxxxxcade3e3d9',\n    // 替换应用 ID\n    appId: '62188e71cxxxx3075289c580'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->checkSessionStatus(array(\n    \"userId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n    \"appId\" => \"REPLACE_WITH_REAL_APP_ID\",\n));\nprint_r($data);\n"}}},"/api/v3/import-otp":{"post":{"operationId":"UsersManagementController_importOtp","summary":"导入用户的 OTP","description":"导入用户的 OTP","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImportOtpReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ImportOtpReqDto{\n\t\tList: []dto.ImportOtpItemDto{\n\t\t\t{\n\t\t\t\tUserId: \"635215b413xxxxf5f63c511a\",\n\t\t\t\tOtp: dto.ImportOtpItemDataDto{\n\t\t\t\t\tSecret: \"HZ2F6J3AGNAVSOTV\",\n\t\t\t\t\tRecoveryCode: \"b471-8ec0-874a-087f-bccb-cd54\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.ImportOtp(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CommonResponseDto;\nimport cn.authing.sdk.java.dto.ImportOtpItemDataDto;\nimport cn.authing.sdk.java.dto.ImportOtpItemDto;\nimport cn.authing.sdk.java.dto.ImportOtpReqDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ImportOtpTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ImportOtpReqDto reqDto = new ImportOtpReqDto();\n        List<ImportOtpItemDto> list = new ArrayList<>();\n        ImportOtpItemDto optDto = new ImportOtpItemDto();\n        optDto.setUserId(\"6229ffaxxxxxxxxcade3e3d9\");\n        ImportOtpItemDataDto dataDto = new ImportOtpItemDataDto();\n        dataDto.setSecret(\"HZ2F6JxxxxAVSOTV\");\n        optDto.setOtp(dataDto);\n        list.add(optDto);\n        reqDto.setList(list);\n        CommonResponseDto response = client.importOtp(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.importOtp({\n    list: [\n      {\n        // 替换用户 ID\n        userId: '6229ffaxxxxxxxxcade3e3d9',\n        otp: {\n          secret: 'HZ2FxxxxxxAVSOTV',\n          recoveryCode: 'b471-xxxx-xxxx-087f-bccb-cd54'\n        }\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->importOtp(array(\n    \"list\" => array(\n        array(\n            \"userId\" => \"635215b413xxxxf5f63c511a\",\n            \"otp\" => array(\n                \"secret\" => \"HZ2F6J3AGNAVSOTV\",\n                \"recoveryCode\" => \"b471-8ec0-874a-087f-bccb-cd54\",\n            ),\n\n        )\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/get-otp-secret-by-user":{"get":{"operationId":"UsersManagementController_getOtpSecretByUser","summary":"获取用户绑定 OTP 的秘钥","description":"通过用户 ID，获取用户绑定 OTP 的秘钥。可以选择指定用户 ID 类型等。","deprecated":false,"parameters":[{"name":"userId","required":true,"in":"query","description":"用户 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetOtpSecretRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-user-password-ciphertext":{"post":{"operationId":"UsersManagementController_getUserPasswordCiphertext","summary":"获取用户自定义加密的密码","description":"此功能主要是用户在控制台配置加基于 RSA、SM2 等加密的密钥后，加密用户的密码。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetUserPasswordCiphertextDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetUserPasswordCiphertextRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/link-identity":{"post":{"operationId":"UsersManagementController_linkIdentity","summary":"给用户绑定一个身份信息","description":"用户池管理员手动将来自外部身份源的身份信息绑定到用户上。绑定完成后，可以用执行过绑定操作的身份源登录到对应的 Authing 用户。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LinkIdentityDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LinkIdentityResDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/unlink-identity":{"post":{"operationId":"UsersManagementController_unlinkIdentity","summary":"解除绑定用户在身份源下的所有身份信息","description":"解除绑定用户在某个身份源下的所有身份信息。解绑后，将无法使用执行过解绑操作的身份源登录到对应的 Authing 用户，除非重新绑定身份信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UnlinkIdentity"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UnlinkIdentityResDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/set-mfa-status":{"post":{"operationId":"UsersManagementController_setUsersMfaStatus","summary":"设置用户 MFA 状态","description":"设置用户 MFA 状态，即 MFA 触发数据。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetMfaStatusDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-mfa-status":{"get":{"operationId":"UsersManagementController_getUserMfaStatus","summary":"获取用户 MFA 状态","description":"获取用户 MFA 状态，即 MFA 触发数据。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetMapInfoRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-user-sync-relations":{"get":{"operationId":"UsersManagementController_getUserSyncRelations","summary":"获取用户绑定的第三方同步关系","description":"如果在 Authing 中的用户进行了上下游同步，此接口可以用于查询出在第三方的关联用户信息","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncRelationListRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-user-sync-relations":{"post":{"operationId":"UsersManagementController_deleteUserSyncRelations","summary":"删除用户同步关联关系","description":"如果在 Authing 中的用户进行了上下游同步，此接口可以用于删除某个用户在指定身份源下的关联关系。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteUserSyncRelationReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-roles-of-public-account":{"get":{"operationId":"PublicAccountPermissionController_getPublicAccountRoles","summary":"获取公共账号的角色列表","description":"通过用户 ID，获取用户角色列表，可以选择所属权限分组 code、选择指定用户 ID 类型等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组(权限空间)的 code","example":"default","schema":{"default":"default","type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountPaginatedRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-public-accounts-of-role":{"get":{"operationId":"PublicAccountPermissionController_getPublicAccountsOfRole","summary":"获取角色的公共账号列表","description":"通过角色 ID，获取用户的公共账号列表。","parameters":[{"name":"roleId","required":true,"in":"query","description":"角色 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountPaginatedRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/set-public-account-of-roles":{"post":{"operationId":"PublicAccountPermissionController_bindPublicAccountOfRoles","summary":"公共账号绑定批量角色","description":"公共账号绑定批量角色","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetUserRolesDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-public-accounts-of-group":{"get":{"operationId":"PublicAccountPermissionController_getPublicAccountsOfGroup","summary":"获取分组的公共账号列表","description":"通过分组 ID，获取用户的公共账号列表。","parameters":[{"name":"groupId","required":true,"in":"query","description":"分组 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountPaginatedRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-groups-of-public-account":{"get":{"operationId":"PublicAccountPermissionController_getGroupsOfPublicAccount","summary":"获取公共账号分组列表","description":"通过公共账号 ID，获取公共账号分组列表，可以选择指定用户 ID 类型等。","deprecated":false,"parameters":[{"name":"userId","required":true,"in":"query","description":"用户唯一标志，可以是用户 ID、用户名、邮箱、手机号、外部 ID、在外部身份源的 ID。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupPaginatedRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/set-public-account-of-groups":{"post":{"operationId":"PublicAccountPermissionController_getPublicAccountOfGroups","summary":"公共账号添加批量分组","description":"公共账号通过分组 ID 添加批量分组","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetUserGroupsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-public-accounts-of-department":{"get":{"operationId":"PublicAccountPermissionController_getPublicAccountsOfDepartment","summary":"获取部门的公共账号列表","description":"通过部门 ID，获取用户的公共账号列表。","parameters":[{"name":"departmentId","required":true,"in":"query","description":"部门 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountPaginatedRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-departments-of-public-account":{"get":{"operationId":"PublicAccountPermissionController_getPublicAccountDepartments","summary":"获取公共账号的部门列表","description":"通过用户 ID，获取用户部门列表，支持分页，可以选择获取自定义数据、选择指定用户 ID 类型、增序或降序等。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentPaths","required":false,"in":"query","description":"是否获取部门路径","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"sortBy","required":false,"in":"query","description":"排序依据，如 部门创建时间、加入部门时间、部门名称、部门标志符","example":"JoinDepartmentAt","schema":{"default":"JoinDepartmentAt","enum":["DepartmentCreatedAt","JoinDepartmentAt","DepartmentName","DepartmemtCode"],"type":"string"}},{"name":"orderBy","required":false,"in":"query","description":"增序或降序","example":"Desc","schema":{"default":"Desc","enum":["Asc","Desc"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserDepartmentPaginatedRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/set-public-account-of-departments":{"post":{"operationId":"PublicAccountPermissionController_setPublicAccountOfDepartments","summary":"设置公共账号所在部门","description":"设置公共账号所在部门。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetUserDepartmentsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/resign-public-account-batch":{"post":{"operationId":"PublicAccountPermissionController_resignPublicAccountBatch","summary":"批量离职用户","description":"批量离职用户。离职操作会进行以下操作：\n\n- 离职后该成员授权、部门、角色、分组、岗位关系将被删除；\n- 离职后将保留用户基本信息，同时账号将被禁用，无法登录应用；如果需要彻底删除账号，请调用删除接口。\n\n该操作不可恢复，请谨慎操作！\n    ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResignUserBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResignUserRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-post-of-public-account":{"get":{"operationId":"PublicAccountPermissionController_getPostOfPublicUser","summary":"获取公共账号的岗位","description":"获取公共账号的岗位","parameters":[{"name":"userId","required":true,"in":"query","description":"用户 id","example":"xxxxx","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePostDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-public-accounts-of-post":{"get":{"operationId":"PublicAccountPermissionController_getPublicAccountsOfPost","summary":"获取岗位的公共账号列表","description":"通过岗位 ID，获取用户的公共账号列表。","parameters":[{"name":"postId","required":true,"in":"query","description":"岗位 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PublicAccountPaginatedRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/set-public-account-of-post":{"post":{"operationId":"PublicAccountPermissionController_setPublicAccountOfnPost","summary":"设置公共账号的岗位","description":"设置公共账号关联的岗位","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserConnectionPostDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/unbind-public-account-of-post":{"post":{"operationId":"PublicAccountPermissionController_unbindPublicAccountOfPost","summary":"解绑公共账号关联岗位","description":"解绑公共账号关联岗位","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserConnectionPostDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理公共账号/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-sync-task":{"get":{"operationId":"SyncCenterManagementController_getSyncTask","summary":"获取同步任务详情","description":"获取同步任务详情","parameters":[{"name":"syncTaskId","required":true,"in":"query","description":"同步任务 ID","example":1000,"schema":{"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncTaskSingleRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n            var target = res1.Data.List.First();\r\n            var res2 = await managementClient.GetSyncTask(new GetSyncTaskDto { SyncTaskId = target.SyncTaskId });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetSyncTaskDto;\nimport cn.authing.sdk.java.dto.SyncTaskSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetSyncTaskTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetSyncTaskDto reqDto = new GetSyncTaskDto();\n        reqDto.setSyncTaskId(1000);\n        SyncTaskSingleRespDto response = client.getSyncTask(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getSyncTask({\n    syncTaskId: 1000\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-sync-tasks":{"get":{"operationId":"SyncCenterManagementController_listSyncTasks","summary":"获取同步任务列表","description":"获取同步任务列表","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncTaskPaginatedRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListSyncTasksDto;\nimport cn.authing.sdk.java.dto.SyncTaskPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListSyncTasksTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        SyncTaskPaginatedRespDto response = client.listSyncTasks(new ListSyncTasksDto());\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listSyncTasks({\n    page: 1,\n    limit: 10\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/create-sync-task":{"post":{"operationId":"SyncCenterManagementController_createSyncTask","summary":"创建同步任务","description":"创建同步任务","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateSyncTaskDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncTaskPaginatedRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.CreateSyncTask(new CreateSyncTaskDto\r\n            {\r\n                SyncTaskName = \"SDK\",\r\n                SyncTaskType = CreateSyncTaskDto.syncTaskType.ACTIVE_DIRECTORY,\r\n                ClientConfig = new SyncTaskClientConfig()\r\n                {\r\n                    ActiveDirectoryConfig = new SyncTaskActiveDirectoryClientConfig\r\n                    {\r\n                        SyncIdentityProviderCode = \"AUTHING_SYNC_TASK\",\r\n                        Ticket_url = \"https://whoami.com/whocare\"\r\n                    }\r\n                },\r\n                SyncTaskFlow = CreateSyncTaskDto.syncTaskFlow.UPSTREAM,\r\n                SyncTaskTrigger = CreateSyncTaskDto.syncTaskTrigger.MANUALLY,\r\n                FieldMapping = new List<SyncTaskFieldMapping>()\r\n                {\r\n                    new SyncTaskFieldMapping\r\n                    {\r\n                        Expression = \"mobile\",\r\n                        TargetKey = \"phone\"\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateSyncTaskDto;\nimport cn.authing.sdk.java.dto.SyncTaskClientConfig;\nimport cn.authing.sdk.java.dto.SyncTaskFieldMapping;\nimport cn.authing.sdk.java.dto.SyncTaskPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CreateSyncTaskTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateSyncTaskDto reqDto = new CreateSyncTaskDto();\n        List<SyncTaskFieldMapping> list = new ArrayList<>();\n        SyncTaskFieldMapping fieldMapping = new SyncTaskFieldMapping();\n        fieldMapping.setExpression(\"mobile\");\n        fieldMapping.setTargetKey(\"phone\");\n        list.add(fieldMapping);\n        reqDto.setFieldMapping(list);\n        reqDto.setSyncTaskTrigger(CreateSyncTaskDto.SyncTaskTrigger.MANUALLY);\n        reqDto.setSyncTaskFlow(CreateSyncTaskDto.SyncTaskFlow.UPSTREAM);\n        reqDto.setClientConfig(new SyncTaskClientConfig());\n        reqDto.setSyncTaskType(CreateSyncTaskDto.SyncTaskType.ACTIVE_DIRECTORY);\n        reqDto.setSyncTaskName(\"task_name\");\n        SyncTaskPaginatedRespDto response = client.createSyncTask(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createSyncTask({\n    syncTaskName: '我的飞书同步任务',\n    syncTaskType: Models.SyncTaskDto.syncTaskType.LARK,\n    clientConfig: {\n      larkConfig: {\n        app_id: '1',\n        app_secret: '2',\n        encrypt_key: '3',\n        verification_token: '4'\n      }\n    },\n    syncTaskFlow: Models.CreateSyncTaskDto.syncTaskFlow.UPSTREAM,\n    syncTaskTrigger: Models.CreateSyncTaskDto.syncTaskTrigger.MANUALLY,\n    organizationCode: 'steamory',\n    provisioningScope: {\n      all: true,\n      includeNewUsers: false\n    },\n    fieldMapping: [\n      {\n        expression: 'mobile',\n        targetKey: 'phone'\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/update-sync-task":{"post":{"operationId":"SyncCenterManagementController_updateSyncTask","summary":"修改同步任务","description":"修改同步任务","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateSyncTaskDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncTaskPaginatedRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res2 = await managementClient.UpdateSyncTask(new UpdateSyncTaskDto\r\n            {\r\n                SyncTaskId = target.SyncTaskId,\r\n                SyncTaskType = UpdateSyncTaskDto.syncTaskType.ACTIVE_DIRECTORY,\r\n                SyncTaskName = \"AUTHING_TASK_NAME\"\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.SyncTaskPaginatedRespDto;\nimport cn.authing.sdk.java.dto.UpdateSyncTaskDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateSyncTaskTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateSyncTaskDto reqDto = new UpdateSyncTaskDto();\n        reqDto.setSyncTaskId(1000);\n        SyncTaskPaginatedRespDto response = client.updateSyncTask(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateSyncTask({\n    syncTaskId: 1000,\n    syncTaskName: '我的飞书同步任务',\n    syncTaskType: Models.SyncTaskDto.syncTaskType.LARK,\n    clientConfig: {\n      larkConfig: {\n        app_id: '1',\n        app_secret: '2',\n        encrypt_key: '3',\n        verification_token: '4'\n      }\n    },\n    syncTaskFlow: Models.UpdateSyncTaskDto.syncTaskFlow.UPSTREAM,\n    syncTaskTrigger: Models.UpdateSyncTaskDto.syncTaskTrigger.MANUALLY,\n    organizationCode: 'steamory',\n    provisioningScope: {\n      all: true,\n      includeNewUsers: false\n    },\n    fieldMapping: [\n      {\n        expression: 'mobile',\n        targetKey: 'phone'\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/trigger-sync-task":{"post":{"operationId":"SyncCenterManagementController_triggerSyncTask","summary":"执行同步任务","description":"执行同步任务","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerSyncTaskDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerSyncTaskRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res2 = await managementClient.TriggerSyncTask(new TriggerSyncTaskDto { SyncTaskId = target.SyncTaskId });\r\n\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.TriggerSyncTaskDto;\nimport cn.authing.sdk.java.dto.TriggerSyncTaskRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class TriggerSyncTaskTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        TriggerSyncTaskDto reqDto = new TriggerSyncTaskDto();\n        reqDto.setSyncTaskId(1000);\n        TriggerSyncTaskRespDto response = client.triggerSyncTask(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.triggerSyncTask({\n    syncTaskId: 1000\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-sync-job":{"get":{"operationId":"SyncCenterManagementController_getSyncJob","summary":"获取同步作业详情","description":"获取同步作业详情","parameters":[{"name":"syncJobId","required":true,"in":"query","description":"同步作业 ID","example":1,"schema":{"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncJobSingleRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res2 = await managementClient.ListSyncJobs(new ListSyncJobsDto { SyncTaskId = target.SyncTaskId });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetSyncJobDto;\nimport cn.authing.sdk.java.dto.SyncJobSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetSyncJobTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetSyncJobDto reqDto = new GetSyncJobDto();\n        reqDto.setSyncJobId(1);\n        SyncJobSingleRespDto response = client.getSyncJob(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getSyncJob({\n    syncJobId: 1\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-sync-jobs":{"get":{"operationId":"SyncCenterManagementController_listSyncJobs","summary":"获取同步作业详情","description":"获取同步作业详情","parameters":[{"name":"syncTaskId","required":true,"in":"query","description":"同步任务 ID","example":1000,"schema":{"type":"number"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"syncTrigger","required":false,"in":"query","description":"同步任务触发类型：\n- `manually`: 手动触发执行\n- `timed`: 定时触发\n- `automatic`: 根据事件自动触发\n","example":"manually","schema":{"enum":["manually","timed","automatic"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncJobPaginatedRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListSyncJobsDto;\nimport cn.authing.sdk.java.dto.SyncJobPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListSyncJobsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListSyncJobsDto reqDto = new ListSyncJobsDto();\n        reqDto.setSyncTaskId(1000);\n        SyncJobPaginatedRespDto response = client.listSyncJobs(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listSyncJobs({\n    syncTaskId: 42,\n    page: 1,\n    limit: 10\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-sync-job-logs":{"get":{"operationId":"SyncCenterManagementController_listSyncJobLogs","summary":"获取同步作业详情","description":"获取同步作业详情","parameters":[{"name":"syncJobId","required":true,"in":"query","description":"同步作业 ID","example":1000,"schema":{"type":"number"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"success","required":false,"in":"query","description":"根据是否操作成功进行筛选","example":true,"schema":{"type":"boolean"}},{"name":"action","required":false,"in":"query","description":"根据操作类型进行筛选：\n- `CreateUser`: 创建用户\n- `UpdateUser`: 修改用户信息\n- `DeleteUser`: 删除用户\n- `UpdateUserIdentifier`: 修改用户唯一标志符\n- `ChangeUserDepartment`: 修改用户部门\n- `CreateDepartment`: 创建部门\n- `UpdateDepartment`: 修改部门信息\n- `DeleteDepartment`: 删除部门\n- `MoveDepartment`: 移动部门\n- `UpdateDepartmentLeader`: 同步部门负责人\n- `CreateGroup`: 创建分组\n- `UpdateGroup`: 修改分组\n- `DeleteGroup`: 删除分组\n- `Updateless`: 无更新\n    ","example":"CreateUser","schema":{"enum":["CreateUser","UpdateUser","DeleteUser","UpdateUserIdentifier","ChangeUserDepartment","CreateDepartment","UpdateDepartment","DeleteDepartment","MoveDepartment","UpdateDepartmentLeader","CreateGroup","UpdateGroup","DeleteGroup","Updateless"],"type":"string"}},{"name":"objectType","required":false,"in":"query","description":"操作对象类型:\n- `department`: 部门\n- `user`: 用户\n    ","example":"DEPARTMENT","schema":{"enum":["DEPARTMENT","USER"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerSyncTaskRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res2 = await managementClient.ListSyncJobs(new ListSyncJobsDto { SyncTaskId = target.SyncTaskId });\r\n\r\n            var target2 = res2.Data.List.First();\r\n            var res3 = await managementClient.GetSyncJob(new GetSyncJobDto { SyncJobId = target2.SyncJobId });\r\n\r\n            var dto = await managementClient.ListSyncJobLogs(new ListSyncJobLogsDto\r\n            {\r\n                SyncJobId = target2.SyncJobId,\r\n                Action = \"AUTHING_ACTION\"\r\n\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListSyncJobLogsDto;\nimport cn.authing.sdk.java.dto.TriggerSyncTaskRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListSyncJobLogsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListSyncJobLogsDto reqDto = new ListSyncJobLogsDto();\n        reqDto.setSyncJobId(1000);\n        TriggerSyncTaskRespDto response = client.listSyncJobLogs(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listSyncJobLogs({\n    syncJobId: 1000,\n    page: 1,\n    limit: 10,\n    success: true,\n    action: 'CreateUser',\n    objectType: 'DEPARTMENT'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-sync-risk-operations":{"get":{"operationId":"SyncCenterManagementController_listSyncRiskOperations","summary":"获取同步风险操作列表","description":"获取同步风险操作列表","parameters":[{"name":"syncTaskId","required":true,"in":"query","description":"同步任务 ID","example":1000,"schema":{"type":"number"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"status","required":false,"in":"query","description":"根据执行状态筛选","example":["SUCCESS","FAILED"],"schema":{"minItems":1,"maxItems":50,"type":"array","items":{"type":"string","enum":["PENDING","SUCCESS","FAILED","CANCELED","EXECUTING"]}}},{"name":"objectType","required":false,"in":"query","description":"根据操作对象类型，默认获取所有类型的记录：\n- `department`: 部门\n- `user`: 用户\n    ","example":["DEPARTMENT","USER"],"schema":{"type":"array","items":{"type":"string","enum":["DEPARTMENT","USER"]}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SyncRiskOperationPaginatedRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res = await managementClient.ListSyncRiskOperations(new ListSyncRiskOperationsDto { SyncTaskId = target.SyncTaskId });\r\n\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListSyncRiskOperationsDto;\nimport cn.authing.sdk.java.dto.SyncRiskOperationPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListSyncRiskOperationsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListSyncRiskOperationsDto reqDto = new ListSyncRiskOperationsDto();\n        reqDto.setSyncTaskId(1000);\n        SyncRiskOperationPaginatedRespDto response = client.listSyncRiskOperations(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listSyncRiskOperations({\n    syncTaskId: 1000,\n    page: 1,\n    limit: 10,\n    status: ['SUCCESS', 'FAILED'],\n    objectType: ['DEPARTMENT', 'USER']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/trigger-sync-risk-operations":{"post":{"operationId":"SyncCenterManagementController_triggerSyncRiskOperations","summary":"执行同步风险操作","description":"执行同步风险操作","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerSyncRiskOperationDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerSyncRiskOperationsRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res2 = await managementClient.ListSyncRiskOperations(new ListSyncRiskOperationsDto { SyncTaskId = target.SyncTaskId });\r\n\r\n            var target2 = res2.Data.List.Last();\r\n            var res3 = await managementClient.TriggerSyncRiskOperations(new TriggerSyncRiskOperationDto\r\n            {\r\n                SyncRiskOperationIds = new List<long>() { target2.SyncRiskOperationId }\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.TriggerSyncRiskOperationDto;\nimport cn.authing.sdk.java.dto.TriggerSyncRiskOperationsRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class TriggerSyncRiskOperationsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        TriggerSyncRiskOperationDto reqDto = new TriggerSyncRiskOperationDto();\n        reqDto.setSyncRiskOperationIds(Collections.singletonList(1000));\n        TriggerSyncRiskOperationsRespDto response = client.triggerSyncRiskOperations(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n"}}},"/api/v3/cancel-sync-risk-operation":{"post":{"operationId":"SyncCenterManagementController_cancelSyncRiskOperation","summary":"取消同步风险操作","description":"取消同步风险操作","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CancelSyncRiskOperationDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CancelSyncRiskOperationsRespDto"}}}}},"tags":["管理同步中心/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListSyncTasks(new ListSyncTasksDto { });\r\n\r\n            var target = res1.Data.List.Last();\r\n            var res2 = await managementClient.ListSyncRiskOperations(new ListSyncRiskOperationsDto { SyncTaskId = target.SyncTaskId });\r\n\r\n            var target2 = res2.Data.List.Last();\r\n            var res3 = await managementClient.CancelSyncRiskOperation(new CancelSyncRiskOperationDto\r\n            {\r\n                SyncRiskOperationIds = new List<long>() { target2.SyncRiskOperationId }\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CancelSyncRiskOperationDto;\nimport cn.authing.sdk.java.dto.CancelSyncRiskOperationsRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class CancelSyncRiskOperationTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CancelSyncRiskOperationDto reqDto = new CancelSyncRiskOperationDto();\n        reqDto.setSyncRiskOperationIds(Collections.singletonList(1000));\n        CancelSyncRiskOperationsRespDto response = client.cancelSyncRiskOperation(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.cancelSyncRiskOperation({\n    syncRiskOperationIds: [1, 2]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-management-token":{"post":{"operationId":"V3ManagementController_getManagementToken","x-authing-hidden-from-sdk":true,"summary":"获取 Access Token","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetManagementAccessTokenDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetManagementTokenRespDto"}}}}},"tags":["管理 Token/API 列表","鉴权机制/获取 Access Token"],"security":[{"bearer":[]}]}},"/api/v3/get-group":{"get":{"operationId":"GroupsManagementController_getGroup","summary":"获取分组详情","description":"通过分组 code，获取分组详情。","parameters":[{"name":"code","required":true,"in":"query","description":"分组 code","example":"分组1","schema":{"type":"string"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":false,"schema":{"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupSingleRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            GroupSingleRespDto dto = await managementClient.GetGroup(new GetGroupDto { Code = \"AUTHING_GROUP_CODE\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetGroupDto{\n\t\tCode: \"developer\"\n\t}\n\trespDto := client.GetGroup(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetGroupDto;\nimport cn.authing.sdk.java.dto.GroupSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetGroupTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetGroupDto reqDto = new GetGroupDto();\n        reqDto.setCode(\"code1\");\n        GroupSingleRespDto response = client.getGroup(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getGroup({\n    code: 'developer'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getGroup(array(\n    \"code\" => \"developer\"\n));\nprint_r($data);\n"}}},"/api/v3/list-groups":{"get":{"operationId":"GroupsManagementController_listGroups","summary":"获取分组列表","description":"获取分组列表，支持分页。","parameters":[{"name":"keywords","required":false,"in":"query","description":"搜索分组 code 或分组名称","example":"分组1","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"withMetadata","required":false,"in":"query","description":"是否展示元数据内容","example":false,"deprecated":true,"schema":{"type":"boolean"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":false,"schema":{"type":"boolean"}},{"name":"flatCustomData","required":false,"in":"query","description":"是否拍平扩展字段","schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupPaginatedRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            GroupPaginatedRespDto dto = await managementClient.ListGroups(new ListGroupsDto { Page = 1, Limit = 10 });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListGroupsDto{\n\t\tPage:     1,\n\t\tLimit:    10,\n\t}\n\trespDto := client.ListGroups(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GroupPaginatedRespDto;\nimport cn.authing.sdk.java.dto.ListGroupsDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListGroupsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GroupPaginatedRespDto response = client.listGroups(new ListGroupsDto());\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listGroups({\n    keywords: '分组1',\n    page: 1,\n    limit: 10\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listGroups(array(\n    \"page\" => 1,\n    \"limit\" => 10,\n));\nprint_r($data);\n"}}},"/api/v3/get-all-groups":{"get":{"operationId":"GroupsManagementController_getAllGroups","summary":"获取所有分组","description":"获取所有分组","parameters":[{"name":"fetchMembers","required":false,"in":"query","description":"是否获取成员列表","schema":{"default":false,"type":"boolean"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":false,"schema":{"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupListRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-group":{"post":{"operationId":"GroupsManagementController_createGroup","summary":"创建分组","description":"创建分组，一个分组必须包含分组名称与唯一标志符 code，且必须为一个合法的英文标志符，如 developers。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateGroupReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupSingleRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateGroupReqDto createGroupReqDto = new CreateGroupReqDto()\r\n            {\r\n                Name = \"开发者\",\r\n                Code = \"developer\",\r\n                Description = \"描述内容\"\r\n            };\r\n\r\n            GroupSingleRespDto dto = await managementClient.CreateGroup(createGroupReqDto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateGroupReqDto{\n\t\tCode: \"developer\",\n\t\tName: \"开发者\",\n\t\tDescription: \"描述内容\",\n\t}\n\trespDto := client.CreateGroup(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateGroupReqDto;\nimport cn.authing.sdk.java.dto.GroupSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CreateGroupTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateGroupReqDto reqDto = new CreateGroupReqDto();\n        reqDto.setDescription(\"描述内容\");\n        reqDto.setCode(\"developer\");\n        reqDto.setName(\"开发者\");\n        GroupSingleRespDto response = client.createGroup(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createGroup({\n    code: 'developer',\n    name: '开发者',\n    description: '描述内容'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createGroup(array(\n    \"code\" => \"developer\",\n    \"name\" => \"开发者\",\n    \"description\" => \"描述内容\",\n));\nprint_r($data);\n"}}},"/api/v3/create-or-update-group":{"post":{"operationId":"GroupsManagementController_createOrUpdateGroup","summary":"创建或修改分组","description":"不存在时则创建，存在时则进行更新。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateOrUpdateGroupReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateOrUpdateGroupRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-groups-batch":{"post":{"operationId":"GroupsManagementController_createGroupsBatch","summary":"批量创建分组","description":"批量创建分组，一个分组必须包含分组名称与唯一标志符 code，且必须为一个合法的英文标志符，如 developers。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateGroupBatchReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupListRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            List<CreateGroupReqDto> group = new List<CreateGroupReqDto>()\r\n                {\r\n                    new CreateGroupReqDto()\r\n                    {\r\n                        Name = \"AUTHING_GROUP_NAME\",\r\n                        Code = \"AUTHING_GROUP_CODE\" ,\r\n                        Description = \"AUTHING_DESCRIPTION\"\r\n                    }\r\n                };\r\n\r\n\r\n            CreateGroupBatchReqDto reqDto = new CreateGroupBatchReqDto()\r\n            {\r\n                List = group\r\n            };\r\n\r\n            GroupListRespDto dto = await managementClient.CreateGroupsBatch(reqDto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateGroupBatchReqDto{\n\t\tList: []dto.CreateGroupReqDto{\n\t\t\t{\n\t\t\t\tCode: \"developer\",\n\t\t\t\tName: \"开发者\",\n\t\t\t\tDescription: \"描述内容\",\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.CreateGroupsBatch(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateGroupBatchReqDto;\nimport cn.authing.sdk.java.dto.CreateGroupReqDto;\nimport cn.authing.sdk.java.dto.GroupListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CreateGroupsBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateGroupBatchReqDto reqDto = new CreateGroupBatchReqDto();\n        List<CreateGroupReqDto> list = new ArrayList<>();\n        CreateGroupReqDto groupReqDto = new CreateGroupReqDto();\n        groupReqDto.setName(\"开发者\");\n        groupReqDto.setCode(\"developer\");\n        groupReqDto.setDescription(\"描述内容\");\n        list.add(groupReqDto);\n        reqDto.setList(list);\n        GroupListRespDto response = client.createGroupsBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createGroupsBatch({\n    list: [\n      {\n        code: 'developer',\n        name: '开发者',\n        description: '描述内容'\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createGroupsBatch(array(\n    \"list\" => array(\n        array(\n            \"code\" => \"developer\",\n            \"name\" => \"开发者\",\n            \"description\" => \"描述内容\",\n\n        )\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/update-group":{"post":{"operationId":"GroupsManagementController_updateGroup","summary":"修改分组","description":"通过分组 code，修改分组，可以修改此分组的 code。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateGroupReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupSingleRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UpdateGroupReqDto dto = new UpdateGroupReqDto()\r\n            {\r\n                Name = \"AUTHING_GROUP_NAME\",\r\n                Code = \"AUTHING_GROUP_CODE\",\r\n                Description = \"AUTHING_DESCRIPTION\",\r\n                NewCode = \"AUTHING_GROUP_NEWCODE\"\r\n            };\r\n\r\n            GroupSingleRespDto groupSingle = await managementClient.UpdateGroup(dto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateGroupReqDto{\n\t\tDescription: \"新的描述内容\",\n\t\tCode:        \"developer\",\n\t}\n\trespDto := client.UpdateGroup(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GroupSingleRespDto;\nimport cn.authing.sdk.java.dto.UpdateGroupReqDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateGroupTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateGroupReqDto reqDto = new UpdateGroupReqDto();\n        reqDto.setCode(\"code1\");\n        reqDto.setName(\"开发者\");\n        reqDto.setDescription(\"内容描述\");\n        reqDto.setNewCode(\"code2\");\n        GroupSingleRespDto response = client.updateGroup(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateGroup({\n    code: 'developer',\n    name: '开发者',\n    description: '描述内容',\n    newCode: 'developer'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateGroup(array(\n    \"code\" => \"developer\",\n    \"description\" => \"新的描述内容\",\n));\nprint_r($data);\n"}}},"/api/v3/delete-groups-batch":{"post":{"operationId":"GroupsManagementController_deleteGroupsBatch","summary":"批量删除分组","description":"通过分组 code，批量删除分组。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteGroupsReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DeleteGroupsReqDto dto = new DeleteGroupsReqDto()\r\n            {\r\n                CodeList = new List<string> { \"AUTHING_GROUP_CODE\", \"AUTHING_GROUP_CODE2\" }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess = await managementClient.DeleteGroupsBatch(dto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteGroupsReqDto{\n\t\tCodeList: []string{\"developer\"},\n\t}\n\trespDto := client.DeleteGroupsBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteGroupsReqDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class DeleteGroupsBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteGroupsReqDto reqDto = new DeleteGroupsReqDto();\n        reqDto.setCodeList(Collections.singletonList(\"code1\"));\n        IsSuccessRespDto response = client.deleteGroupsBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteGroupsBatch({\n    codeList: ['code1']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteGroupsBatch(array(\n    \"codeList\" => array(\"developer\"),\n));\nprint_r($data);\n"}}},"/api/v3/add-group-members":{"post":{"operationId":"GroupsManagementController_addGroupMembers","summary":"添加分组成员","description":"添加分组成员，成员以用户 ID 数组形式传递。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AddGroupMembersReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AddGroupMembersReqDto dto = new AddGroupMembersReqDto()\r\n            {\r\n                Code = \"AUTHING_GROUP_CODE\",\r\n                UserIds = new List<string> { \"AUTHING_USERID\" }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess = await managementClient.AddGroupMembers(dto);\r\n\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t    reqDto := &dto.AddGroupMembersReqDto{\n        Code:    \"developer\",\n        UserIds: []string{\"6229ffaxxxxxxxxcade3e3d9\"},\n    }\n    respDto := client.AddGroupMembers(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.AddGroupMembersReqDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class AddGroupMembersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        AddGroupMembersReqDto reqDto = new AddGroupMembersReqDto();\n        reqDto.setUserIds(Collections.singletonList(\"6229ffaxxxxxxxxcade3e3d9\"));\n        reqDto.setCode(\"code1\");\n        IsSuccessRespDto response = client.addGroupMembers(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.addGroupMembers({\n    code: 'developer',\n    userIds: ['6229ffaxxxxxxxxcade3e3d9']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->addGroupMembers(array(\n    \"code\" => \"developer\",\n    \"userIds\" => array(\"6229ffaxxxxxxxxcade3e3d9\"),\n));\nprint_r($data);\n"}}},"/api/v3/remove-group-members":{"post":{"operationId":"GroupsManagementController_RemoveGroupMembers","summary":"批量移除分组成员","description":"批量移除分组成员，成员以用户 ID 数组形式传递。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveGroupMembersReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RemoveGroupMembersReqDto dto = new RemoveGroupMembersReqDto()\r\n            {\r\n                Code = \"AUTHING_GROUP_CODE\",\r\n                UserIds = new List<string> { \"AUTHING_USERID\" }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess = await managementClient.RemoveGroupMembers(dto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.RemoveGroupMembersReqDto{\n\t\tUserIds: []string{\"6229ffaxxxxxxxxcade3e3d9\"},\n\t\tCode:    \"developer\",\n\t}\n\trespDto := client.RemoveGroupMembers(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.RemoveGroupMembersReqDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class RemoveGroupMembersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        RemoveGroupMembersReqDto reqDto = new RemoveGroupMembersReqDto();\n        reqDto.setUserIds(Collections.singletonList(\"6229ffaxxxxxxxxcade3e3d9\"));\n        reqDto.setCode(\"developer\");\n        IsSuccessRespDto response = client.removeGroupMembers(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.removeGroupMembers({\n    code: 'developer',\n    userIds: ['6229ffaxxxxxxxxcade3e3d9']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->removeGroupMembers(array(\n    \"code\" => \"developer\",\n    \"userIds\" => array(\"6229ffaxxxxxxxxcade3e3d9\"),\n));\nprint_r($data);\n"}}},"/api/v3/list-group-members":{"get":{"operationId":"GroupsManagementController_ListGroupMembers","summary":"获取分组成员列表","description":"通过分组 code，获取分组成员列表，支持分页，可以获取自定义数据、identities、部门 ID 列表。","parameters":[{"name":"code","required":true,"in":"query","description":"分组 code","example":"developer","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserPaginatedRespDto isSuccess = await managementClient.ListGroupMembers(new ListGroupMembersDto { Code = \"AUTHING_GROUP_CODE\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListGroupMembersDto{\n\t\tCode:              \"developer\",\n\t\tPage:              1,\n\t\tLimit:             10,\n\t}\n\trespDto := client.ListGroupMembers(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListGroupMembersDto;\nimport cn.authing.sdk.java.dto.UserPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListGroupMembersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListGroupMembersDto reqDto = new ListGroupMembersDto();\n        reqDto.setCode(\"code1\");\n        UserPaginatedRespDto response = client.listGroupMembers(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listGroupMembers({\n    code: 'developer',\n    page: 1,\n    limit: 10,\n    withCustomData: true,\n    withIdentities: true,\n    withDepartmentIds: true\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listGroupMembers(array(\n    \"code\" => \"developer\",\n    \"page\" => 1,\n    \"limit\" => 10,\n));\nprint_r($data);\n"}}},"/api/v3/get-group-authorized-resources":{"get":{"operationId":"GroupsManagementController_getGroupAuthorizedResources","summary":"获取分组被授权的资源列表","description":"通过分组 code，获取分组被授权的资源列表，可以通过资源类型、权限分组 code 筛选。","parameters":[{"name":"code","required":true,"in":"query","description":"分组 code","example":"developer","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组(权限空间)的 Code","example":"default","schema":{"type":"string"}},{"name":"resourceType","required":false,"in":"query","description":"资源类型","schema":{"enum":["DATA","API","MENU","BUTTON","UI"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthorizedResourceListRespDto"}}}}},"tags":["管理用户分组/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AuthorizedResourceListRespDto dto = await managementClient.GetGroupAuthorizedResources(new GetGroupAuthorizedResourcesDto { Code = \"AUTHING_GROUP_CODE\", Namespace = \"AUTHING_NAMESPACE\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetGroupAuthorizedResourcesDto{\n\t\tCode: \"developer\",\n\t}\n\trespDto := client.GetGroupAuthorizedResources(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.AuthorizedResourceListRespDto;\nimport cn.authing.sdk.java.dto.GetGroupAuthorizedResourcesDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetGroupAuthorizedResourcesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetGroupAuthorizedResourcesDto reqDto = new GetGroupAuthorizedResourcesDto();\n        reqDto.setCode(\"code1\");\n        AuthorizedResourceListRespDto response = client.getGroupAuthorizedResources(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getGroupAuthorizedResources({\n    code: 'developer',\n    namespace: 'default',\n    resourceType: 'DATA'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getGroupAuthorizedResources(array(\n    \"code\" => \"developer\"\n));\nprint_r($data);\n"}}},"/api/v3/get-role":{"get":{"operationId":"RolesManagementController_getRole","summary":"获取角色详情","description":"通过权限分组内角色 code，获取角色详情。","parameters":[{"name":"code","required":true,"in":"query","description":"权限分组(权限空间)内角色的唯一标识符","example":"manager","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组(权限空间)的 Code","example":"default","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleSingleRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RoleSingleRespDto dto = await managementClient.GetRole(new GetRoleDto\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetRoleDto{\n\t\tCode: \"admin\",\n\t}\n\trespDto := client.GetRole(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetRoleDto;\nimport cn.authing.sdk.java.dto.RoleSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetRoleTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetRoleDto reqDto = new GetRoleDto();\n        reqDto.setCode(\"manager\");\n        RoleSingleRespDto response = client.getRole(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getRole({\n    code: 'manager',\n    namespace: 'default'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getRole(array(\n    \"code\" => \"admin\",\n));\nprint_r($data);\n"}}},"/api/v3/assign-role":{"post":{"operationId":"RolesManagementController_assignRole","summary":"单个角色批量授权","description":"通过权限分组内角色 code，分配角色，被分配者可以是用户或部门。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssignRoleDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            AssignRoleDto dto = new AssignRoleDto()\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n                Targets = new List<TargetDto>\r\n                    {\r\n                        new TargetDto\r\n                        {\r\n                            TargetIdentifier = \"AUTHING_USERID\",\r\n                            TargetType = TargetDto.targetType.USER\r\n                        }\r\n                    }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccessResp = await managementClient.AssignRole(dto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.AssignRoleDto{\n\t\tCode: \"manager\",\n\t\tTargets: []dto.TargetDto{\n\t\t\t{TargetType: \"USER\", TargetIdentifier: \"60b49eb83fxxxdb96f26e68\"},\n\t\t},\n\t}\n\trespDto := client.AssignRole(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.AssignRoleDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.TargetDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class AssignRoleTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        AssignRoleDto reqDto = new AssignRoleDto();\n        reqDto.setCode(\"code1\");\n        List<TargetDto> list = new ArrayList<>();\n        TargetDto targetDto = new TargetDto();\n        targetDto.setTargetType(TargetDto.TargetType.USER);\n        targetDto.setTargetIdentifier(\"6343b98b7cfxxx9366e9b7c\");\n        list.add(targetDto);\n        reqDto.setTargets(list);\n        IsSuccessRespDto response = client.assignRole(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.assignRole({\n    code: 'code1',\n    namespace: 'default',\n    targets: [\n      {\n        targetType: Models.TargetDto.targetType.USER,\n        targetIdentifier: '60b49eb83xxxxxxb96f26e68'\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->assignRole(array(\n    \"code\" => \"manager\",\n    \"targets\" => array(\n        array(\n            \"targetType\" => \"USER\",\n            \"targetIdentifier\" => \"60b49eb83fxxxdb96f26e68\",\n        )\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/assign-role-batch":{"post":{"operationId":"RolesManagementController_assignRoleBatch","summary":"批量分配角色","description":"批量分配角色，被分配者可以是用户，可以是部门","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssignRoleBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/revoke-role":{"post":{"operationId":"RolesManagementController_revokeRole","summary":"移除分配的角色","description":"通过权限分组内角色 code，移除分配的角色，被分配者可以是用户或部门。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RevokeRoleDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RevokeRoleDto dto = new RevokeRoleDto()\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n                Targets = new List<TargetDto>\r\n                    {\r\n                        new TargetDto\r\n                        {\r\n                            TargetIdentifier = \"AUTHING_USERID\",\r\n                            TargetType = TargetDto.targetType.USER\r\n                        }\r\n                    }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccessResp = await managementClient.RevokeRole(dto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.RevokeRoleDto{\n\t\tTargets: []dto.TargetDto{\n\t\t\t{\n\t\t\t\tTargetType: \"USER\",\n\t\t\t\tTargetIdentifier: \"60b49eb83fxxxdb96f26e68\"\n\t\t\t},\n\t\t},\n\t\tCode: \"manager\",\n\t}\n\trespDto := client.RevokeRole(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.RevokeRoleDto;\nimport cn.authing.sdk.java.dto.TargetDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RevokeRoleTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        RevokeRoleDto reqDto = new RevokeRoleDto();\n        reqDto.setCode(\"code1\");\n        List<TargetDto> list = new ArrayList<>();\n        TargetDto targetDto = new TargetDto();\n        targetDto.setTargetType(TargetDto.TargetType.USER);\n        targetDto.setTargetIdentifier(\"6343b98b7cfxxx9366e9b7c\");\n        list.add(targetDto);\n        reqDto.setTargets(list);\n        IsSuccessRespDto response = client.revokeRole(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.revokeRole({\n    code: 'code1',\n    namespace: 'default',\n    targets: [\n      {\n        targetType: Models.TargetDto.targetType.USER,\n        targetIdentifier: '60b49eb83xxxxxxb96f26e68'\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->revokeRole(array(\n    \"code\" => \"manager\",\n    \"targets\" => array(\n        array(\n            \"targetType\" => \"USER\",\n            \"targetIdentifier\" => \"60b49eb83fxxxdb96f26e68\",\n        )\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/revoke-role-batch":{"post":{"operationId":"RolesManagementController_revokeRoleBatch","summary":"批量移除分配的角色","description":"批量移除分配的角色，被分配者可以是用户，可以是部门","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RevokeRoleBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-role-authorized-resources":{"get":{"operationId":"RolesManagementController_getRoleAuthorizedResources","summary":"获取角色被授权的资源列表","description":"通过权限分组内角色 code，获取角色被授权的资源列表。","parameters":[{"name":"code","required":true,"in":"query","description":"权限分组内角色的唯一标识符","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}},{"name":"resourceType","required":false,"in":"query","description":"资源类型，如 数据、API、按钮、菜单","example":"DATA","schema":{"enum":["DATA","API","MENU","BUTTON","UI"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleAuthorizedResourcePaginatedRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RoleAuthorizedResourcePaginatedRespDto dto = await managementClient.GetRoleAuthorizedResources(new GetRoleAuthorizedResourcesDto\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n\r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetRoleAuthorizedResourcesDto{\n\t\tCode:         \"manager\",\n\t}\n\trespDto := client.GetRoleAuthorizedResources(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetRoleAuthorizedResourcesDto;\nimport cn.authing.sdk.java.dto.RoleAuthorizedResourcePaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetRoleAuthorizedResourcesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetRoleAuthorizedResourcesDto reqDto = new GetRoleAuthorizedResourcesDto();\n        reqDto.setCode(\"60b49eb83fd80axxx96f26e68\");\n        RoleAuthorizedResourcePaginatedRespDto response = client.getRoleAuthorizedResources(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getRoleAuthorizedResources({\n    code: '60b49ebxxxxxxadb96f26e68',\n    namespace: 'default',\n    resourceType: 'DATA'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getRoleAuthorizedResources(array(\n    \"code\" => \"manager\",\n));\nprint_r($data);\n"}}},"/api/v3/list-role-members":{"get":{"operationId":"RolesManagementController_listRoleMembers","summary":"获取角色成员列表","description":"通过权限分组内内角色 code，获取角色成员列表，支持分页，可以选择或获取自定义数据、identities 等。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"withCustomData","required":false,"in":"query","description":"是否获取自定义数据","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withIdentities","required":false,"in":"query","description":"是否获取 identities","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"withDepartmentIds","required":false,"in":"query","description":"是否获取部门 ID 列表","example":true,"schema":{"default":false,"type":"boolean"}},{"name":"code","required":true,"in":"query","description":"权限分组内角色的唯一标识符","example":"manager","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UserPaginatedRespDto dto = await managementClient.ListRoleMembers(new ListRoleMembersDto\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListRoleMembersDto{\n\t\tCode:              \"manager\",\n\t}\n\trespDto := client.ListRoleMembers(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListRoleMembersDto;\nimport cn.authing.sdk.java.dto.UserPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListRoleMembersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListRoleMembersDto reqDto = new ListRoleMembersDto();\n        reqDto.setCode(\"manager\");\n        UserPaginatedRespDto response = client.listRoleMembers(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listRoleMembers({\n    code: 'manager',\n    page: 1,\n    limit: 10,\n    withCustomData: true,\n    withIdentities: true,\n    withDepartmentIds: true,\n    namespace: 'default'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listRoleMembers(array(\n    \"code\" => \"manager\",\n));\nprint_r($data);\n"}}},"/api/v3/list-role-departments":{"get":{"operationId":"RolesManagementController_listRoleDepartments","summary":"获取角色的部门列表","description":"通过权限分组内角色 code，获取角色的部门列表，支持分页。","parameters":[{"name":"code","required":true,"in":"query","description":"权限分组内角色的唯一标识符","example":"manager","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code","example":"default","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleDepartmentListPaginatedRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RoleDepartmentListPaginatedRespDto dto = await managementClient.ListRoleDepartments(new ListRoleDepartmentsDto\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\"\r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListRoleDepartmentsDto{\n\t\tCode:      \"manager\",\n\t}\n\trespDto := client.ListRoleDepartments(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListRoleDepartmentsDto;\nimport cn.authing.sdk.java.dto.RoleDepartmentListPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListRoleDepartmentsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListRoleDepartmentsDto reqDto = new ListRoleDepartmentsDto();\n        reqDto.setCode(\"manager\");\n        RoleDepartmentListPaginatedRespDto response = client.listRoleDepartments(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listRoleDepartments({\n    code: 'manager',\n    namespace: 'default',\n    page: 1,\n    limit: 10\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listRoleDepartments(array(\n    \"code\" => \"manager\",\n));\nprint_r($data);\n"}}},"/api/v3/create-role":{"post":{"operationId":"RolesManagementController_createRole","summary":"创建角色","description":"通过权限分组（权限空间）内角色 code，创建角色，可以选择权限分组、角色描述、角色名称等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateRoleDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleSingleRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            RolePaginatedRespDto roleSingle = await managementClient.ListRoles(new ListRolesDto \r\n            {\r\n                Namespace = \"AUTHING_NAMESPACE\"\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateRoleDto{\n\t\tCode:        \"manager\",\n\t\tNamespace:   \"default\",\n\t\tDescription: \"this is manager\",\n\t}\n\trespDto := client.CreateRole(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateRoleDto;\nimport cn.authing.sdk.java.dto.RoleSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CreateRoleTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateRoleDto reqDto = new CreateRoleDto();\n        reqDto.setCode(\"manger\");\n        RoleSingleRespDto response = client.createRole(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createRole({\n    code: 'manager',\n    namespace: 'default',\n    description: 'this is manager'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createRole(array(\n    \"code\" => \"manager\",\n    \"namespace\" => \"default\",\n    \"description\" => \"this is manager\",\n));\nprint_r($data);\n"}}},"/api/v3/list-roles":{"get":{"operationId":"RolesManagementController_listRoles","summary":"获取角色列表","description":"获取角色列表，支持分页、支持根据权限分组（权限空间）筛选","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"keywords","required":false,"in":"query","description":"用于根据角色的 code 或者名称进行模糊搜索，可选。","example":"admin","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组(权限空间)的 code","example":"default","schema":{"default":"default","type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RolePaginatedRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListRolesDto{\n\t\tPage:      1,\n\t\tLimit:     10,\n\t}\n\trespDto := client.ListRoles(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListRolesDto;\nimport cn.authing.sdk.java.dto.RolePaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListRolesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        RolePaginatedRespDto response = client.listRoles(new ListRolesDto());\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listRoles({\n    keywords: 'admin',\n    namespace: 'default',\n    page: 1,\n    limit: 10\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listRoles(array(\n    \"page\" => 1,\n    \"limit\" => 10,\n));\nprint_r($data);\n"}}},"/api/v3/delete-roles-batch":{"post":{"operationId":"RolesManagementController_deleteRolesBatch","summary":"单个权限分组（权限空间）内删除角色","description":"单个权限分组（权限空间）内删除角色，可以批量删除。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteRoleDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateRoleDto dto = new CreateRoleDto()\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n                Description = \"AUTHING_DESCRIPTION\"\r\n            };\r\n\r\n            RoleSingleRespDto roleSingle = await managementClient.CreateRole(dto);\r\n\r\n            dto = new CreateRoleDto()\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE1\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n                Description = \"AUTHING_DESCRIPTION\"\r\n            };\r\n\r\n            roleSingle = await managementClient.CreateRole(dto);\r\n\r\n\r\n            DeleteRoleDto deleteRoleDto = new DeleteRoleDto()\r\n            {\r\n                CodeList = new List<string> { \"AUTHING_ROLE_CODE\", \"AUTHING_ROLE_CODE1\" },\r\n                Namespace = \"AUTHING_NAMESPACE\"\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess = await managementClient.DeleteRolesBatch(deleteRoleDto);\r\n\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteRoleDto{\n\t\tCodeList: []string{\"manager\"},\n\t}\n\trespDto := client.DeleteRolesBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteRoleDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class DeleteRolesBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteRoleDto reqDto = new DeleteRoleDto();\n        reqDto.setCodeList(Collections.singletonList(\"code1\"));\n        IsSuccessRespDto response = client.deleteRolesBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteRolesBatch({\n    codeList: ['code1', 'code2'],\n    namespace: 'default'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteRolesBatch(array(\n    \"codeList\" => array(\"manager\"),\n));\nprint_r($data);\n"}}},"/api/v3/create-roles-batch":{"post":{"operationId":"RolesManagementController_createRolesBatch","summary":"批量创建角色","description":"批量创建角色，可以选择权限分组、角色描述等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateRolesBatch"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n\r\n            CreateRolesBatch createRoleDto = new CreateRolesBatch()\r\n            {\r\n                List = new List<RoleListItem>\r\n                    {\r\n                        new RoleListItem\r\n                        {\r\n                            Code = \"AUTHING_ROLE_CODE\",\r\n                            Namespace = \"AUTHING_NAMESPACE\",\r\n                            Description = \"AUTHING_DESCRIPTION\"\r\n                        },\r\n                         new RoleListItem\r\n                        {\r\n                            Code = \"AUTHING_ROLE_CODE\",\r\n                            Namespace = \"AUTHING_NAMESPACE\",\r\n                            Description = \"AUTHING_DESCRIPTION\"\r\n                        }\r\n\r\n                    }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess = await managementClient.CreateRolesBatch(createRoleDto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateRolesBatch{\n\t\tList: []dto.RoleListItem{\n\t\t\t{\n\t\t\t\tCode:        \"my-role-code\",\n\t\t\t\tDescription: \"this is a description about the role\",\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.CreateRolesBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateRolesBatch;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.RoleListItem;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CreateRolesBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateRolesBatch reqDto = new CreateRolesBatch();\n        List<RoleListItem> list = new ArrayList<>();\n        RoleListItem item = new RoleListItem();\n        item.setCode(\"code1\");\n        list.add(item);\n        reqDto.setList(list);\n        IsSuccessRespDto response = client.createRolesBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createRolesBatch({\n    list: [\n      {\n        code: 'my-role-code',\n        description: 'this is a description about the role',\n        namespace: 'default'\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createRolesBatch(array(\n    \"list\" => array(\n        array(\n            \"code\" => \"my-role-code\",\n            \"description\" => \"this is a description about the role\",\n        )\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/update-role":{"post":{"operationId":"RolesManagementController_updateRole","summary":"修改角色","description":"通过权限分组(权限空间）内角色新旧 Code，修改角色，可以选择角色名称、角色描述等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateRoleDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n\r\n\r\n            UpdateRoleDto updateRoleDto = new UpdateRoleDto()\r\n            {\r\n                Code = \"AUTHING_ROLE_CODE\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n                Description = \"AUTHING_DESCRIPTION\"\r\n            };\r\n\r\n            IsSuccessRespDto isSuccessRespDto = await managementClient.UpdateRole(updateRoleDto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateRoleDto{\n\t\tCode:        \"manager\",\n\t\tDescription: \"new description\",\n\t}\n\trespDto := client.UpdateRole(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.UpdateRoleDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateRoleTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateRoleDto reqDto = new UpdateRoleDto();\n        reqDto.setCode(\"code1\");\n        reqDto.setNewCode(\"code2\");\n        IsSuccessRespDto response = client.updateRole(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateRole({\n    code: 'code1',\n    newCode: 'code2',\n    namespace: 'default',\n    description: 'this is description'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateRole(array(\n    \"code\" => \"manager\",\n    \"description\" => \"new description\",\n));\nprint_r($data);\n"}}},"/api/v3/multiple-namespace-delete-roles-batch":{"post":{"operationId":"RolesManagementController_deleteRoles","summary":"跨权限分组（空间）删除角色","description":"跨权限分组（空间）删除角色，可以批量删除。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteRoleBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/check-role-params":{"post":{"operationId":"RolesManagementController_checkParamsNamespace","summary":"校验角色 Code 或者名称是否可用","description":"通过用户池 ID、权限空间 Code和角色 Code,或者用户池 ID、权限空间名称和角色名称查询是否可用。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckRoleParamsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleCheckParamsRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-role-assignments":{"get":{"operationId":"RolesManagementController_listRoleAssignments","summary":"获取角色授权列表","description":"获取角色授权列表。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"query","required":false,"in":"query","description":"按角色 Code 或者角色名称查询","example":"示例应用","schema":{"type":"string"}},{"name":"roleCode","required":true,"in":"query","description":"角色 code,只能使用字母、数字和 -_，最多 50 字符","example":"code_1","schema":{"type":"string"}},{"name":"namespaceCode","required":false,"in":"query","description":"权限空间code","example":"","schema":{"type":"string"}},{"name":"targetType","required":false,"in":"query","description":"目标类型，接受用户，部门","example":["USER","ORG"],"schema":{"type":"array","items":{"type":"string","enum":["USER","ORG"]}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleListPageRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-admin-role":{"post":{"operationId":"RolesManagementController_createAdminRole","summary":"创建管理员角色","description":"通过角色 code、角色名称进行创建管理员角色，可以选择角色描述","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateAdminRoleDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleCheckParamsRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-admin-roles":{"post":{"operationId":"RolesManagementController_deleteAdminRolesBatch","summary":"删除管理员自定义角色","description":"删除管理员自定义角色，支持批量删除。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteAdminRoleDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理角色/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-ext-idp":{"get":{"operationId":"ExtIdpManagementController_listExtIdp","summary":"获取身份源列表","description":"获取身份源列表，可以指定 租户 ID 筛选。","parameters":[{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"appId","required":false,"in":"query","description":"应用 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpListPaginatedRespDto"}}}}},"tags":["管理身份源/API 列表","管理身份源/API 列表","管理租户身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ExtIdpListPaginatedRespDto dto = await managementClient.ListExtIdp(new ListExtIdpDto\r\n            {\r\n                AppId = \"AUTHING_APPID\",\r\n\r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListExtIdpDto{\n\t\tTenantId: \"\",\n\t\tAppId:    \"\",\n\t}\n\trespDto := client.ListExtIdp(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ExtIdpListPaginatedRespDto;\nimport cn.authing.sdk.java.dto.ListExtIdpDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListExtIdpTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ExtIdpListPaginatedRespDto response = client.listExtIdp(new ListExtIdpDto());\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listExtIdp({\n    tenantId: '60b49eb83fxxxxxx96f26e68',\n    appId: '6229ffaxxxxxxxxcade3e3d9'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listExtIdp();\nprint_r($data);\n"}}},"/api/v3/get-ext-idp":{"get":{"operationId":"ExtIdpManagementController_getExtIdp","summary":"获取身份源详情","description":"通过 身份源 ID，获取身份源详情，可以指定 租户 ID 筛选。","parameters":[{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"appId","required":false,"in":"query","description":"应用 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"id","required":true,"in":"query","description":"身份源 ID","example":"6268b0e5e4b9a0e8ffa8fd60","schema":{"type":"string"}},{"name":"type","required":false,"in":"query","description":"身份源类型","schema":{"enum":["social","enterprise"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpDetailSingleRespDto"}}}}},"tags":["管理身份源/API 列表","管理身份源/API 列表","管理租户身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ExtIdpDetailSingleRespDto dto = await managementClient.GetExtIdp(new GetExtIdpDto\r\n            {\r\n                Id = \"AUTHING_IDP_ID\",\r\n                AppId = \"AUTHING_APPID\"\r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetExtIdpDto{\n\t\tId: \"6268b0e5e4xxxxe8ffa8fd60\",\n\t}\n\trespDto := client.GetExtIdp(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ExtIdpDetailSingleRespDto;\nimport cn.authing.sdk.java.dto.GetExtIdpDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetExtIdpTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetExtIdpDto reqDto = new GetExtIdpDto();\n        reqDto.setId(\"6268b0e5e4b9a0xxffa8fd60\");\n        ExtIdpDetailSingleRespDto response = client.getExtIdp(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getExtIdp({\n    id: '6268b0e5e4xxxxxxffa8fd60',\n    tenantId: '6229ffaxxxxxxxxcade3e3d9',\n    appId: '60b49eb83fxxxxxx96f26e68',\n    type: 'social'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getExtIdp(array(\n    // 需要替换成真实的身份源 ID\n    \"id\" => \"6268b0e5e4xxxxe8ffa8fd60\",\n));\nprint_r($data);\n"}}},"/api/v3/create-ext-idp":{"post":{"operationId":"ExtIdpManagementController_createExtIdp","summary":"创建身份源","description":"创建身份源，可以设置身份源名称、连接类型、租户 ID 等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateExtIdpDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpSingleRespDto"}}}}},"tags":["管理身份源/API 列表","管理身份源/API 列表","管理租户身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateExtIdpDto createExtIdpDto = new CreateExtIdpDto()\r\n            {\r\n                Name = \"AUTHING_IDP_NAME\",\r\n                TenantId = \"AUTHING_TENANTID\",\r\n                Type = CreateExtIdpDto.type.AD\r\n\r\n            };\r\n\r\n            ExtIdpSingleRespDto dto = await managementClient.CreateExtIdp(createExtIdpDto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateExtIdpDto{\n\t\tName: \"exampleName\",\n\t\tType: \"wechat\",\n\t}\n\trespDto := client.CreateExtIdp(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateExtIdpDto;\nimport cn.authing.sdk.java.dto.ExtIdpSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CreateExtIdpTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateExtIdpDto reqDto = new CreateExtIdpDto();\n        reqDto.setType(CreateExtIdpDto.Type.OIDC);\n        reqDto.setName(\"exampleName\");\n        ExtIdpSingleRespDto response = client.createExtIdp(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createExtIdp({\n    name: 'exampleName',\n    type: Models.CreateExtIdpDto.type.AD,\n    tenantId: '60b49exxxxxadb96f26e68'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createExtIdp(array(\n    \"name\" => \"exampleName\",\n    \"type\" => \"wechat\",\n));\nprint_r($data);\n"}}},"/api/v3/update-ext-idp":{"post":{"operationId":"ExtIdpManagementController_updateExtIdp","summary":"更新身份源配置","description":"更新身份源配置，可以设置身份源 ID 与 名称。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateExtIdpDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpSingleRespDto"}}}}},"tags":["管理身份源/API 列表","管理身份源/API 列表","管理租户身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ExtIdpListPaginatedRespDto dto = await managementClient.ListExtIdp(new ListExtIdpDto\r\n            {\r\n                AppId = \"AUTHING_APPID\",\r\n\r\n            });\r\n\r\n            UpdateExtIdpDto updateExtIdpDto = new UpdateExtIdpDto()\r\n            {\r\n                Name = \"exampleNameUpdate\",\r\n                Id = dto.Data.List.First().Id,\r\n            };\r\n\r\n            ExtIdpSingleRespDto result = await managementClient.UpdateExtIdp(updateExtIdpDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateExtIdpDto{\n\t\tId:   \"60b49eb83xxxxadb96f26e68\",\n\t\tName: \"exampleName\",\n\t}\n\trespDto := client.UpdateExtIdp(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ExtIdpSingleRespDto;\nimport cn.authing.sdk.java.dto.UpdateExtIdpDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateExtIdpTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateExtIdpDto reqDto = new UpdateExtIdpDto();\n        reqDto.setId(\"60b49eb83fd80adb96f26e68\");\n        reqDto.setName(\"exampleName\");\n        ExtIdpSingleRespDto response = client.updateExtIdp(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateExtIdp({\n    name: 'exampleName',\n    id: '60b49exxxxxadb96f26e68'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateExtIdp(array(\n    \"name\" => \"exampleName\",\n    \"id\" => \"60b49eb83xxxxadb96f26e68\",\n));\nprint_r($data);\n"}}},"/api/v3/delete-ext-idp":{"post":{"operationId":"ExtIdpManagementController_deleteExtIdp","summary":"删除身份源","description":"通过身份源 ID，删除身份源。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteExtIdpDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理身份源/API 列表","管理身份源/API 列表","管理租户身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ExtIdpListPaginatedRespDto dto = await managementClient.ListExtIdp(new ListExtIdpDto\r\n            {\r\n                TenantId = \"AUTHING_TENANTID\",\r\n\r\n            });\r\n\r\n            DeleteExtIdpDto deleteExtIdpDto = new DeleteExtIdpDto()\r\n            {\r\n                Id = dto.Data.List.First().Id\r\n            };\r\n\r\n            IsSuccessRespDto result = await managementClient.DeleteExtIdp(deleteExtIdpDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteExtIdpDto{\n\t\tId: \"60b49eb83xxxxadb96f26e68\",\n\t}\n\trespDto := client.DeleteExtIdp(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteExtIdpDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class DeleteExtIdpTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteExtIdpDto reqDto = new DeleteExtIdpDto();\n        reqDto.setId(\"60b49eb83fd8xxxb96f26e68\");\n        IsSuccessRespDto response = client.deleteExtIdp(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteExtIdp({\n    id: '60b4xxxxxxd80adb96f26e68'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteExtIdp(array(\n    \"id\" => \"60b49eb83xxxxadb96f26e68\",\n));\nprint_r($data);\n"}}},"/api/v3/create-ext-idp-conn":{"post":{"operationId":"ExtIdpManagementController_createExtIdpConn","summary":"在某个已有身份源下创建新连接","description":"在某个已有身份源下创建新连接，可以设置身份源图标、是否只支持登录等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateExtIdpConnDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpConnDetailSingleRespDto"}}}}},"tags":["管理身份源/API 列表","管理身份源/API 列表","管理租户身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateExtIdpConnDto createExtIdpConnDto = new CreateExtIdpConnDto()\r\n            {\r\n                ExtIdpId = \"AUTHING_EXTIDPID\",\r\n                DisplayName = \"AUTHING_DISPLAYNAME\",\r\n                Identifier = \"AUTHING_IDENTIFIER\",\r\n                LoginOnly = false,\r\n                Logo = \"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png\",\r\n                Type = CreateExtIdpConnDto.type.GITHUB,\r\n                Fields = new { clientId = \"AUTHING_APPID\", clientSecret = \"AUTHING_APPSECRET \" }\r\n            };\r\n            ExtIdpConnDetailSingleRespDto dto = await managementClient.CreateExtIdpConn(createExtIdpConnDto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateExtIdpConnDto{\n\t\tExtIdpId:    \"60b49eb83fd80adb96f26e68\",\n\t\tType:        \"ad\",\n\t\tIdentifier:  \"60b49eb83fd80adb96f26e68\",\n\t\tLoginOnly:   false,\n\t\tLogo:        \"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png\",\n\t\tDisplayName: \"登录页\",\n\t\tFields: map[string]interface{}{\n\t\t\t\"clientId\":     \"身份源上的 clientId\",\n\t\t\t\"clientSecret\": \"身份源上的 clientSecret\",\n\t\t},\n\t}\n\trespDto := client.CreateExtIdpConn(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateExtIdpConnDto;\nimport cn.authing.sdk.java.dto.ExtIdpConnDetailSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CreateExtIdpConnTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateExtIdpConnDto reqDto = new CreateExtIdpConnDto();\n        reqDto.setFields(new Object());\n        reqDto.setExtIdpId(\"60b49eb83fxxxxxdb96f26e68\");\n        reqDto.setIdentifier(\"60b49eb83fd80adb96f26e68\");\n        reqDto.setType(CreateExtIdpConnDto.Type.OIDC);\n        reqDto.setDisplayName(\"登录页\");\n        ExtIdpConnDetailSingleRespDto response = client.createExtIdpConn(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createExtIdpConn({\n    extIdpId: '6229ffaxxxxxxxxcade3e3d9',\n    type: Models.CreateExtIdpConnDto.type.AD,\n    identifier: '60b49eb83xxxxxxb96f26e68',\n    loginOnly: false,\n    logo: 'https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png',\n    displayName: '登录页',\n    fields: {\n      clientId: '身份源上的\tclientId',\n      clientSecret: '身份源上的\tclientSecret'\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createExtIdpConn(array(\n    \"extIdpId\" => \"60b49eb83fxxxdb96f26e68\",\n    \"type\" => \"ad\",\n    \"identifier\" => \"60b49eb83fxxxdb96f26e68\",\n    \"loginOnly\" => false,\n    \"logo\" => \"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png\",\n    \"displayName\" => \"登录页\",\n    \"fields\" => array(\n        \"clientId\"=> \"身份源上的 clientId\",\n        \"clientSecret\"=> \"身份源上的 clientSecret\"\n    ),\n));\nprint_r($data);\n"}}},"/api/v3/update-ext-idp-conn":{"post":{"operationId":"ExtIdpManagementController_updateExtIdpConn","summary":"更新身份源连接","description":"更新身份源连接，可以设置身份源图标、是否只支持登录等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateExtIdpConnDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpConnDetailSingleRespDto"}}}}},"tags":["管理身份源/API 列表","管理身份源/API 列表","管理租户身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            UpdateExtIdpConnDto createExtIdpConnDto = new UpdateExtIdpConnDto()\r\n            {\r\n                DisplayName = \"AUTHING_DISPLAYNAME\",\r\n                LoginOnly = false,\r\n                Fields = new { clientId = \"AUTHING_APPID\", clientSecret = \"AUTHING_APPSECRET \" },\r\n                Logo = \"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png\",\r\n                Id = \"AUTHING_IDPCONN_ID\",\r\n            };\r\n\r\n            ExtIdpConnDetailSingleRespDto dto =await managementClient.UpdateExtIdpConn(createExtIdpConnDto);\r\n        \r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateExtIdpConnDto{\n\t\tId:          \"60b49eb83xxxxadb96f26e68\",\n\t\tDisplayName: \"exampleName\",\n\t\tFields: map[string]interface{}{\n\t\t\t\"clientId\": \"clientId\",\n\t\t},\n\t\tLogo:      \"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png\",\n\t\tLoginOnly: false,\n\t}\n\trespDto := client.UpdateExtIdpConn(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ExtIdpConnDetailSingleRespDto;\nimport cn.authing.sdk.java.dto.UpdateExtIdpConnDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateExtIdpConnTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateExtIdpConnDto reqDto = new UpdateExtIdpConnDto();\n        reqDto.setFields(new Object());\n        reqDto.setDisplayName(\"exampleName\");\n        reqDto.setId(\"60b49eb83xxx0adb96f26e68\");\n        ExtIdpConnDetailSingleRespDto response = client.updateExtIdpConn(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateExtIdpConn({\n    id: '60b49ebxxxxxxadb96f26e68',\n    displayName: 'exampleName',\n    fields: {\n      clientId: 'clientId'\n    },\n    logo: 'https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png',\n    loginOnly: false\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateExtIdpConn(array(\n    \"id\" => \"60b49eb83xxxxadb96f26e68\",\n    \"displayName\" => \"exampleName\",\n    \"fields\" => array(\n        \"clientId\"=> \"clientId\"\n    ),\n    \"logo\" => \"https://files.authing.co/authing-console/social-connections/icon_xiaochengxu@2x.png\",\n    \"loginOnly\" => false,\n));\nprint_r($data);\n"}}},"/api/v3/delete-ext-idp-conn":{"post":{"operationId":"ExtIdpManagementController_deleteExtIdpConn","summary":"删除身份源连接","description":"通过身份源连接 ID，删除身份源连接。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteExtIdpConnDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理身份源/API 列表","管理身份源/API 列表","管理租户身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DeleteExtIdpConnDto enableExtIdpConnDto = new DeleteExtIdpConnDto()\r\n            {\r\n                Id = \"ATUHING_IDP_CONN_ID\",\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.DeleteExtIdpConn(enableExtIdpConnDto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteExtIdpConnDto{\n\t\tId: \"60b49eb83fxxxdb96f26e68\",\n\t}\n\trespDto := client.DeleteExtIdpConn(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteExtIdpConnDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class DeleteExtIdpConnTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteExtIdpConnDto reqDto = new DeleteExtIdpConnDto();\n        reqDto.setId(\"60b49eb8xxx0adb96f26e68\");\n        IsSuccessRespDto response = client.deleteExtIdpConn(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteExtIdpConn({\n    id: '60b49ebxxxxxxadb96f26e68'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteExtIdpConn(array(\n    \"id\" => \"60b49eb83fxxxdb96f26e68\",\n));\nprint_r($data);\n"}}},"/api/v3/change-ext-idp-conn-state":{"post":{"operationId":"ExtIdpManagementController_changeExtIdpConnState","summary":"身份源连接开关","description":"身份源连接开关，可以打开或关闭身份源连接。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangeExtIdpConnStateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理身份源/API 列表","管理身份源/API 列表","管理租户身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ChangeExtIdpConnStateDto{\n\t\tId:      \"60b49eb83fxxxdb96f26e68\",\n\t\tEnabled: false,\n\t\tAppId:   \"60b49eb83fxxxdb96f26e68\",\n\t}\n\trespDto := client.ChangeExtIdpConnState(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ChangeExtIdpConnStateDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class ChangeExtIdpConnStateTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ChangeExtIdpConnStateDto reqDto = new ChangeExtIdpConnStateDto();\n        reqDto.setAppId(\"60b49eb83fxx0adb96f26e68\");\n        reqDto.setAppIds(Collections.singletonList(\"60b49eb83fxx0adb96f26e68\"));\n        reqDto.setEnabled(Boolean.TRUE);\n        reqDto.setId(\"60b49eb83fdxxx96f26e68\");\n        IsSuccessRespDto response = client.changeExtIdpConnState(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.changeExtIdpConnState({\n    id: '60b49ebxxxxxadb96f26e68',\n    enabled: false,\n    appId: '6229ffaxxxxxxxxcade3e3d9',\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->changeExtIdpConnState(array(\n    \"id\" => \"60b49eb83fxxxdb96f26e68\",\n    \"enabled\" => false,\n    \"appId\" => \"60b49eb83fxxxdb96f26e68\",\n));\nprint_r($data);\n"}}},"/api/v3/change-ext-idp-conn-association-state":{"post":{"operationId":"ExtIdpManagementController_changeExtIdpConnAssociationState","summary":"租户关联身份源","description":"租户可以关联或取消关联身份源连接。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangeExtIdpAssociationStateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理身份源/API 列表","管理身份源/API 列表","管理租户身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ChangeExtIdpAssociationStateDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ChangeExtIdpConnAssociationStateTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ChangeExtIdpAssociationStateDto reqDto = new ChangeExtIdpAssociationStateDto();\n        reqDto.setAssociation(Boolean.TRUE);\n        reqDto.setId(\"60b49eb8xxx0adb96f26e68\");\n        IsSuccessRespDto response = client.changeExtIdpConnAssociationState(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.changeExtIdpConnAssociationState({\n    id: '60b49ebxxxxxadb96f26e68',\n    association: false,\n    tenantId: '63521838xxxxx4c7214786a7'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-tenant-ext-idp":{"get":{"operationId":"ExtIdpManagementController_listTenantExtIdp","summary":"租户控制台获取身份源列表","description":"在租户控制台内获取身份源列表，可以根据 应用 ID 筛选。","parameters":[{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"appId","required":false,"in":"query","description":"应用 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"type","required":false,"in":"query","description":"身份源类型","schema":{"enum":["social","enterprise"],"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpListPaginatedRespDto"}}}}},"tags":["管理身份源/API 列表","管理身份源/API 列表","管理租户身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.ListTenantExtIdp(new ListTenantExtIdpDto\r\n            {\r\n                AppId = \"AUTHING_APPID\",\r\n                TenantId = \"AUTHING_TENANT_ID\",\r\n                Type = \"Github\"\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ExtIdpListPaginatedRespDto;\nimport cn.authing.sdk.java.dto.ListTenantExtIdpDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListTenantExtIdpTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ExtIdpListPaginatedRespDto response = client.listTenantExtIdp(new ListTenantExtIdpDto());\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listTenantExtIdp({\n    tenantId: '6229ffaxxxxxxxxcade3e3d9',\n    appId: '60b49eb8xxxxxx0adb96f26e68',\n    type: 'social',\n    page: 1,\n    limit: 10\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/ext-idp-conn-apps":{"get":{"operationId":"ExtIdpManagementController_extIdpConnStateByApps","summary":"身份源下应用的连接详情","description":"在身份源详情页获取应用的连接情况","parameters":[{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"appId","required":false,"in":"query","description":"应用 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"id","required":true,"in":"query","description":"身份源 ID","example":"6268b0e5e4b9a0e8ffa8fd60","schema":{"type":"string"}},{"name":"type","required":false,"in":"query","description":"身份源类型","schema":{"enum":["social","enterprise"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtIdpListPaginatedRespDto"}}}}},"tags":["管理身份源/API 列表","管理租户身份源/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.ExtIdpConnStateByApps(new ExtIdpConnAppsDto\r\n            {\r\n                AppId = \"AUTHING_ID\",\r\n                Id = \"AUTHING_IDP_CONN_ID\",\r\n                TenantId = \"AUTHING_TENENT_ID\",\r\n                Type = \"Github\"\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ExtIdpConnAppsDto;\nimport cn.authing.sdk.java.dto.ExtIdpListPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ExtIdpConnStateByAppsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ExtIdpConnAppsDto reqDto = new ExtIdpConnAppsDto();\n        reqDto.setId(\"6268b0exxxa0e8ffa8fd60\");\n        ExtIdpListPaginatedRespDto response = client.extIdpConnStateByApps(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.extIdpConnStateByApps({\n    id: '60b49ebxxxxxadb96f26e68',\n    appId: '6229ffaxxxxxxxxcade3e3d9',\n    tenantId: '63522091edxxxxxxde92430',\n    type: 'social'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-user-base-fields":{"get":{"operationId":"CustomFieldsManagementController_getUserBaseFields","summary":"获取用户内置字段列表","description":"获取用户内置的字段列表","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CustomFieldListRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.GetUserBaseFields();\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\trespDto := client.GetUserBaseFields()\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CustomFieldListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserBaseFieldsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CustomFieldListRespDto response = client.getUserBaseFields();\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserBaseFields();\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getUserBaseFields();\nprint_r($data);\n"}}},"/api/v3/list-user-base-fields":{"get":{"operationId":"CustomFieldsManagementController_listUserBaseFields","summary":"获取用户内置字段列表","description":"获取用户内置的字段列表","parameters":[{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"xxxx","schema":{"type":"string"}},{"name":"targetType","required":true,"in":"query","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ;该接口暂不支持分组(GROUP)","example":"USER","schema":{"enum":["USER","ROLE","GROUP","DEPARTMENT"],"type":"string"}},{"name":"dataType","required":true,"in":"query","description":"字段类型","example":"STRING","schema":{"enum":["STRING","NUMBER","DATETIME","BOOLEAN","OBJECT","SELECT"],"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"userVisible","required":false,"in":"query","description":"用户是否可见","schema":{"type":"boolean"}},{"name":"adminVisible","required":false,"in":"query","description":"管理员是否可见","schema":{"type":"boolean"}},{"name":"accessControl","required":false,"in":"query","description":"访问控制","schema":{"type":"boolean"}},{"name":"keyword","required":false,"in":"query","description":"搜索关键词","schema":{"type":"string"}},{"name":"lang","required":false,"in":"query","description":"搜索语言","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListCistomFieldsResDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/set-user-base-fields":{"post":{"operationId":"CustomFieldsManagementController_setUserBaseFields","summary":"修改用户内置字段配置","description":"修改用户内置字段配置，内置字段不允许修改数据类型、唯一性。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetUserBaseFieldsReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CustomFieldListRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.SetUserBaseFields(new SetUserBaseFieldsReqDto\r\n            {\r\n                List = new List<SetUserBaseFieldDto>\r\n                {\r\n                    new SetUserBaseFieldDto { Key=\"nickname\",Label=\"昵称修改\"}\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.SetUserBaseFieldsReqDto{\n\t\tList: []dto.SetUserBaseFieldDto{\n\t\t\t{\n\t\t\t\tKey: \"nickname\",\n\t\t\t\tLabel: \"显示名称\"\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.SetUserBaseFields(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CustomFieldListRespDto;\nimport cn.authing.sdk.java.dto.SetUserBaseFieldDto;\nimport cn.authing.sdk.java.dto.SetUserBaseFieldsReqDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SetUserBaseFieldsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        SetUserBaseFieldsReqDto reqDto = new SetUserBaseFieldsReqDto();\n        List<SetUserBaseFieldDto> list = new ArrayList<>();\n        SetUserBaseFieldDto fieldDto = new SetUserBaseFieldDto();\n        fieldDto.setKey(\"key\");\n        list.add(fieldDto);\n        reqDto.setList(list);\n        CustomFieldListRespDto response = client.setUserBaseFields(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.setUserBaseFields({\n    list: [\n      {\n        key: 'school',\n        label: '学校',\n        description: '学校',\n        userEditable: false,\n        visibleInAdminConsole: true,\n        visibleInUserCenter: true,\n        i18n: {\n          label: {\n            'zh-CN': {\n              enabled: false,\n              value: '中文'\n            },\n            'en-US': {\n              enabled: false,\n              value: '英文'\n            },\n            'zh-TW': {\n              enabled: false,\n              value: '繁体'\n            },\n            'ja-JP': {\n              enabled: false,\n              value: '日文'\n            }\n          }\n        }\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->setUserBaseFields(\n    array(\n        \"list\" => array(\n            array(\n                \"key\" => \"nickname\",\n                \"label\" => \"显示名称\"\n            )\n        )\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-custom-fields":{"get":{"operationId":"CustomFieldsManagementController_getCustomFields","summary":"获取自定义字段列表","description":"通过主体类型，获取用户、部门或角色的自定义字段列表。","parameters":[{"name":"targetType","required":true,"in":"query","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ;该接口暂不支持分组(GROUP)","example":"USER","schema":{"enum":["USER","ROLE","GROUP","DEPARTMENT"],"type":"string"}},{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"642c1df417c2d8a80d744c1d","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CustomFieldListRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CustomFieldListRespDto dto =await managementClient.GetCustomFields(new GetCustomFieldsDto { TargetType = \"USER\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetCustomFieldsDto{\n\t\tTargetType: \"USER\",\n\t}\n\trespDto := client.GetCustomFields(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CustomFieldListRespDto;\nimport cn.authing.sdk.java.dto.GetCustomFieldsDto;\nimport cn.authing.sdk.java.dto.TargetDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetCustomFieldsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetCustomFieldsDto reqDto = new GetCustomFieldsDto();\n        reqDto.setTargetType(TargetDto.TargetType.USER.getValue());\n        CustomFieldListRespDto response = client.getCustomFields(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getCustomFields({\n    targetType: 'USER'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getCustomFields(\n    array(\n        \"targetType\" => \"USER\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/list-custom-fields":{"get":{"operationId":"CustomFieldsManagementController_listCustFields","summary":"获取自定义字段列表","description":"通过主体类型，获取用户、部门或角色的自定义字段列表。","parameters":[{"name":"tenantId","required":false,"in":"query","description":"租户 ID","example":"xxxx","schema":{"type":"string"}},{"name":"targetType","required":true,"in":"query","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ;该接口暂不支持分组(GROUP)","example":"USER","schema":{"enum":["USER","ROLE","GROUP","DEPARTMENT"],"type":"string"}},{"name":"dataType","required":true,"in":"query","description":"字段类型","example":"STRING","schema":{"enum":["STRING","NUMBER","DATETIME","BOOLEAN","OBJECT","SELECT"],"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"userVisible","required":false,"in":"query","description":"用户是否可见","schema":{"type":"boolean"}},{"name":"adminVisible","required":false,"in":"query","description":"管理员是否可见","schema":{"type":"boolean"}},{"name":"accessControl","required":false,"in":"query","description":"访问控制","schema":{"type":"boolean"}},{"name":"keyword","required":false,"in":"query","description":"搜索关键词","schema":{"type":"string"}},{"name":"lang","required":false,"in":"query","description":"搜索语言","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListCistomFieldsResDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/set-custom-fields":{"post":{"operationId":"CustomFieldsManagementController_setCustomFields","summary":"创建/修改自定义字段定义","description":"创建/修改用户、部门或角色自定义字段定义，如果传入的 key 不存在则创建，存在则更新。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetCustomFieldsReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CustomFieldListRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            SetCustomFieldsReqDto setCustomFieldsReqDto = new SetCustomFieldsReqDto()\r\n            {\r\n                List = new List<SetCustomFieldDto>()\r\n                    {\r\n                        new SetCustomFieldDto()\r\n                        {\r\n                            TargetType=SetCustomFieldDto.targetType.USER,\r\n                           DataType = SetCustomFieldDto.dataType.STRING,\r\n                           Description = \"DESCRIPTION\",\r\n                           Key = \"AUTHING_KEY\",\r\n                           Label = \"AUTHING_LABEL\",\r\n                           Encrypted=false,\r\n                           Options = new List<CustomFieldSelectOption>\r\n                           {\r\n                                new CustomFieldSelectOption\r\n                                {\r\n                                    Label = \"AUTHING_LABEL\", Value = \"ATUHING_VALUE\"\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n            };\r\n\r\n            CustomFieldListRespDto dto =await managementClient.SetCustomFields(setCustomFieldsReqDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.SetCustomFieldsReqDto{\n\t\tList: []dto.SetCustomFieldDto{\n\t\t\t{\n\t\t\t\tTargetType: \"USER\",\n\t\t\t\tKey:        \"school\",\n\t\t\t\tDataType: \"ENUM\",\n\t\t\t\tLabel: \"学校\",\n\t\t\t\tDescription: \"学校\",\n\t\t\t\tEncrypted: false,\n\t\t\t\tIsUnique: false,\n\t\t\t\tUserEditable: false,\n\t\t\t\tVisibleInAdminConsole: true,\n\t\t\t\tVisibleInUserCenter: true,\n\t\t\t\tOptions: []dto.CustomFieldSelectOption{\n\t\t\t\t\t{\n\t\t\t\t\t\tValue: \"hust\",\n\t\t\t\t\t\tLabel: \"华中科技大学\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.SetCustomFields(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CustomFieldListRespDto;\nimport cn.authing.sdk.java.dto.SetCustomFieldDto;\nimport cn.authing.sdk.java.dto.SetCustomFieldsReqDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SetCustomFieldsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        SetCustomFieldsReqDto reqDto = new SetCustomFieldsReqDto();\n        List<SetCustomFieldDto> list = new ArrayList<>();\n        SetCustomFieldDto fieldDto = new SetCustomFieldDto();\n        fieldDto.setKey(\"school\");\n        fieldDto.setTargetType(SetCustomFieldDto.TargetType.USER);\n        list.add(fieldDto);\n        reqDto.setList(list);\n        CustomFieldListRespDto response = client.setCustomFields(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.setCustomFields({\n    list: [\n      {\n        targetType: Models.CustomFieldDto.targetType.USER,\n        key: 'school',\n        dataType: Models.CustomFieldDto.dataType.STRING,\n        label: '学校',\n        description: '学校',\n        encrypted: false,\n        isUnique: false,\n        userEditable: false,\n        visibleInAdminConsole: true,\n        visibleInUserCenter: true,\n        options: [\n          {\n            value: 'hust',\n            label: '华中科技大学'\n          }\n        ],\n        i18n: {\n          label: {\n            'zh-CN': {\n              enabled: false,\n              value: '中文'\n            },\n            'en-US': {\n              enabled: false,\n              value: '英文'\n            },\n            'zh-TW': {\n              enabled: false,\n              value: '繁体'\n            },\n            'ja-JP': {\n              enabled: false,\n              value: '日文'\n            }\n          }\n        }\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->setCustomFields(\n    array(\n        \"list\" => array(\n            array(\n                \"targetType\" => \"USER\",\n                \"key\" => \"school\",\n                \"dataType\" => \"ENUM\",\n                \"label\" => \"学校\",\n                \"description\" => \"学校\",\n                \"encrypted\" => false,\n                \"isUnique\" => false,\n                \"userEditable\" => false,\n                \"visibleInAdminConsole\" => true,\n                \"visibleInUserCenter\" => true,\n                \"options\" => array(\n                    array(\n                        \"value\" => \"hust\",\n                        \"label\" => \"华中科技大学\",\n                    )\n                )\n            )\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/delete-custom-fields":{"post":{"operationId":"CustomFieldsManagementController_deleteCustomFields","summary":"删除自定义字段定义","description":"删除用户、部门或角色自定义字段定义。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteCustomFieldsReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/set-custom-data":{"post":{"operationId":"CustomFieldsManagementController_setCustomData","summary":"设置自定义字段的值","description":"给用户、角色或部门设置自定义字段的值，如果存在则更新，不存在则创建。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetCustomDataReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            SetCustomDataReqDto setCustomFieldsReqDto = new SetCustomDataReqDto()\r\n            {\r\n                TargetType = SetCustomDataReqDto.targetType.USER,\r\n                TargetIdentifier = \"AUTHING_TARGETIDENTIFIER\",\r\n                Namespace = \"AUTHING_NAMESPACE\",\r\n                List = new List<SetCustomDataDto>()\r\n                    {\r\n                        new SetCustomDataDto()\r\n                        {\r\n\r\n                           Key = \"AUTHING_KEY\",\r\n                           Value=\"AUTHING_VALUE\"\r\n                        }\r\n                    }\r\n            };\r\n\r\n            IsSuccessRespDto isSuccess =await managementClient.SetCustomData(setCustomFieldsReqDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.SetCustomDataReqDto{\n\t\tList: []dto.SetCustomDataDto{\n\t\t\t{\n\t\t\t\tKey: \"school\",\n\t\t\t\tValue: \"pku\",\n\t\t\t},\n\t\t},\n\t\tTargetIdentifier: \"xxxxxxxxx\",\n\t\tTargetType:       \"USER\",\n\t\tNamespace:        \"default\",\n\t}\n\trespDto := client.SetCustomData(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.SetCustomDataDto;\nimport cn.authing.sdk.java.dto.SetCustomDataReqDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class SetCustomDataTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        SetCustomDataReqDto reqDto = new SetCustomDataReqDto();\n        List<SetCustomDataDto> list = new ArrayList<>();\n        SetCustomDataDto dataDto = new SetCustomDataDto();\n        dataDto.setKey(\"school\");\n        dataDto.setValue(\"pku\");\n        list.add(dataDto);\n        reqDto.setList(list);\n        reqDto.setTargetType(SetCustomDataReqDto.TargetType.USER);\n        reqDto.setTargetIdentifier(\"6343b98b7cfxxx9366e9b7c\");\n        IsSuccessRespDto response = client.setCustomData(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.setCustomData({\n    targetType: Models.CustomFieldDto.targetType.USER,\n    targetIdentifier: 'userId1',\n    namespace: 'default',\n    list: [\n      {\n        key: 'school',\n        value: 'pku'\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->setCustomData(\n    array(\n        \"targetType\" => \"USER\",\n        // 需要替换成真实的用户 ID\n        \"targetIdentifier\" => \"xxxxxxxxx\",\n        \"namespace\" => \"default\",\n        \"list\" => array(\n            array(\n                \"key\" => \"school\",\n                \"value\" => \"pku\",\n            )\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-custom-data":{"get":{"operationId":"CustomFieldsManagementController_getCustomData","summary":"获取用户、分组、角色、组织机构的自定义字段值","description":"通过筛选条件，获取用户、分组、角色、组织机构的自定义字段值。","parameters":[{"name":"tenantId","required":true,"in":"query","description":"租户 ID","example":"642c1df417c2d8a80d744c1d","schema":{"type":"string"}},{"name":"targetType","required":true,"in":"query","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","example":"USER","schema":{"enum":["USER","ROLE","GROUP","DEPARTMENT"],"type":"string"}},{"name":"targetIdentifier","required":true,"in":"query","description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","example":"userId1","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组的 code，当 targetType 为角色的时候需要填写，否则可以忽略","example":"default","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetCustomDataRespDto"}}}}},"tags":["管理自定义字段/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            GetCustomDataRespDto getCustomDataRespDto =await managementClient.GetCustomData(new GetCustomDataDto { Namespace = \"AUTHING_NAMESPACE\", TargetIdentifier = \"AUTHING_TARGETIDENTIGIER\", TargetType = \"USER\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetCustomDataDto{\n\t\tTargetType: \"USER\",\n\t\t// 需要替换成真实的用户 ID\n\t\tTargetIdentifier: \"userId1\",\n\t}\n\trespDto := client.GetCustomData(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetCustomDataDto;\nimport cn.authing.sdk.java.dto.GetCustomDataRespDto;\nimport cn.authing.sdk.java.dto.TargetDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetCustomDataTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetCustomDataDto reqDto = new GetCustomDataDto();\n        reqDto.setTargetType(TargetDto.TargetType.USER.getValue());\n        reqDto.setTargetIdentifier(\"6343b98b7cfxxx9366e9b7c\");\n        GetCustomDataRespDto response = client.getCustomData(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getCustomData({\n    targetType: 'USER',\n    targetIdentifier: 'userId1',\n    namespace: 'default'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getCustomData(\n    array(\n        \"targetType\" => \"USER\",\n        // 需要替换成真实的用户 ID\n        \"targetIdentifier\" => \"xxxxxxxxx\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-resource":{"post":{"operationId":"ResourceManagementController_createResource","summary":"创建资源","description":"创建资源，可以设置资源的描述、定义的操作类型、URL 标识等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResourceRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateResourceDto createResourceDto = new CreateResourceDto()\r\n            {\r\n                Code = \"ecs\",\r\n                Description = \"服务器\",\r\n                Type = CreateResourceDto.type.API,\r\n                Actions = new List<ResourceAction>\r\n                    {\r\n                        new ResourceAction\r\n                        {\r\n                            Name = \"ecs:start\",\r\n                            Description = \"启动 ECS 服务器\"\r\n                        } ,\r\n                         new ResourceAction\r\n                        {\r\n                            Name = \"ecs:stop\",\r\n                            Description = \"启动 ECS 服务器\"\r\n                        }\r\n                    },\r\n                ApiIdentifier = \"https://my-awesome-api.com/api\",\r\n                Namespace = \"634cf98aa5b1455a52949d33\"\r\n            };\r\n\r\n            ResourceRespDto dto = await managementClient.CreateResource(createResourceDto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateResourceDto{\n\t\tType:          \"API\",\n\t\tCode:          \"ecs\",\n\t\tDescription:   \"服务器\",\n\t\tActions:       []dto.ResourceAction{\n\t\t\t{\n\t\t\t\tName: \"ecs:Start\",\n\t\t\t\tDescription: \"ecs:Start\",\n\t\t\t},\n\t\t},\n\t\tApiIdentifier: \"https://my-awesome-api.com/api\",\n\t}\n\trespDto := client.CreateResource(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateResourceDto;\nimport cn.authing.sdk.java.dto.ResourceRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CreateResourceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateResourceDto reqDto = new CreateResourceDto();\n        reqDto.setCode(\"ecs\");\n        reqDto.setType(CreateResourceDto.Type.DATA);\n        ResourceRespDto response = client.createResource(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createResource({\n    code: 'ecs',\n    description: '服务器',\n    type: Models.ResourceDto.type.API,\n    actions: [\n      {\n        name: 'ecs:Start',\n        description: 'ecs:Start'\n      }\n    ],\n    apiIdentifier: 'https://my-awesome-api.com/api',\n    namespace: 'default'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createResource(\n    array(\n        \"code\" => \"ecs\",\n        \"description\" => \"服务器\",\n        \"type\" => \"API\",\n        \"actions\" => array(\n            array(\n                \"name\" => \"ecs:Start\",\n                \"description\" => \"ecs:Start\",\n\n            )\n        ),\n        \"apiIdentifier\" => \"https://my-awesome-api.com/api\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-resources-batch":{"post":{"operationId":"ResourceManagementController_createResourcesBatch","summary":"批量创建资源","description":"批量创建资源，可以设置资源的描述、定义的操作类型、URL 标识等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateResourcesBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateResourcesBatchDto createResourcesBatchDto = new CreateResourcesBatchDto()\r\n            {\r\n                List = new List<CreateResourceBatchItemDto>\r\n                    {\r\n                        new CreateResourceBatchItemDto\r\n                        {\r\n                            Code = \"ecs1\" ,\r\n                            Description = \"服务器\" ,\r\n                            Type = CreateResourceBatchItemDto.type.API,\r\n                            Actions = new List<ResourceAction>\r\n                            {\r\n                                new ResourceAction\r\n                                {\r\n                                    Name = \"ecs:start\",\r\n                                    Description = \"启动 ECS 服务器\"\r\n                                } ,\r\n                                 new ResourceAction\r\n                                {\r\n                                    Name = \"ecs:stop\",\r\n                                    Description = \"启动 ECS 服务器\"\r\n                                }\r\n                            },\r\n                            ApiIdentifier = \"https://my-awesome-api.com/api\",\r\n                        },\r\n                         new CreateResourceBatchItemDto\r\n                        {\r\n                            Code = \"ecs2\" ,\r\n                            Description = \"服务器\" ,\r\n                            Type = CreateResourceBatchItemDto.type.API,\r\n                            Actions = new List<ResourceAction>\r\n                            {\r\n                                new ResourceAction\r\n                                {\r\n                                    Name = \"ecs:start\",\r\n                                    Description = \"启动 ECS 服务器\"\r\n                                } ,\r\n                                 new ResourceAction\r\n                                {\r\n                                    Name = \"ecs:stop\",\r\n                                    Description = \"启动 ECS 服务器\"\r\n                                }\r\n                            },\r\n                            ApiIdentifier = \"https://my-awesome-api.com/api\",\r\n                        }\r\n                    },\r\n                Namespace = \"634cf98aa5b1455a52949d33\"\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.CreateResourcesBatch(createResourcesBatchDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateResourcesBatchDto{\n\t\tList: []dto.CreateResourceBatchItemDto{\n\t\t\t{\n\t\t\t\tCode:        \"ecs\",\n\t\t\t\tDescription: \"服务器\",\n\t\t\t\tType:        \"API\",\n\t\t\t\tActions: []dto.ResourceAction{\n\t\t\t\t\t{\n\t\t\t\t\t\tName:        \"ecs:Start\",\n\t\t\t\t\t\tDescription: \"ecs:Start\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tApiIdentifier: \"https://my-awesome-api.com/api\",\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.CreateResourcesBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateResourceBatchItemDto;\nimport cn.authing.sdk.java.dto.CreateResourcesBatchDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CreateResourcesBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateResourcesBatchDto reqDto = new CreateResourcesBatchDto();\n        List<CreateResourceBatchItemDto> list = new ArrayList<>();\n        CreateResourceBatchItemDto batchItemDto = new CreateResourceBatchItemDto();\n        batchItemDto.setType(CreateResourceBatchItemDto.Type.DATA);\n        batchItemDto.setCode(\"ecs\");\n        list.add(batchItemDto);\n        reqDto.setList(list);\n        IsSuccessRespDto response = client.createResourcesBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createResourcesBatch({\n    namespace: 'default',\n    list: [\n      {\n        code: 'ecs',\n        description: '服务器',\n        name: '服务器',\n        type: Models.ResourceDto.type.API,\n        actions: [\n          {\n            name: 'ecs:Start',\n            description: 'ecs:Start'\n          }\n        ],\n        apiIdentifier: 'https://my-awesome-api.com/api'\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createResourcesBatch(\n    array(\n        \"list\" => array(\n            array(\n                \"code\" => \"ecs\",\n                \"description\" => \"服务器\",\n                \"type\" => \"API\",\n                \"actions\" => array(\n                    array(\n                        \"name\" => \"ecs:Start\",\n                        \"description\" => \"ecs:Start\",\n\n                    )\n                ),\n                \"apiIdentifier\" => \"https://my-awesome-api.com/api\",\n            )\n        )\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-resource":{"get":{"operationId":"ResourceManagementController_getResource","summary":"获取资源详情","description":"根据筛选条件，获取资源详情。","parameters":[{"name":"code","required":true,"in":"query","description":"资源唯一标志符","example":"ecs","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组(权限空间)的 Code","example":"default","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResourceRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ResourceRespDto dto = await managementClient.GetResource(new GetResourceDto { Code = \"order\", Namespace = \"634cf98aa5b1455a52949d33\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetResourceDto{\n\t\tCode:      \"ecs\",\n\t}\n\trespDto := client.GetResource(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetResourceDto;\nimport cn.authing.sdk.java.dto.ResourceRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetResourceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetResourceDto reqDto = new GetResourceDto();\n        reqDto.setCode(\"esc\");\n        ResourceRespDto response = client.getResource(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getResource({\n    code: 'ecs',\n    namespace: 'default'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getResource(\n    array(\n        \"code\" => \"ecs\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-resources-batch":{"get":{"operationId":"ResourceManagementController_getResourcesBatch","summary":"批量获取资源详情","description":"根据筛选条件，批量获取资源详情。","parameters":[{"name":"namespace","required":false,"in":"query","description":"所属权限分组(权限空间)的 Code","example":"default","schema":{"type":"string"}},{"name":"codeList","required":true,"in":"query","description":"资源 code 列表，批量可以使用逗号分隔","example":["code1","code2"],"schema":{"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResourceListRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n           \r\n            ResourceListRespDto dto = await managementClient.GetResourcesBatch(new GetResourcesBatchDto { CodeList = string.Join(\",\", new List<string> { \"ecs\" }), Namespace = \"default\" });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetResourcesBatchDto{\n\t\tCodeList:  \"ecs,ec2\",\n\t}\n\trespDto := client.GetResourcesBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetResourcesBatchDto;\nimport cn.authing.sdk.java.dto.ResourceListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetResourcesBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetResourcesBatchDto reqDto = new GetResourcesBatchDto();\n        reqDto.setCodeList(\"code1,code2\");\n        ResourceListRespDto response = client.getResourcesBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getResourcesBatch({\n    codeList: ['code1', 'code2'],\n    namespace: 'default'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getResourcesBatch(\n    array(\n        \"codeList\" => \"ecs,ec2\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/list-common-resource":{"get":{"operationId":"ResourceManagementController_listCommonResource","summary":"分页获取常规资源列表","description":"根据筛选条件，分页获取常规资源详情列表。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"keyword","required":false,"in":"query","description":"查询条件","example":"resourceName","schema":{"type":"string"}},{"name":"namespaceCodeList","required":false,"in":"query","description":"权限空间列表","example":["code1","code2"],"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResourcePaginatedRespDto"}}}}},"tags":["管理资源与权限/API 列表","管理资源与权限/API 列表","多租户管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-resources":{"get":{"operationId":"ResourceManagementController_listResources","summary":"分页获取资源列表","description":"根据筛选条件，分页获取资源详情列表。","parameters":[{"name":"namespace","required":false,"in":"query","description":"所属权限分组(权限空间)的 Code","example":"default","schema":{"type":"string"}},{"name":"type","required":false,"in":"query","description":"资源类型","example":"DATA","schema":{"enum":["DATA","API","MENU","BUTTON","UI"],"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResourcePaginatedRespDto"}}}}},"tags":["管理资源与权限/API 列表","管理资源与权限/API 列表","多租户管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            ResourcePaginatedRespDto dto = await managementClient.ListResources(new ListResourcesDto { Type = \"API\", Namespace = \"default\" });\r\n\r\n            Console.WriteLine(dto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListResourcesDto{\n\t\tPage:      1,\n\t\tLimit:     10,\n\t}\n\trespDto := client.ListResources(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListResourcesDto;\nimport cn.authing.sdk.java.dto.ResourcePaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListResourcesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ResourcePaginatedRespDto response = client.listResources(new ListResourcesDto());\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listResources({\n    namespace: 'default',\n    type: 'DATA',\n    page: 1,\n    limit: 10\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listResources(\n    array(\n        \"page\" => 1,\n        \"limit\" => 10,\n    )\n);\nprint_r($data);\n"}}},"/api/v3/update-resource":{"post":{"operationId":"ResourceManagementController_updateResource","summary":"修改资源","description":"修改资源，可以设置资源的描述、定义的操作类型、URL 标识等。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ResourceRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var resource = managementClient.GetResource(new GetResourceDto { Code = \"ecs\", Namespace = \"634cf98aa5b1455a52949d33\" }).Result;\r\n\r\n            UpdateResourceDto updateResourceDto = new UpdateResourceDto()\r\n            {\r\n                Code = resource.Data.Code,\r\n                Actions = resource.Data.Actions,\r\n                Description = \"update\",\r\n                Type = UpdateResourceDto.type.API,\r\n                Namespace = resource.Data.Namespace\r\n            };\r\n\r\n            ResourceRespDto dto = await managementClient.UpdateResource(updateResourceDto);\r\n\r\n            Console.WriteLine(dto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateResourceDto{\n\t\tCode:        \"ecs\",\n\t\tDescription: \"新的描述信息\",\n\t}\n\trespDto := client.UpdateResource(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ResourceRespDto;\nimport cn.authing.sdk.java.dto.UpdateResourceDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateResourceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateResourceDto reqDto = new UpdateResourceDto();\n        reqDto.setCode(\"code1\");\n        ResourceRespDto response = client.updateResource(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateResource({\n    code: 'ecs',\n    description: '服务器',\n    actions: [\n      {\n        name: 'ecs:Start',\n        description: 'ecs:Start'\n      }\n    ],\n    apiIdentifier: 'https://my-awesome-api.com/api',\n    namespace: 'default',\n    type: Models.ResourceDto.type.API\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateResource(\n    array(\n        \"code\" => \"ecs\",\n        \"description\" => \"新的描述信息\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/delete-resource":{"post":{"operationId":"ResourceManagementController_deleteResource","summary":"删除资源","description":"通过资源唯一标志符以及所属权限分组，删除资源。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var resource = managementClient.GetResource(new GetResourceDto { Code = \"ecs\", Namespace = \"634cf98aa5b1455a52949d33\" }).Result;\r\n\r\n            DeleteResourceDto deleteResourceDto = new DeleteResourceDto()\r\n            {\r\n                Code = \"ecs\",\r\n                Namespace = \"default\"\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.DeleteResource(deleteResourceDto);\r\n\r\n            Console.WriteLine(dto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteResourceDto{\n\t\tCode:      \"ecs\",\n\t}\n\trespDto := client.DeleteResource(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteResourceDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class DeleteResourceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteResourceDto reqDto = new DeleteResourceDto();\n        reqDto.setCode(\"code1\");\n        IsSuccessRespDto response = client.deleteResource(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteResource({\n    code: 'code1',\n    namespace: 'default'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteResource(\n    array(\n        \"code\" => \"ecs\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/delete-resources-batch":{"post":{"operationId":"ResourceManagementController_deleteResourcesBatch","summary":"批量删除资源","description":"通过资源唯一标志符以及所属权限分组，批量删除资源","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteResourcesBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            DeleteResourcesBatchDto deleteResourcesBatchDto = new DeleteResourcesBatchDto()\r\n            {\r\n                CodeList = new List<string> { \"ecs1\", \"ecs2\" },\r\n                Namespace = \"default\"\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.DeleteResourcesBatch(deleteResourcesBatchDto);\r\n\r\n            Console.WriteLine(dto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteResourcesBatchDto{\n\t\tCodeList: []string{\"ecs\", \"ec2\"},\n\t}\n\trespDto := client.DeleteResourcesBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteResourcesBatchDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class DeleteResourcesBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteResourcesBatchDto reqDto = new DeleteResourcesBatchDto();\n        reqDto.setCodeList(Collections.singletonList(\"code1\"));\n        IsSuccessRespDto response = client.deleteResourcesBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteResourcesBatch({\n    namespace: 'default',\n    codeList: ['code1', 'code2']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteResourcesBatch(\n    array(\n        \"codeList\" => array(\"ecs\", \"ec2\")\n    )\n);\nprint_r($data);\n"}}},"/api/v3/delete-common-resources-batch":{"post":{"operationId":"ResourceManagementController_batchDeleteCommonResource","summary":"批量删除资源","description":"通过资源id批量删除资源","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteCommonResourcesBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/associate-tenant-resource":{"post":{"operationId":"ResourceManagementController_associateTenantResource","summary":"关联/取消关联应用资源到租户","description":"通过资源唯一标识以及权限分组，关联或取消关联资源到租户","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssociateTenantResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表","管理资源与权限/API 列表","多租户管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.AssociateTenantResourceDto{\n\t\tAppId: \"60b49eb83fxxxdb96f26e68\",\n\t\tAssociation: true,\n\t\tCode: \"ecs\",\n\t\tTenantId: \"60b49eb83fxxxdb96f26e68\",\n\t}\n\trespDto := client.AssociateTenantResource(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.AssociateTenantResourceDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class AssociateTenantResourceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        AssociateTenantResourceDto reqDto = new AssociateTenantResourceDto();\n        reqDto.setAppId(\"60b49eb8xx80adb96f26e68\");\n        reqDto.setAssociation(Boolean.TRUE);\n        reqDto.setCode(\"code1\");\n        IsSuccessRespDto response = client.associateTenantResource(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.associateTenantResource({\n    code: 'code1',\n    association: false,\n    appId: '60b49ebxxxxxxdb96f26e68',\n    tenantId: '6229ffaxxxxxxxxcade3e3d9'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->associateTenantResource(\n    array(\n        \"code\" => \"ecs\",\n        \"association\" => true,\n        // 需要替换成真实的应用 ID\n        \"appId\" => \"60b49eb83fxxxdb96f26e68\",\n        // 需要替换成真实的租户 ID\n        \"tenantId\" => \"60b49eb83fxxxdb96f26e68\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-namespace":{"post":{"operationId":"NamespaceManagementController_createNamespace","summary":"创建权限分组","description":"创建权限分组，可以设置权限分组名称、Code 和描述信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateNamespaceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NamespaceRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateNamespaceDto createNamespaceDto = new CreateNamespaceDto()\r\n            {\r\n                Code = \"my-namespace\",\r\n                Name = \"我的权限分组\",\r\n                Description = \"我的权限分组描述\"\r\n            };\r\n\r\n            NamespaceRespDto dto = await managementClient.CreateNamespace(createNamespaceDto);\r\n\r\n            Console.WriteLine(dto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateNamespaceDto{\n\t\tCode:        \"my-namespace\",\n\t\tName:        \"我的权限分组\",\n\t\tDescription: \"我的权限分组描述\",\n\t}\n\trespDto := client.CreateNamespace(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateNamespaceDto;\nimport cn.authing.sdk.java.dto.NamespaceRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CreateNamespaceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateNamespaceDto reqDto = new CreateNamespaceDto();\n        reqDto.setCode(\"my-namespace\");\n        reqDto.setName(\"我的权限分组\");\n        NamespaceRespDto response = client.createNamespace(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createNamespace({\n    code: 'my-namespace',\n    name: '我的权限分组',\n    description: '我的权限分组描述'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createNamespace(\n    array(\n        \"code\" => \"my-namespace\",\n        \"name\" => \"我的权限分组\",\n        \"description\" => \"我的权限分组描述\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-namespaces-batch":{"post":{"operationId":"NamespaceManagementController_createNamespacesBatch","summary":"批量创建权限分组","description":"批量创建权限分组，可以分别设置权限分组名称、Code 和描述信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateNamespacesBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateNamespacesBatchDto createNamespacesBatchDto = new CreateNamespacesBatchDto()\r\n            {\r\n                List = new List<CreateNamespacesBatchItemDto>\r\n                    {\r\n                        new CreateNamespacesBatchItemDto()\r\n                            {\r\n                                Code = \"my-namespace1\",\r\n                                Name = \"我的权限分组\",\r\n                                Description = \"我的权限分组描述\"\r\n                            },\r\n                          new CreateNamespacesBatchItemDto()\r\n                            {\r\n                                Code = \"my-namespace2\",\r\n                                Name = \"我的权限分组\",\r\n                                Description = \"我的权限分组描述\"\r\n                            }\r\n                    }\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.CreateNamespacesBatch(createNamespacesBatchDto);\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateNamespacesBatchDto{\n\t\tList: []dto.CreateNamespacesBatchItemDto{\n\t\t\t{\n\t\t\t\tCode: \"my-namespace\",\n\t\t\t\tName: \"我的权限分组\",\n\t\t\t\tDescription: \"我的权限分组描述\",\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.CreateNamespacesBatch(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateNamespacesBatchDto;\nimport cn.authing.sdk.java.dto.CreateNamespacesBatchItemDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CreateNamespacesBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateNamespacesBatchDto reqDto = new CreateNamespacesBatchDto();\n        List<CreateNamespacesBatchItemDto> list = new ArrayList<>();\n        CreateNamespacesBatchItemDto batchItemDto = new CreateNamespacesBatchItemDto();\n        batchItemDto.setCode(\"code1\");\n        batchItemDto.setName(\"name1\");\n        list.add(batchItemDto);\n        reqDto.setList(list);\n        IsSuccessRespDto response = client.createNamespacesBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createNamespacesBatch({\n    list: [\n      {\n        code: 'my-namespace',\n        name: '我的权限分组',\n        description: '我的权限分组描述'\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->createNamespacesBatch(\n    array(\n        \"list\" => array(\n            array(\n                \"code\" => \"my-namespace\",\n                \"name\" => \"我的权限分组\",\n                \"description\" => \"我的权限分组描述\",\n            )\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-namespace":{"get":{"operationId":"NamespaceManagementController_getNamespace","summary":"获取权限分组详情","description":"通过权限分组唯一标志符(Code)，获取权限分组详情。","parameters":[{"name":"code","required":true,"in":"query","description":"权限分组唯一标志符","example":"my-namespace","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NamespaceRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            NamespaceRespDto dto = await managementClient.GetNamespace(new GetNamespaceDto { Code = \"my-namespace\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetNamespaceDto{\n\t\tCode: \"my-namespace\",\n\t}\n\trespDto := client.GetNamespace(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetNamespaceDto;\nimport cn.authing.sdk.java.dto.NamespaceRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetNamespaceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetNamespaceDto reqDto = new GetNamespaceDto();\n        reqDto.setCode(\"code1\");\n        NamespaceRespDto response = client.getNamespace(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getNamespace({\n    code: 'my-namespace'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getNamespace(\n    array(\n        \"code\" => \"my-namespace\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-namespaces-batch":{"get":{"operationId":"NamespaceManagementController_getNamespacesBatch","summary":"批量获取权限分组详情","description":"分别通过权限分组唯一标志符(Code)，批量获取权限分组详情。","parameters":[{"name":"codeList","required":true,"in":"query","description":"权限分组 code 列表，批量可以使用逗号分隔","example":"code1,code2","schema":{"minItems":0,"maxItems":50,"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NamespaceListRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n           \r\n            NamespaceListRespDto dto = await managementClient.GetNamespacesBatch(new GetNamespacesBatchDto { CodeList = string.Join(\",\", new List<string> { \"default\", \"system\" }) });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetNamespacesBatchDto{\n\t\tCodeList: \"my-namespace,my-namespace-2\",\n\t}\n\trespDto := client.GetNamespacesBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetNamespacesBatchDto;\nimport cn.authing.sdk.java.dto.NamespaceListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetNamespacesBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetNamespacesBatchDto reqDto = new GetNamespacesBatchDto();\n        reqDto.setCodeList(\"code1, code2\");\n        NamespaceListRespDto response = client.getNamespacesBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getNamespacesBatch({\n    codeList: ['my-namespace']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getNamespacesBatch(\n    array(\n        \"codeList\" => \"my-namespace,my-namespace-2\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/update-namespace":{"post":{"operationId":"NamespaceManagementController_updateNamespace","summary":"修改权限分组信息","description":"修改权限分组信息，可以修改名称、描述信息以及新的唯一标志符(NewCode)。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateNamespaceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateNamespaceRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateNamespaceDto createNamespaceDto = new CreateNamespaceDto()\r\n            {\r\n                Code = \"my-namespace\",\r\n                Name = \"我的权限分组\",\r\n                Description = \"我的权限分组描述\"\r\n            };\r\n\r\n            NamespaceRespDto createDto = await managementClient.CreateNamespace(createNamespaceDto);\r\n\r\n\r\n            UpdateNamespaceDto updateNamespaceDto = new UpdateNamespaceDto()\r\n            {\r\n                Code = \"my-namespace\",\r\n                Name = \"我的权限分组\",\r\n                Description = \"示例应用的描述\",\r\n                NewCode = \"my-new-namespace\"\r\n            };\r\n\r\n\r\n            UpdateNamespaceRespDto dto = await managementClient.UpdateNamespace(updateNamespaceDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateNamespaceDto{\n\t\tCode:        \"my-namespace\",\n\t\tDescription: \"新的描述信息\",\n\t}\n\trespDto := client.UpdateNamespace(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.UpdateNamespaceDto;\nimport cn.authing.sdk.java.dto.UpdateNamespaceRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateNamespaceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateNamespaceDto reqDto = new UpdateNamespaceDto();\n        reqDto.setCode(\"code1\");\n        UpdateNamespaceRespDto response = client.updateNamespace(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateNamespace({\n    code: 'my-namespace',\n    description: '我的权限分组描述',\n    name: '我的权限分组',\n    newCode: 'my-new-namespace'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateNamespace(\n    array(\n        \"code\" => \"my-namespace\",\n        \"description\" => \"新的描述信息\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/delete-namespace":{"post":{"operationId":"NamespaceManagementController_deleteNamespace","summary":"删除权限分组信息","description":"通过权限分组唯一标志符(Code)，删除权限分组信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteNamespaceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateNamespaceDto createNamespaceDto = new CreateNamespaceDto()\r\n            {\r\n                Code = \"my-namespace\",\r\n                Name = \"我的权限分组\",\r\n                Description = \"我的权限分组描述\"\r\n            };\r\n\r\n            NamespaceRespDto namespaceRespDto = await managementClient.CreateNamespace(createNamespaceDto);\r\n\r\n\r\n            DeleteNamespaceDto deleteNamespaceDto = new DeleteNamespaceDto()\r\n            {\r\n                Code = \"my-new-namespace\",\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.DeleteNamespace(deleteNamespaceDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteNamespaceDto{\n\t\tCode: \"my-namespace\",\n\t}\n\trespDto := client.DeleteNamespace(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteNamespaceDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class DeleteNamespaceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteNamespaceDto reqDto = new DeleteNamespaceDto();\n        reqDto.setCode(\"code1\");\n        IsSuccessRespDto response = client.deleteNamespace(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteNamespace({\n    code: 'my-namespace'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteNamespace(\n    array(\n        \"code\" => \"my-namespace\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/delete-namespaces-batch":{"post":{"operationId":"NamespaceManagementController_deleteNamespacesBatch","summary":"批量删除权限分组","description":"分别通过权限分组唯一标志符(Code)，批量删除权限分组。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteNamespacesBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            CreateNamespacesBatchDto createNamespacesBatchDto = new CreateNamespacesBatchDto()\r\n            {\r\n                List = new List<CreateNamespacesBatchItemDto>\r\n                    {\r\n                        new CreateNamespacesBatchItemDto()\r\n                            {\r\n                                Code = \"my-namespace1\",\r\n                                Name = \"我的权限分组\",\r\n                                Description = \"我的权限分组描述\"\r\n                            },\r\n                          new CreateNamespacesBatchItemDto()\r\n                            {\r\n                                Code = \"my-namespace2\",\r\n                                Name = \"我的权限分组\",\r\n                                Description = \"我的权限分组描述\"\r\n                            }\r\n                    }\r\n            };\r\n\r\n            DeleteNamespacesBatchDto deleteNamespacesBatchDto = new DeleteNamespacesBatchDto()\r\n            {\r\n                CodeList = new List<string> { \"my-namespace1\", \"my-namespace2\" }\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.DeleteNamespacesBatch(deleteNamespacesBatchDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteNamespacesBatchDto{\n\t\tCodeList: []string{\"my-namespace\", \"my-namespace-2\"},\n\t}\n\trespDto := client.DeleteNamespacesBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteNamespacesBatchDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class DeleteNamespacesBatchTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteNamespacesBatchDto reqDto = new DeleteNamespacesBatchDto();\n        reqDto.setCodeList(Collections.singletonList(\"code1\"));\n        IsSuccessRespDto response = client.deleteNamespacesBatch(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteNamespacesBatch({\n    codeList: ['code1', 'code2']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteNamespacesBatch(\n    array(\n        \"codeList\" => array(\n            \"my-namespace\",\n            \"my-namespace-2\"\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/list-namespaces":{"get":{"operationId":"NamespaceManagementController_ListNamespaces","summary":"分页获取权限分组列表","description":"根据筛选条件，分页获取权限分组列表。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"keywords","required":false,"in":"query","description":"搜索权限分组 Code","example":"test","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NamespaceListPaginatedRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-namespace-roles":{"get":{"operationId":"NamespaceManagementController_ListNamespaceRoles","summary":"分页权限分组下所有的角色列表","description":"根据筛选条件，分页获取权限分组下所有的角色列表。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"code","required":true,"in":"query","description":"权限分组唯一标志符","example":"my-namespace","schema":{"type":"string"}},{"name":"keywords","required":false,"in":"query","description":"角色 Code 或者名称","example":"test","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NamespaceRolesListPaginatedRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/authorize-resources":{"post":{"operationId":"AccessControlManagementController_authorizeResources","summary":"授权资源","description":"将一个/多个资源授权给用户、角色、分组、组织机构等主体，且可以分别指定不同的操作权限。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthorizeResourcesDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理资源与权限/API 列表","管理资源与权限/API 列表","多租户管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            List<ResourceAction> resourceActions = new List<ResourceAction>();\r\n            resourceActions.Add(new ResourceAction { Name = \"start\", Description = \"启动 ECS 服务器\" });\r\n            resourceActions.Add(new ResourceAction { Name = \"stop\", Description = \"启动 ECS 服务器\" });\r\n\r\n            List<AuthorizeResourceItem> items = new List<AuthorizeResourceItem>();\r\n\r\n            List<ResourceItemDto> resourceItemDtos = new List<ResourceItemDto>();\r\n            resourceItemDtos.Add(new ResourceItemDto { Actions = new List<string> { \"start\", \"stop\" }, Code = \"ecs\", ResourceType = ResourceItemDto.resourceType.API });\r\n\r\n\r\n\r\n            items.Add(new AuthorizeResourceItem { TargetType = AuthorizeResourceItem.targetType.USER, TargetIdentifiers = new List<string> { \"634fc0a6ebc13285a2ac8dd2\" }, Resources = resourceItemDtos });\r\n\r\n            AuthorizeResourcesDto authorizedResourceDto = new AuthorizeResourcesDto()\r\n            {\r\n                Namespace = \"default\",\r\n                List = items\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.AuthorizeResources(authorizedResourceDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.AuthorizeResourcesDto{\n\t\tList: []dto.AuthorizeResourceItem{\n\t\t\t{TargetType: \"USER\", TargetIdentifiers: []string{\"userId1\", \"userId2\"}, Resources: []dto.ResourceItemDto{\n\t\t\t\t{Code: \"ecs\", Actions: []string{\"ecs:Stop\", \"ecs:Start\"}, ResourceType: \"DATA\"},\n\t\t\t}},\n\t\t},\n\t\tNamespace: \"default\",\n\t}\n\trespDto := client.AuthorizeResources(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.AuthorizeResourceItem;\nimport cn.authing.sdk.java.dto.AuthorizeResourcesDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.ResourceItemDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class AuthorizeResourcesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        AuthorizeResourcesDto reqDto = new AuthorizeResourcesDto();\n        List<AuthorizeResourceItem> list = new ArrayList<>();\n        AuthorizeResourceItem item = new AuthorizeResourceItem();\n        List<ResourceItemDto> resourceList = new ArrayList<>();\n        ResourceItemDto resourceItemDto = new ResourceItemDto();\n        resourceItemDto.setResourceType(ResourceItemDto.ResourceType.DATA);\n        resourceItemDto.setCode(\"code1\");\n        resourceItemDto.setActions(Collections.singletonList(\"action1\"));\n        resourceList.add(resourceItemDto);\n        item.setResources(resourceList);\n        item.setTargetType(AuthorizeResourceItem.TargetType.USER);\n        item.setTargetIdentifiers(Collections.singletonList(\"6343b98b7cfxxx9366e9b7c\"));\n        list.add(item);\n        reqDto.setList(list);\n        IsSuccessRespDto response = client.authorizeResources(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.authorizeResources({\n    namespace: 'default',\n    list: [\n      {\n        targetType: Models.AuthorizeResourceItem.targetType.USER,\n        targetIdentifiers: ['userId1', 'userId2'],\n        resources: [\n          {\n            code: 'ecs',\n            actions: ['ecs:Stop', 'ecs:Start'],\n            resourceType: Models.ResourceItemDto.resourceType.API\n          }\n        ]\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->authorizeResources(\n    array(\n        \"list\" => array(\n            array(\n                \"targetType\" => \"USER\",\n                // 需要替换成真实的用户 ID\n                \"targetIdentifiers\" => array(\"userId1\",\"userId2\"),\n                \"resources\" => array(\n                    array(\n                        \"code\" => \"ecs\",\n                        \"actions\" => array(\"ecs:Stop\",\"ecs:Start\"),\n                        \"resourceType\" => \"DATA\",\n                    )\n                ),\n            )\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-authorized-resources":{"get":{"operationId":"AccessControlManagementController_getAuthorizedResources","summary":"获取某个主体被授权的资源列表","description":"根据筛选条件，获取某个主体被授权的资源列表。","parameters":[{"name":"targetType","required":true,"in":"query","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","example":"USER","schema":{"enum":["USER","ROLE","GROUP","DEPARTMENT"],"type":"string"}},{"name":"targetIdentifier","required":true,"in":"query","description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","example":"userId1","schema":{"type":"string"}},{"name":"namespace","required":false,"in":"query","description":"所属权限分组(权限空间)的 Code","example":"default","schema":{"type":"string"}},{"name":"resourceType","required":false,"in":"query","description":"限定资源类型，如数据、API、按钮、菜单","example":"DATA","schema":{"enum":["DATA","API","MENU","BUTTON","UI"],"type":"string"}},{"name":"resourceList","required":false,"in":"query","description":"限定查询的资源列表，如果指定，只会返回所指定的资源列表。\n\nresourceList 参数支持前缀匹配，例如：\n- 授权了一个资源为 `books:123`，可以通过 `books:*` 来匹配；\n- 授权了一个资源为 `books:fictions_123`，可以通过 `books:fictions_` 来匹配；\n","schema":{"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}}},{"name":"withDenied","required":false,"in":"query","description":"是否获取被拒绝的资源","schema":{"default":false,"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthorizedResourcePaginatedRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            List<ResourceAction> resourceActions = new List<ResourceAction>();\r\n            resourceActions.Add(new ResourceAction { Name = \"start\", Description = \"启动 ECS 服务器\" });\r\n            resourceActions.Add(new ResourceAction { Name = \"stop\", Description = \"启动 ECS 服务器\" });\r\n\r\n            List<AuthorizeResourceItem> items = new List<AuthorizeResourceItem>();\r\n\r\n            List<ResourceItemDto> resourceItemDtos = new List<ResourceItemDto>();\r\n            resourceItemDtos.Add(new ResourceItemDto { Actions = new List<string> { \"start\", \"stop\" }, Code = \"ecs\", ResourceType = ResourceItemDto.resourceType.API });\r\n\r\n\r\n\r\n            items.Add(new AuthorizeResourceItem { TargetType = AuthorizeResourceItem.targetType.USER, TargetIdentifiers = new List<string> { \"634fc0a6ebc13285a2ac8dd2\" }, Resources = resourceItemDtos });\r\n\r\n            AuthorizeResourcesDto authorizedResourceDto = new AuthorizeResourcesDto()\r\n            {\r\n                Namespace = \"default\",\r\n                List = items\r\n            };\r\n\r\n            IsSuccessRespDto dto = await managementClient.AuthorizeResources(authorizedResourceDto);\r\n\r\n            AuthorizedResourcePaginatedRespDto authorized = await managementClient.GetAuthorizedResources(new GetAuthorizedResourcesDto { TargetIdentifier = \"634fc0a6ebc13285a2ac8dd2\", Namespace = \"634cf98aa5b1455a52949d33\", ResourceType = \"API\", TargetType = \"USER\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetAuthorizedResourcesDto{\n\t\tTargetType: \"USER\",\n\t\t// 需要替换成真实的用户 ID\n\t\tTargetIdentifier: \"userId1\",\n\t}\n\trespDto := client.GetAuthorizedResources(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.AuthorizedResourcePaginatedRespDto;\nimport cn.authing.sdk.java.dto.GetAuthorizedResourcesDto;\nimport cn.authing.sdk.java.dto.TargetDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetAuthorizedResourcesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetAuthorizedResourcesDto reqDto = new GetAuthorizedResourcesDto();\n        reqDto.setTargetType(TargetDto.TargetType.USER.getValue());\n        reqDto.setTargetIdentifier(\"6343b98b7cfxxx9366e9b7c\");\n        AuthorizedResourcePaginatedRespDto response = client.getAuthorizedResources(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getAuthorizedResources({\n    targetType: 'USER',\n    targetIdentifier: 'userId1',\n    namespace: 'default',\n    resourceType: 'DATA',\n    withDenied: false\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getAuthorizedResources(\n    array(\n        \"targetType\" => \"USER\",\n        // 需要替换成真实的用户 ID\n        \"targetIdentifier\" => \"userId1\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/is-action-allowed":{"post":{"operationId":"AccessControlManagementController_isActionAllowed","summary":"判断用户是否对某个资源的某个操作有权限","description":"判断用户是否对某个资源的某个操作有权限。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsActionAllowedDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsActionAllowedRespDtp"}}}}},"tags":["管理资源与权限/API 列表","管理资源与权限/API 列表","多租户管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            IsActionAllowedDto isActionAllowedDto = new IsActionAllowedDto\r\n            {\r\n                Action = \"start\",\r\n                Namespace = \"default\",\r\n                Resource = \"ecs:*\",\r\n                UserId = \"USER_ID\"\r\n            };\r\n\r\n            var dto = await managementClient.IsActionAllowed(isActionAllowedDto);\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.IsActionAllowedDto{\n\t\t// 需要替换成真实的用户 ID\n\t\tAction:   \"ecs:Start\",\n\t\tResource: \"ecs:1\",\n\t\tUserId:   \"userId1\",\n\t}\n\trespDto := client.IsActionAllowed(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.IsActionAllowedDto;\nimport cn.authing.sdk.java.dto.IsActionAllowedRespDtp;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class IsActionAllowedTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        IsActionAllowedDto reqDto = new IsActionAllowedDto();\n        reqDto.setAction(\"ecs:Start\");\n        reqDto.setUserId(\"userId1\");\n        reqDto.setResource(\"ecs:1\");\n        IsActionAllowedRespDtp response = client.isActionAllowed(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.isActionAllowed({\n    namespace: 'default',\n    userId: 'userId1',\n    resource: 'ecs:1',\n    action: 'ecs:Start'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->isActionAllowed(\n    array(\n        // 需要替换成真实的用户 ID\n        \"userId\" => \"userId1\",\n        \"resource\" => \"ecs:1\",\n        \"action\" => \"ecs:Start\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-resource-authorized-targets":{"post":{"operationId":"AccessControlManagementController_getResourceAuthorizedTargets","summary":"获取资源被授权的主体","description":"获取资源被授权的主体","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetResourceAuthorizedTargetsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetResourceAuthorizedTargetRespDto"}}}}},"tags":["管理资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.GetResourceAuthorizedTargets(new GetResourceAuthorizedTargetsDto { Resource = \"ecs\", Namespace = \"default\", Limit = 50, Page = 1, TargetType = GetResourceAuthorizedTargetsDto.targetType.USER });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetResourceAuthorizedTargetsDto{\n\t\tResource:   \"ecs:1\",\n\t\tTargetType: \"USER\",\n\t\tPage:       1,\n\t\tLimit:      10,\n\t}\n\trespDto := client.GetResourceAuthorizedTargets(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetResourceAuthorizedTargetRespDto;\nimport cn.authing.sdk.java.dto.GetResourceAuthorizedTargetsDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetResourceAuthorizedTargetsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetResourceAuthorizedTargetsDto reqDto = new GetResourceAuthorizedTargetsDto();\n        reqDto.setResource(\"ecs:1\");\n        GetResourceAuthorizedTargetRespDto response = client.getResourceAuthorizedTargets(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getResourceAuthorizedTargets({\n    resource: 'ecs:1',\n    namespace: 'default',\n    targetType: Models.GetResourceAuthorizedTargetsDto.targetType.USER,\n    page: 1,\n    limit: 10\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getResourceAuthorizedTargets(\n    array(\n        \"resource\" => \"ecs:1\",\n        \"targetType\" => \"USER\",\n        \"page\" => 1,\n        \"limit\" => 10,\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-pipeline-function":{"post":{"operationId":"PipelineManagementController_createPipelineFunction","summary":"创建 Pipeline 函数","description":"创建 Pipeline 函数","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePipelineFunctionDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PipelineFunctionSingleRespDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.CreatePipelineFunction(new CreatePipelineFunctionDto\r\n            {\r\n                FuncName = \"每周日凌晨 3-6 点系统维护禁止注册/登录\",\r\n                FuncDescription = \"每周日凌晨 3-6 点系统维护禁止注册/登录。\",\r\n                Scene = CreatePipelineFunctionDto.scene.PRE_REGISTER,\r\n                SourceCode = \"async function pipe(user, context, callback) {\\n  const date = new Date();\\n  const d = date.getDay();\\n  const n = date.getHours();\\n  \" +\r\n                   \"// 每周日凌晨 3-6 点禁止注册\\n  if (d === 0 && (3 <= n && n <= 6)) \" +\r\n                   \"{\\n    return callback(new Error('系统维护中，暂时停止注册！'));\\n  }\\n  \" +\r\n                   \"callback(null, user, context)\\n}\",\r\n                Timeout = 10,\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.CreatePipelineFunctionDto;\nimport cn.authing.sdk.java.dto.PipelineFunctionSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CreatePipelineFunctionTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreatePipelineFunctionDto createPipelineFunctionDto = new CreatePipelineFunctionDto();\n        createPipelineFunctionDto.setSourceCode(\"SOURCE_CODE\");\n        PipelineFunctionSingleRespDto pipelineFunction = client.createPipelineFunction(createPipelineFunctionDto);\n        System.out.println(JsonUtils.serialize(pipelineFunction));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createPipelineFunction({\n    funcName: '每周日凌晨 3-6 点系统维护禁止注册/登录',\n    funcDescription: '每周日凌晨 3-6 点系统维护禁止注册/登录。',\n    scene: Models.CreatePipelineFunctionDto.scene.PRE_REGISTER,\n    sourceCode: `async function pipe(user, context, callback) {\n  const date = new Date();\n  const d = date.getDay();\n  const n = date.getHours();\n  // 每周日凌晨 3-6 点禁止注册\n  if (d === 0 && (3 <= n && n <= 6)) {\n    return callback(new Error('系统维护中，暂时停止注册！'));\n  }\n  callback(null, user, context)\n}`,\n    isAsynchronous: false,\n    timeout: 3,\n    terminateOnTimeout: false,\n    enabled: false\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-pipeline-function":{"get":{"operationId":"PipelineManagementController_getPipelineFunction","summary":"获取 Pipeline 函数详情","description":"获取 Pipeline 函数详情","parameters":[{"name":"funcId","required":true,"in":"query","description":"Pipeline 函数 ID","example":"62ce9135dxxxxb83e373f5d6","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PipelineFunctionSingleRespDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListPipelineFunctions(new ListPipelineFunctionDto { });\r\n            var target = res1.Data.List.First();\r\n            var res = await managementClient.GetPipelineFunction(new GetPipelineFunctionDto { FuncId = target.FuncId });\r\n\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.GetPipelineFunctionDto;\nimport cn.authing.sdk.java.dto.PipelineFunctionSingleRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetPipelineFunctionTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetPipelineFunctionDto getPipelineFunctionDto = new GetPipelineFunctionDto();\n        getPipelineFunctionDto.setFuncId(\"AUTHING_FUNC_ID\");\n        PipelineFunctionSingleRespDto pipelineFunction = client.getPipelineFunction(getPipelineFunctionDto);\n        System.out.println(JsonUtils.serialize(pipelineFunction));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getPipelineFunction({\n    funcId: '62ce9135dxxxxb83e373f5d6'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/reupload-pipeline-function":{"post":{"operationId":"PipelineManagementController_reuploadPipelineFunction","summary":"重新上传 Pipeline 函数","description":"当 Pipeline 函数上传失败时，重新上传 Pipeline 函数","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ReUploadPipelineFunctionDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PipelineFunctionSingleRespDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListPipelineFunctions(new ListPipelineFunctionDto { });\r\n            var target = res1.Data.List.First();\r\n            var res = await managementClient.ReuploadPipelineFunction(new ReUploadPipelineFunctionDto() { FuncId = target.FuncId });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.PipelineFunctionSingleRespDto;\nimport cn.authing.sdk.java.dto.ReUploadPipelineFunctionDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ReuploadPipelineFunctionTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ReUploadPipelineFunctionDto reUploadPipelineFunctionDto = new ReUploadPipelineFunctionDto();\n        reUploadPipelineFunctionDto.setFuncId(\"AUTHING_FUNC_ID\");\n        PipelineFunctionSingleRespDto pipelineFunctionSingleRespDto = client.reuploadPipelineFunction(reUploadPipelineFunctionDto);\n        System.out.println(JsonUtils.serialize(pipelineFunctionSingleRespDto));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.reuploadPipelineFunction({\n    funcId: '62ce9135dxxxxb83e373f5d6',\n });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/update-pipeline-function":{"post":{"operationId":"PipelineManagementController_updatePipelineFunction","summary":"修改 Pipeline 函数","description":"修改 Pipeline 函数","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdatePipelineFunctionDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PipelineFunctionSingleRespDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListPipelineFunctions(new ListPipelineFunctionDto { });\r\n            var target = res1.Data.List.First();\r\n            var res = await managementClient.UpdatePipelineFunction(new UpdatePipelineFunctionDto() { FuncId = target.FuncId, Timeout = 20 });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentPackageRespDto;\nimport cn.authing.sdk.java.dto.PipelineFunctionSingleRespDto;\nimport cn.authing.sdk.java.dto.UpdatePipelineFunctionDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdatePipelineFunctionTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdatePipelineFunctionDto updatePipelineFunctionDto = new UpdatePipelineFunctionDto();\n        updatePipelineFunctionDto.setFuncId(\"AUTHING_FUNC_ID\");\n        PipelineFunctionSingleRespDto pipelineFunctionSingleRespDto = client.updatePipelineFunction(updatePipelineFunctionDto);\n        System.out.println(JsonUtils.serialize(pipelineFunctionSingleRespDto));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updatePipelineFunction({\n    funcId: '6352c8xxxxxx117ecbf95514',\n    funcName: '每周日凌晨 3-6 点系统维护禁止注册/登录',\n    funcDescription: '每周日凌晨 3-6 点系统维护禁止注册/登录。',\n    sourceCode: `async function pipe(user, context, callback) {\n    const date = new Date();\n    const d = date.getDay();\n    const n = date.getHours();\n    // 每周日凌晨 3-6 点禁止注册\n    if (d === 0 && (3 <= n && n <= 6)) {\n      return callback(new Error('系统维护中，暂时停止注册！'));\n    }\n    callback(null, user, context)\n  }`,\n    isAsynchronous: false,\n    timeout: 3,\n    terminateOnTimeout: false,\n    enabled: false\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/update-pipeline-order":{"post":{"operationId":"PipelineManagementController_updatePipelineOrder","summary":"修改 Pipeline 函数顺序","description":"修改 Pipeline 函数顺序","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdatePipelineOrderDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListPipelineFunctions(new ListPipelineFunctionDto { });\r\n            var target = res1.Data.List.First();\r\n            var res2 = await managementClient.UpdatePipelineOrder(new UpdatePipelineOrderDto\r\n            {\r\n                Scene = UpdatePipelineOrderDto.scene.PRE_REGISTER,\r\n                Order = new List<string>() { target.FuncId }\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CommonResponseDto;\nimport cn.authing.sdk.java.dto.CostGetCurrentPackageRespDto;\nimport cn.authing.sdk.java.dto.UpdatePipelineOrderDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UpdatePipelineOrderTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdatePipelineOrderDto updatePipelineOrderDto = new UpdatePipelineOrderDto();\n        updatePipelineOrderDto.setScene(UpdatePipelineOrderDto.Scene.POST_AUTHENTICATION);\n        List<String> order = new ArrayList<>();\n        updatePipelineOrderDto.setOrder(order);\n        CommonResponseDto commonResponseDto = client.updatePipelineOrder(updatePipelineOrderDto);\n        System.out.println(JsonUtils.serialize(commonResponseDto));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updatePipelineOrder({\n    scene: Models.UpdatePipelineOrderDto.scene.POST_AUTHENTICATION,\n    order: ['funcId1', 'funcId2']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/delete-pipeline-function":{"post":{"operationId":"PipelineManagementController_deletePipelineFunction","summary":"删除 Pipeline 函数","description":"删除 Pipeline 函数","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeletePipelineFunctionDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"\r\nusing Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListPipelineFunctions(new ListPipelineFunctionDto { });\r\n            var target = res1.Data.List.First();\r\n            var res2 = await managementClient.DeletePipelineFunction(new DeletePipelineFunctionDto\r\n            {\r\n                FuncId = target.FuncId\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CommonResponseDto;\nimport cn.authing.sdk.java.dto.CostGetCurrentPackageRespDto;\nimport cn.authing.sdk.java.dto.DeletePipelineFunctionDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class DeletePipelineFunctionTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeletePipelineFunctionDto deletePipelineFunctionDto = new DeletePipelineFunctionDto();\n        deletePipelineFunctionDto.setFuncId(\"AUTHING_FUNC_ID\");\n        CommonResponseDto commonResponseDto = client.deletePipelineFunction(deletePipelineFunctionDto);\n        System.out.println(JsonUtils.serialize(commonResponseDto));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deletePipelineFunction({\n    funcId: '62ce9135dxxxxb83e373f5d6'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-pipeline-functions":{"get":{"operationId":"PipelineManagementController_listPipelineFunctions","summary":"获取 Pipeline 函数列表","description":"获取 Pipeline 函数列表","parameters":[{"name":"scene","required":true,"in":"query","description":"通过函数的触发场景进行筛选（可选，默认返回所有）：\n- `PRE_REGISTER`: 注册前\n- `POST_REGISTER`: 注册后\n- `PRE_AUTHENTICATION`: 认证前\n- `POST_AUTHENTICATION`: 认证后\n- `PRE_OIDC_ID_TOKEN_ISSUED`: OIDC ID Token 签发前\n- `PRE_OIDC_ACCESS_TOKEN_ISSUED`: OIDC Access Token 签发前\n- `PRE_COMPLETE_USER_INFO`: 补全用户信息前\n    ","example":"PRE_REGISTER","schema":{"enum":["PRE_REGISTER","POST_REGISTER","PRE_AUTHENTICATION","POST_AUTHENTICATION","PRE_OIDC_ID_TOKEN_ISSUED","PRE_OIDC_ACCESS_TOKEN_ISSUED","PRE_COMPLETE_USER_INFO","PRE_MFA_VERIFY","POST_MFA_VERIFY"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PipelineFunctionPaginatedRespDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentPackageRespDto;\nimport cn.authing.sdk.java.dto.ListPipelineFunctionsDto;\nimport cn.authing.sdk.java.dto.PipelineFunctionPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListPipelineFunctionsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListPipelineFunctionsDto listPipelineFunctionsDto = new ListPipelineFunctionsDto();\n        listPipelineFunctionsDto.setScene(\"PRE_OIDC_ACCESS_TOKEN_ISSUED\");\n        PipelineFunctionPaginatedRespDto pipelineFunctionPaginatedRespDto = client.listPipelineFunctions(listPipelineFunctionsDto);\n        System.out.println(JsonUtils.serialize(pipelineFunctionPaginatedRespDto));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listPipelineFunctions({\n    scene: 'PRE_REGISTER'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-pipeline-logs":{"get":{"operationId":"PipelineManagementController_getPipelineLogs","summary":"获取 Pipeline 日志","description":"获取 Pipeline ","parameters":[{"name":"funcId","required":true,"in":"query","description":"Pipeline 函数 ID","example":"62cc23737exxxx8341b1ce16","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PipelineFunctionPaginatedRespDto"}}}}},"tags":["管理 Pipeline/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res1 = await managementClient.ListPipelineFunctions(new ListPipelineFunctionDto { });\r\n            var target = res1.Data.List.First();\r\n            var res2 = await managementClient.GetPipelineLogs(new GetPipelineLogsDto\r\n            {\r\n                FuncId = target.FuncId\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentPackageRespDto;\nimport cn.authing.sdk.java.dto.GetPipelineLogsDto;\nimport cn.authing.sdk.java.dto.PipelineFunctionPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetPipelineLogsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetPipelineLogsDto getPipelineLogsDto = new GetPipelineLogsDto();\n        getPipelineLogsDto.setFuncId(\"AUTHING_FUNC_ID\");\n        PipelineFunctionPaginatedRespDto pipelineLogs = client.getPipelineLogs(getPipelineLogsDto);\n        System.out.println(JsonUtils.serialize(pipelineLogs));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getPipelineLogs({\n    funcId: '62cc23737exxxx8341b1ce16',\n    page: 1,\n    limit: 10\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/create-webhook":{"post":{"operationId":"WebhookManagementController_createWebhook","summary":"创建 Webhook","description":"你需要指定 Webhook 名称、Webhook 回调地址、请求数据格式、用户真实名称来创建 Webhook。还可选是否启用、请求密钥进行创建","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateWebhookDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateWebhookRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.CreateWebhook(new CreateWebhookDto\r\n            {\r\n                Name = \"AUTHING_NAME\",\r\n                Url = \"https://www.baidu.com/callback\",\r\n                Events = new List<string>() { \"user:created\" },\r\n                ContentType = CreateWebhookDto.contentType.APPLICATION_JSON\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.CreateWebhookDto;\nimport cn.authing.sdk.java.dto.CreateWebhookRespDto;\nimport cn.authing.sdk.java.dto.WebhookDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CreateWebhookTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateWebhookDto createWebhookDto = new CreateWebhookDto();\n        createWebhookDto.setContentType(CreateWebhookDto.ContentType.APPLICATION_JSON);\n        List<String> events = new ArrayList<>();\n        events.add(\"user\");\n        createWebhookDto.setEvents(events);\n        createWebhookDto.setUrl(\"https://example.com/callback\");\n        createWebhookDto.setName(\"example\");\n        CreateWebhookRespDto webhook = client.createWebhook(createWebhookDto);\n        System.out.println(JsonUtils.serialize(webhook));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createWebhook({\n    name: '用户创建事件',\n    url: 'https://example.com/callback',\n    events: ['user:created'],\n    contentType: Models.WebhookDto.contentType.APPLICATION_JSON,\n    enabled: true,\n    secret: 'xxxxxxxxxxxx'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-webhooks":{"get":{"operationId":"WebhookManagementController_listWebhooks","summary":"获取 Webhook 列表","description":"获取 Webhook 列表，可选页数、分页大小来获取","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetWebhooksRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListWebhooks(new ListWebhooksDto { });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.GetWebhooksRespDto;\nimport cn.authing.sdk.java.dto.ListWebhooksDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListWebhooksTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListWebhooksDto listWebhooksDto = new ListWebhooksDto();\n        GetWebhooksRespDto getWebhooksRespDto = client.listWebhooks(listWebhooksDto);\n        System.out.println(JsonUtils.serialize(getWebhooksRespDto));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listWebhooks({\n    page: 1,\n    limit: 10\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/update-webhook":{"post":{"operationId":"WebhookManagementController_updateWebhook","summary":"修改 Webhook 配置","description":"需要指定 webhookId，可选 Webhook 名称、Webhook 回调地址、请求数据格式、用户真实名称、是否启用、请求密钥参数进行修改 webhook","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateWebhookDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateWebhooksRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListWebhooks(new ListWebhooksDto { });\r\n            var item = res.Data.List.First();\r\n            var res2 = await managementClient.UpdateWebhook(new UpdateWebhookDto { WebhookId = item.WebhookId, Enabled = false });\r\n\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.UpdateWebhookDto;\nimport cn.authing.sdk.java.dto.UpdateWebhooksRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateWebhookTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateWebhookDto updateWebhookDto = new UpdateWebhookDto();\n        updateWebhookDto.setWebhookId(\"AUTHING_WEBHOOK_ID\");\n        updateWebhookDto.setName(\"example\");\n        UpdateWebhooksRespDto updateWebhooksRespDto = client.updateWebhook(updateWebhookDto);\n        System.out.println(JsonUtils.serialize(updateWebhooksRespDto));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateWebhook({\n    webhookId: '6229ffaxxxxxxxxcade3e3d9',\n    name: '用户创建事件',\n    url: 'https://example.com/callback',\n    events: ['user:created'],\n    contentType: Models.WebhookDto.contentType.APPLICATION_JSON,\n    enabled: true,\n    secret: 'xxxxxxxxxxxx'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/delete-webhook":{"post":{"operationId":"WebhookManagementController_deleteWebhook","summary":"删除 Webhook","description":"通过指定多个 webhookId,以数组的形式进行 webhook 的删除,如果 webhookId 不存在,不提示报错","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteWebhookDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteWebhookRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListWebhooks(new ListWebhooksDto { });\r\n            var item = res.Data.List.First();\r\n            var res2 = await managementClient.DeleteWebhook(new DeleteWebhookDto { WebhookIds = new List<string>() { $\"{item.WebhookId}\" } });\r\n\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.DeleteWebhookDto;\nimport cn.authing.sdk.java.dto.DeleteWebhookRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\n\npublic class DeleteWebhookTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteWebhookDto deleteWebhookDto = new DeleteWebhookDto();\n        ArrayList<String> webhookIds = new ArrayList<>();\n        deleteWebhookDto.setWebhookIds(webhookIds);\n        DeleteWebhookRespDto deleteWebhookRespDto = client.deleteWebhook(deleteWebhookDto);\n        System.out.println(JsonUtils.serialize(deleteWebhookRespDto));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteWebhook({\n    webhookIds: ['6229ffaxxxxxxxxcade3e3d9']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-webhook-logs":{"post":{"operationId":"WebhookManagementController_getWebhookLogs","summary":"获取 Webhook 日志","description":"通过指定 webhookId，可选 page 和 limit 来获取 webhook 日志,如果 webhookId 不存在,不返回报错信息","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListWebhookLogs"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListWebhookLogsRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListWebhooks(new ListWebhooksDto { });\r\n            var item = res.Data.List.First();\r\n            var res2 = await managementClient.GetWebhookLogs(new ListWebhookLogs { Page = 1, Limit = 10, WebhookId = item.WebhookId });\r\n\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.ListWebhookLogs;\nimport cn.authing.sdk.java.dto.ListWebhookLogsRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetWebhookLogsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListWebhookLogs listWebhookLogs = new ListWebhookLogs();\n        listWebhookLogs.setWebhookId(\"AUTHING_WEBHOOK_ID\");\n        ListWebhookLogsRespDto webhookLogs = client.getWebhookLogs(listWebhookLogs);\n        System.out.println(JsonUtils.serialize(webhookLogs));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getWebhookLogs({\n    page: 1,\n    limit: 10,\n    webhookId: '6229ffaxxxxxxxxcade3e3d9'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/trigger-webhook":{"post":{"operationId":"WebhookManagementController_triggerWebhook","summary":"手动触发 Webhook 执行","description":"通过指定 webhookId，可选请求头和请求体进行手动触发 webhook 执行","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerWebhookDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TriggerWebhookRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListWebhooks(new ListWebhooksDto { });\r\n            var item = res.Data.List.First();\r\n            var res2 = await managementClient.TriggerWebhook(new TriggerWebhookDto { WebhookId = item.WebhookId });\r\n\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.TriggerWebhookDto;\nimport cn.authing.sdk.java.dto.TriggerWebhookRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class TriggerWebhookTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        TriggerWebhookDto triggerWebhookDto = new TriggerWebhookDto();\n        triggerWebhookDto.setWebhookId(\"AUTHING_WEBHOOK_ID\");\n        TriggerWebhookRespDto triggerWebhookRespDto = client.triggerWebhook(triggerWebhookDto);\n        System.out.println(JsonUtils.serialize(triggerWebhookRespDto));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.triggerWebhook({\n    webhookId: '6229ffaxxxxxxxxcade3e3d9',\n    requestHeaders: {\n      eventName: 'test',\n      data: {\n        description: 'A\ttest\tfrom\tauthing'\n      }\n    },\n    requestBody: {\n      eventName: 'test',\n      data: {\n        description: 'A\ttest\tfrom\tauthing'\n      }\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-webhook":{"get":{"operationId":"WebhookManagementController_getWebhook","summary":"获取 Webhook 详情","description":"根据指定的 webhookId 获取 webhook 详情","parameters":[{"name":"webhookId","required":true,"in":"query","description":"Webhook ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetWebhookRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.ListWebhooks(new ListWebhooksDto { });\r\n            var item = res.Data.List.First();\r\n            var res2 = await managementClient.GetWebhook(new GetWebhookDto() { WebhookId = item.WebhookId });\r\n\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.GetWebhookDto;\nimport cn.authing.sdk.java.dto.GetWebhookRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetWebhookTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetWebhookDto getWebhookDto = new GetWebhookDto();\n        getWebhookDto.setWebhookId(\"6354e687e0b27d408dc8a9bf\");\n        GetWebhookRespDto webhook = client.getWebhook(getWebhookDto);\n        System.out.println(JsonUtils.serialize(webhook));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getWebhook({\n    webhookId: '6229ffaxxxxxxxxcade3e3d9'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-webhook-event-list":{"get":{"operationId":"WebhookManagementController_getWebhookEventList","summary":"获取 Webhook 事件列表","description":"返回事件列表和分类列表","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebhookEventListRespDto"}}}}},"tags":["管理 Webhook/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetWebhookEventList();\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.WebhookEventListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetWebhookEventListTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        WebhookEventListRespDto webhookEventList = client.getWebhookEventList();\n        System.out.println(JsonUtils.serialize(webhookEventList));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getWebhookEventList();\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-user-action-logs":{"post":{"operationId":"UserActionLogsController_getUserActionLogs","summary":"获取用户行为日志","description":"可以选择请求 ID、客户端 IP、用户 ID、应用 ID、开始时间戳、请求是否成功、分页参数来获取用户行为日志","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetUserActionLogsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserActionLogRespDto"}}}}},"tags":["管理审计日志/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetUserActionLogs(new GetUserActionLogsDto { });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserActionLogsDto;\nimport cn.authing.sdk.java.dto.UserActionLogRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUserActionLogsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserActionLogsDto getUserActionLogsDto = new GetUserActionLogsDto();\n        UserActionLogRespDto userActionLogs = client.getUserActionLogs(getUserActionLogsDto);\n        System.out.println(JsonUtils.serialize(userActionLogs));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserActionLogs({\n    requestId: 'requestId',\n    eventType: 'login',\n    userId: 'userId1',\n    appId: 'appId1',\n    success: true,\n    pagination: {\n      page: 1,\n      limit: 10\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-admin-audit-logs":{"post":{"operationId":"AuditLogsController_getAdminAuditLogs","summary":"获取管理员操作日志","description":"可以选择请求 ID、客户端 IP、操作类型、资源类型、管理员用户 ID、请求是否成功、开始时间戳、结束时间戳、分页来获取管理员操作日志接口","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAdminAuditLogsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AdminAuditLogRespDto"}}}}},"tags":["管理审计日志/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetAdminAuditLogs(new GetAdminAuditLogsDto { });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.AdminAuditLogRespDto;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.GetAdminAuditLogsDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetAdminAuditLogsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetAdminAuditLogsDto getAdminAuditLogsDto = new GetAdminAuditLogsDto();\n        AdminAuditLogRespDto adminAuditLogs = client.getAdminAuditLogs(getAdminAuditLogsDto);\n        System.out.println(JsonUtils.serialize(adminAuditLogs.getData()));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getAdminAuditLogs({\n    requestId: 'requestId',\n    operationType: 'create',\n    userId: 'userId1',\n    resourceType: 'user',\n    success: true,\n    pagination: {\n      page: 1,\n      limit: 10\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-email-templates":{"get":{"operationId":"MessageManagementController_getEmailTemplates","summary":"获取邮件模版列表","description":"获取邮件模版列表","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetEmailTemplatesRespDto"}}}}},"tags":["管理消息服务/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetEmailTemplates();\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\trespDto := client.GetEmailTemplates()\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetEmailTemplatesRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetEmailTemplatesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetEmailTemplatesRespDto response = client.getEmailTemplates();\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getEmailTemplates();\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getEmailTemplates();\nprint_r($data);\n"}}},"/api/v3/update-email-template":{"post":{"operationId":"MessageManagementController_updateEmailTemplate","summary":"修改邮件模版","description":"修改邮件模版","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateEmailTemplateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailTemplateSingleItemRespDto"}}}}},"tags":["管理消息服务/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.UpdateEmailTemplate(new UpdateEmailTemplateDto\r\n            {\r\n                Type = UpdateEmailTemplateDto.type.WELCOME_EMAIL,\r\n                Subject = \"AUTHING_MAIL_SUBJECT\",\r\n                Name = \"AUTHING_MAIL_NAME\",\r\n                Sender = \"AUTHING_MAIL_SENDER\",\r\n                Content = \"AUTHING_MAIL_CONTENT\",\r\n                CustomizeEnabled = true,\r\n                ExpiresIn = 999999\r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateEmailTemplateDto{\n\t\tContent:          \"邮件内容模版\",\n\t\tSender:           \"邮件发件人名称\",\n\t\tSubject:          \"邮件主题\",\n\t\tName:             \"邮件模版名称\",\n\t\tCustomizeEnabled: true,\n\t\tType:             \"WELCOME_EMAIL\",\n\t}\n\trespDto := client.UpdateEmailTemplate(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.EmailTemplateSingleItemRespDto;\nimport cn.authing.sdk.java.dto.UpdateEmailTemplateDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateEmailTemplateTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateEmailTemplateDto reqDto = new UpdateEmailTemplateDto();\n        reqDto.setContent(\"xxx\");\n        reqDto.setSender(\"sender\");\n        reqDto.setSubject(\"欢迎加入\");\n        reqDto.setName(\"欢迎邮件\");\n        reqDto.setCustomizeEnabled(Boolean.FALSE);\n        reqDto.setType(UpdateEmailTemplateDto.Type.WELCOME_EMAIL);\n        EmailTemplateSingleItemRespDto response = client.updateEmailTemplate(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateEmailTemplate({\n    type: Models.UpdateEmailTemplateDto.type.WELCOME_EMAIL,\n    customizeEnabled: true,\n    name: '欢迎邮件',\n    subject: '欢迎加入 {{app_name}}',\n    sender: '{{client_name}}',\n    content: 'xxx',\n    expiresIn: 300,\n    redirectTo: 'https://example.com',\n    tplEngine: Models.UpdateEmailTemplateDto.tplEngine.HANDLEBAR\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateEmailTemplate(array(\n    \"type\" => \"WELCOME_EMAIL\",\n    \"content\" => \"邮件内容模版\",\n    \"sender\" => \"邮件发件人名称\",\n    \"subject\" => \"邮件主题\",\n    \"name\" => \"邮件模版名称\",\n    \"customizeEnabled\" => true\n));\nprint_r($data);\n"}}},"/api/v3/preview-email-template":{"post":{"operationId":"MessageManagementController_previewEmailTemplate","summary":"预览邮件模版","description":"预览邮件模版","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PreviewEmailTemplateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PreviewEmailTemplateRespDto"}}}}},"tags":["管理消息服务/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.PreviewEmailTemplate(new PreviewEmailTemplateDto { Type = PreviewEmailTemplateDto.type.WELCOME_EMAIL, ExpiresIn = 1 });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.PreviewEmailTemplateDto{\n\t\tType: \"WELCOME_EMAIL\",\n\t}\n\trespDto := client.PreviewEmailTemplate(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.PreviewEmailTemplateDto;\nimport cn.authing.sdk.java.dto.PreviewEmailTemplateRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class PreviewEmailTemplateTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        PreviewEmailTemplateDto reqDto = new PreviewEmailTemplateDto();\n        reqDto.setSender(\"sender\");\n        reqDto.setType(PreviewEmailTemplateDto.Type.WELCOME_EMAIL);\n\n        PreviewEmailTemplateRespDto response = client.previewEmailTemplate(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.previewEmailTemplate({\n    type: Models.PreviewEmailTemplateDto.type.WELCOME_EMAIL,\n    content: 'xxx',\n    subject: '欢迎加入 {{app_name}}',\n    sender: '{{client_name}}',\n    expiresIn: 300,\n    tplEngine: Models.PreviewEmailTemplateDto.tplEngine.HANDLEBAR\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->previewEmailTemplate(array(\n    \"type\" => \"WELCOME_EMAIL\",\n));\nprint_r($data);\n"}}},"/api/v3/get-email-provider":{"get":{"operationId":"MessageManagementController_getEmailProvider","summary":"获取第三方邮件服务配置","description":"获取第三方邮件服务配置","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailProviderRespDto"}}}}},"tags":["管理消息服务/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.EmailProviderRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetEmailProviderTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        EmailProviderRespDto response = client.getEmailProvider();\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n"}}},"/api/v3/config-email-provider":{"post":{"operationId":"MessageManagementController_configEmailProvider","summary":"配置第三方邮件服务","description":"配置第三方邮件服务","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ConfigEmailProviderDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailProviderRespDto"}}}}},"tags":["管理消息服务/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-application":{"get":{"operationId":"ApplicationsManagementController_getApplication","summary":"获取应用详情","description":"通过应用 ID，获取应用详情。","parameters":[{"name":"appId","required":true,"in":"query","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApplicationSingleRespDto"}}}}},"tags":["管理应用/API 列表","管理租户应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.GetApplication(new GetApplicationDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetApplicationDto{\n\t\tAppId: \"635143ae1xxxx1b9afb54c39\",\n\t}\n\trespDto := client.GetApplication(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ApplicationSingleRespDto;\nimport cn.authing.sdk.java.dto.GetApplicationDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetApplicationTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetApplicationDto reqDto = new GetApplicationDto();\n        reqDto.setAppId(\"6229ffaxxxxxxxxcade3e3d9\");\n        ApplicationSingleRespDto response = client.getApplication(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getApplication({\n    appId: '6229ffaxxxxxxxxcade3e3d9'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getApplication(\n    array(\n        \"appId\" => \"635143ae1xxxx1b9afb54c39\"\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-subject-auth-detail":{"get":{"operationId":"ApplicationsManagementController_detailAuthSubject","summary":"主体授权详情","description":"主体授权详情","parameters":[{"name":"targetId","required":true,"in":"query","description":"主体 id","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"targetType","required":true,"in":"query","description":"主体类型","example":"USER","schema":{"enum":["USER","ROLE","GROUP","ORG","AK_SK"],"type":"string"}},{"name":"appId","required":true,"in":"query","description":"应用 ID","example":"5a597f35085a2000144a10ed","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetSubjectAuthRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-subject-auth":{"post":{"operationId":"ApplicationsManagementController_listAuthSubject","summary":"主体授权列表","description":"主体授权列表","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListAuthSubjectDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListApplicationSubjectRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-applications-auth":{"post":{"operationId":"ApplicationsManagementController_listAuthApplication","summary":"应用授权列表","description":"应用授权列表","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListApplicationAuthDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListApplicationAuthPaginatedRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-auth-enabled":{"post":{"operationId":"ApplicationsManagementController_enabledAuth","summary":"更新授权开关","description":"更新授权开关","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateAuthEnabledDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/batch-applications-auth":{"delete":{"operationId":"ApplicationsManagementController_deleteAuth","summary":"批量删除应用授权","description":"批量删除应用授权","parameters":[{"name":"authIds","required":true,"in":"query","description":"授权 ID","example":["6229ffaxxxxxxxxcade3e3d9"],"schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-applications":{"get":{"operationId":"ApplicationsManagementController_listApplications","summary":"获取应用列表","description":"获取应用列表","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"isIntegrateApp","required":false,"in":"query","description":"是否为集成应用","schema":{"default":false,"type":"boolean"}},{"name":"isSelfBuiltApp","required":false,"in":"query","description":"是否为自建应用","schema":{"default":false,"type":"boolean"}},{"name":"ssoEnabled","required":false,"in":"query","description":"是否开启单点登录","schema":{"default":false,"type":"boolean"}},{"name":"keywords","required":false,"in":"query","description":"模糊搜索字符串","example":"test","schema":{"type":"string"}},{"name":"all","required":false,"in":"query","description":"搜索应用，true：搜索所有应用, 默认为 false","example":true,"schema":{"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApplicationPaginatedRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.ListApplications(new ListApplicationsDto { Keywords = \"AUTHING_APPNAME\", IsSelfBuiltApp = true });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListApplicationsDto{\n\t\tPage:           1,\n\t\tLimit:          10,\n\t}\n\trespDto := client.ListApplications(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ApplicationPaginatedRespDto;\nimport cn.authing.sdk.java.dto.ListApplicationsDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.jar.JarEntry;\n\npublic class ListApplicationsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ApplicationPaginatedRespDto response = client.listApplications(new ListApplicationsDto());\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listApplications({\n    page: 1,\n    limit: 10,\n    keywords: 'test'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listApplications(\n    array(\n        \"page\" => 1,\n        \"limit\" => 10,\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-application-simple-info":{"get":{"operationId":"ApplicationsManagementController_getApplicationSimpleInfo","summary":"获取应用简单信息","description":"通过应用 ID，获取应用简单信息。","parameters":[{"name":"appId","required":true,"in":"query","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApplicationSimpleInfoSingleRespDto"}}}}},"tags":["管理应用/API 列表","管理租户应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.GetApplicationSimpleInfo(new GetApplicationSimpleInfoDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetApplicationSimpleInfoDto{\n\t\tAppId: \"6229ffaxxxxxxxxcade3e3d9\",\n\t}\n\trespDto := client.GetApplicationSimpleInfo(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ApplicationSimpleInfoSingleRespDto;\nimport cn.authing.sdk.java.dto.GetApplicationSimpleInfoDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetApplicationSimpleInfoTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetApplicationSimpleInfoDto reqDto = new GetApplicationSimpleInfoDto();\n        reqDto.setAppId(\"6229ffaxxxxxxxxcade3e3d9\");\n        ApplicationSimpleInfoSingleRespDto response = client.getApplicationSimpleInfo(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getApplicationSimpleInfo({\n    appId: '6229ffaxxxxxxxxcade3e3d9'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getApplicationSimpleInfo(\n    array(\n       \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\"\n    )\n);\nprint_r($data);\n"}}},"/api/v3/list-application-simple-info":{"get":{"operationId":"ApplicationsManagementController_listApplicationSimpleInfo","summary":"获取应用简单信息列表","description":"获取应用简单信息列表","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"isIntegrateApp","required":false,"in":"query","description":"是否为集成应用","schema":{"default":false,"type":"boolean"}},{"name":"isSelfBuiltApp","required":false,"in":"query","description":"是否为自建应用","schema":{"default":false,"type":"boolean"}},{"name":"ssoEnabled","required":false,"in":"query","description":"是否开启单点登录","schema":{"default":false,"type":"boolean"}},{"name":"keywords","required":false,"in":"query","description":"模糊搜索字符串","example":"test","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApplicationSimpleInfoPaginatedRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.ListApplicationSimpleInfo(new ListApplicationSimpleInfoDto { IsSelfBuiltApp = true });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListApplicationSimpleInfoDto{\n\t\tPage:           1,\n\t\tLimit:          10,\n\t}\n\trespDto := client.ListApplicationSimpleInfo(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ApplicationSimpleInfoPaginatedRespDto;\nimport cn.authing.sdk.java.dto.ListApplicationSimpleInfoDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListApplicationSimpleInfoTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ApplicationSimpleInfoPaginatedRespDto response = client.listApplicationSimpleInfo(new ListApplicationSimpleInfoDto());\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listApplicationSimpleInfo({\n    page: 1,\n    limit: 10,\n    keywords: 'test'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listApplicationSimpleInfo(\n    array(\n        \"page\" => 1,\n        \"limit\" => 10,\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-application":{"post":{"operationId":"ApplicationsManagementController_createApplication","summary":"创建应用","description":"创建应用","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateApplicationDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateApplicationRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.CreateApplication(new CreateApplicationDto\r\n            {\r\n                AppName = \"AUTHING_APPNAME\",\r\n                AppIdentifier = \"AUTHING_APPIDENTIFIER\",\r\n                SsoEnabled = false,\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ApplicationPaginatedRespDto;\nimport cn.authing.sdk.java.dto.CreateApplicationDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CreateApplicationTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateApplicationDto reqDto = new CreateApplicationDto();\n        reqDto.setAppName(\"示例应用\");\n        reqDto.setAppIdentifier(\"example\");\n        ApplicationPaginatedRespDto response = client.createApplication(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createApplication({\n    appName: '示例应用',\n    template: 'github',\n    appIdentifier: 'example',\n    appLogo: 'http://baidu.com/favicon.ico',\n    appDescription: '示例描述信息',\n    redirectUris: ['https://example.com/callback'],\n    logoutRedirectUris: ['https://example.com/logout-callback'],\n    initLoginUri: 'https://example.com/login',\n    ssoEnabled: false,\n    brandingConfig: {\n      customCSSEnabled: false,\n      customCSS: `/*\nEdit login page css\neg：\n.authing-guard-layout {\n  background: black !important;\n}\nChange the background color\n*/`,\n      customLoadingImage:\n        'https://files.authing.co/user-contents/photos/cbd51df7-efb1-4b50-b38c-d8e5a04b1830.png',\n      customBackground:\n        'https://files.authing.co/user-contents/photos/cbd51df7-efb1-4b50-b38c-d8e5a04b1830.png',\n      showChangeLanguageButton: false,\n      showForgetPasswordButton: true,\n      showEnterpriseConnections: true,\n      showSocialConnections: true\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/delete-application":{"post":{"operationId":"ApplicationsManagementController_deleteApplication","summary":"删除应用","description":"通过应用 ID，删除应用。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteApplicationDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.DeleteApplication(new DeleteApplicationDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteApplicationDto{\n\t\tAppId: \"6229ffaxxxxxxxxcade3e3d9\",\n\t}\n\trespDto := client.DeleteApplication(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteApplicationDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class DeleteApplicationTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteApplicationDto reqDto = new DeleteApplicationDto();\n        reqDto.setAppId(\"6229ffaxxxxxxxxcade3e3d9\");\n        IsSuccessRespDto response = client.deleteApplication(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteApplication({\n    appId: '6229ffaxxxxxxxxcade3e3d9'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->deleteApplication(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-application-secret":{"get":{"operationId":"ApplicationsManagementController_getApplicationSecret","summary":"获取应用密钥","description":"获取应用密钥","parameters":[{"name":"appId","required":true,"in":"query","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetApplicationSecretRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.GetApplicationSecret(new GetApplicationSecretDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetApplicationSecretDto{\n\t\tAppId: \"6229ffaxxxxxxxxcade3e3d9\",\n\t}\n\trespDto := client.GetApplicationSecret(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetApplicationSecretDto;\nimport cn.authing.sdk.java.dto.GetApplicationSecretRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetApplicationSecretTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetApplicationSecretDto reqDto = new GetApplicationSecretDto();\n        reqDto.setAppId(\"6229ffaxxxxxxxxcade3e3d9\");\n        GetApplicationSecretRespDto response = client.getApplicationSecret(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getApplicationSecret({\n    appId: '6229ffaxxxxxxxxcade3e3d9'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getApplicationSecret(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/refresh-application-secret":{"post":{"operationId":"ApplicationsManagementController_refreshApplicationSecret","summary":"刷新应用密钥","description":"刷新应用密钥","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RefreshApplicationSecretDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RefreshApplicationSecretRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.RefreshApplicationSecret(new RefreshApplicationSecretDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.RefreshApplicationSecretDto{\n\t\tAppId: \"6229ffaxxxxxxxxcade3e3d9\",\n\t}\n\trespDto := client.RefreshApplicationSecret(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.RefreshApplicationSecretDto;\nimport cn.authing.sdk.java.dto.RefreshApplicationSecretRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class RefreshApplicationSecretTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        RefreshApplicationSecretDto reqDto = new RefreshApplicationSecretDto();\n        reqDto.setAppId(\"6229ffaxxxxxxxxcade3e3d9\");\n        RefreshApplicationSecretRespDto response = client.refreshApplicationSecret(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.refreshApplicationSecret({\n    appId: '6229ffaxxxxxxxxcade3e3d9'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->refreshApplicationSecret(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/list-application-active-users":{"post":{"operationId":"ApplicationsManagementController_listApplicationActiveUsers","summary":"获取应用当前登录用户","description":"获取应用当前处于登录状态的用户","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListApplicationActiveUsersDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPaginatedRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.ListApplicationActiveUsers(new ListApplicationActiveUsersDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListApplicationActiveUsersDto{\n\t\tAppId:   \"6229ffaxxxxxxxxcade3e3d9\",\n\t}\n\trespDto := client.ListApplicationActiveUsers(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListApplicationActiveUsersDto;\nimport cn.authing.sdk.java.dto.UserPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListApplicationActiveUsersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListApplicationActiveUsersDto reqDto = new ListApplicationActiveUsersDto();\n        reqDto.setAppId(\"6229ffaxxxxxxxxcade3e3d9\");\n        UserPaginatedRespDto response = client.listApplicationActiveUsers(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listApplicationActiveUsers({\n    appId: '6229ffaxxxxxxxxcade3e3d9',\n    options: {\n      pagination: {\n        page: 1,\n        limit: 10\n      },\n      withCustomData: true,\n      withIdentities: true,\n      withDepartmentIds: true\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->listApplicationActiveUsers(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/get-application-permission-strategy":{"get":{"operationId":"ApplicationsManagementController_getApplicationPermissionStrategy","summary":"获取应用默认访问授权策略","description":"获取应用默认访问授权策略","parameters":[{"name":"appId","required":true,"in":"query","description":"应用 ID","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetApplicationPermissionStrategyRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.GetApplicationPermissionStrategy(new GetApplicationPermissionStrategyDto { AppId = \"AUTHING_APPID\" });\r\n\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetApplicationPermissionStrategyDto{\n\t\tAppId: \"6229ffaxxxxxxxxcade3e3d9\",\n\t}\n\trespDto := client.GetApplicationPermissionStrategy(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetApplicationPermissionStrategyDto;\nimport cn.authing.sdk.java.dto.GetApplicationPermissionStrategyRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetApplicationPermissionStrategyTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetApplicationPermissionStrategyDto reqDto = new GetApplicationPermissionStrategyDto();\n        reqDto.setAppId(\"6229ffaxxxxxxxxcade3e3d9\");\n        GetApplicationPermissionStrategyRespDto response = client.getApplicationPermissionStrategy(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getApplicationPermissionStrategy({\n    appId: '6229ffaxxxxxxxxcade3e3d9'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getApplicationPermissionStrategy(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/update-application-permission-strategy":{"post":{"operationId":"ApplicationsManagementController_updateApplicationPermissionStrategy","summary":"更新应用默认访问授权策略","description":"更新应用默认访问授权策略","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateApplicationPermissionStrategyDataDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.UpdateApplicationPermissionStrategy(new UpdateApplicationPermissionStrategyDataDto\r\n            {\r\n                AppId = \"AUTHING_APPID\",\r\n                PermissionStrategy = UpdateApplicationPermissionStrategyDataDto.permissionStrategy.DENY_ALL\r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateApplicationPermissionStrategyDataDto{\n\t\tPermissionStrategy: \"ALLOW_ALL\",\n\t\tAppId:              \"6229ffaxxxxxxxxcade3e3d9\",\n\t}\n\trespDto := client.UpdateApplicationPermissionStrategy(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.UpdateApplicationPermissionStrategyDataDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateApplicationPermissionStrategyTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateApplicationPermissionStrategyDataDto reqDto = new UpdateApplicationPermissionStrategyDataDto();\n        reqDto.setPermissionStrategy(UpdateApplicationPermissionStrategyDataDto.PermissionStrategy.ALLOW_ALL);\n        reqDto.setAppId(\"6229ffaxxxxxxxxcade3e3d9\");\n        IsSuccessRespDto response = client.updateApplicationPermissionStrategy(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateApplicationPermissionStrategy({\n    appId: '6229ffaxxxxxxxxcade3e3d9',\n    permissionStrategy:\n      Models.UpdateApplicationPermissionStrategyDataDto.permissionStrategy\n        .ALLOW_ALL\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateApplicationPermissionStrategy(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n        \"permissionStrategy\" => \"ALLOW_ALL\",\n    )\n);\nprint_r($data);\n"}}},"/api/v3/authorize-application-access":{"post":{"operationId":"ApplicationsManagementController_authorizeApplicationAccess","summary":"授权应用访问权限","description":"给用户、分组、组织或角色授权应用访问权限，如果用户、分组、组织或角色不存在，则跳过，进行下一步授权，不返回报错","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthorizeApplicationAccessDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表","管理租户应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.AuthorizeApplicationAccessDto{\n\t\tAppId: \"6229ffaxxxxxxxxcade3e3d9\",\n\t\tList: []dto.ApplicationPermissionRecordItem{\n\t\t\t{TargetType: \"USER\", NamespaceCode: \"code1\", InheritByChildren: true, TargetIdentifier: []string{\"6229ffaxxxxxxxxcade3e3d9\"}, Effect: \"ALLOW\"},\n\t\t},\n\t}\n\trespDto := client.AuthorizeApplicationAccess(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ApplicationPermissionRecordItem;\nimport cn.authing.sdk.java.dto.AuthorizeApplicationAccessDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class AuthorizeApplicationAccessTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        AuthorizeApplicationAccessDto reqDto = new AuthorizeApplicationAccessDto();\n        reqDto.setAppId(\"6229ffaxxxxxxxxcade3e3d9\");\n        List<ApplicationPermissionRecordItem> list = new ArrayList<>();\n        ApplicationPermissionRecordItem recordItem = new ApplicationPermissionRecordItem();\n        recordItem.setTargetType(ApplicationPermissionRecordItem.TargetType.USER);\n        recordItem.setTargetIdentifier(Collections.singletonList(\"6sd9ffaxxxxxcade3eds9\"));\n        recordItem.setEffect(ApplicationPermissionRecordItem.Effect.ALLOW);\n        list.add(recordItem);\n        reqDto.setList(list);\n        IsSuccessRespDto response = client.authorizeApplicationAccess(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.authorizeApplicationAccess({\n    appId: '6229ffaxxxxxxxxcade3e3d9',\n    list: [\n      {\n        targetType: Models.AuthorizeApplicationAccessDto.targetType.USER,\n        namespaceCode: 'code1',\n        inheritByChildren: true,\n        targetIdentifier: ['6229ffaxxxxxxxxcade3e3d9'],\n        effect: Models.AuthorizeApplicationAccessDto.effect.ALLOW\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->authorizeApplicationAccess(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n        \"list\" => array(\n            array(\n                \"targetType\" => \"USER\",\n                \"namespaceCode\" => \"code1\",\n                \"inheritByChildren\" => true,\n                \"targetIdentifier\" => array(\"6229ffaxxxxxxxxcade3e3d9\"),\n                \"effect\" => \"ALLOW\",\n            )\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/revoke-application-access":{"post":{"operationId":"ApplicationsManagementController_revokeApplicationAccess","summary":"删除应用访问授权记录","description":"取消给用户、分组、组织或角色的应用访问权限授权,如果传入数据不存在，则返回数据不报错处理。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RevokeApplicationAccessDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表","管理租户应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.RevokeApplicationAccessDto{\n\t\tAppId: \"6229ffaxxxxxxxxcade3e3d9\",\n\t\tList: []dto.DeleteApplicationPermissionRecordItem{\n\t\t\t{\n\t\t\t\tTargetType:       \"USER\",\n\t\t\t\tNamespaceCode:    \"code1\",\n\t\t\t\tTargetIdentifier: []string{\"6229ffaxxxxxxxxcade3e3d9\"},\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.RevokeApplicationAccess(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeleteApplicationPermissionRecordItem;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.dto.RevokeApplicationAccessDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class RevokeApplicationAccessTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        RevokeApplicationAccessDto reqDto = new RevokeApplicationAccessDto();\n        reqDto.setAppId(\"6229ffaxxxxxxxxcade3e3d9\");\n        List<DeleteApplicationPermissionRecordItem> list = new ArrayList<>();\n        DeleteApplicationPermissionRecordItem recordItem = new DeleteApplicationPermissionRecordItem();\n        recordItem.setTargetType(DeleteApplicationPermissionRecordItem.TargetType.USER);\n        recordItem.setTargetIdentifier(Collections.singletonList(\"6sd9ffaxxxxxcade3eds9\"));\n        list.add(recordItem);\n        reqDto.setList(list);\n        IsSuccessRespDto response = client.revokeApplicationAccess(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.revokeApplicationAccess({\n    appId: '6229ffaxxxxxxxxcade3e3d9',\n    list: [\n      {\n        targetType: Models.ApplicationPermissionRecordItem.targetType.USER,\n        namespaceCode: 'code1',\n        targetIdentifier: ['6229ffaxxxxxxxxcade3e3d9']\n      }\n    ]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->revokeApplicationAccess(\n    array(\n        \"appId\" => \"6229ffaxxxxxxxxcade3e3d9\",\n        \"list\" => array(\n            array(\n                \"targetType\" => \"USER\",\n                \"namespaceCode\" => \"code1\",\n                \"targetIdentifier\" => array(\"6229ffaxxxxxxxxcade3e3d9\"),\n            )\n        ),\n    )\n);\nprint_r($data);\n"}}},"/api/v3/check-domain-available":{"post":{"operationId":"ApplicationsManagementController_checkDomainAvailable","summary":"检测域名是否可用","description":"检测域名是否可用于创建新应用或更新应用域名","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckDomainAvailable"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckDomainAvailableSecretRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var dto = await managementClient.CheckDomainAvailable(new CheckDomainAvailable\r\n            {\r\n                Domain = \"AUTHING_DOMAIN\"\r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CheckDomainAvailable{\n\t\tDomain: \"example\",\n\t}\n\trespDto := client.CheckDomainAvailable(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CheckDomainAvailable;\nimport cn.authing.sdk.java.dto.CheckDomainAvailableSecretRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CheckDomainAvailableTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CheckDomainAvailable reqDto = new CheckDomainAvailable();\n        reqDto.setDomain(\"domain-a\");\n        CheckDomainAvailableSecretRespDto response = client.checkDomainAvailable(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.checkDomainAvailable({\n    domain: 'domain-a'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->checkDomainAvailable(\n    array(\n        \"domain\" => \"example\"\n    )\n);\nprint_r($data);\n"}}},"/api/v3/list-tenant-applications":{"get":{"operationId":"ApplicationsManagementController_listTenantApplications","summary":"获取租户应用列表","description":"获取应用列表，可以指定 租户 ID 筛选。","parameters":[{"name":"page","required":true,"in":"query","description":"获取应用列表的页码","example":1,"schema":{"type":"string"}},{"name":"limit","required":true,"in":"query","description":"每页获取的应用数量","example":1,"schema":{"type":"string"}},{"name":"keywords","required":true,"in":"query","description":"搜索关键字","schema":{"type":"string"}},{"name":"sso_enabled","required":true,"in":"query","description":"应用是否加入单点登录","schema":{"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TenantApplicationListPaginatedRespDto"}}}}},"tags":["管理应用/API 列表","管理租户应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-login-page-config":{"post":{"operationId":"ApplicationsManagementController_updateLoginPageConfig","summary":"更新应用登录页配置","description":"通过应用 ID 更新登录页配置。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateLoginConfigDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/userpool-tenant-config":{"get":{"operationId":"ApplicationsManagementController_userpollTenantConfig","summary":"获取用户池租户配置信息","description":"根据用户池 ID 获取用户池多租户配置信息","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPoolTenantConfigDtoRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-userpool-tenant-config":{"post":{"operationId":"ApplicationsManagementController_updateUserPoolTenantConfig","summary":"更新用户池租户配置信息","description":"更新用户池多租户配置内登录信息","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateUserPoolTenantLoginConfigDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-userpool-tenant-appqrcode-state":{"post":{"operationId":"ApplicationsManagementController_updateTenantQRCodeState","summary":"更新租户控制台扫码登录状态","description":"更新租户控制台扫码登录状态","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateTenantAppqrcodeState"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/change-userpool-tenant-ext-idp-conn-state":{"post":{"operationId":"ApplicationsManagementController_changeUserpoolTenanExtIdpConnState","summary":"设置用户池多租户身份源连接","description":"设置用户池多租户身份源连接，支持同时设置多个身份源连接，支持设置连接和取消连接","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangeUserPoolTenantExtIdpConnDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-application-mfa-settings":{"post":{"operationId":"ApplicationsManagementController_updateApplicationMfaSettings","summary":"修改应用多因素认证配置","description":"传入 MFA 认证因素列表进行开启或关闭","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateApplicationMfaSettingsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MFASettingsRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-mfa-trigger-data":{"get":{"operationId":"ApplicationsManagementController_getMfaTriggerData","summary":"获取应用下用户 MFA 触发数据","description":"获取应用下用户 MFA 触发数据。","parameters":[{"name":"appId","required":true,"in":"query","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7","schema":{"type":"string"}},{"name":"userId","required":true,"in":"query","description":"用户的唯一标志，可以是用户 ID、用户名、邮箱、手机号、externalId、在外部身份源的 ID，详情见 userIdType 字段的说明。默认为用户 id 。","example":"6229ffaxxxxxxxxcade3e3d9","schema":{"type":"string"}},{"name":"userIdType","required":false,"in":"query","description":"用户 ID 类型，默认值为 `user_id`，可选值为：\n- `user_id`: Authing 用户 ID，如 `6319a1504f3xxxxf214dd5b7`\n- `phone`: 用户手机号\n- `email`: 用户邮箱\n- `username`: 用户名\n- `external_id`: 用户在外部系统的 ID，对应 Authing 用户信息的 `externalId` 字段\n- `identity`: 用户的外部身份源信息，格式为 `<extIdpId>:<userIdInIdp>`，其中 `<extIdpId>` 为 Authing 身份源的 ID，`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`62f20932716fbcc10d966ee5:ou_8bae746eac07cd2564654140d2a9ac61`。\n- `sync_relation`: 用户的外部身份源信息，格式为 `<provier>:<userIdInIdp>`，其中 `<provier>` 为同步身份源类型，如 wechatwork, lark；`<userIdInIdp>` 为用户在外部身份源的 ID。\n示例值：`lark:ou_8bae746eac07cd2564654140d2a9ac61`。\n","example":"user_id","schema":{"default":"user_id","enum":["user_id","external_id","phone","email","username","identity","sync_relation","custom_field"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetMapInfoRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-asa-account":{"post":{"operationId":"AsaAccountManagementController_createAsaAccount","summary":"创建 ASA 账号","description":"在某一应用下创建 ASA 账号","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateAsaAccountDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AsaAccountSingleRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-asa-accounts-batch":{"post":{"operationId":"AsaAccountManagementController_createAsaAccountBatch","summary":"批量创建 ASA 账号","description":"在某一应用下批量创建 ASA 账号","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateAsaAccountsBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-asa-account":{"post":{"operationId":"AsaAccountManagementController_updateAsaAccount","summary":"更新 ASA 账号","description":"更新某个 ASA 账号信息","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateAsaAccountDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AsaAccountSingleRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-asa-accounts":{"get":{"operationId":"AsaAccountManagementController_listAsaAccount","summary":"获取 ASA 账号列表","description":"分页获取某一应用下的 ASA 账号列表","parameters":[{"name":"appId","required":true,"in":"query","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"minimum":1,"maximum":50,"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AsaAccountPaginatedRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-asa-account":{"get":{"operationId":"AsaAccountManagementController_getAsaAccount","summary":"获取 ASA 账号","description":"根据 ASA 账号 ID 获取账号详细信息","parameters":[{"name":"appId","required":true,"in":"query","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7","schema":{"type":"string"}},{"name":"accountId","required":true,"in":"query","description":"ASA 账号 ID","example":"6228edaxxxxxxxxcade3a3d9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AsaAccountSingleRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-asa-accounts-batch":{"post":{"operationId":"AsaAccountManagementController_getAsaAccountBatch","summary":"批量获取 ASA 账号","description":"根据 ASA 账号 ID 列表批量获取账号详细信息","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAsaAccountBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AsaAccountListRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-asa-account":{"post":{"operationId":"AsaAccountManagementController_deleteAsaAccount","summary":"删除 ASA 账号","description":"通过 ASA 账号 ID 删除 ASA 账号","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteAsaAccountDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-asa-accounts-batch":{"post":{"operationId":"AsaAccountManagementController_deleteAsaAccountBatch","summary":"批量删除 ASA 账号","description":"通过 ASA 账号 ID 批量删除 ASA 账号","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteAsaAccountBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/assign-asa-account":{"post":{"operationId":"AsaAccountManagementController_assignAsaAccount","summary":"分配 ASA 账号","description":"分配 ASA 账号给用户、组织、分组或角色","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssignAsaAccountsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/unassign-asa-account":{"post":{"operationId":"AsaAccountManagementController_unassignAsaAccount","summary":"取消分配 ASA 账号","description":"取消分配给用户、组织、分组或角色的  ASA 账号","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssignAsaAccountsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-asa-account-assigned-targets":{"get":{"operationId":"AsaAccountManagementController_getAsaAccountAssignedTargets","summary":"获取 ASA 账号分配的主体列表","description":"根据 ASA 账号 ID 分页获取账号被分配的主体列表","parameters":[{"name":"appId","required":true,"in":"query","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7","schema":{"type":"string"}},{"name":"accountId","required":true,"in":"query","description":"ASA 账号 ID","example":"6228edaxxxxxxxxcade3a3d9","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"minimum":1,"maximum":50,"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAsaAccountAssignedTargetRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-assigned-account":{"get":{"operationId":"AsaAccountManagementController_getAssignedAccount","summary":"获取主体被分配的 ASA 账号","description":"根据主体类型和标识获取直接分配给主体的 ASA 账号","parameters":[{"name":"appId","required":true,"in":"query","description":"所属应用 ID","example":"62a50xxxxxxxxxxxd15d57c7","schema":{"type":"string"}},{"name":"targetType","required":true,"in":"query","description":"目标对象类型：\n- `USER`: 用户\n- `ROLE`: 角色\n- `GROUP`: 分组\n- `DEPARTMENT`: 部门\n    ","example":"USER","schema":{"enum":["USER","ROLE","GROUP","DEPARTMENT"],"type":"string"}},{"name":"targetIdentifier","required":true,"in":"query","description":"目标对象的唯一标志符：\n- 如果是用户，为用户的 ID，如 `6343b98b7cfxxx9366e9b7c`\n- 如果是角色，为角色的 code，如 `admin`\n- 如果是分组，为分组的 code，如 `developer`\n- 如果是部门，为部门的 ID，如 `6343bafc019xxxx889206c4c`\n        ","example":"code","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AsaAccountSingleNullableRespDto"}}}}},"tags":["管理应用/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-security-settings":{"get":{"operationId":"SecurityAPIV3Controller_getSecuritySettings","summary":"获取安全配置","description":"无需传参获取安全配置","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SecuritySettingsRespDto"}}}}},"tags":["管理安全配置/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetSecuritySettings();\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\trespDto := client.GetSecuritySettings()\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.SecuritySettingsRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetSecuritySettingsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        SecuritySettingsRespDto response = client.getSecuritySettings();\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getSecuritySettings();\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getSecuritySettings();\nprint_r($data);\n"}}},"/api/v3/update-security-settings":{"post":{"operationId":"SecurityAPIV3Controller_updateSecuritySettings","summary":"修改安全配置","description":"可选安全域、Authing Token 有效时间（秒）、验证码长度、验证码尝试次数、用户修改邮箱的安全策略、用户修改手机号的安全策略、Cookie 过期时间设置、是否禁止用户注册、频繁注册检测配置、验证码注册后是否要求用户设置密码、未验证的邮箱登录时是否禁止登录并发送认证邮件、用户自助解锁配置、Authing 登录页面是否开启登录账号选择、APP 扫码登录安全配置进行修改安全配置","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateSecuritySettingsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SecuritySettingsRespDto"}}}}},"tags":["管理安全配置/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.UpdateSecuritySettings(new UpdateSecuritySettingsDto\r\n            {\r\n                AllowedOrigins = new List<string>() { \"AUTHING_ALLOW_ORIGIN\" }\r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateSecuritySettingsDto{\n\t\tRegisterDisabled: true,\n\t}\n\trespDto := client.UpdateSecuritySettings(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.SecuritySettingsRespDto;\nimport cn.authing.sdk.java.dto.UpdateSecuritySettingsDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class UpdateSecuritySettingsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        SecuritySettingsRespDto response = client.updateSecuritySettings(new UpdateSecuritySettingsDto());\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateSecuritySettings({\n    authingTokenExpiresIn: 1296000,\n    verifyCodeLength: 4,\n    verifyCodeMaxAttempts: 1,\n    changeEmailStrategy: {\n      verifyOldEmail: true\n    }\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateSecuritySettings(array(\n    \"registerDisabled\" => true\n));\nprint_r($data);\n"}}},"/api/v3/get-global-mfa-settings":{"get":{"operationId":"SecurityAPIV3Controller_getGlobalMfaSettings","summary":"获取全局多因素认证配置","description":"无需传参获取全局多因素认证配置","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MFASettingsRespDto"}}}}},"tags":["管理安全配置/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetGlobalMfaSettings();\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\trespDto := client.GetGlobalMfaSettings()\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.SecuritySettingsRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetSecuritySettingsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        SecuritySettingsRespDto response = client.getSecuritySettings();\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getGlobalMfaSettings();\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->getGlobalMfaSettings();\nprint_r($data);\n"}}},"/api/v3/update-global-mfa-settings":{"post":{"operationId":"SecurityAPIV3Controller_updateGlobalMfaSettings","summary":"修改全局多因素认证配置","description":"传入 MFA 认证因素列表进行开启,","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MFASettingsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MFASettingsRespDto"}}}}},"tags":["管理安全配置/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.UpdateGlobalMfaSettings(new MFASettingsDto\r\n            {\r\n                EnabledFactors = new List<string>() { \"OTP\", \"SMS\", \"EMAIL\", \"FACE\" }\r\n            });\r\n        }\r\n    }\r\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.MFASettingsDto{\n\t\tEnabledFactors: []string{\"SMS\"},\n\t}\n\trespDto := client.UpdateGlobalMfaSettings(reqDto)\n\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.EnrollFactorDto;\nimport cn.authing.sdk.java.dto.MFASettingsDto;\nimport cn.authing.sdk.java.dto.MFASettingsRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class UpdateGlobalMfaSettingsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        MFASettingsDto reqDto = new MFASettingsDto();\n        reqDto.setEnabledFactors(Collections.singletonList(EnrollFactorDto.FactorType.OTP.getValue()));\n        MFASettingsRespDto response = client.updateGlobalMfaSettings(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n","php":"<?php\n\nuse Authing\\ManagementClient;\n\n// 需要替换成你的 Authing Access Key ID\n$AUTHING_ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n// 需要替换成你的 Authing Access Key Secret\n$AUTHING_ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n// 初始化 ManagementClient\n$managementClient = new Authing\\ManagementClient(\n    array(\n        \"accessKeyId\" => $AUTHING_ACCESS_KEY_ID,\n        \"accessKeySecret\" => $AUTHING_ACCESS_KEY_SECRET,\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // \"host\" => \"https://api.your-authing-service.com\"\n    )\n);\n\n$data = $managementClient->updateGlobalMfaSettings(\n    array(\n        \"enabledFactors\" => array(\"SMS\")\n    )\n);\nprint_r($data);\n"}}},"/api/v3/create-tenant":{"post":{"operationId":"TenantManagementController_createTenant","summary":"创建租户","description":"","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTenantDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTenantRespDto"}}}}},"tags":["管理多租户/API 列表","管理租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-tenant":{"post":{"operationId":"TenantManagementController_updateTenant","summary":"更新租户数据","description":"此接口用于更新租户基本信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateTenantDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理多租户/API 列表","管理租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-tenant":{"post":{"operationId":"TenantManagementController_deleteTenant","summary":"删除租户","description":"此接口用于删除租户。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteTenantDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理多租户/API 列表","管理租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-tenants":{"get":{"operationId":"TenantManagementController_listTenants","summary":"获取/搜索租户列表","description":"此接口用于获取租户列表，支持模糊搜索。","parameters":[{"name":"keywords","required":false,"in":"query","description":"搜索关键字","schema":{"type":"string"}},{"name":"withMembersCount","required":false,"in":"query","description":"是否增加返回租户成员统计","schema":{"type":"boolean"}},{"name":"withAppDetail","required":false,"in":"query","description":"增加返回租户下 app 简单信息","schema":{"type":"boolean"}},{"name":"withCreatorDetail","required":false,"in":"query","description":"增加返回租户下创建者简单信息","schema":{"type":"boolean"}},{"name":"withSourceAppDetail","required":false,"in":"query","description":"增加返回租户下来源 app 简单信息","schema":{"type":"boolean"}},{"name":"page","required":false,"in":"query","description":"页码","schema":{"type":"string"}},{"name":"limit","required":false,"in":"query","description":"每页获取的数据量","schema":{"type":"string"}},{"name":"source","required":false,"in":"query","description":"租户来源","schema":{}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TenantListPaginatedRespDto"}}}}},"tags":["管理多租户/API 列表","管理租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-tenant-little-info":{"get":{"operationId":"TenantManagementController_getTenantLittleInfo","summary":"获取租户一点点的信息","description":"根据租户 ID 获取租户一点点的详情","parameters":[{"name":"tenantId","required":true,"in":"query","description":"租户 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"withMembersCount","required":false,"in":"query","description":"是否增加返回租户成员统计","example":false,"schema":{"type":"boolean"}},{"name":"withAppDetail","required":false,"in":"query","description":"增加返回租户关联应用简单信息","example":false,"schema":{"type":"boolean"}},{"name":"withCreatorDetail","required":false,"in":"query","description":"增加返回租户下创建者简单信息","example":false,"schema":{"type":"boolean"}},{"name":"withSourceAppDetail","required":false,"in":"query","description":"增加返回租户来源应用简单信息","example":false,"schema":{"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TenantSingleRespDto"}}}}},"tags":["管理多租户/API 列表","管理租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-tenant":{"get":{"operationId":"TenantManagementController_getTenant","summary":"获取租户详情","description":"根据租户 ID 获取租户详情","parameters":[{"name":"tenantId","required":true,"in":"query","description":"租户 ID","example":"60b49eb83fd80adb96f26e68","schema":{"type":"string"}},{"name":"withMembersCount","required":false,"in":"query","description":"是否增加返回租户成员统计","example":false,"schema":{"type":"boolean"}},{"name":"withAppDetail","required":false,"in":"query","description":"增加返回租户关联应用简单信息","example":false,"schema":{"type":"boolean"}},{"name":"withCreatorDetail","required":false,"in":"query","description":"增加返回租户下创建者简单信息","example":false,"schema":{"type":"boolean"}},{"name":"withSourceAppDetail","required":false,"in":"query","description":"增加返回租户来源应用简单信息","example":false,"schema":{"type":"boolean"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TenantSingleRespDto"}}}}},"tags":["管理多租户/API 列表","管理租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/import-tenant":{"post":{"operationId":"TenantManagementController_importTenant","summary":"导入租户","description":"此接口用于 Excel 导入租户。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImportTenantDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImportTenantRespDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/import-tenant-history":{"get":{"operationId":"TenantManagementController_importTenantHistory","summary":"导入租户历史","description":"此接口用于 Excel 导入租户的历史查询。","parameters":[{"name":"page","required":false,"in":"query","description":"页码","schema":{"type":"string"}},{"name":"limit","required":false,"in":"query","description":"每页获取的数据量","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImportTenantHistoryRespDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/import-tenant-notify-user":{"get":{"operationId":"TenantManagementController_importTenantNotifyUser","summary":"导入租户通知用户列表","description":"此接口用于查询导入租户通知用户列表。","parameters":[{"name":"importId","required":true,"in":"query","description":"导入记录 id","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"页码","schema":{"type":"string"}},{"name":"limit","required":false,"in":"query","description":"每页获取的数据量","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ImportTenantNotifyUserRespDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/send-email-batch":{"post":{"operationId":"TenantManagementController_sendEmailBatch","summary":"导入租户通知邮箱用户","description":"此接口用于批量发送邮件通知。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SendManyTenantEmailDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SendEmailBatchDataDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/send-sms-batch":{"post":{"operationId":"TenantManagementController_sendSmsBatch","summary":"导入租户短信通知用户","description":"此接口用于批量发送短信通知。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SendManyTenantSmsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SendSmsBatchRespDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-tenant-admin":{"post":{"operationId":"TenantManagementController_listTenantAdmin","summary":"获取租户管理员列表","description":"此接口用于获取租户成员列表，支持模糊搜索。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListTenantAdminDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TenantUserListPaginatedRespDto"}}}}},"tags":["管理多租户/API 列表","管理租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/set-tenant-admin":{"post":{"operationId":"TenantManagementController_setTenantAdmin","summary":"设置租户管理员","description":"此接口用于根据用户 ID 或租户成员 ID 设置租户管理员。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveTenantUsersDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理多租户/API 列表","管理租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-tenant-admin":{"post":{"operationId":"TenantManagementController_deleteTenantAdmin","summary":"取消设置租户管理员","description":"此接口用于根据用户 ID 或租户成员 ID 取消设置租户管理员。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetTenantUserDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理多租户/API 列表","管理租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-tenant-user":{"post":{"operationId":"TenantManagementController_deleteTenantUser","summary":"批量移除租户成员","description":"此接口用于根据用户 ID 或租户成员 ID 批量移除租户成员。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveTenantUsersDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/generate-invite-tenant-user-link":{"post":{"operationId":"TenantManagementController_generateInviteTenantUserLink","summary":"生成一个邀请租户成员的链接","description":"此接口用于生成一个邀请租户成员的链接。appId 为用户注册成功后要访问的应用 ID","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GenerateInviteTenantUserLink"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InviteTenantUsersRespDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-invite-tenant-user-records":{"get":{"operationId":"TenantManagementController_listInviteTennatUserRecords","summary":"获取可访问的租户控制台列表","description":"根据用户 ID 获取可访问的租户控制台列表","parameters":[{"name":"keywords","required":true,"in":"query","description":"搜索关键字","schema":{"type":"string"}},{"name":"page","required":true,"in":"query","description":"页码","schema":{"type":"string"}},{"name":"limit","required":true,"in":"query","description":"每页获取的数据量","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InviteTenantUserRecordListRespDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-multiple-tenant-admins":{"get":{"operationId":"TenantManagementController_listMultipleTenantAdmin","summary":"获取多租户管理员用户列表","description":"根据用户池 ID 获取某个用户池内拥有多租户管理权限的用户列表","parameters":[{"name":"keywords","required":false,"in":"query","description":"搜索关键字","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"页码","schema":{"type":"string"}},{"name":"limit","required":false,"in":"query","description":"每页获取的数据量","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MultipleTenantAdminPaginatedRespDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-multiple-tenant-admin":{"post":{"operationId":"TenantManagementController_createMultipleTenantAdmin","summary":"创建多租户管理员用户","description":"根据用户 ID 创建一个用户池内拥有多租户管理权限的用户","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateMultipleTenantAdminDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-multiple-tenant-admin":{"get":{"operationId":"TenantManagementController_getMultipleTenantAdmin","summary":"获取多租户管理员用户列表","description":"根据用户池 ID 获取某个用户池内拥有多租户管理权限的用户列表","parameters":[{"name":"userId","required":true,"in":"query","description":"用户 ID","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MultipleTenantAdminPaginatedRespDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-multiple-tenant-admin":{"post":{"operationId":"TenantManagementController_updateMultipleTenantAdmin","x-authing-hidden-from-sdk":true,"summary":"更新多租户管理员用户","description":"根据用户 ID 更新一个用户池内拥有多租户管理权限的用户的信息","parameters":[{"name":"userId","required":true,"in":"query","description":"用户 ID","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateMultipleTenantAdminDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-multiple-tenant-admin":{"post":{"operationId":"TenantManagementController_deleteMultipleTenantAdmin","x-authing-hidden-from-sdk":true,"summary":"删除多租户管理员用户","description":"根据用户 ID 删除一个用户池内拥有多租户管理权限的用户","parameters":[{"name":"userId","required":false,"in":"query","description":"用户 ID（请使用 body 中的 userId）","deprecated":true,"schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteMultipleTenantAdminBodyDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-tenant-cooperators":{"get":{"operationId":"TenantManagementController_listTenantCooperators","summary":"获取协作管理员用户列表","description":"根据用户池 ID 获取某个用户池内拥有协作管理员能力的用户列表","parameters":[{"name":"keywords","required":false,"in":"query","description":"搜索关键字","schema":{"type":"string"}},{"name":"external","required":false,"in":"query","description":"是否外部","schema":{"type":"boolean"}},{"name":"page","required":false,"in":"query","description":"页码","schema":{"type":"string"}},{"name":"limit","required":false,"in":"query","description":"每页获取的数据量","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TenantCooperatorPaginatedRespDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-tenant-cooperator":{"get":{"operationId":"TenantManagementController_getTenantCooperator","summary":"获取一个协调管理员","description":"根据用户池 ID 获取某个协调管理员的列表","parameters":[{"name":"userId","required":true,"in":"query","description":"用户 ID","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TenantCooperatorSingleRespDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-tenant-cooperator-menu":{"get":{"operationId":"TenantManagementController_getTenantCooperatorMenu","summary":"获取一个协调管理员拥有的列表","description":"根据用户池 ID 获取某个协调管理员的列表","parameters":[{"name":"userId","required":true,"in":"query","description":"用户 ID","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TenantCooperatorSingleRespDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-tenant-cooperator":{"post":{"operationId":"TenantManagementController_createTenantCooperator","summary":"创建协调管理员","description":"创建一个协调管理员","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTenantCooperatorDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-tenant-cooperator":{"post":{"operationId":"TenantManagementController_updateTenantCooperator","x-authing-hidden-from-sdk":true,"summary":"更新协调管理员","description":"根据用户 ID 更新一个协调管理员","parameters":[{"name":"userId","required":true,"in":"query","description":"用户 ID","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateTenantCooperatorDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-tenant-cooperator":{"post":{"operationId":"TenantManagementController_deleteTenantCooperator","x-authing-hidden-from-sdk":true,"summary":"删除协调管理员","description":"使用用户 ID 删除一个协调管理员","parameters":[{"name":"userId","required":false,"in":"query","description":"用户 ID（请使用 body 中的 userId）","deprecated":true,"schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteTenantCooperatorBodyDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理多租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-tenant-by-code":{"get":{"operationId":"TenantManagementController_getTenantByCode","summary":"获取租户详情","description":"根据租户 Code 获取租户详情","parameters":[{"name":"code","required":true,"in":"query","description":"租户 Code","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TenantSingleRespDto"}}}}},"tags":["管理多租户/API 列表","管理租户/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/send-invite-tenant-user-email":{"post":{"operationId":"TenantUserAPIV3ManagementController_sendInviteTenantUserEmail","summary":"发送邀请租户用户邮件","description":"向多个邮箱发送邀请成为租户用户的邮件","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SendInviteTenantUserEmailDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理租户成员/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/add-tenant-users":{"post":{"operationId":"TenantUserAPIV3ManagementController_addTenantUsers","summary":"添加租户成员","description":"根据用户 ID 批量添加租户成员","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AddTenantUsersDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理租户成员/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/remove-tenant-users":{"post":{"operationId":"TenantUserAPIV3ManagementController_removeTenantUsers","summary":"批量移除租户成员","description":"此接口用于根据用户 ID 或租户成员 ID 批量移除租户成员。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveTenantUsersDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理租户成员/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-tenant-user":{"post":{"operationId":"TenantUserAPIV3ManagementController_updateTenantUser","summary":"更新租户成员","description":"此接口用于根据用户 ID 或租户成员 ID 更新租户成员。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateTenantUserDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理租户成员/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-tenant-user":{"post":{"operationId":"TenantUserAPIV3ManagementController_createTenantUser","summary":"创建租户成员","description":"创建租户成员，邮箱、手机号、用户名必须包含其中一个，邮箱、手机号、用户名、externalId 用户池内唯一，此接口将以管理员身份创建用户因此不需要进行手机号验证码检验等安全检测。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTenantUserReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TenantUserDto"}}}}},"tags":["管理租户成员/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-tenant-users":{"post":{"operationId":"TenantUserAPIV3ManagementController_listTenantUsers","summary":"获取/搜索租户成员列表","description":"\n此接口用于获取用户列表，支持模糊搜索，以及通过用户基础字段、用户自定义字段、用户所在部门、用户历史登录应用等维度筛选用户。\n\n### 模糊搜素示例\n\n模糊搜索默认会从 `phone`, `email`, `name`, `username`, `nickname` 五个字段对用户进行模糊搜索，你也可以通过设置 `options.fuzzySearchOn`\n决定模糊匹配的字段范围：\n\n```json\n{\n  \"keywords\": \"北京\",\n  \"options\": {\n    \"fuzzySearchOn\": [\n      \"address\"\n    ]\n  }\n}\n```\n\n### 高级搜索示例\n\n你可以通过 `advancedFilter` 进行高级搜索，高级搜索支持通过用户的基础信息、自定义数据、所在部门、用户来源、登录应用、外部身份源信息等维度对用户进行筛选。\n**且这些筛选条件可以任意组合。**\n\n#### 筛选邮箱中包含 `@example.com` 的用户\n\n用户邮箱（`email`）为字符串类型，可以进行模糊搜索：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"email\",\n      \"operator\": \"CONTAINS\",\n      \"value\": \"@example.com\"\n    }\n  ]\n}\n```\n\n\n#### 根据用户登录次数筛选\n\n筛选登录次数大于 10 的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"loginsCount\",\n      \"operator\": \"GREATER\",\n      \"value\": 10\n    }\n  ]\n}\n```\n\n筛选登录次数在 10 - 100 次的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"loginsCount\",\n      \"operator\": \"BETWEEN\",\n      \"value\": [10, 100]\n    }\n  ]\n}\n```\n\n#### 根据用户上次登录时间进行筛选\n\n筛选最近 7 天内登录过的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"lastLoginTime\",\n      \"operator\": \"GREATER\",\n      \"value\": new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n    }\n  ]\n}\n```\n\n筛选在某一段时间内登录过的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"lastLoginTime\",\n      \"operator\": \"BETWEEN\",\n      \"value\": [\n        Date.now() - 14 * 24 * 60 * 60 * 1000,\n        Date.now() - 7 * 24 * 60 * 60 * 1000\n      ]\n    }\n  ]\n}\n```\n\n#### 根据用户曾经登录过的应用筛选\n\n筛选出曾经登录过应用 `appId1` 或者 `appId2` 的用户：\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"loggedInApps\",\n      \"operator\": \"IN\",\n      \"value\": [\n        \"appId1\",\n        \"appId2\"\n      ]\n    }\n  ]\n}\n```\n\n#### 根据用户所在部门进行筛选\n\n```json\n{\n  \"advancedFilter\": [\n    {\n      \"field\": \"department\",\n      \"operator\": \"IN\",\n      \"value\": [\n        {\n          \"organizationCode\": \"steamory\",\n          \"departmentId\": \"root\",\n          \"departmentIdType\": \"department_id\",\n          \"includeChildrenDepartments\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListTenantUserDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TenantUserListPaginatedRespDto"}}}}},"tags":["管理租户成员/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-tenant-user":{"get":{"operationId":"TenantUserAPIV3ManagementController_getTenantUser","summary":"获取单个租户成员","description":"根据用户 ID 或租户成员 ID 获取租户成员信息","parameters":[{"name":"tenantId","required":true,"in":"query","description":"租户 ID","schema":{"type":"string"}},{"name":"linkUserId","required":false,"in":"query","description":"关联的用户池级别的用户 ID","schema":{"type":"string"}},{"name":"memberId","required":false,"in":"query","description":"租户成员 ID","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TenantUserSingleRespDto"}}}}},"tags":["管理租户成员/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/add-tenant-department-members":{"post":{"operationId":"TenantDepartmentAPIV3ManagementController_addTenantDepartmentMembers","summary":"租户部门下添加成员","description":"通过部门 ID、组织 code，添加部门下成员。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AddTenantDepartmentMembersReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理租户组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/remove-tenant-department-members":{"post":{"operationId":"TenantDepartmentAPIV3ManagementController_removeTenantDepartmentMembers","summary":"租户部门下删除成员","description":"通过部门 ID、组织 code，删除部门下成员。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveTenantDepartmentMembersReqDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理租户组织机构/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-permission-namespace":{"post":{"operationId":"PermissionNamespaceManagementController_createPermissionNamespace","summary":"创建权限空间","description":"创建权限空间,可以设置权限空间名称、Code 和描述信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePermissionNamespaceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePermissionNamespaceResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CreatePermissionNamespaceResponseDto result = await managementClient.CreatePermissionNamespace(new CreatePermissionNamespaceDto \n            { \n                Code = \"examplePermissionNamespace\", \n                Name = \"示例权限空间\", \n                Description = \"示例权限空间描述\"\n            });\n\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t  reqDto := &dto.CreatePermissionNamespaceDto{\n\t\tName:        \"示例权限空间\",\n\t\tCode:        \"examplePermissionNamespace\",\n\t\tDescription: \"示例权限空间描述\",\n\t}\n\trespDto := client.CreatePermissionNamespace(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.*;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.Collections;\n\npublic class CreatePermissionNamespaceTest {\n\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreatePermissionNamespaceDto request = new CreatePermissionNamespaceDto();\n        request.setName(\"示例权限空间\");\n        request.setCode(\"examplePermissionNamespace\");\n        request.setDescription(\"示例权限空间描述\");\n\n        CreatePermissionNamespaceResponseDto response = client.createPermissionNamespace(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createPermissionNamespace({\n    code: 'examplePermissionNamespace',\n    name: '示例权限空间',\n    description: '示例权限空间描述'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/create-permission-namespaces-batch":{"post":{"operationId":"PermissionNamespaceManagementController_createPermissionNamespacesBatch","summary":"批量创建权限空间","description":"批量创建权限空间，可以分别设置权限空间名称、Code 和描述信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePermissionNamespacesBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            List<CreatePermissionNamespacesBatchItemDto> nameSpaceList = new List<CreatePermissionNamespacesBatchItemDto>();\n            for (int i = 0; i < 3; i++)\n            {\n                CreatePermissionNamespacesBatchItemDto item = new CreatePermissionNamespacesBatchItemDto\n                {\n                    Code = \"examplePermissionCode\" + i,\n                    Name = \"examplePermissionNamespace\" + i,\n                    Description = \"examplePermissionDescription\" + i\n                };\n\n                nameSpaceList.Add(item);\n            }\n\n            IsSuccessRespDto dto = await managementClient.CreatePermissionNamespacesBatch(new CreatePermissionNamespacesBatchDto\n            {\n                List = nameSpaceList\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t  reqDto := &dto.CreatePermissionNamespacesBatchDto{\n\t\tList: []dto.CreatePermissionNamespacesBatchItemDto{\n\t\t\t{\n\t\t\t\tName:        \"示例权限空间1\",\n\t\t\t\tCode:        \"examplePermissionNamespace1\",\n\t\t\t\tDescription: \"示例权限空间1描述\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tName:        \"示例权限空间2\",\n\t\t\t\tCode:        \"examplePermissionNamespace2\",\n\t\t\t\tDescription: \"示例权限空间1描述\",\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.CreatePermissionNamespacesBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.*;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CreatePermissionNamespacesBatchTest {\n\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreatePermissionNamespacesBatchDto request = new CreatePermissionNamespacesBatchDto();\n        List<CreatePermissionNamespacesBatchItemDto> createPermissionNamespacesBatch =  new ArrayList<>();\n        CreatePermissionNamespacesBatchItemDto createPermissionNamespacesBatchItem1 = new CreatePermissionNamespacesBatchItemDto();\n        createPermissionNamespacesBatchItem1.setName(\"示例权限空间1\");\n        createPermissionNamespacesBatchItem1.setCode(\"examplePermissionNamespace1\");\n        createPermissionNamespacesBatchItem1.setDescription(\"示例权限空间1描述\");\n        createPermissionNamespacesBatch.add(createPermissionNamespacesBatchItem1);\n        CreatePermissionNamespacesBatchItemDto createPermissionNamespacesBatchItem2 = new CreatePermissionNamespacesBatchItemDto();\n        createPermissionNamespacesBatchItem2.setName(\"示例权限空间2\");\n        createPermissionNamespacesBatchItem2.setCode(\"examplePermissionNamespace2\");\n        createPermissionNamespacesBatchItem2.setDescription(\"示例权限空间2描述\");\n        createPermissionNamespacesBatch.add(createPermissionNamespacesBatchItem2);\n        request.setList(createPermissionNamespacesBatch);\n        IsSuccessRespDto response = client.createPermissionNamespacesBatch(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createPermissionNamespacesBatch({\n    list: [{\n        code: 'examplePermissionNamespace1',\n        name: '示例权限空间1',\n        description: '示例权限空间1描述'\n      },{\n        code: 'examplePermissionNamespace2',\n        name: '示例权限空间2',\n        description: '示例权限空间2描述'\n      },{\n        code: 'examplePermissionNamespace3',\n        name: '示例权限空间3',\n        description: '示例权限空间3描述'\n      }]\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-permission-namespace":{"get":{"operationId":"PermissionNamespaceManagementController_getPermissionNamespace","summary":"获取权限空间详情","description":"通过权限空间唯一标志符(Code)，获取权限空间详情。","parameters":[{"name":"code","required":true,"in":"query","description":"权限空间 Code","example":"examplePermissionNamespace","maxLength":50,"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPermissionNamespaceResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            GetPermissionNamespaceResponseDto result = await managementClient.GetPermissionNamespace(new GetPermissionNamespaceDto \n            { \n                Code = \"examplePermissionNamespace\" \n            });\n\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t  reqDto := &dto.GetPermissionNamespaceDto{\n\t\tCode: \"examplePermissionNamespace\",\n\t}\n\trespDto := client.GetPermissionNamespace(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetPermissionNamespaceDto;\nimport cn.authing.sdk.java.dto.GetPermissionNamespaceResponseDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\n\npublic class GetPermissionNamespaceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetPermissionNamespaceDto request = new GetPermissionNamespaceDto();\n        request.setCode(\"examplePermissionNamespace\");\n        GetPermissionNamespaceResponseDto response = client.getPermissionNamespace(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getPermissionNamespace({\n    code: 'examplePermissionNamespace'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-permission-namespaces-batch":{"get":{"operationId":"PermissionNamespaceManagementController_getPermissionNamespacesBatch","summary":"批量获取权限空间详情列表","description":"分别通过权限空间唯一标志符(Code)，获取权限空间详情。","parameters":[{"name":"codes","required":true,"in":"query","description":"权限空间 code 列表，批量可以使用逗号分隔","example":["example1","example2"],"schema":{"minItems":0,"maxItems":50,"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetPermissionNamespaceListResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            GetPermissionNamespaceListResponseDto result = await managementClient.GetPermissionNamespacesBatch(new GetPermissionNamespacesBatchDto\n            {\n                Codes = $\"examplePermissionNamespace0,examplePermissionNamespace1,examplePermissionNamespace2\"\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t  reqDto := &dto.GetPermissionNamespacesBatchDto{\n\t\tCodes: \"code1,code2\",\n\t}\n\trespDto := client.GetPermissionNamespacesBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetPermissionNamespaceListResponseDto;\nimport cn.authing.sdk.java.dto.GetPermissionNamespacesBatchDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\nimport java.util.ArrayList;\nimport java.util.List;\n\n\npublic class GetPermissionNamespacesBatchTest {\n\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetPermissionNamespacesBatchDto request = new GetPermissionNamespacesBatchDto();\n        request.setCodes(\"code1,code2\");\n        GetPermissionNamespaceListResponseDto response = client.getPermissionNamespacesBatch(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getPermissionNamespacesBatch({\n    codes: ['examplePermissionNamespace1','examplePermissionNamespace2']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-permission-namespaces":{"get":{"operationId":"PermissionNamespaceManagementController_ListPermissionNamespaces","summary":"分页获取权限空间列表","description":"分页获取权限空间列表。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"query","required":false,"in":"query","description":"权限空间 name","example":"examplePermissionNamespace","maxLength":50,"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNamespaceListPaginatedRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            PermissionNamespaceListPaginatedRespDto result = await managementClient.ListPermissionNamespaces(new ListPermissionNamespacesDto\n            {\n                Page = 1,\n                Limit = 1,\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListPermissionNamespacesDto{\n\t\tPage:  1,\n\t\tLimit: 10,\n\t\tQuery: \"示例权限空间\",\n\t}\n\trespDto := client.ListPermissionNamespaces(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListPermissionNamespacesDto;\nimport cn.authing.sdk.java.dto.PermissionNamespaceListPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\n\npublic class ListPermissionNamespacesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListPermissionNamespacesDto request = new ListPermissionNamespacesDto();\n        request.setPage(1);\n        request.setLimit(10);\n        request.setQuery(\"示例权限空间\");\n        PermissionNamespaceListPaginatedRespDto response = client.listPermissionNamespaces(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listPermissionNamespaces({\n    page: 1,\n    limit: 10,\n    query: '示例权限空间名称'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/update-permission-namespace":{"post":{"operationId":"PermissionNamespaceManagementController_updatePermissionNamespace","summary":"修改权限空间","description":"修改权限空间，可以修改权限空间名称、权限空间描述信息以及权限空间新的唯一标志符(Code)。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdatePermissionNamespaceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdatePermissionNamespaceResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            UpdatePermissionNamespaceResponseDto result = await managementClient.UpdatePermissionNamespace(new UpdatePermissionNamespaceDto\n            {\n                Code = \"examplePermissionNamespace\",\n                Name = \"示例权限空间\",\n                NewCode = \"exampleNewPermissionNamespace\",\n                Description = \"示例权限空间描述\" \n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdatePermissionNamespaceDto{\n\t\tCode:        \"examplePermissionNamespace\",\n\t\tName:        \"示例新权限空间名称\",\n\t\tDescription: \"示例新权限空间描述\",\n\t\tNewCode:     \"exampleNewPermissionNamespace\",\n\t}\n\trespDto := client.UpdatePermissionNamespace(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.UpdatePermissionNamespaceDto;\nimport cn.authing.sdk.java.dto.UpdatePermissionNamespaceResponseDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\n\npublic class UpdatePermissionNamespaceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdatePermissionNamespaceDto request = new UpdatePermissionNamespaceDto();\n        request.setCode(\"examplePermissionNamespace\");\n        request.setName(\"示例新权限空间名称\");\n        request.setNewCode(\"exampleNewPermissionNamespace\");\n        request.setDescription(\"示例新权限空间描述\");\n\n        UpdatePermissionNamespaceResponseDto response = client.updatePermissionNamespace(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updatePermissionNamespace({\n    code: 'examplePermissionNamespace',\n    newCode: 'exampleNewPermissionNamespace',\n    name: '示例权限空间新名称',\n    description: '示例权限空间新描述'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/delete-permission-namespace":{"post":{"operationId":"PermissionNamespaceManagementController_deletePermissionNamespace","summary":"删除权限空间","description":"通过权限空间唯一标志符(Code)，删除权限空间信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeletePermissionNamespaceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            IsSuccessRespDto result = await managementClient.DeletePermissionNamespace(new DeletePermissionNamespaceDto\n            {\n                Code = \"examplePermissionNamespace\" \n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeletePermissionNamespaceDto{\n\t\tCode: \"examplePermissionNamespace\",\n\t}\n\trespDto := client.DeletePermissionNamespace(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeletePermissionNamespaceDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\n\npublic class DeletePermissionNamespaceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeletePermissionNamespaceDto request = new DeletePermissionNamespaceDto();\n        request.setCode(\"examplePermissionNamespace\");\n\n        IsSuccessRespDto response = client.deletePermissionNamespace(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deletePermissionNamespace({\n    code: 'examplePermissionNamespace'\n  });\n\n\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/delete-permission-namespaces-batch":{"post":{"operationId":"PermissionNamespaceManagementController_deletePermissionNamespacesBatch","summary":"批量删除权限空间","description":"分别通过权限空间唯一标志符(Code)，批量删除权限空间信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeletePermissionNamespacesBatchDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            IsSuccessRespDto result = await managementClient.DeletePermissionNamespacesBatch(new DeletePermissionNamespacesBatchDto\n            {\n                Codes = new List<string>\n                {\n                    $\"example0\",\n                    $\"example1\",\n                    $\"example2\",\n                }\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeletePermissionNamespacesBatchDto{\n\t\tCodes: []string{\n\t\t\t\"examplePermissionNamespace1\",\n\t\t\t\"examplePermissionNamespace2\",\n\t\t},\n\t}\n\trespDto := client.DeletePermissionNamespacesBatch(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DeletePermissionNamespacesBatchDto;\nimport cn.authing.sdk.java.dto.IsSuccessRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\nimport java.util.ArrayList;\n\n\npublic class DeletePermissionNamespacesBatchTest {\n\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeletePermissionNamespacesBatchDto request = new DeletePermissionNamespacesBatchDto();\n        ArrayList<String> codes = new ArrayList<>();\n        codes.add(\"examplePermissionNamespace1\");\n        codes.add(\"examplePermissionNamespace2\");\n        request.setCodes(codes);\n        IsSuccessRespDto response = client.deletePermissionNamespacesBatch(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deletePermissionNamespacesBatch({\n    codes: ['examplePermissionNamespace1','examplePermissionNamespace2']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/check-permission-namespace-exists":{"post":{"operationId":"PermissionNamespaceManagementController_checkPermissionNamespaceExists","summary":"校验权限空间 Code 或者名称是否可用","description":"通过用户池 ID 和权限空间 Code,或者用户池 ID 和权限空间名称查询是否可用。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckPermissionNamespaceExistsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNamespaceCheckExistsRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            PermissionNamespaceCheckExistsRespDto result = await managementClient.CheckPermissionNamespaceExists(new CheckPermissionNamespaceExistsDto \n            { \n                Name = \"examplePermissionNamespace\"\n            });\n\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CheckPermissionNamespaceExistsDto{\n\t\tCode: \"examplePermissionNamespace\",\n    Name: \"示例权限空间名称\",\n\t}\n\trespDto := client.CheckPermissionNamespaceExists(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CheckPermissionNamespaceExistsDto;\nimport cn.authing.sdk.java.dto.PermissionNamespaceCheckExistsRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\n\npublic class CheckPermissionNamespaceExistsTest {\n\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CheckPermissionNamespaceExistsDto request1 = new CheckPermissionNamespaceExistsDto();\n        request1.setName(\"示例权限空间名称\");\n        PermissionNamespaceCheckExistsRespDto response1 = client.checkPermissionNamespaceExists(request1);\n        System.out.println(JsonUtils.serialize(response1));\n        CheckPermissionNamespaceExistsDto request2 = new CheckPermissionNamespaceExistsDto();\n        request2.setCode(\"examplePermissionNamespace\");\n        PermissionNamespaceCheckExistsRespDto response2 = client.checkPermissionNamespaceExists(request2);\n        System.out.println(JsonUtils.serialize(response2));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.checkPermissionNamespaceExists({\n    name:'示例权限空间名称'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-permission-namespace-roles":{"get":{"operationId":"PermissionNamespaceManagementController_ListPermissionNamespaceRoles","summary":"分页查询权限空间下所有的角色列表","description":"分页查询权限空间下所有的角色列表，分页获取权限空间下所有的角色列表。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"code","required":true,"in":"query","description":"权限分组唯一标志符 Code","example":"examplePermissionNamespace","maxLength":50,"schema":{"type":"string"}},{"name":"query","required":false,"in":"query","description":"角色 Code 或者名称","example":"test","maxLength":50,"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionNamespaceRolesListPaginatedRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            PermissionNamespaceRolesListPaginatedRespDto result = await managementClient.ListPermissionNamespaceRoles(new ListPermissionNamespaceRolesDto\n            {\n                Code = \"exampleNamespaceCode\"\n            });\n\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListPermissionNamespaceRolesDto{\n\t\tPage:  1,\n\t\tLimit: 10,\n\t\tQuery: \"exampleRole\",\n\t\tCode:  \"examplePermissionNamespace\",\n\t}\n\trespDto := client.ListPermissionNamespaceRoles(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListPermissionNamespaceRolesDto;\nimport cn.authing.sdk.java.dto.PermissionNamespaceRolesListPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\n\npublic class ListPermissionNamespaceRolesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListPermissionNamespaceRolesDto request = new ListPermissionNamespaceRolesDto();\n        request.setPage(1);\n        request.setLimit(10);\n        request.setCode(\"examplePermissionNamespace\");\n        request.setQuery(\"exampleRole\");\n        PermissionNamespaceRolesListPaginatedRespDto response = client.listPermissionNamespaceRoles(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listPermissionNamespaceRoles({\n    page: 1,\n    limit: 10,\n    code:'examplePermissionNamespace',\n    query: 'exampleRole'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/create-data-resource":{"post":{"operationId":"DataResourcesManagementController_createDataResource","summary":"创建数据资源（推荐、重点）","description":"\n  ## 描述\n  该接口用于创建数据资源，当你存在需要被设置权限的数据，根据它们的数据类型，创建对应类型的数据资源，目前我们支持：字符串、数组、树三种类型。\n  ## 注意\n  请求体中的 `struct` 字段需要根据不同的资源类型传入不同的数据结构，具体请参考下面的示例\n## 请求示例\n### 创建字符串类型数据资源示例\n当你的数据仅用一个字符串就可以表示时，可以使用此类型，例如：一个 API、一个用户 ID 等。\n以下是创建一个表示 '/resource/create' API 的数据资源示例：\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"resourceName\": \"createResource API\",\n  \"description\": \"这是 createResource API\",\n  \"resourceCode\": \"createResourceAPI\",\n  \"type\": \"STRING\",\n  \"struct\": \"/resource/create\",\n  \"actions\": [\"access\"]\n}\n```\n\n### 创建数组类型数据资源示例\n当你的数据是一组同类型的数据时，可以使用此类型，例如：一组文档链接、一组门禁卡号等。\n以下是创建一个表示一组门禁卡号的数据资源示例：\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"resourceName\": \"一组门禁卡号\",\n  \"description\": \"这是一组门禁卡号\",\n  \"resourceCode\": \"accessCardNumber\",\n  \"type\": \"ARRAY\",\n  \"struct\": [\"accessCardNumber1\", \"accessCardNumber2\", \"accessCardNumber3\"],\n  \"actions\": [\"get\", \"update\"]\n}\n```\n\n### 创建树类型数据资源示例\n当你的数据是具备层级关系时，可以使用此类型，例如：组织架构、文件夹结构等。\n以下是创建一个表示公司组织架构的数据资源示例：\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"resourceName\": \"Authing\",\n  \"description\": \"这是 Authing 的组织架构\",\n  \"resourceCode\": \"authing\",\n  \"type\": \"TREE\",\n  \"struct\": [\n    {\n      \"name\": \"产品\",\n      \"code\": \"product\",\n      \"value\": \"product\",\n      \"children\": [\n        {\n          \"name\": \"产品经理\",\n          \"code\": \"productManager\",\n          \"value\": \"pm\"\n        },\n        {\n          \"name\": \"设计\",\n          \"code\": \"design\",\n          \"value\": \"ui\"\n        }\n      ]\n    },\n    {\n      \"name\": \"研发\",\n      \"code\": \"researchAndDevelopment\",\n      \"value\": \"rd\"\n    }\n  ],\n  \"actions\": [\"get\", \"update\", \"delete\"]\n}\n```\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateDataResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateDataResourceResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CreateDataResourceResponseDto result = await managementClient.CreateDataResource(new CreateDataResourceDto\n            {\n                NamespaceCode = \"examplePermissionNamespace\",\n                ResourceName = \"字符串资源1\",\n                ResourceCode = \"str1\",\n                Type = CreateDataResourceDto.type.STRING,\n                Description = \"这是一个数据资源字符串类型创建\",\n                Struct = \"str1\",\n                Actions = new List<string> { \"get\", \"read\", \"update\" }\n            });\n\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateDataResourceDto{\n\t\tActions:       []string{\"read\", \"get\"},\n\t\tStruct:        \"test\",\n\t\tType:          \"STRING\",\n\t\tResourceCode:  \"stringResourceCode\",\n\t\tResourceName:  \"示例字符串数据资源\",\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t\tDescription:   \"示例字符串数据资源描述\",\n\t}\n\trespDto := client.CreateDataResource(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateDataResourceDto;\nimport cn.authing.sdk.java.dto.CreateDataResourceResponseDto;\nimport cn.authing.sdk.java.dto.DataResourceTreeStructs;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n\npublic class CreateDataResourceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateDataResourceDto request = new CreateDataResourceDto();\n        request.setNamespaceCode(\"examplePermissionNamespace\");\n        request.setResourceCode(\"treeResourceCode\");\n        request.setResourceName(\"示例树数据资源\");\n        request.setType(CreateDataResourceDto.Type.TREE);\n        ArrayList<DataResourceTreeStructs> dataResourceTreeStructList = new ArrayList<>();\n        DataResourceTreeStructs dataResourceTreeStruct1 = new DataResourceTreeStructs();\n        dataResourceTreeStruct1.setCode(\"tree1\");\n        dataResourceTreeStruct1.setName(\"树节点1\");\n        dataResourceTreeStruct1.setValue(\"树节点1描述\");\n        List<DataResourceTreeStructs> childrenList = new ArrayList<>();\n        DataResourceTreeStructs dataResourceTreeStructChildren = new DataResourceTreeStructs();\n        dataResourceTreeStructChildren.setCode(\"tree11\");\n        dataResourceTreeStructChildren.setName(\"树节点11\");\n        dataResourceTreeStructChildren.setValue(\"树节点11描述\");\n        childrenList.add(dataResourceTreeStructChildren);\n        dataResourceTreeStruct1.setChildren(childrenList);\n        DataResourceTreeStructs dataResourceTreeStruct2 = new DataResourceTreeStructs();\n        dataResourceTreeStruct2.setCode(\"tree2\");\n        dataResourceTreeStruct2.setName(\"树节点2\");\n        dataResourceTreeStruct2.setValue(\"树节点2描述\");\n        dataResourceTreeStructList.add(dataResourceTreeStruct1);\n        dataResourceTreeStructList.add(dataResourceTreeStruct2);\n        request.setStruct(dataResourceTreeStructList);\n        request.setDescription(\"示例树数据资源描述\");\n        ArrayList<String> actions = new ArrayList<>();\n        actions.add(\"get\");\n        actions.add(\"read\");\n        request.setActions(actions);\n        CreateDataResourceResponseDto response = client.createDataResource(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createDataResource({\n    namespaceCode: 'examplePermissionNamespace',\n    resourceCode: 'treeResourceCode',\n    resourceName: '示例树数据资源',\n    type: CreateDataResourceDto.type.TREE,\n    struct: [{\n      code: 'tree1',\n      name: '树节点1',\n      value: '树节点1描述',\n      children:[{\n        code: 'tree11',\n        name: '树节点11',\n        value: '树节点11描述'\n      }]\n    },{\n      code: 'tree2',\n      name: '树节点2',\n      value: '树节点2描述'\n    }],\n    description: '示例树数据资源描述',\n    actions: ['get','read']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/create-string-data-resource":{"post":{"operationId":"DataResourcesManagementController_createDataResourceByString","summary":"创建字符串数据资源","description":"当你仅需要创建字符串类型数据资源时，可以使用此 API，我们固定了数据资源类型，你无需在传入 `type` 字符段，注意：`struct` 字段只能够传入字符串类型数据。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateStringDataResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateStringDataResourceResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CreateStringDataResourceResponseDto result = await managementClient.CreateDataResourceByString(new CreateStringDataResourceDto\n            {\n                NamespaceCode = \"examplePermissionNamespace\",\n                ResourceName = \"示例数据资源名称\",\n                ResourceCode = \"dataResourceTestCode\",\n                Struct = \"exampleStringStruct\",\n                Actions = new List<string> { \"read\", \"get\" },\n                Description = \"示例数据资源描述\"\n            });\n\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateStringDataResourceDto{\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t\tResourceCode:  \"stringResourceCode\",\n\t\tResourceName:  \"示例字符串数据资源\",\n\t\tStruct:        \"exampleStringStruct\",\n\t\tDescription:   \"示例字符串数据资源描述\",\n\t\tActions:       []string{\"get\", \"read\"},\n\t}\n\trespDto := client.CreateDataResourceByString(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.resource;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateStringDataResourceDto;\nimport cn.authing.sdk.java.dto.CreateStringDataResourceResponseDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CreateDataResourceByStringTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateStringDataResourceDto reqDto = new CreateStringDataResourceDto();\n        reqDto.setResourceCode(\"stringResourceCode\");\n        reqDto.setNamespaceCode(\"examplePermissionNamespace\");\n        reqDto.setResourceName(\"示例字符串数据资源\");\n        List<String> list = new ArrayList<>();\n        list.add(\"read\");\n        list.add(\"get\");\n        reqDto.setActions(list);\n        reqDto.setStruct(\"exampleStringStruct\");\n        reqDto.setDescription(\"示例字符串数据资源描述\");\n        CreateStringDataResourceResponseDto response = client.createDataResourceByString(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createDataResourceByString({\n    namespaceCode: 'examplePermissionNamespace',\n    resourceCode: 'stringResourceCode',\n    resourceName: '示例字符串数据资源',\n    struct: 'exampleStringStruct',\n    description: '示例字符串数据资源描述',\n    actions: ['get','read']\n  });\n  \n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/create-array-data-resource":{"post":{"operationId":"DataResourcesManagementController_createDataResourceByArray","summary":"创建数组数据资源","description":"当你仅需要创建数组类型数据资源时，可以使用此 API，我们固定了数据资源类型，你无需在传入 `type` 字符段，注意：`struct` 字段只能够传入数组类型数据。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateArrayDataResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateArrayDataResourceResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CreateArrayDataResourceResponseDto result = await managementClient.CreateDataResourceByArray(new CreateArrayDataResourceDto\n            {\n                NamespaceCode = \"code1\",\n                ResourceName = \"示例数组资源名称\",\n                ResourceCode = \"dataResourceArrayTestCode\",\n                Struct = new List<string> { \"exampleArrayStruct1\", \"exampleArrayStruct2\" },\n                Actions = new List<string> { \"read\", \"get\" },\n                Description = \"示例数组数据资源描述\"\n            });\n\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateArrayDataResourceDto{\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t\tResourceCode:  \"arrayResourceCode\",\n\t\tResourceName:  \"示例数组数据资源\",\n\t\tStruct:        []string{\"exampleArrayStruct1\", \"exampleArrayStruct2\"},\n\t\tDescription:   \"示例数组数据资源描述\",\n\t\tActions:       []string{\"get\", \"read\"},\n\t}\n\trespDto := client.CreateDataResourceByArray(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.resource;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateArrayDataResourceDto;\nimport cn.authing.sdk.java.dto.CreateArrayDataResourceResponseDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CreateDataResourceByArrayTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateArrayDataResourceDto reqDto = new CreateArrayDataResourceDto();\n        reqDto.setResourceCode(\"arrayResourceCode\");\n        reqDto.setResourceName(\"示例数组数据资源\");\n        reqDto.setNamespaceCode(\"examplePermissionNamespace\");\n        List<String> list = new ArrayList<>();\n        list.add(\"read\");\n        list.add(\"get\");\n        reqDto.setActions(list);\n        List<String> list1 = new ArrayList<>();\n        list1.add(\"exampleArrayStruct1\");\n        list1.add(\"exampleArrayStruct2\");\n        reqDto.setStruct(list1);\n        reqDto.setDescription(\"示例数组数据资源描述\");\n        CreateArrayDataResourceResponseDto response = client.createDataResourceByArray(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createDataResourceByArray({\n    namespaceCode: 'examplePermissionNamespace',\n    resourceCode: 'arrayResourceCode',\n    resourceName: '示例数组数据资源',\n    struct: ['exampleArrayStruct1', 'exampleArrayStruct2',],\n    description: '示例数组数据资源描述',\n    actions: ['get','read']\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/create-tree-data-resource":{"post":{"operationId":"DataResourcesManagementController_createDataResourceByTree","summary":"创建树数据资源","description":"当你仅需要创建树类型数据资源时，可以使用此 API，我们固定了数据资源类型，你无需在传入 `type` 字符段，注意：`struct` 要按照树类型数据资源结构进行传入，请参考示例。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTreeDataResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTreeDataResourceResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CreateTreeDataResourceResponseDto result = await managementClient.CreateDataResourceByTree(new CreateTreeDataResourceDto\n            {\n                NamespaceCode = \"code1\",\n                ResourceName = \"树资源1Name\",\n                ResourceCode = \"tree1Code\",\n                Description = \"这是一个数据资源树类型创建\",\n                Struct = new List<DataResourceTreeStructs>\n                {\n                    new DataResourceTreeStructs\n                    {\n                        Code=\"123\",\n                        Name=\"数据资源\",\n                        Value=\"示例数据资源节点\",\n                        Children=new List<object>\n                        {\n                            new DataResourceTreeStructs\n                            {\n                                Code=\"code1\",\n                                Name=\"子节点1\",\n                                Value=\"子节点值\",\n                                Children=new List<object>\n                                {\n                                    new DataResourceTreeStructs\n                                    {\n                                        Code=\"code2\",\n                                        Name=\"子节点2\",\n                                        Value=\"子节点值2\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                Actions = new List<string> { \"get\", \"read\", \"update\" }\n            });\n\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateTreeDataResourceDto{\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t\tResourceCode:  \"treeResourceCode\",\n\t\tResourceName:  \"示例树数据资源\",\n\tStruct: []dto.DataResourceTreeStructs{\n\t\t\t{\n\t\t\t\tCode:  \"tree1\",\n\t\t\t\tName:  \"树节点1\",\n\t\t\t\tValue: \"树节点1描述\",\n\t\t\t\tChildren: []interface{}{\n\t\t\t\t\tdto.DataResourceTreeStructs{\n\t\t\t\t\t\tCode:  \"tree11\",\n\t\t\t\t\t\tName:  \"树节点11\",\n\t\t\t\t\t\tValue: \"树节点11描述\",\n\t\t\t\t\t\tChildren: []interface{}{\n\t\t\t\t\t\t\tdto.DataResourceTreeStructs{\n\t\t\t\t\t\t\t\tCode:  \"tree111\",\n\t\t\t\t\t\t\t\tName:  \"树节点111\",\n\t\t\t\t\t\t\t\tValue: \"树节点111描述\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdto.DataResourceTreeStructs{\n\t\t\t\t\t\t\t\tCode:  \"tree112\",\n\t\t\t\t\t\t\t\tName:  \"树节点112\",\n\t\t\t\t\t\t\t\tValue: \"树节点112描述\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tdto.DataResourceTreeStructs{\n\t\t\t\t\t\tCode:  \"tree12\",\n\t\t\t\t\t\tName:  \"树节点12\",\n\t\t\t\t\t\tValue: \"树节点12描述\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tCode:  \"tree2\",\n\t\t\t\tName:  \"树节点2\",\n\t\t\t\tValue: \"树节点2描述\",\n\t\t\t},\n\t\t},\n\t\tDescription: \"示例树数据资源描述\",\n\t\tActions:     []string{\"get\", \"read\"},\n\t}\n\trespDto := client.CreateDataResourceByTree(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.resource;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateTreeDataResourceDto;\nimport cn.authing.sdk.java.dto.CreateTreeDataResourceResponseDto;\nimport cn.authing.sdk.java.dto.DataResourceTreeStructs;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CreateDataResourceByTreeTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateTreeDataResourceDto reqDto = new CreateTreeDataResourceDto();\n        reqDto.setActions(Collections.singletonList(\"read\"));\n        reqDto.setResourceCode(\"treeResourceCode\");\n        reqDto.setResourceName(\"示例树数据资源\");\n        reqDto.setNamespaceCode(\"examplePermissionNamespace\");\n        List<DataResourceTreeStructs> treeList = new ArrayList<>();\n        DataResourceTreeStructs struct = new DataResourceTreeStructs();\n        struct.setCode(\"tree1\");\n        struct.setName(\"树节点1\");\n        struct.setValue(\"树节点1描述\");\n        List<DataResourceTreeStructs> children = new ArrayList<>();\n        DataResourceTreeStructs child = new DataResourceTreeStructs();\n        child.setName(\"树节点11\");\n        child.setCode(\"tree11\");\n        child.setValue(\"树节点11描述\");\n        children.add(child);\n        struct.setChildren(children);\n        treeList.add(struct);\n        reqDto.setStruct(treeList);\n        reqDto.setDescription(\"示例树数据资源描述\");\n        CreateTreeDataResourceResponseDto response = client.createDataResourceByTree(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createDataResourceByTree({\n    namespaceCode: 'examplePermissionNamespace',\n    resourceCode: 'treeResourceCode',\n    resourceName: '示例树数据资源',\n    struct: [{\n      code: 'tree1',\n      name: '树节点1',\n      value: '树节点1描述',\n      children:[{\n        code: 'tree11',\n        name: '树节点11',\n        value: '树节点11描述'\n      }]\n    },{\n      code: 'tree2',\n      name: '树节点2',\n      value: '树节点2描述'\n    }],\n    description: '示例树数据资源描述',\n    actions: ['get','read']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-data-resources":{"get":{"operationId":"DataResourcesManagementController_listDataResources","summary":"获取数据资源列表","description":"获取数据资源列表,可通过数据资源名称、数据资源 Code 和数据资源所属权限空间 Code 列表进行指定筛选。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"query","required":false,"in":"query","description":"关键字搜索，可以是数据资源名称或者数据资源 Code","example":"资源1","maxLength":50,"schema":{"type":"string"}},{"name":"namespaceCodes","required":false,"in":"query","description":"权限数据所属权限空间 Code 列表","example":["examplePermissionNamespace1","examplePermissionNamespac2"],"schema":{"minItems":1,"maxItems":50,"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListDataResourcesPaginatedRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            ListDataResourcesPaginatedRespDto result = await managementClient.ListDataResources(new ListDataResourcesDto\n            {\n                NamespaceCodes = \"examplePermissionNamespace\",\n\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListDataResourcesDto{\n\t\tPage:  1,\n\t\tLimit: 10,\n\t\tQuery: \"examplePermissionNamespace1,examplePermissionNamespace2\",\n\t}\n\trespDto := client.ListDataResources(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListDataResourcesDto;\nimport cn.authing.sdk.java.dto.ListDataResourcesPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\n\npublic class ListDataResourcesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListDataResourcesDto request = new ListDataResourcesDto();\n        request.setPage(1);\n        request.setLimit(10);\n        request.setNamespaceCodes(\"examplePermissionNamespace1,examplePermissionNamespace2\");\n\n        ListDataResourcesPaginatedRespDto response = client.listDataResources(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listDataResources({\n    page: 1,\n    limit: 10,\n    query: '示例数据资源'\n    namespaceCodes: ['examplePermissionNamespace1','examplePermissionNamespace2']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-data-resource":{"get":{"operationId":"DataResourcesManagementController_getDataResource","summary":"获取数据资源详情","description":"获取数据资源,通过数据资源 ID 查询对应的数据资源信息,包含数据资源名称、数据资源 Code、数据资源类型（TREE、STRING、ARRAY）、数据资源所属权限空间 ID、数据资源所属权限空间 Code 以及数据资源操作列表等基本信息。","parameters":[{"name":"namespaceCode","required":true,"in":"query","description":"数据资源所属的权限空间 Code","example":"examplePermissionNamespace","maxLength":50,"schema":{"type":"string"}},{"name":"resourceCode","required":true,"in":"query","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50,"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetDataResourceResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            GetDataResourceResponseDto result = await managementClient.GetDataResource(new GetDataResourceDto\n            {\n                NamespaceCode = \"code1\",\n                ResourceCode = \"tree1Code\"\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetDataResourceDto{\n\t\tResourceCode:  \"resourceCode\",\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t}\n\trespDto := client.GetDataResource(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetDataResourceDto;\nimport cn.authing.sdk.java.dto.GetDataResourceResponseDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\n\npublic class GetDataResourceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetDataResourceDto request = new GetDataResourceDto();\n        request.setNamespaceCode(\"examplePermissionNamespace\");\n        request.setResourceCode(\"resourceCode\");\n\n        GetDataResourceResponseDto response = client.getDataResource(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getDataResource({\n    namespaceCode: 'examplePermissionNamespace',\n    resourceCode: 'resourceCode'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/update-data-resource":{"post":{"operationId":"DataResourcesManagementController_updateDataResource","summary":"修改数据资源","description":"修改数据资源,根据权限空间 Code 和数据资源 Code 查询原始信息,只允许修改数据资源名称、描述和数据资源节点。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateDataResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateDataResourceResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            UpdateDataResourceResponseDto result = await managementClient.UpdateDataResource(new UpdateDataResourceDto\n            {\n                NamespaceCode = \"examplePermissionNamespace\",\n                ResourceName = \"示例数据资源名称\" ,\n                ResourceCode = \"dataResourceTestCode\",\n                Description = \"示例数据资源描述\" ,\n                Struct = new List<DataResourceTreeStructs>\n                {\n                    new DataResourceTreeStructs\n                    {\n                        Code=\"123\",\n                        Name=\"数据资源\",\n                        Value=\"示例数据资源节点\",\n                        Children=new List<object>\n                        {\n                            new DataResourceTreeStructs\n                            {\n                                Code=\"code1\",\n                                Name=\"子节点1\",\n                                Value=\"子节点值\",\n                                Children=new List<object>\n                                {\n                                    new DataResourceTreeStructs\n                                    {\n                                        Code=\"code2\",\n                                        Name=\"子节点2\",\n                                        Value=\"子节点值2\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                Actions = new List<string> { \"get\", \"read\", \"update\" }\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateDataResourceDto{\n\t\tResourceCode:  \"stringResourceCode\",\n\t\tResourceName:  \"示例新字符串数据资源\",\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t\tDescription:   \"示例数据资源新描述\",\n\t\tActions:       []string{\"read\", \"get\", \"update\"},\n\t\tStruct:        \"test\",\n\t}\n\trespDto := client.UpdateDataResource(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DataResourceTreeStructs;\nimport cn.authing.sdk.java.dto.UpdateDataResourceDto;\nimport cn.authing.sdk.java.dto.UpdateDataResourceResponseDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\n\npublic class UpdateDataResourceTest {\n\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateDataResourceDto request = new UpdateDataResourceDto();\n        request.setNamespaceCode(\"examplePermissionNamespace\");\n        request.setResourceCode(\"treeResourceCode\");\n        request.setResourceName(\"示例新树数据资源\");\n        request.setDescription(\"示例数据资源新描述\");\n        ArrayList<DataResourceTreeStructs> dataResourceTreeStructList = new ArrayList<>();\n        DataResourceTreeStructs dataResourceTreeStruct = new DataResourceTreeStructs();\n        dataResourceTreeStruct.setCode(\"tree1\");\n        dataResourceTreeStruct.setName(\"树节点1\");\n        dataResourceTreeStruct.setValue(\"树节点1描述\");\n        dataResourceTreeStructList.add(dataResourceTreeStruct);\n        request.setStruct(dataResourceTreeStructList);\n        ArrayList<String> actionList = new ArrayList<>();\n        actionList.add(\"get\");\n        actionList.add(\"read\");\n        actionList.add(\"delete\");\n        actionList.add(\"update\");\n        request.setActions(actionList);\n        UpdateDataResourceResponseDto response = client.updateDataResource(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateDataResource({\n    namespaceCode: 'examplePermissionNamespace',\n    resourceCode: 'treeResourceCode',\n    resourceName: '示例树数据资源新名称',\n    struct: [{\n      code: 'tree1',\n      name: '树节点1',\n      value: '树节点1描述'\n    }],\n    description: '示例树数据资源新描述',\n    actions: ['get','read','delete','update']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/delete-data-resource":{"post":{"operationId":"DataResourcesManagementController_deleteDataResource","summary":"删除数据资源","description":"删除数据资源,根据数据资源 ID 删除对应的数据资源信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteDataResourceDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CommonResponseDto result = await managementClient.DeleteDataResource(new DeleteDataResourceDto\n            {\n                NamespaceCode = \"examplePermissionNamespace\",\n                ResourceCode = \"dataResourceTestCode\"\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteDataResourceDto{\n\t\tResourceCode:  \"resourceCode\",\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t}\n\trespDto := client.DeleteDataResource(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CommonResponseDto;\nimport cn.authing.sdk.java.dto.DeleteDataResourceDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\n\npublic class DeleteDataResourceTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteDataResourceDto request = new DeleteDataResourceDto();\n        request.setNamespaceCode(\"examplePermissionNamespace\");\n        request.setResourceCode(\"resourceCode\");\n        CommonResponseDto response = client.deleteDataResource(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteDataResource({\n    namespaceCode: 'examplePermissionNamespace',\n    resourceCode: 'resourceCode'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/check-data-resource-exists":{"get":{"operationId":"DataResourcesManagementController_checkDataResourceExists","summary":"检查数据资源 Code 或者名称是否可用","description":"检查数据资源名称或者 Code 在权限空间内是否有效,通过数据资源名称或者数据资源 Code 以及所属权限空间 Code,判断在指定的权限空间内是否可用。\n\n### 数据资源 Code 有效示例\n\n- 入参\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"resourceCode\": \"test\"\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 0,\n  \"data\": {\n      \"isValid\": \"true\"\n    }\n}\n```\n\n### 数据资源名称有效示例\n\n- 入参\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"resourceName\": \"test\"\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 0,\n  \"data\": {\n      \"isValid\": \"true\"\n    }\n}\n```\n\n### 数据资源 Code 无效示例\n\n- 入参\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"resourceCode\": \"test\"\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 0,\n  \"requestId\": \"934108e5-9fbf-4d24-8da1-c330328abd6c\",\n  \"data\": {\n      \"isValid\": \"false\",\n      \"message\": \"data resource code already exist\"\n  }\n}\n```\n  ","parameters":[{"name":"namespaceCode","required":true,"in":"query","description":"数据资源所属的权限空间 Code","example":"examplePermissionNamespace","maxLength":50,"schema":{"type":"string"}},{"name":"resourceName","required":false,"in":"query","description":"数据资源名称, 权限空间内唯一","example":"示例数据资源名称","maxLength":50,"schema":{"type":"string"}},{"name":"resourceCode","required":false,"in":"query","description":"数据资源 Code, 权限空间内唯一","example":"dataResourceTestCode","maxLength":50,"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckParamsDataResourceResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CheckParamsDataResourceResponseDto result = await managementClient.CheckDataResourceExists(new CheckDataResourceExistsDto \n            { \n                NamespaceCode = \"examplePermissionNamespace\", \n                ResourceName = \"test\"\n            });\n\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CheckDataResourceExistsDto{\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t\tResourceName:  \"示例数据资源名称\",\n\t}\n\trespDto := client.CheckDataResourceExists(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CheckDataResourceExistsDto;\nimport cn.authing.sdk.java.dto.CheckParamsDataResourceResponseDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\n\npublic class CheckDataResourceExistsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CheckDataResourceExistsDto request = new CheckDataResourceExistsDto();\n        request.setNamespaceCode(\"examplePermissionNamespace\");\n        request.setResourceName(\"示例树数据资源名称\");\n\n        CheckParamsDataResourceResponseDto response1 = client.checkDataResourceExists(request);\n        System.out.println(JsonUtils.serialize(response1));\n\n        request.setNamespaceCode(\"examplePermissionNamespace\");\n        request.setResourceCode(\"treeResourceCode\");\n\n        CheckParamsDataResourceResponseDto response2 = client.checkDataResourceExists(request);\n        System.out.println(JsonUtils.serialize(response2));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.checkDataResourceExists({\n    namespaceCode: 'examplePermissionNamespace',\n    resourceName: '示例树数据资源名称'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/create-data-policy":{"post":{"operationId":"DataResourcesPolicyManagementController_createDataPolicy","summary":"创建数据策略（重点）","description":"\n  ## 描述\n  该接口用于创建数据策略，通过数据策略你可以将一组数据资源及其指定的操作进行绑定到一起，共同授权给主体。\n  ## 注意\n为了方便使用，`permissions` 字段我们基于路径的方式提供了快捷的写法，如：\n- 数组、字符串资源：权限空间 code/数据资源 code/数据资源某一 action（如果表示所有操作，则使用`*`替代action）\n- 树类型资源：权限空间 code/数据资源 code/node code 1/node code 1_1/.../数据资源某一 action\n\n## 请求示例\n假设我们要对一名研发人员进行授权，首先创建 3 个数据资源如下：\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"resourceName\": \"服务器\",\n  \"resourceCode\": \"server_2023\",\n  \"type\": \"STRING\",\n  \"struct\": \"server_2023\",\n  \"actions\": [\"read\", \"write\"]\n}\n```\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"resourceName\": \"研发知识库\",\n  \"description\": \"\",\n  \"resourceCode\": \"rd_document\",\n  \"type\": \"STRING\",\n  \"struct\": \"https://www.authing.com/rd_document\",\n  \"actions\": [\"read\", \"write\", \"share\"]\n}\n```\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"resourceName\": \"研发内部平台菜单\",\n  \"description\": \"这是研发使用的内部平台菜单\",\n  \"resourceCode\": \"rd_internal_platform\",\n  \"type\": \"TREE\",\n  \"struct\": [\n    {\n      \"name\": \"部署\",\n      \"code\": \"deploy\",\n      \"children\": [\n        {\n          \"name\": \"生产环境\",\n          \"code\": \"prod\"\n        },\n        {\n          \"name\": \"测试环境\",\n          \"code\": \"test\"\n        }\n      ]\n    },\n    {\n      \"name\": \"数据库\",\n      \"code\": \"db\"\n      \"children\": [\n        {\n          \"name\": \"查询\",\n          \"code\": \"query\"\n        },\n        {\n          \"name\": \"导出\",\n          \"code\": \"export\"\n        }\n      ]\n    }\n  ],\n  \"actions\": [\"access\", \"execute\"]\n}\n```\n我们分配一台服务器：server_2023 给他使用，他可以在上面进行任意操作，同时他可以阅读、编辑研发知识库，最后他可以在研发内部平台中进行部署测试环境，但是不能够导出数据库数据。\n```json\n{\n  \"policyName\": \"研发人员策略\",\n  \"description\": \"这是一个示例数据策略\",\n  \"statementList\": [\n    {\n      \"effect\": \"ALLOW\",\n      \"permissions\": [ \n        \"examplePermissionNamespaceCode/server_2023/*\",\n        \"examplePermissionNamespaceCode/rd_document/read\",\n        \"examplePermissionNamespaceCode/rd_document/write\",\n        \"examplePermissionNamespaceCode/rd_internal_platform/deploy/test/execute\"\n       ]\n    },\n    {\n      \"effect\": \"DENY\",\n      \"permissions\": [ \n        \"examplePermissionNamespaceCode/rd_internal_platform/db/export/execute\"\n      ]\n    }\n  ]\n}\n```\n","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateDataPolicyDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateDataPolicyResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CreateDataPolicyResponseDto result = await managementClient.CreateDataPolicy(new CreateDataPolicyDto\n            {\n                PolicyName = \"示例数据策略\",\n                Description = \"这是一个示例数据策略\",\n                StatementList = new List<DataStatementPermissionDto>\n                {\n                    new DataStatementPermissionDto\n                    {\n                        Effect=DataStatementPermissionDto.effect.ALLOW,\n                        Permissions=new List<string>\n                        {\n                            \"examplePermissionCode/str1/get\",\n                            \"examplePermissionCode/str1/read\",\n                        }\n                    }\n                }\n            });\n\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateDataPolicyDto{\n\t\tPolicyName: \"示例数据策略名称\",\n\t\tStatementList: []dto.DataStatementPermissionDto{\n\t\t\t{\n\t\t\t\tEffect:      \"ALLOW\",\n\t\t\t\tPermissions: []string{\"namespaceCode/treeResourceCode/path/action\"},\n\t\t\t},\n\t\t},\n\t\tDescription: \"示例数据策略描述\",\n\t}\n\trespDto := client.CreateDataPolicy(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.policy;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CreateDataPolicyDto;\nimport cn.authing.sdk.java.dto.CreateDataPolicyResponseDto;\nimport cn.authing.sdk.java.dto.DataStatementPermissionDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CreateDataPolicyTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateDataPolicyDto reqDto = new CreateDataPolicyDto();\n        reqDto.setPolicyName(\"示例数据策略名称\");\n        List<DataStatementPermissionDto> list = new ArrayList<>();\n        DataStatementPermissionDto permissionDto = new DataStatementPermissionDto();\n        List<String> list1 = new ArrayList<>();\n        list1.add(\"namespaceCode/treeResourceCode/path/action\");\n        permissionDto.setPermissions(list1);\n        permissionDto.setEffect(DataStatementPermissionDto.Effect.ALLOW);\n        list.add(permissionDto);\n        reqDto.setStatementList(list);\n        reqDto.setDescription(\"示例数据策略描述\");\n        CreateDataPolicyResponseDto response = client.createDataPolicy(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.createDataPolicy({\n    policyName: '示例数据策略名称',\n    statementList: [{\n      effect: DataStatementPermissionDto.effect.ALLOW,\n      permissions: ['namespaceCode/treeResourceCode/path/action'],\n    },],\n    description: '示例数据策略描述',\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-data-policies":{"get":{"operationId":"DataResourcesPolicyManagementController_listDataPolices","summary":"获取数据策略列表","description":"分页查询数据策略列表，也可通过关键字搜索数据策略名称或者数据策略 Code 进行模糊查找。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"query","required":false,"in":"query","description":"数据策略名称关键字搜索","example":"examplePolicyName","maxLength":50,"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListDataPoliciesPaginatedRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            ListDataPoliciesPaginatedRespDto result = await managementClient.ListDataPolices(new ListDataPoliciesDto\n            {\n                \n            });\n\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListDataPoliciesDto{\n\t\tPage: 1,\n\t\tLimit: 10,\n\t\tQuery: \"examplePolicyName\",\n\t}\n\trespDto := client.ListDataPolices(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.policy;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListDataPoliciesDto;\nimport cn.authing.sdk.java.dto.ListDataPoliciesPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListDataPolicesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListDataPoliciesDto reqDto = new ListDataPoliciesDto();\n        reqDto.setPage(1);\n        reqDto.setLimit(10);\n        reqDto.setQuery(\"examplePolicyName\");\n        ListDataPoliciesPaginatedRespDto response = client.listDataPolices(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listDataPolices({\n    page: 1,\n    limit: 10,\n    query: 'examplePolicyName',\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-simple-data-policies":{"get":{"operationId":"DataResourcesPolicyManagementController_listSimpleDataPolices","summary":"获取数据策略简略信息列表","description":"分页获取数据策略简略信息列表，通过关键字搜索数据策略名称或者数据策略 Code 进行模糊查找出数据策略 ID、数据策略名称和数据策略描述信息。","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"query","required":false,"in":"query","description":"数据策略名称关键字搜索","example":"examplePolicyName","maxLength":50,"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListSimpleDataPoliciesPaginatedRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            ListSimpleDataPoliciesPaginatedRespDto result = await managementClient.ListSimpleDataPolices(new ListSimpleDataPoliciesDto\n            {\n\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListSimpleDataPoliciesDto{\n\t\tPage:  1,\n\t\tLimit: 10,\n\t\tQuery: \"examplePolicyName\",\n\t}\n\trespDto := client.ListSimpleDataPolices(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.policy;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListSimpleDataPoliciesDto;\nimport cn.authing.sdk.java.dto.ListSimpleDataPoliciesPaginatedRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class ListSimpleDataPolicesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListSimpleDataPoliciesDto reqDto = new ListSimpleDataPoliciesDto();\n        reqDto.setPage(1);\n        reqDto.setLimit(10);\n        reqDto.setQuery(\"examplePolicyName\");\n        ListSimpleDataPoliciesPaginatedRespDto response = client.listSimpleDataPolices(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listSimpleDataPolices({\n    page: 1,\n    limit: 10,\n    query: 'examplePolicyName',\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-data-policy":{"get":{"operationId":"DataResourcesPolicyManagementController_getDataPolicy","summary":"获取数据策略详情","description":"获取数据策略详情，通过数据策略 ID 获取对应数据策略信息,包含数据策略 ID、数据策略名称、数据策略描述、数据策略下所有的数据权限列表等信息。","parameters":[{"name":"policyId","required":true,"in":"query","description":"数据策略 ID","example":"60b49xxxxxxxxxxxxxxx6e68","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetDataPolicyResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            GetDataPolicyResponseDto res = await managementClient.GetDataPolicy(new GetDataPolicyDto\n            {\n                PolicyId =\"POLICYID\"\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetDataPolicyDto{\n\t\tPolicyId: \"60b49xxxxxxxxxxxxxxx6e68\",\n\t}\n\trespDto := client.GetDataPolicy(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.policy;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetDataPolicyDto;\nimport cn.authing.sdk.java.dto.GetDataPolicyResponseDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetDataPolicyTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetDataPolicyDto reqDto = new GetDataPolicyDto();\n        reqDto.setPolicyId(\"60b49xxxxxxxxxxxxxxx6e68\");\n        GetDataPolicyResponseDto response = client.getDataPolicy(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getDataPolicy({\n    policyId: '60b49xxxxxxxxxxxxxxx6e68',\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/update-data-policy":{"post":{"operationId":"DataResourcesPolicyManagementController_updateDataPolicy","summary":"修改数据策略","description":"修改数据策略，通过数据策略名称、数据策略描述和相关的数据资源等字段修改数据策略信息。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateDataPolicyDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateDataPolicyResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            UpdateDataPolicyResponseDto res = await managementClient.UpdateDataPolicy(new UpdateDataPolicyDto\n            {\n                PolicyId = \"POLICYID\",\n                PolicyName = \"策略名称_update\",\n                StatementList = new List<DataStatementPermissionDto>\n                {\n                    new DataStatementPermissionDto\n                    {\n                        Effect=DataStatementPermissionDto.effect.ALLOW,\n                        Permissions=new List<string>\n                        {\n                            \"examplePermissionCode/str1/update\"\n                        }\n                    }\n                }\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.UpdateDataPolicyDto{\n\t\tPolicyId: \"60b49xxxxxxxxxxxxxxx6e68\",\n\t\tPolicyName: \"示例数据策略名称\",\n\t\tDescription: \"示例数据策略描述\",\n\t\tStatementList: []dto.DataStatementPermissionDto{\n\t\t\t{\n\t\t\t\tEffect:      \"ALLOW\",\n\t\t\t\tPermissions: []string{\"namespaceCode/treeResourceCode/path/action\"},\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.UpdateDataPolicy(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.policy;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.DataStatementPermissionDto;\nimport cn.authing.sdk.java.dto.UpdateDataPolicyDto;\nimport cn.authing.sdk.java.dto.UpdateDataPolicyResponseDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UpdateDataPolicyTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        UpdateDataPolicyDto reqDto = new UpdateDataPolicyDto();\n        reqDto.setPolicyId(\"60b49xxxxxxxxxxxxxxx6e68\");\n        reqDto.setPolicyName(\"示例数据策略名称\");\n        List<DataStatementPermissionDto> list = new ArrayList<>();\n        DataStatementPermissionDto permissionDto = new DataStatementPermissionDto();\n        List<String> list1 = new ArrayList<>();\n        list1.add(\"namespaceCode/treeResourceCode/path/action\");\n        permissionDto.setPermissions(list1);\n        permissionDto.setEffect(DataStatementPermissionDto.Effect.ALLOW);\n        list.add(permissionDto);\n        reqDto.setStatementList(list);\n        reqDto.setDescription(\"示例数据策略描述\");\n        UpdateDataPolicyResponseDto response = client.updateDataPolicy(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.updateDataPolicy({\n    policyId: '60b49xxxxxxxxxxxxxxx6e68',\n    policyName: '示例数据策略名称',\n    description: '示例数据策略描述',\n    statementList: [{\n      effect: DataStatementPermissionDto.effect.ALLOW,\n      permissions: ['namespaceCode/treeResourceCode/path/action',],\n    },]\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/delete-data-policy":{"post":{"operationId":"DataResourcesPolicyManagementController_deleteDataPolicy","summary":"删除数据策略","description":"删除数据策略，通过数据策略 ID 删除对应的策略,同时也删除数据策略和对应的数据资源等关系数据。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteDataPolicyDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CommonResponseDto res = await managementClient.DeleteDataPolicy(new DeleteDataPolicyDto\n            {\n                PolicyId = \"POLICYID\",\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteDataPolicyDto{\n\t\tPolicyId: \"60b49xxxxxxxxxxxxxxx6e68\",\n\t}\n\trespDto := client.DeleteDataPolicy(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.policy;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CommonResponseDto;\nimport cn.authing.sdk.java.dto.DeleteDataPolicyDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class DeleteDataPolicyTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteDataPolicyDto reqDto = new DeleteDataPolicyDto();\n        reqDto.setPolicyId(\"60b49xxxxxxxxxxxxxxx6e68\");\n        CommonResponseDto response = client.deleteDataPolicy(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.deleteDataPolicy({\n    policyId: '60b49xxxxxxxxxxxxxxx6e68',\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/check-data-policy-exists":{"get":{"operationId":"DataResourcesPolicyManagementController_checkDataPolicyExists","summary":"检查数据策略名称是否可用","description":"通过数据策略名称查询用户池内是否有效。","parameters":[{"name":"policyName","required":true,"in":"query","description":"数据策略名称，用户池唯一","example":"示例数据策略名称","maxLength":50,"schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckParamsDataPolicyResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CheckParamsDataPolicyResponseDto result = await managementClient.CheckDataPolicyExists(new CheckDataPolicyExistsDto\n            {\n                PolicyName = \"策略名称\"\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CheckDataPolicyExistsDto{\n\t\tPolicyName: \"示例数据策略名称\",\n\t}\n\trespDto := client.CheckDataPolicyExists(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.policy;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CheckDataPolicyExistsDto;\nimport cn.authing.sdk.java.dto.CheckParamsDataPolicyResponseDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class CheckDataPolicyExistsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CheckDataPolicyExistsDto reqDto = new CheckDataPolicyExistsDto();\n        reqDto.setPolicyName(\"示例数据策略名称\");\n        CheckParamsDataPolicyResponseDto response = client.checkDataPolicyExists(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.checkDataPolicyExists({\n    policyName: '示例数据策略名称',\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-data-policy-targets":{"get":{"operationId":"DataResourcesPolicyManagementController_listDataPolicyTargets","summary":"获取数据策略授权的主体列表","description":"获取数据策略授权的主体列表，通过授权主体类型、数据策略 ID 和数据资源 ID 查找授权主体列表。","parameters":[{"name":"policyId","required":true,"in":"query","description":"数据策略 ID","example":"60b49xxxxxxxxxxxxxxx6e68","schema":{"type":"string"}},{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"query","required":false,"in":"query","description":"主体名称","example":"示例1","maxLength":50,"schema":{"type":"string"}},{"name":"targetType","required":false,"in":"query","description":"主体类型,包括 USER、GROUP、ROLE、ORG 四种类型","example":[0],"schema":{"type":"array","items":{"type":"string","enum":["USER","ORG","GROUP","ROLE"]}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListDataPolicySubjectPaginatedRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            ListDataPolicySubjectPaginatedRespDto result = await managementClient.ListDataPolicyTargets(new ListDataPolicyTargetsDto\n            {\n                PolicyId = \"POLICYID\",\n                TargetType = \"USER\"\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListDataPolicyTargetsDto{\n\t\tPolicyId:   \"60b49xxxxxxxxxxxxxxx6e68\",\n\t\tPage:       1,\n\t\tLimit:      10,\n\t\tQuery:      \"主体名称\",\n\t\tTargetType: \"USER\",\n\t}\n\trespDto := client.ListDataPolicyTargets(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.policy;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListDataPolicySubjectPaginatedRespDto;\nimport cn.authing.sdk.java.dto.ListDataPolicyTargetsDto;\nimport cn.authing.sdk.java.dto.SubjectDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListDataPolicyTargetsTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListDataPolicyTargetsDto reqDto = new ListDataPolicyTargetsDto();\n        reqDto.setPolicyId(\"60b49xxxxxxxxxxxxxxx6e68\");\n        reqDto.setQuery(\"主体名称\");\n        reqDto.setPage(1);\n        reqDto.setLimit(10);\n        List<SubjectDto.Type> targetType = new ArrayList<>();\n        targetType.add(SubjectDto.Type.USER);\n        targetType.add(SubjectDto.Type.ROLE);\n        reqDto.setTargetType(targetType);\n        ListDataPolicySubjectPaginatedRespDto response = client.listDataPolicyTargets(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listDataPolicyTargets({\n    policyId: '60b49xxxxxxxxxxxxxxx6e68',\n    page: 1,\n    limit: 10,\n    query: '主体名称',\n    targetType: ['USER'],\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/authorize-data-policies":{"post":{"operationId":"DataResourcesPolicyManagementController_authorizeDataPolicies","summary":"授权数据策略","description":"数据策略创建主体授权，通过授权主体和数据策略进行相互授权。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateAuthorizeDataPolicyDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CommonResponseDto result = await managementClient.AuthorizeDataPolicies(new CreateAuthorizeDataPolicyDto\n            {\n                PolicyIds = new List<string> { \"POLICYID\" },\n                TargetList = new List<SubjectDto>\n                {\n                    new SubjectDto\n                    {\n                        Id=\"USERID\",\n                        Name=\"USERNAME\",\n                        Type=SubjectDto.type.USER\n                    }\n                }\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CreateAuthorizeDataPolicyDto{\n\t\tPolicyIds: []string{\"6301cexxxxxxxxxx27478\", \"63123cexxxxxxxxxx2123101\"},\n\t\tTargetList: []dto.SubjectDto{\n\t\t\t{\n\t\t\t\tId:   \"6301cexxxxxxxxxxxxxxxxx78\",\n\t\t\t\tType: \"USER\",\n\t\t\t\tName: \"用户名称\",\n\t\t\t},\n\t\t},\n\t}\n\trespDto := client.AuthorizeDataPolicies(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.policy;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CommonResponseDto;\nimport cn.authing.sdk.java.dto.CreateAuthorizeDataPolicyDto;\nimport cn.authing.sdk.java.dto.SubjectDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\nimport com.nimbusds.jose.shaded.ow2asm.Type;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class AuthorizeDataPoliciesTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CreateAuthorizeDataPolicyDto reqDto = new CreateAuthorizeDataPolicyDto();\n        List<String> list = new ArrayList<>();\n        list.add(\"6301cexxxxxxxxxx27478\");\n        list.add(\"63123cexxxxxxxxxx2123101\");\n        reqDto.setPolicyIds(list);\n        List<SubjectDto> targetList = new ArrayList<>();\n        SubjectDto subjectDto = new SubjectDto();\n        subjectDto.setId(\"6301cexxxxxxxxxxxxxxxxx78\");\n        subjectDto.setName(\"用户名称\");\n        subjectDto.setType(SubjectDto.Type.USER);\n        targetList.add(subjectDto);\n        reqDto.setTargetList(targetList);\n        CommonResponseDto response = client.authorizeDataPolicies(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.authorizeDataPolicies({\n    policyIds: ['6301cexxxxxxxxxx27478', '63123cexxxxxxxxxx2123101',],\n    targetList: [{\n      id: '6301cexxxxxxxxxxxxxxxxx78',\n      type: SubjectDto.type.USER,\n      name: '用户名称',\n    },],\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/revoke-data-policy":{"post":{"operationId":"DataResourcesPolicyManagementController_revokeDataPolicy","summary":"删除数据策略授权","description":"删除数据策略授权，通过授权主体 ID、授权主体类型和数据策略 ID 进行删除。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteAuthorizeDataPolicyDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CommonResponseDto result = await managementClient.RevokeDataPolicy(new DeleteAuthorizeDataPolicyDto\n            {\n                PolicyId = \"POLICYID\",\n                TargetIdentifier = \"USERID\",\n                TargetType = DeleteAuthorizeDataPolicyDto.targetType.USER\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.DeleteAuthorizeDataPolicyDto{\n\t\tPolicyId:         \"60b49xxxxxxxxxxxxxxx6e68\",\n\t\tTargetIdentifier: \"6301cexxxxxxxxxxxxxxxxx78\",\n\t\tTargetType:       \"USER\",\n\t}\n\trespDto := client.RevokeDataPolicy(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management.dataPermission.policy;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CommonResponseDto;\nimport cn.authing.sdk.java.dto.DeleteAuthorizeDataPolicyDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class RevokeDataPolicyTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        DeleteAuthorizeDataPolicyDto reqDto = new DeleteAuthorizeDataPolicyDto();\n        reqDto.setPolicyId(\"60b49xxxxxxxxxxxxxxx6e68\");\n        reqDto.setTargetType(DeleteAuthorizeDataPolicyDto.TargetType.USER);\n        reqDto.setTargetIdentifier(\"6301cexxxxxxxxxxxxxxxxx78\");\n        CommonResponseDto response = client.revokeDataPolicy(reqDto);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.revokeDataPolicy({\n    policyId: '60b49xxxxxxxxxxxxxxx6e68',\n    targetIdentifier: '6301cexxxxxxxxxxxxxxxxx78',\n    targetType: DeleteAuthorizeDataPolicyDto.targetType.USER,\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-user-permission-list":{"post":{"operationId":"DataAuthenticationManagementController_getUserPermissionList","summary":"获取用户权限列表","description":"\n  ## 描述\n  该接口用于查询某些用户在某些权限空间的数据资源的权限数据。\n我们的鉴权接口针对不同的鉴权场景有多种，区别在于在所处的场景下能够传递的参数列表以及不同形式的出参，**当你需要查询某些用户的所有权限时**可以使用此接口，\n## 注意\n接口提供了两个数组类型的入参`userIds`和`namespaceCodes`来支持批量查询（注意：namespaceCodes 是可选的）。\n## 场景举例\n假如你的业务场景是用户登录后能看到他所有可以访问或者进行其他操作的文档、人员信息、设备信息等资源，那么你可以在用户登录后调用此接口查询用户的所有权限。\n## 请求示例\n### 查询单个用户权限列表示例\n注意：在此接口的返回参数中，树类型的数据资源权限返回是按照**路径**的方式返回的\n- 入参\n  \n```json\n{\n    \"userIds\": [\n      \"6301ceaxxxxxxxxxxx27478\"  \n    ]\n}\n```\n\n- 出参\n  \n```json\n{\n  \"statusCode\": 200, \n  \"message\": \"操作成功\", \n  \"apiCode\": 20001, \n  \"data\": {\n    \"userPermissionList\": [\n      {\n        \"userId\": \"6301ceaxxxxxxxxxxx27478\", \n        \"namespaceCode\": \"examplePermissionNamespace\", \n        \"resourceList\": [\n          {\n            \"resourceCode\": \"strCode\",\n            \"resourceType\": \"STRING\",\n            \"strAuthorize\": {\n              \"value\": \"示例字符串资源\", \n              \"actions\": [\n                \"read\", \n                \"post\", \n                \"get\", \n                \"write\"\n              ]\n            }\n          },\n          {\n            \"resourceCode\": \"arrayCode\", \n            \"resourceType\": \"ARRAY\",\n            \"arrAuthorize\": {\n              \"values\": [\n                \"示例数据资源1\",\n                \"示例数据资源2\"\n              ], \n              \"actions\": [\n                \"read\", \n                \"post\", \n                \"get\", \n                \"write\"\n              ]\n            }\n          }, \n          {\n            \"resourceCode\": \"treeCode\", \n            \"resourceType\": \"TREE\",\n            \"treeAuthorize\": {\n              \"authList\": [\n                {\n                  \"nodePath\": \"/treeChildrenCode/treeChildrenCode1\", \n                  \"nodeActions\": [\n                    \"read\", \n                    \"get\"\n                  ], \n                  \"nodeName\": \"treeChildrenName1\", \n                  \"nodeValue\": \"treeChildrenValue1\"\n                }, \n                {\n                  \"nodePath\": \"/treeChildrenCode/treeChildrenCode2\", \n                  \"nodeActions\": [\n                    \"read\", \n                    \"get\"\n                  ], \n                  \"nodeName\": \"treeChildrenName2\", \n                  \"nodeValue\": \"treeChildrenValue2\"\n                }, \n                {\n                  \"nodePath\": \"/treeChildrenCode/treeChildrenCode3\", \n                  \"nodeActions\": [\n                    \"read\"\n                  ], \n                  \"nodeName\": \"treeChildrenName3\", \n                  \"nodeValue\": \"treeChildrenValue3\"\n                }\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n### 查询多个用户权限列表示例\n\n- 入参\n\n```json\n{\n  \"userIds\": [\n    \"6301ceaxxxxxxxxxxx27478\",\n    \"6121ceaxxxxxxxxxxx27312\"\n  ]\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200, \n  \"message\": \"操作成功\", \n  \"apiCode\": 20001, \n  \"data\": {\n    \"userPermissionList\": [\n      {\n        \"userId\": \"6301ceaxxxxxxxxxxx27478\", \n        \"namespaceCode\": \"examplePermissionNamespace1\", \n        \"resourceList\": [\n          {\n            \"resourceCode\": \"strCode\",\n            \"resourceType\": \"STRING\",\n            \"strAuthorize\": {\n              \"value\": \"示例字符串资源\", \n              \"actions\": [\n                \"read\", \n                \"post\", \n                \"get\", \n                \"write\"\n              ]\n            }\n          }\n        ]\n      }, \n      {\n        \"userId\": \"6121ceaxxxxxxxxxxx27312\", \n        \"namespaceCode\": \"examplePermissionNamespace2\", \n        \"resourceList\": [\n          {\n            \"resourceCode\": \"arrayCode\", \n            \"resourceType\": \"ARRAY\",\n            \"arrAuthorize\": {\n              \"values\": [\n                \"示例数组资源1\", \n                \"示例数组资源2\"\n              ], \n              \"actions\": [\n                \"read\", \n                \"post\", \n                \"get\", \n                \"write\"\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n### 查询多个用户在多个权限空间下权限列表示例\n\n- 入参\n\n```json\n{\n  \"userIds\": [\n    \"6301ceaxxxxxxxxxxx27478\",\n    \"6121ceaxxxxxxxxxxx27312\"\n  ],\n  \"namespaceCodes\": [\n    \"examplePermissionNamespace1\",\n    \"examplePermissionNamespace2\"\n  ]\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200, \n  \"message\": \"操作成功\", \n  \"apiCode\": 20001, \n  \"data\": {\n    \"userPermissionList\": [\n      {\n        \"userId\": \"6301ceaxxxxxxxxxxx27478\", \n        \"namespaceCode\": \"examplePermissionNamespace1\", \n        \"resourceList\": [\n          {\n            \"resourceCode\": \"strCode1\", \n            \"resourceType\": \"STRING\",\n            \"strAuthorize\": {\n              \"value\": \"示例字符串资源\", \n              \"actions\": [\n                \"read\", \n                \"post\", \n                \"get\", \n                \"write\"\n              ]\n            }\n          }\n        ]\n      }, \n      {\n        \"userId\": \"6121ceaxxxxxxxxxxx27312\", \n        \"namespaceCode\": \"examplePermissionNamespace2\", \n        \"resourceList\": [\n          {\n            \"resourceCode\": \"arrayCode\", \n            \"resourceType\": \"ARRAY\",\n            \"arrAuthorize\": {\n              \"values\": [\n                \"示例数组资源1\", \n                \"示例数组资源2\"\n              ], \n              \"actions\": [\n                \"read\", \n                \"post\", \n                \"get\", \n                \"write\"\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetUserPermissionListDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetUserPermissionListRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            GetUserPermissionListRespDto result = await managementClient.GetUserPermissionList(new GetUserPermissionListDto\n            {\n                NamespaceCodes = new List<string> { \"exampleNamespaceCode\" },\n                UserIds = new List<string> { \"USERID\" }\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserPermissionListDto{\n\t\tUserIds:        []string{\"6229ffaxxxxxxxxcade3e3d9\", \"6229ffaxxxxxxxxcade3e3d9\"},\n\t\tNamespaceCodes: []string{\"examplePermissionNamespace1\", \"examplePermissionNamespace2\"},\n\t}\n\trespDto := client.GetUserPermissionList(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserPermissionListDto;\nimport cn.authing.sdk.java.dto.GetUserPermissionListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n\npublic class GetUserPermissionListTest {\n\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserPermissionListDto request = new GetUserPermissionListDto();\n        List<String> userIds = new ArrayList<>();\n        userIds.add(\"6301ceaxxxxxxxxxxx27478\");\n        userIds.add(\"6121ceaxxxxxxxxxxx27312\");\n        request.setUserIds(userIds);\n        List<String> namespaceCodes = new ArrayList<>();\n        namespaceCodes.add(\"examplePermissionNamespace1\");\n        namespaceCodes.add(\"examplePermissionNamespace2\");\n        request.setNamespaceCodes(namespaceCodes);\n\n        GetUserPermissionListRespDto response = client.getUserPermissionList(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserPermissionList({\n    userIds: ['6229ffaxxxxxxxxcade3e3d9','6229ffaxxxxxxxxcade3e3d9'],\n    namespaceCodes: ['examplePermissionNamespace1','examplePermissionNamespace2']\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/check-permission":{"post":{"operationId":"DataAuthenticationManagementController_checkPermission","summary":"判断用户权限（重点）","description":"\n  ## 描述\n  当你需要判断用户是否拥有某些资源的指定权限时可以使用此接口\n  ## 注意\n  - 该接口通过传递资源 code 定位对应的数据资源（如果是树类型，则需要传递节点的完整 code 路径）。\n  - 如果你在配置数据策略时配置了**环境属性**的条件判断，那么需要设置参数`judgeConditionEnabled`为`true`（默认为 false），并且通过参数`authEnvParams`传递请求时所处的环境信息（如 IP、设备类型、系统类型等），否则条件判断会不生效，导致数据策略不生效。\n\n## 场景举例\n用户在删除某条数据时，需要判断他是否拥有此资源的删除权限，则可以使用此接口。\n\n## 请求示例\n### 判断用户对字符串和数组资源权限示例（无条件判断）\n\n- 入参\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"userId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"action\": \"get\",\n  \"resources\":[\"strResourceCode1\", \"arrayResourceCode1\"]\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\": {\n      \"checkResultList\": [\n          {\n              \"namespaceCode\": \"examplePermissionNamespace\",\n              \"resource\": \"strResourceCode1\",\n              \"action\": \"get\",\n              \"enabled\": true\n          },\n          {\n              \"namespaceCode\": \"examplePermissionNamespace\",\n              \"resource\": \"arrayResourceCode1\",\n              \"action\": \"get\",\n              \"enabled\": true\n          }\n      ]\n  }\n}\n```\n\n### 判断用户对字符串和数组资源权限示例（开启条件判断）\n\n- 入参\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"userId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"action\": \"get\",\n  \"resources\": [\"strResourceCode1\", \"arrayResourceCode1\"],\n  \"judgeConditionEnabled\": true,\n  \"authEnvParams\":{\n      \"ip\":\"110.96.0.0\",\n      \"city\":\"北京\",\n      \"province\":\"北京\",\n      \"country\":\"中国\",\n      \"deviceType\":\"PC\",\n      \"systemType\":\"ios\",\n      \"browserType\":\"IE\",\n      \"requestDate\":\"2022-12-26 17:40:00\"\n  }\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\": {\n      \"checkResultList\": [\n          {\n              \"namespaceCode\": \"examplePermissionNamespace\",\n              \"resource\": \"strResourceCode1\",\n              \"action\": \"get\",\n              \"enabled\": false\n          },\n          {\n              \"namespaceCode\": \"examplePermissionNamespace\",\n              \"resource\": \"arrayResourceCode1\",\n              \"action\": \"get\",\n              \"enabled\": false\n          }\n      ]\n  }\n}\n```\n\n### 判断用户对树资源权限示例\n\n- 入参\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"userId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"action\": \"get\",\n  \"resources\":[\"treeResourceCode1/StructCode1/resourceStructChildrenCode1\", \"treeResourceCode2/StructCode1/resourceStructChildrenCode1\"]\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\":{\n    \"checkResultList\": [{\n      \"namespaceCode\": \"examplePermissionNamespace\",\n      \"action\": \"get\",\n      \"resource\": \"treeResourceCode1/StructCode1/resourceStructChildrenCode1\",\n      \"enabled\": true     \n    },{\n      \"namespaceCode\": \"examplePermissionNamespace\",\n      \"action\": \"get\",\n      \"resource\": \"treeResourceCode2/StructCode1/resourceStructChildrenCode1\",\n      \"enabled\": true     \n    }]\n  }\n}\n```\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckPermissionDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckPermissionRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CheckPermissionRespDto result = await managementClient.CheckPermission(new CheckPermissionDto\n            {\n                NamespaceCode = \"exampleNamespaceCode\",\n                UserId = \"USERID\",\n                Action = \"get,read\",\n                Resources = new List<string> { \"strResourceCode1\", \"strResourceCode2\" }\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CheckPermissionDto{\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t\tUserId:        \"63721xxxxxxxxxxxxdde14a3\",\n\t\tAction:        \"read\",\n\t\tResources:     []string{\"strResourceCode\", \"arrayResourceCode\", \"/treeResourceCode/structCode/resourceStructChildrenCode\"},\n\t}\n\trespDto := client.CheckPermission(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CheckPermissionDto;\nimport cn.authing.sdk.java.dto.CheckPermissionRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n\npublic class CheckPermissionTest {\n\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CheckPermissionDto request = new CheckPermissionDto();\n        request.setNamespaceCode(\"examplePermissionNamespace\");\n        request.setUserId(\"63721xxxxxxxxxxxxdde14a3\");\n        request.setAction(\"get\");\n        List<String> resources = new ArrayList<>();\n        resources.add(\"strResourceCode\");\n        resources.add(\"arrayResourceCode\");\n        resources.add(\"/treeResourceCode/structCode/resourceStructChildrenCode\");\n        request.setResources(resources);\n        CheckPermissionRespDto response = client.checkPermission(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.checkPermission({\n    namespaceCode:'examplePermissionNamespace',\n    userId: '63721xxxxxxxxxxxxdde14a3',\n    action: 'get',\n    resources: ['strResourceCode', 'arrayResourceCode','/treeResourceCode/structCode/resourceStructChildrenCode']\n  });\n\n\n \n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/check-external-user-permission":{"post":{"operationId":"DataAuthenticationManagementController_checkExternalUserPermission","summary":"判断外部用户权限","description":"\n  ## 描述\n  当你的用户是外部用户，需要判断其是否拥有某资源的某一权限时，可以使用此接口，通过`externalId`来传递用户的 ID\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckExternalUserPermissionDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckExternalUserPermissionRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CheckExternalUserPermissionRespDto result = await managementClient.CheckExternalUserPermission(new CheckExternalUserPermissionDto\n            {\n                NamespaceCode = \"examplePermissionNamespace\",\n                ExternalId = \"EXTERNALEID\",\n                Action = \"get,read\",\n                Resources = new List<string> { \"treeResourceCode1\" }\n            });\n        }\n    }\n}"}}},"/api/v3/get-user-resource-permission-list":{"post":{"operationId":"DataAuthenticationManagementController_getUserResourcePermissionList","summary":"获取用户拥有某些资源的权限列表（推荐）","description":"\n  ## 描述\n  当你需要查询某一用户拥有指定的资源列表的权限时，可以使用此接口。\n  ## 注意\n  该接口需要你传递指定的资源 code（如果是树类型资源则需要传递节点的完整 code 路径），此接口性能更佳，推荐使用。\n  ## 请求示例\n### 获取用户字符串和数组资源权限示例\n\n- 入参\n  \n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"userId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"resources\":[\"strResourceCode1\", \"arrayResourceCode1\"]\n}\n```\n\n- 出参\n\n```json\n{\n\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\":{\n    \"permissionList\": [{\n      \"namespaceCode\": \"examplePermissionNamespace\",\n      \"actions\": [\"read\",\"get\"],  \n      \"resource\": \"strResourceCode1\"\n    },{\n      \"namespaceCode\": \"examplePermissionNamespace\",\n      \"actions\": [\"read\",\"update\",\"delete\"], \n      \"resource\": \"arrayResourceCode1\"\n    }]\n  }\n}\n```\n  \n### 获取用户树资源权限示例\n  \n- 入参\n  \n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"userId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"resources\":[\"treeResourceCode1/StructCode1/resourceStructChildrenCode1\", \"treeResourceCode2/StructCode1/resourceStructChildrenCode1\"]\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\":{\n    \"permissionList\": [{\n      \"namespaceCode\": \"examplePermissionNamespace\",\n      \"actions\": [\"read\", \"update\", \"delete\"],\n      \"resource\": \"treeResourceCode1/StructCode1/resourceStructChildrenCode1\"\n    },{\n      \"namespaceCode\": \"examplePermissionNamespace\",\n      \"actions\": [\"read\", \"get\", \"delete\"],     \n      \"resource\": \"treeResourceCode2/StructCode1/resourceStructChildrenCode1\"\n    }]\n  }\n}\n```\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetUserResourcePermissionListDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetUserResourcePermissionListRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            GetUserResourcePermissionListRespDto result = await managementClient.GetUserResourcePermissionList(new GetUserResourcePermissionListDto\n            {\n                NamespaceCode = \"examplePermissionNamespace\",\n                Resources = new List<string> { \"treeResourceCode1\" },\n                UserId = \"USERID\"\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.GetUserResourcePermissionListDto{\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t\tUserId:        \"63721xxxxxxxxxxxxdde14\",\n\t\tResources:     []string{\"strResourceCode\", \"arrayResourceCode\", \"/treeResourceCode/structCode/resourceStructChildrenCode\"},\n\t}\n\trespDto := client.GetUserResourcePermissionList(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserResourcePermissionListDto;\nimport cn.authing.sdk.java.dto.GetUserResourcePermissionListRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n\npublic class GetUserResourcePermissionListTest {\n\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserResourcePermissionListDto request = new GetUserResourcePermissionListDto();\n        request.setNamespaceCode(\"examplePermissionNamespace\");\n        request.setUserId(\"63721xxxxxxxxxxxxdde14a3\");\n        List<String> resources = new ArrayList<>();\n        resources.add(\"strResourceCode\");\n        resources.add(\"arrayResourceCode\");\n        resources.add(\"/treeResourceCode/structCode/resourceStructChildrenCode\");\n        request.setResources(resources);\n        GetUserResourcePermissionListRespDto response = client.getUserResourcePermissionList(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUserResourcePermissionList({\n    // 替换用户 ID\n    namespaceCode: 'examplePermissionNamespace',\n    userId: '63721xxxxxxxxxxxxdde14a3',\n    resources: ['strResourceCode','arrayResourceCode','/treeResourceCode/structCode/resourceStructChildrenCode']\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-resource-targets":{"post":{"operationId":"DataAuthenticationManagementController_listResourceTargets","summary":"获取拥有某些资源权限的用户列表","description":"\n  ## 描述\n  当你需要获取拥有指定资源的权限的用户时，可以使用此接口。\n  ## 场景举例\n  假如你的业务场景是：想看看当前文档能够编辑的用户列表，那么你可以使用此接口。\n  ## 请求示例\n### 获取字符串和数组资源被授权的用户列表示例\n\n- 入参\n    \n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"actions\": [\"get\", \"update\", \"read\"],\n  \"resources\":[\"strResourceCode1\", \"arrayResourceCode1\"]\n}\n```\n  \n- 出参\n  \n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\":{\n    \"authUserList\": [{\n      \"resource\": \"strResourceCode1\",\n      \"actionAuthList\": [{\n        \"userIds\": [\"63721xxxxxxxxxxxxdde14a3\"],\n        \"action\": \"get\"\n      },{\n        \"userIds\": [\"63721xxxxxxxxxxxxdde14a3\"],\n        \"action\": \"update\"\n      },{\n        \"userIds\": [\"63721xxxxxxxxxxxxdde14a3\"],\n        \"action\": \"read\"\n      }]  \n    },{\n      \"resource\": \"arrayResourceCode1\",\n      \"actionAuthList\": [{\n      \"userIds\": [\"63721xxxxxxxxxxxxdde14a3\"],\n        \"action\": \"get\"\n      },{\n        \"userIds\": [\"63721xxxxxxxxxxxxdde14a3\"],\n        \"action\": \"update\"\n      },{\n        \"userIds\": [\"63721xxxxxxxxxxxxdde14a3\"],\n        \"action\": \"read\"\n      }] \n    }]\n  }\n}\n```\n    \n### 获取树资源被授权的用户列表示例\n    \n- 入参\n    \n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"actions\": [\"get\", \"update\", \"delete\"],\n  \"resources\":[\"treeResourceCode1/StructCode1/resourceStructChildrenCode1\", \"treeResourceCode2/StructCode1/resourceStructChildrenCode1\"]\n}\n```\n  \n- 出参\n  \n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\":{\n    \"authUserList\": [{\n      \"resource\": \"treeResourceCode1/StructCode1/resourceStructChildrenCode1\",\n      \"actionAuthList\": [{\n        \"userIds\": [\"63721xxxxxxxxxxxxdde14a3\"],\n        \"action\": \"get\"\n      },{\n        \"userIds\": [\"63721xxxxxxxxxxxxdde14a3\"],\n        \"action\": \"update\"\n      },{\n        \"userIds\": [\"63721xxxxxxxxxxxxdde14a3\"],\n        \"action\": \"delete\"\n      }]  \n    },{\n      \"resource\": \"treeResourceCode2/StructCode1/resourceStructChildrenCode1\",\n      \"actionAuthList\": [{\n        \"userIds\": [\"63721xxxxxxxxxxxxdde14a3\"],\n        \"action\": \"get\"\n      },{\n        \"userIds\": [\"63721xxxxxxxxxxxxdde14a3\"],\n        \"action\": \"update\"\n      },{\n        \"userIds\": [\"63721xxxxxxxxxxxxdde14a3\"],\n        \"action\": \"delete\"\n      }] \n    }]\n  }\n}\n```\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListResourceTargetsDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListResourceTargetsRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            ListResourceTargetsRespDto result = await managementClient.ListResourceTargets(new ListResourceTargets\n            {\n                NamespaceCode = \"examplePermissionNamespace\",\n                Actions = new List<string> { \"read\" },\n                Resources = new List<string> { \"treeResourceCode1\" }\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.ListResourceTargetsDto{\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t\tActions:       []string{\"read\", \"get\"},\n\t\tResources:     []string{\"strResourceCode\", \"arrayResourceCode\", \"/treeResourceCode/structCode/resourceStructChildrenCode\"},\n\t}\n\trespDto := client.ListResourceTargets(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.ListResourceTargets;\nimport cn.authing.sdk.java.dto.ListResourceTargetsRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n\npublic class ListResourceTargetsTest {\n\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        ListResourceTargets request = new ListResourceTargets();\n        request.setNamespaceCode(\"examplePermissionNamespace\");\n        ArrayList<String> actionList = new ArrayList<>();\n        actionList.add(\"get\");\n        actionList.add(\"update\");\n        actionList.add(\"read\");\n        request.setActions(actionList);\n        List<String> resources = new ArrayList<>();\n        resources.add(\"strResourceCode\");\n        resources.add(\"arrayResourceCode\");\n        resources.add(\"/treeResourceCode/structCode/resourceStructChildrenCode2\");\n        request.setResources(resources);\n        ListResourceTargetsRespDto response = client.listResourceTargets(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.listResourceTargets({\n    namespaceCode: 'examplePermissionNamespace',\n    actions: ['get','update', 'delete'],\n    resources: ['strResourceCode','arrayResourceCode','/treeResourceCode/structCode/resourceStructChildrenCode']\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-user-resource-struct":{"post":{"operationId":"DataAuthenticationManagementController_getUserResourceStruct","summary":"获取用户拥有指定资源的权限及资源结构信息","description":"\n  ## 描述\n  当你需要获取用户拥有某一资源的权限并且需要这个资源的结构信息（树类型资源返回树结构，数组类型资源返回数组、字符串类型返回字符串）则可以使用此接口。\n  ## 注意\n  由于其他接口对树类型资源的返回参数格式是按照路径的方式返回的，所以我们提供此此接口，按照完整的树结构形式返回。\n  ## 请求示例\n### 获取用户授权字符串数据资源示例\n  \n- 入参\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"userId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"resourceCode\": \"exampleStrResourceCode\"\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\":{\n    \"namespaceCode\": \"exampleNamespaceCode\",\n    \"resourceCode\": \"exampleStrResourceCode\",\n    \"resourceType\": \"STRING\",\n    \"strResourceAuthAction\":{\n      \"value\": \"strTestValue\",\n      \"actions\": [\"get\",\"delete\"]\n    }\n  }\n}\n```\n\n\n### 获取用户授权数据数组资源示例\n  \n- 入参\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"userId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"resourceCode\": \"exampleArrResourceCode\"\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\":{\n    \"namespaceCode\": \"exampleNamespaceCode\",\n    \"resourceCode\": \"exampleArrResourceCode\",\n    \"resourceType\": \"ARRAY\",\n    \"arrResourceAuthAction\":{\n      \"values\": [\"arrTestValue1\",\"arrTestValue2\",\"arrTestValue3\"],\n      \"actions\": [\"get\",\"delete\"]\n    }\n  }\n}\n```\n\n\n### 获取用户授权树数据资源示例\n  \n- 入参\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"userId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"resourceCode\": \"exampleTreeResourceCode\"\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\":{\n    \"namespaceCode\": \"exampleNamespaceCode\",\n    \"resourceCode\": \"exampleArrResourceCode\",\n    \"resourceType\": \"TREE\",\n    \"treeResourceAuthAction\":{\n        \"nodeAuthActionList\":[{\n            \"code\": \"tree11\",\n            \"name\": \"tree11\",\n            \"value\": \"test11Value\",\n            \"actions\": [\"get\",\"delete\"],\n            \"children\": [{\n              \"code\": \"tree111\",\n              \"name\": \"tree111\",\n              \"value\": \"test111Value\",\n              \"actions\": [\"update\",\"read\"],\n            }]\n        },{\n            \"code\": \"tree22\",\n            \"name\": \"tree22\",\n            \"value\": \"test22Value\",\n            \"actions\": [\"get\",\"delete\"]\n        }]\n    }\n  }\n}\n```\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetUserResourceStructDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetUserResourceStructRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\n\n  reqDto := &dto.GetUserResourceStructDto{\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t\tUserId:        \"63721xxxxxxxxxxxxdde14\",\n\t\tResource:     \"strResourceCode\",\n\t}\n\trespDto := client.GetUserResourceStruct(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.GetUserResourceStructDto;\nimport cn.authing.sdk.java.dto.GetUserResourceStructRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n\npublic class GetUserResourceStructTest {\n\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetUserResourceStructDto request = new GetUserResourceStructDto();\n        request.setNamespaceCode(\"examplePermissionNamespace\");\n        request.setUserId(\"63721xxxxxxxxxxxxdde14a3\");\n        request.setResourceCode(\"exampleStrResourceCode\");\n        GetUserResourceStructRespDto response = client.getUserResourcePermissionList(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\nconst result = await managementClient.getUserResourceStruct({\n    // 替换用户 ID\n    namespaceCode: 'examplePermissionNamespace',\n    userId: '63721xxxxxxxxxxxxdde14a3',\n    resource: 'strResourceCode'\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-external-user-resource-struct":{"post":{"operationId":"DataAuthenticationManagementController_getExternalUserResourceStruct","summary":"获取外部用户拥有指定资源的权限及资源结构信息","description":"\n  ## 描述\n  当你需要获取外部用户（通过参数`externalId`参数传递外部用户 ID）拥有某一资源的权限并且需要这个资源的结构信息（树类型资源返回树结构，数组类型资源返回数组、字符串类型返回字符串）则可以使用此接口。\n  ## 请求示例\n### 获取用户授权字符串数据资源示例\n  \n- 入参\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"externalId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"resourceCode\": \"exampleStrResourceCode\"\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\":{\n    \"namespaceCode\": \"exampleNamespaceCode\",\n    \"resourceCode\": \"exampleStrResourceCode\",\n    \"resourceType\": \"STRING\",\n    \"strResourceAuthAction\":{\n      \"value\": \"strTestValue\",\n      \"actions\": [\"get\",\"delete\"]\n    }\n  }\n}\n```\n\n\n### 获取用户授权数据数组资源示例\n  \n- 入参\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"externalId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"resourceCode\": \"exampleArrResourceCode\"\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\":{\n    \"namespaceCode\": \"exampleNamespaceCode\",\n    \"resourceCode\": \"exampleArrResourceCode\",\n    \"resourceType\": \"ARRAY\",\n    \"arrResourceAuthAction\":{\n      \"values\": [\"arrTestValue1\",\"arrTestValue2\",\"arrTestValue3\"],\n      \"actions\": [\"get\",\"delete\"]\n    }\n  }\n}\n```\n\n\n### 获取用户授权树数据资源示例\n  \n- 入参\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"externalId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"resourceCode\": \"exampleTreeResourceCode\"\n}\n```\n\n- 出参\n\n```json\n{\n  \"statusCode\": 200,\n  \"message\": \"操作成功\",\n  \"apiCode\": 20001,\n  \"data\":{\n    \"namespaceCode\": \"exampleNamespaceCode\",\n    \"resourceCode\": \"exampleArrResourceCode\",\n    \"resourceType\": \"TREE\",\n    \"treeResourceAuthAction\":{\n        \"nodeAuthActionList\":[{\n            \"code\": \"tree11\",\n            \"name\": \"tree11\",\n            \"value\": \"test11Value\",\n            \"actions\": [\"get\",\"delete\"],\n            \"children\": [{\n              \"code\": \"tree111\",\n              \"name\": \"tree111\",\n              \"value\": \"test111Value\",\n              \"actions\": [\"update\",\"read\"],\n            }]\n        },{\n            \"code\": \"tree22\",\n            \"name\": \"tree22\",\n            \"value\": \"test22Value\",\n            \"actions\": [\"get\",\"delete\"]\n        }]\n    }\n  }\n}\n```\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetExternalUserResourceStructDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetExternalUserResourceStructRespDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/check-user-same-level-permission":{"post":{"operationId":"DataAuthenticationManagementController_checkUserSameLevelPermission","summary":"判断用户在树资源同层级下的权限（推荐）","description":"\n  ## 描述\n  此接口用于判断用户是否拥有某一树资源的**同层级下**部分的节点的某种权限。由于树类型资源比较常用，所以我们基于“判断用户是否拥有资源权限”的业务场景，新增了针对判断树这种类型资源节点权限的接口。\n  ## 注意\n  我们通过`resource`参数定位到树类型数据资源的某一层级（所以该参数是按照`资源 code/节点 code 路径`格式进行传递的），并通过`resourceNodeCodes`参数定位到是当前曾经的哪些节点。\n  ## 场景举例\n假如你的业务场景是：当在一个文件系统中，用户在删除某一文件夹下某些文件，需要判断他是否拥有这些文件的删除权限，则可以使用此接口。\n## 请求示例\n### 判断用户在树资源同层级权限示例（无条件判断）\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"userId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"action\": \"read\",\n  \"resource\": \"treeResourceCode/structCode\",\n  \"resourceNodeCodes\": [\"resourceStructChildrenCode1\",\"resourceStructChildrenCode2\",\"resourceStructChildrenCode3\"]\n}\n```\n\n### 判断用户在树资源同层级权限示例（开启条件判断）\n\n```json\n{\n  \"namespaceCode\": \"examplePermissionNamespace\",\n  \"userId\": \"63721xxxxxxxxxxxxdde14a3\",\n  \"action\": \"read\",\n  \"resource\": \"treeResourceCode/structCode\",\n  \"resourceNodeCodes\": [\"resourceStructChildrenCode1\",\"resourceStructChildrenCode2\",\"resourceStructChildrenCode3\"],\n  \"judgeConditionEnabled\": true,\n  \"authEnvParams\":{\n      \"ip\":\"110.96.0.0\",\n      \"city\":\"北京\",\n      \"province\":\"北京\",\n      \"country\":\"中国\",\n      \"deviceType\":\"PC\",\n      \"systemType\":\"ios\",\n      \"browserType\":\"IE\",\n      \"requestDate\":\"2022-12-26 17:40:00\"\n  }\n}\n```\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckUserSameLevelPermissionDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckUserSameLevelPermissionResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\nusing System;\nusing System.Threading.Tasks;\nusing Authing.CSharp.SDK.Models;\nusing System.Collections.Generic;\n\nnamespace ConsoleManagement\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            MainAsync().GetAwaiter().GetResult();\n        }\n\n        private static async Task MainAsync()\n        {\n            // 设置初始化参数\n            ManagementClientOptions clientOptions = new ManagementClientOptions\n            {\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n            };\n\n            // 初始化 ManagementClient\n            ManagementClient managementClient = new ManagementClient(clientOptions);\n\n            CheckUserSameLevelPermissionResponseDto result = await managementClient.CheckUserSameLevelPermission(new CheckUserSameLevelPermissionDto\n            {\n                NamespaceCode = \"examplePermissionNamespace\",\n                UserId = \"USERID\",\n                Action = \"read\",\n                Resource = \"strResourceCode1\",\n            });\n        }\n    }\n}","go":"package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/Authing/authing-golang-sdk/v3/dto\"\n\t\"github.com/Authing/authing-golang-sdk/v3/management\"\n)\n\nfunc main() {\n\toptions := management.ManagementClientOptions{\n\t\tAccessKeyId:     \"AUTHING_ACCESS_KEY_ID\", // Authing Access Key ID\n\t\tAccessKeySecret: \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\n\t}\n\t\n\t// 初始化 ManagementClient\n\tclient, err := management.NewManagementClient(&options)\n\tif err != nil {\n\t\t// The exception needs to be handled by the developer.\n\t}\n\n\t\treqDto := &dto.CheckUserSameLevelPermissionDto{\n\t\tNamespaceCode: \"examplePermissionNamespace\",\n\t\tUserId:        \"63721xxxxxxxxxxxxdde14a3\",\n\t\tAction:        \"get\",\n\t\tResource:      \"strResourceCode\",\n\t}\n\trespDto := client.CheckUserSameLevelPermission(reqDto)\n\tfmt.Println(respDto)\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CheckUserSameLevelPermissionDto;\nimport cn.authing.sdk.java.dto.CheckUserSameLevelPermissionRespDto;\nimport cn.authing.sdk.java.dto.CheckUserSameLevelPermissionResponseDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\n\npublic class CheckUserSameLevelPermissionTest {\n\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CheckUserSameLevelPermissionDto request = new CheckUserSameLevelPermissionDto();\n        request.setNamespaceCode(\"examplePermissionNamespace\");\n        request.setUserId(\"63721xxxxxxxxxxxxdde14a3\");\n        request.setAction(\"get\");\n        request.setResource(\"treeResourceCode\");\n\n        CheckUserSameLevelPermissionResponseDto response = client\n                .checkUserSameLevelPermission(request);\n        System.out.println(JsonUtils.serialize(response));\n    }\n\n}","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.checkUserSameLevelPermission({\n    namespaceCode:'examplePermissionNamespace',\n    userId: '63721xxxxxxxxxxxxdde14a3',\n    action: 'get',\n    resource: 'strResourceCode'\n  });\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/list-permission-view/data":{"post":{"operationId":"DataPermissionViewManagementController_listPermissionView","summary":"获取权限视图数据列表","description":"\n  ## 描述\n  此接口用于导出菜单：权限管理 -> 数据权限 -> 权限试图列表数据，如果你需要拉取我们数据权限的授权数据（所有用户拥有的所有资源的所有权限），则可以使用此接口。\n  ","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListPermissionViewDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListPermissionViewResponseDto"}}}}},"tags":["管理数据资源与权限/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-current-package-info":{"get":{"operationId":"CostManagementController_getCurrentPackageInfo","summary":"获取套餐详情","description":"获取当前用户池套餐详情。","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetCurrentPackageRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetCurrentPackageInfo();\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentPackageRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\n\npublic class GetCurrentPackageInfoTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CostGetCurrentPackageRespDto currentPackageInfo = client.getCurrentPackageInfo();\n        System.out.println(JsonUtils.serialize(currentPackageInfo));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getCurrentPackageInfo();\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-usage-info":{"get":{"operationId":"CostManagementController_getUsageInfo","summary":"获取用量详情","description":"获取当前用户池用量详情。","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetCurrentUsageRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetUsageInfo();\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetUsageInfoTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CostGetCurrentUsageRespDto usageInfo = client.getUsageInfo();\n        System.out.println(JsonUtils.serialize(usageInfo));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getUsageInfo();\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-mau-period-usage-history":{"get":{"operationId":"CostManagementController_getMauPeriodUsageHistory","summary":"获取 MAU 使用记录","description":"获取当前用户池 MAU 使用记录","parameters":[{"name":"startTime","required":true,"in":"query","description":"起始时间（年月日）","example":"20220202","schema":{"type":"string"}},{"name":"endTime","required":true,"in":"query","description":"截止时间（年月日）","example":"20220802","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetMauPeriodUsageHistoryRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetMauPeriodUsageHistory(new GetMauPeriodUsageHistoryDto\r\n            {\r\n                StartTime = \"20220101\",\r\n                EndTime = \"20221030\"\r\n            });\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.CostGetMauPeriodUsageHistoryRespDto;\nimport cn.authing.sdk.java.dto.GetMauPeriodUsageHistoryDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetMauPeriodUsageHistoryTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetMauPeriodUsageHistoryDto getMauPeriodUsageHistoryDto = new GetMauPeriodUsageHistoryDto();\n        getMauPeriodUsageHistoryDto.setStartTime(\"20220202\");\n        getMauPeriodUsageHistoryDto.setEndTime(\"20220802\");\n        CostGetMauPeriodUsageHistoryRespDto mauPeriodUsageHistory = client.getMauPeriodUsageHistory(getMauPeriodUsageHistoryDto);\n        System.out.println(JsonUtils.serialize(mauPeriodUsageHistory));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getMauPeriodUsageHistory({\n    startTime: '20220802',\n    endTime: '20221002'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-all-rights-items":{"get":{"operationId":"CostManagementController_getAllRightsItem","summary":"获取所有权益","description":"获取当前用户池所有权益","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetAllRightItemRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetAllRightsItem();\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetAllRightItemRespDto;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetAllRightsItemTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        CostGetAllRightItemRespDto allRightsItem = client.getAllRightsItem();\n        System.out.println(JsonUtils.serialize(allRightsItem));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getAllRightsItem();\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-orders":{"get":{"operationId":"CostManagementController_getOrders","summary":"获取订单列表","description":"获取当前用户池订单列表","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetOrdersRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetOrders(new GetOrdersDto { });\r\n\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.CostGetOrdersRespDto;\nimport cn.authing.sdk.java.dto.GetOrdersDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetOrdersTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetOrdersDto getOrdersDto = new GetOrdersDto();\n        CostGetOrdersRespDto orders = client.getOrders(getOrdersDto);\n        System.out.println(JsonUtils.serialize(orders));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getOrders({\n    page: 1,\n    limit: 10\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-order-detail":{"get":{"operationId":"CostManagementController_getOrderDetail","summary":"获取订单详情","description":"获取当前用户池订单详情","parameters":[{"name":"orderNo","required":true,"in":"query","description":"订单号","example":"2022080410062060e26f7fd6b9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetOrderDetailRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetOrderDetail(new GetOrderDetailDto { OrderNo = \"AUTHING_ORDER_NO\" });\r\n\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.CostGetOrderDetailRespDto;\nimport cn.authing.sdk.java.dto.GetOrderDetailDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetOrderDetailTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetOrderDetailDto getOrderDetailDto = new GetOrderDetailDto();\n        getOrderDetailDto.setOrderNo(\"AUTHING_ORDER_NO\");\n        CostGetOrderDetailRespDto orderDetail = client.getOrderDetail(getOrderDetailDto);\n        System.out.println(JsonUtils.serialize(orderDetail));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getOrderDetail({\n    orderNo: '20220804xxxxxx60e26f7fd6b9'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/get-order-pay-detail":{"get":{"operationId":"CostManagementController_getOrderPayDetail","summary":"获取订单支付明细","description":"获取当前用户池订单支付明细","parameters":[{"name":"orderNo","required":true,"in":"query","description":"订单号","example":"2022080410062060e26f7fd6b9","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CostGetOrderPayDetailRespDto"}}}}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}],"x-authing-code-samples":{"csharp":"using Authing.CSharp.SDK.Services;\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Authing.CSharp.SDK.Models;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleManagement\r\n{\r\n    public class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MainAsync().GetAwaiter().GetResult();\r\n        }\r\n\r\n        private static async Task MainAsync()\r\n        {\r\n            // 设置初始化参数\r\n            ManagementClientOptions clientOptions = new ManagementClientOptions\r\n            {\r\n                AccessKeyId = \"AUTHING_ACCESS_KEY_ID\",// Authing Access Key ID\r\n                AccessKeySecret = \"AUTHING_ACCESS_KEY_SECRET\", // Authing Access Key Secret\r\n            };\r\n\r\n            // 初始化 ManagementClient\r\n            ManagementClient managementClient = new ManagementClient(clientOptions);\r\n\r\n            var res = await managementClient.GetOrderPayDetail(new GetOrderPayDetailDto { OrderNo = \"AUTHING_ORDER_NO\" });\r\n\r\n        }\r\n    }\r\n}","java":"package test.management;\n\nimport cn.authing.sdk.java.client.ManagementClient;\nimport cn.authing.sdk.java.dto.CostGetCurrentUsageRespDto;\nimport cn.authing.sdk.java.dto.CostGetOrderPayDetailRespDto;\nimport cn.authing.sdk.java.dto.GetOrderPayDetailDto;\nimport cn.authing.sdk.java.model.ManagementClientOptions;\nimport cn.authing.sdk.java.util.JsonUtils;\n\npublic class GetOrderPayDetailTest {\n    // 需要替换成你的 Authing Access Key ID\n    private static final String ACCESS_KEY_ID = \"AUTHING_ACCESS_KEY_ID\";\n    // 需要替换成你的 Authing Access Key Secret\n    private static final String ACCESS_KEY_SECRET = \"AUTHING_ACCESS_KEY_SECRET\";\n\n    public static void main(String[] args) throws Throwable {\n        ManagementClientOptions clientOptions = new ManagementClientOptions();\n        clientOptions.setAccessKeyId(ACCESS_KEY_ID);\n        clientOptions.setAccessKeySecret(ACCESS_KEY_SECRET);\n        // 如果是私有化部署的客户，需要设置 Authing 服务域名\n        // clientOptions.setHost(\"https://api.your-authing-service.com\");\n\n        ManagementClient client = new ManagementClient(clientOptions);\n\n        GetOrderPayDetailDto getOrderPayDetailDto = new GetOrderPayDetailDto();\n        getOrderPayDetailDto.setOrderNo(\"AUTHING_ORDER_NO\");\n        CostGetOrderPayDetailRespDto orderPayDetail = client.getOrderPayDetail(getOrderPayDetailDto);\n        System.out.println(JsonUtils.serialize(orderPayDetail));\n    }\n}\n","node":"import { ManagementClient, Models } from 'authing-node-sdk';\n\n// 初始化 ManagementClient\nconst managementClient = new ManagementClient({\n  // 需要替换成你的 Authing Access Key ID\n  accessKeyId: 'AUTHING_ACCESS_KEY_ID',\n  // 需要替换成你的 Authing Access Key Secret\n  accessKeySecret: 'AUTHING_ACCESS_KEY_SECRET',\n  // 如果是私有化部署的客户，需要设置 Authing 服务域名\n  // host: 'https://api.your-authing-service.com'\n});\n\n(async () => {\n\n  const result = await managementClient.getOrderPayDetail({\n    orderNo: '20220804xxxxxx60e26f7fd6b9'\n  });\n\n\n  console.log(JSON.stringify(result, null, 2));\n})();\n"}}},"/api/v3/click-cost-contact":{"post":{"operationId":"CostManagementController_costContactClick","x-authing-hidden-from-sdk":true,"summary":"点击联系我们","description":"用户点击联系我们事件","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ClickCostContactDto"}}}},"responses":{"200":{"description":""}},"tags":["管理计量计费/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-ldap-server-random-pwd":{"get":{"operationId":"LdapServerManagementController_getBindPwd","summary":"生成 LDAP Server 管理员密码","description":"生成 LDAP Server 管理员密码","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LdapGetBindPwdRespDto"}}}}},"tags":["管理 LDAP Server/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-ldap-server-config":{"get":{"operationId":"LdapServerManagementController_queryLdapConfigInfo","summary":"获取 LDAP server 配置信息","description":"获取 LDAP server 配置信息","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LdapConfigInfoRespDto"}}}}},"tags":["管理 LDAP Server/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-ldap-server-config":{"post":{"operationId":"LdapServerManagementController_updateLdapConfigInfo","summary":"更新 LDAP server 配置信息","description":"更新 LDAP server 配置信息","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LdapUpdateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LdapOperateRespDto"}}}}},"tags":["管理 LDAP Server/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/enable-ldap-server":{"post":{"operationId":"LdapServerManagementController_saveLdapConfigInfo","summary":"初始化/重启 LDAP server","description":"初始化/重启 LDAP server","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LdapSaveDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LdapOperateRespDto"}}}}},"tags":["管理 LDAP Server/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/disable-ldap-server":{"post":{"operationId":"LdapServerManagementController_disableLdapServer","summary":"关闭 LDAP server 服务，关闭前必须先初始化","description":"关闭 LDAP server 服务，关闭前必须先初始化","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LdapSetEnabledFlagDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LdapOperateRespDto"}}}}},"tags":["管理 LDAP Server/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-ldap-server-log":{"get":{"operationId":"LdapServerManagementController_queryLdapLog","summary":"LDAP server 日志查询","description":"LDAP server 日志查询","parameters":[{"name":"type","required":true,"in":"query","description":"类型：1 访问日志，2 错误日志","example":1,"schema":{"type":"number"}},{"name":"connection","required":false,"in":"query","description":"连接标识","example":1244,"schema":{"type":"number"}},{"name":"operationNumber","required":false,"in":"query","description":"操作码","example":0,"schema":{"type":"number"}},{"name":"errorCode","required":false,"in":"query","description":"错误码","example":32,"schema":{"type":"number"}},{"name":"message","required":false,"in":"query","description":"消息内容","example":"scope=0 deref=3 filter=\"(objectClass=*)\"","schema":{"type":"string"}},{"name":"startTime","required":false,"in":"query","description":"开始时间-时间戳","example":1668528000000,"schema":{"type":"number"}},{"name":"endTime","required":false,"in":"query","description":"结束时间-时间戳","example":1668528000000,"schema":{"type":"number"}},{"name":"page","required":true,"in":"query","description":"当前页,从 1 开始","example":1,"schema":{"type":"number"}},{"name":"limit","required":true,"in":"query","description":"每页条数","example":10,"schema":{"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LdapLogRespDto"}}}}},"tags":["管理 LDAP Server/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-ldap-sub-entries":{"get":{"operationId":"LdapServerManagementController_queryLdapSubEntries","summary":"LDAP server 根据 DN 查询下一级","description":"LDAP server 根据 DN 查询下一级","parameters":[{"name":"dn","required":false,"in":"query","description":"当前 DN","example":"cn=zhansan,ou=test,dc=com,o=authing-test","schema":{"type":"string"}},{"name":"page","required":true,"in":"query","description":"当前页,从 1 开始","example":1,"schema":{"type":"number"}},{"name":"limit","required":true,"in":"query","description":"每页条数","example":10,"schema":{"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LdapLogRespDto"}}}}},"tags":["管理 LDAP Server/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-event-app":{"post":{"operationId":"OpenEventController_createEventApp","summary":"创建自定义事件应用","description":"创建自定义事件应用","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateEventAppDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理事件/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-event-apps":{"get":{"operationId":"OpenEventController_listEventApps","summary":"获取事件应用列表","description":"获取事件应用列表","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/EventAppPaginatedRespDto"}}}}},"tags":["管理事件/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-events":{"get":{"operationId":"OpenEventController_listEvents","summary":"获取事件列表","description":"获取 Authing 服务支持的所有事件列表","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"app","required":false,"in":"query","description":"应用类型","example":"authing","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/OpenEventPaginatedRespDto"}}}}},"tags":["管理事件/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/define-event":{"post":{"operationId":"OpenEventController_defineEvent","summary":"定义自定义事件","description":"在 Authing 事件中心定义自定义事件","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DefineEventDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理事件/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/pub-event":{"post":{"operationId":"OpenEventController_verifyEvent","summary":"推送自定义事件","description":"向 Authing 事件中心推送自定义事件","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PubEventDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PubEventRespDto"}}}}},"tags":["管理事件/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/pub-userEvent":{"post":{"operationId":"OpenEventController_pubUserEvent","summary":"认证端推送自定义事件","description":"认证端向 Authing 事件中心推送自定义事件","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PubEventDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PubEventRespDto"}}}}},"tags":["管理事件/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-access-key":{"get":{"operationId":"AccessKeyManagementController_getAccessKeyList","summary":"获取协作管理员 AK/SK 列表","description":"根据协作管理员 Id 获取协作管理员下所有的 AK/SK 列表","parameters":[{"name":"userId","required":false,"in":"query","description":"密钥所属用户 ID","schema":{"type":"string"}},{"name":"tenantId","required":false,"in":"query","description":"密钥所属租户 ID","schema":{"type":"string"}},{"name":"type","required":false,"in":"query","description":"密钥类型","example":"userpool","schema":{"type":"string"}},{"name":"status","required":false,"in":"query","description":"AccessKey 状态，activated：已激活，staging：分级（可轮换），revoked：已撤销","schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ListAccessKeyResponseDto"}}}}},"tags":["管理 AK & SK/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/get-access-key":{"get":{"operationId":"AccessKeyManagementController_getAccessKey","summary":"获取协作管理员 AK/SK 详细信息","description":"获取协作管理员 AK/SK 详细信息,根据协作管理员 ID 和 accessKeyId 获取对应 AK/SK 的详细信息。","parameters":[{"name":"userId","required":true,"in":"query","description":"用户 ID","example":"userId1","schema":{"type":"string"}},{"name":"accessKeyId","required":true,"in":"query","description":"accessKeyId","example":"Restzvws35346Rfre","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GetAccessKeyResponseDto"}}}}},"tags":["管理 AK & SK/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/create-access-key":{"post":{"operationId":"AccessKeyManagementController_createAccessKey","summary":"创建协作管理员的 AK/SK","description":"创建协作管理员的 AK/SK,根据协作管理员 ID 生成指定的 AK/SK。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateAccessKeyDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateAccessKeyResponseDto"}}}}},"tags":["管理 AK & SK/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-access-key":{"post":{"operationId":"AccessKeyManagementController_deleteAccessKey","summary":"删除协作管理员的 AK/SK","description":"删除协作管理员的 AK/SK,根据所选择的 AK/SK 的 accessKeyId 进行指定删除。","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteAccessKeyDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理 AK & SK/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/update-access-key":{"post":{"operationId":"AccessKeyManagementController_updateAccessKey","summary":"更新一个管理员 AccessKey","description":"根据 AccessKeyId 更新一个管理员 AccessKey，目前只支持更新 status，status 支持 activated / revoked","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateAccessKeyDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessRespDto"}}}}},"tags":["管理 AK & SK/API 列表","管理 AccessKey/API 列表","管理员 AccessKey/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/verify-config":{"get":{"operationId":"VerifyConfigController_getVerifyConfig","x-authing-hidden-from-sdk":true,"summary":"获取 verify-config 配置","description":"获取 verify-config 配置","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/VerifyConfigInfoRespDto"}}}}},"tags":["Authing Verify/API 列表"],"security":[{"x-authing-userpool-id":[]}]},"put":{"operationId":"VerifyConfigController_updateVerifyConfig","x-authing-hidden-from-sdk":true,"summary":"修改 verify-config 配置","description":"修改 verify-config 配置","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/VerifyConfigDataDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/VerifyConfigDataDto"}}}}},"tags":["Authing Verify/API 列表"],"security":[{"x-authing-userpool-id":[]}]}},"/api/v3/verify-config-app":{"get":{"operationId":"VerifyConfigController_getVerifyConfigApp","summary":"获取 verify-config-app 列表","description":"获取 verify-config-app 列表","parameters":[{"name":"keywords","required":false,"in":"query","description":"搜索关键字","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApplicationDto"}}}}},"tags":["Authing Verify/API 列表"],"security":[{"x-authing-userpool-id":[]}]}},"/api/v3/add-whitelist":{"post":{"operationId":"WhitelistManagementController_addWhitelist","summary":"创建注册白名单","description":"你需要指定注册白名单类型以及数据，来进行创建","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AddWhitelistDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WhitelistListRespDto"}}}}},"tags":["管理注册白名单/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/list-whitelist":{"get":{"operationId":"WhitelistManagementController_listWhitelists","summary":"获取注册白名单列表","description":"获取注册白名单列表，可选页数、分页大小来获取","parameters":[{"name":"type","required":true,"in":"query","description":"白名单类型","example":"EMAIL","schema":{"enum":["USERNAME","EMAIL","PHONE"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/WhitelistListRespDto"}}}}},"tags":["管理注册白名单/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/delete-whitelist":{"post":{"operationId":"WhitelistManagementController_deleteWhitelist","summary":"删除注册白名单","description":"通过指定多个注册白名单数据,以数组的形式进行注册白名单的删除","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteWhitelistDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IsSuccessDto"}}}}},"tags":["管理注册白名单/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/ip-list":{"get":{"operationId":"RiskListController_findIpList","summary":"获取 ip 列表","description":"分页获取 ip 列表","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"ipType","required":true,"in":"query","description":"IP 类型","example":"IP","schema":{"enum":["BLACK","WHITE"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IpListPaginatedRespDto"}}}}},"tags":["管理风险名单/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]},"post":{"operationId":"RiskListController_add","summary":"创建 ip 名单","description":"创建 ip 名单","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/IpListCreateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理风险名单/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/ip-list/{id}":{"delete":{"operationId":"RiskListController_deleteById","summary":"删除 ip 名单","description":"删除 ip 名单","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理风险名单/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/user-list":{"get":{"operationId":"RiskListController_findUserList","summary":"获取用户列表","description":"分页获取用户列表","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"userListType","required":true,"in":"query","description":"IP 类型","example":"BLACK","schema":{"enum":["BLACK","WHITE"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserListPaginatedRespDto"}}}}},"tags":["管理风险名单/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]},"post":{"operationId":"RiskListController_addUser","summary":"创建用户名单","description":"创建用户名单","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserListCreateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理风险名单/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/user-list/{id}":{"delete":{"operationId":"RiskListController_deleteUserListById","summary":"删除用户名单","description":"删除用户 名单","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理风险名单/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/risk-list-policy":{"get":{"operationId":"RiskListController_findRiskListPolicy","summary":"获取风险策略列表","description":"分页获取风险策略列表","parameters":[{"name":"page","required":false,"in":"query","description":"当前页数，从 1 开始","example":1,"schema":{"default":1,"type":"number"}},{"name":"limit","required":false,"in":"query","description":"每页数目，最大不能超过 50，默认为 10","example":10,"schema":{"default":10,"type":"number"}},{"name":"optObject","required":true,"in":"query","description":"策略操作对象，目前只有 ip","schema":{"enum":["IP","USER"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserListPolicyPaginatedRespDto"}}}}},"tags":["管理风险名单/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]},"post":{"operationId":"RiskListController_addRiskListPolicy","summary":"创建风险策略","description":"创建风险策略","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RiskListPolicyCreateDto"}}}},"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理风险名单/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}},"/api/v3/risk-list-policy/{id}":{"delete":{"operationId":"RiskListController_deleteRiskListPolicyById","summary":"删除风险策略","description":"删除风险策略","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CommonResponseDto"}}}}},"tags":["管理风险名单/API 列表"],"security":[{"x-authing-userpool-id":[]},{"bearer":[]}]}}},"x-tagGroups":[{"name":"开发准备","tags":["开发准备/基本概念","开发准备/HTTP 请求","开发准备/鉴权机制","开发准备/密码安全传输","开发准备/接口限流","开发准备/服务器 IP","开发准备/错误处理"]},{"name":"鉴权机制","tags":["鉴权机制/获取 Access Token","鉴权机制/事件"]},{"name":"管理用户","tags":["管理用户/使用自定义数据库存储用户数据","管理用户/API 列表","管理用户/事件","管理用户/常见问题"]},{"name":"管理公共账号","tags":["管理公共账号/API 列表"]},{"name":"管理组织机构","tags":["管理组织机构/从第三方导入组织机构","管理组织机构/API 列表","管理组织机构/事件"]},{"name":"管理角色","tags":["管理角色/概述","管理角色/API 列表","管理角色/事件"]},{"name":"管理用户分组","tags":["管理用户分组/概述","管理用户分组/API 列表","管理用户分组/事件"]},{"name":"管理自定义字段","tags":["管理自定义字段/基本概念","管理自定义字段/API 列表","管理自定义字段/事件"]},{"name":"管理资源与权限","tags":["管理资源与权限/基本概念","管理资源与权限/API 列表","管理资源与权限/事件"]},{"name":"管理数据资源与权限","tags":["管理数据资源与权限/概述","管理数据资源与权限/API 列表","管理数据资源与权限/事件","管理数据资源与权限/常见问题"]},{"name":"管理应用","tags":["管理应用/概述","管理应用/API 列表","管理应用/事件"]},{"name":"管理身份源","tags":["管理身份源/基本概念","管理身份源/API 列表","管理身份源/事件"]},{"name":"管理安全配置","tags":["管理安全配置/概述","管理安全配置/API 列表","管理安全配置/事件"]},{"name":"管理注册白名单","tags":["管理注册白名单/API 列表"]},{"name":"管理消息服务","tags":["管理消息服务/概述","管理消息服务/API 列表","管理消息服务/事件"]},{"name":"管理同步中心","tags":["管理同步中心/基本概念","管理同步中心/API 列表","管理同步中心/事件"]},{"name":"管理事件","tags":["管理事件/概述","管理事件/API 列表","管理事件/事件"]},{"name":"管理岗位","tags":["管理岗位/API 列表","管理岗位/事件"]},{"name":"管理数据对象","tags":["管理数据对象/API 列表","管理数据对象/事件"]},{"name":"管理 Pipeline","tags":["管理 Pipeline/基本概念","管理 Pipeline/API 列表","管理 Pipeline/事件"]},{"name":"管理 Webhook","tags":["管理 Webhook/概述","管理 Webhook/API 列表","管理 Webhook/事件"]},{"name":"管理审计日志","tags":["管理审计日志/概述","管理审计日志/API 列表","管理审计日志/事件"]},{"name":"管理计量计费","tags":["管理计量计费/概述","管理计量计费/API 列表","管理计量计费/事件"]},{"name":"管理终端设备","tags":["管理终端设备/概述","管理终端设备/API 列表"]},{"name":"管理风险名单","tags":["管理风险名单/API 列表","管理风险名单/事件"]},{"name":"工具与资源","tags":["工具与资源/Authing 认证 API","工具与资源/SDK 列表","工具与资源/使用文档"]},{"name":"获取帮助","tags":["获取帮助/获取帮助"]}]}